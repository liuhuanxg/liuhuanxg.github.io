<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>index</title>
      <link href="/2023/04/20/treasurebox/elasticsearch/xue-xi-bi-ji/index/"/>
      <url>/2023/04/20/treasurebox/elasticsearch/xue-xi-bi-ji/index/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="title-学习笔记"><a href="#title-学习笔记" class="headerlink" title="title: 学习笔记"></a>title: 学习笔记</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>index</title>
      <link href="/2023/04/20/treasurebox/elasticsearch/index/"/>
      <url>/2023/04/20/treasurebox/elasticsearch/index/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="title-ElasticSearch"><a href="#title-ElasticSearch" class="headerlink" title="title: ElasticSearch"></a>title: ElasticSearch</h2><h2 id="ElasticSearch知识整理"><a href="#ElasticSearch知识整理" class="headerlink" title="ElasticSearch知识整理"></a>ElasticSearch知识整理</h2><ul><li><a href="../%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/index/index.html">学习笔记</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python分析模块</title>
      <link href="/2023/03/24/treasurebox/python/python-cheng-xu-cpu-shi-yong-lu-fen-xi/python-fen-xi-mo-kuai/"/>
      <url>/2023/03/24/treasurebox/python/python-cheng-xu-cpu-shi-yong-lu-fen-xi/python-fen-xi-mo-kuai/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="title-python分析模块"><a href="#title-python分析模块" class="headerlink" title="title: python分析模块"></a>title: python分析模块</h2><p><strong>sampling</strong> profilers VS <strong>tracing</strong> profilers</p><p>tracingprofilers记录程序所调用的每个函数，然后在最后打印出报告。 samplingprofilers采用更加统计化的方法 - 他们每隔几毫秒记录程序的堆栈情况，然后报告结果。</p><p>使用sampling profilers而不是tracing profilers的主要原因是sampling profilers的开销较低。 如果每秒只抽取20或200个样本，那不会花费多少时间。 而且它们非常有效率 - 如果遇到严重的性能问题（比如80％的时间花费在1个慢速函数上），那么每秒200个样本通常就足以确定那个函数的问题所在了。</p><ul><li><p>cProfile: Python内置的分析工具，c语言编写。</p><ul><li><p>兼容性：python2/python3</p></li><li><p>文档：<a href="https://docs.python.org/zh-cn/3/library/profile.html">https://docs.python.org/zh-cn/3/library/profile.html</a></p></li><li><p>使用方式：通过cprofile启动python程序</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m cProfile -s cumtime sample.py</span><br></pre></td></tr></tbody></table></figure></li><li><p>优势：python内置分析器；</p></li><li><p>劣势：并不适合对多线程的长时间运行程序进行分析，默认只会对主线程进行分析，且分析方法是对正在运行的程序进行代码注入，会影响性能；</p></li></ul></li><li><p>memory_profiler：一个监控进程内存消耗的模块，也可以逐行分析 Python 程序的内存消耗。具体实现依赖 psutil 模块的纯 Python 模块。</p><ul><li><p>兼容性：python2/python3</p></li><li><p>文档：<a href="https://github.com/pythonprofilers/memory_profiler/blob/master/README.rst">https://github.com/pythonprofilers/memory_profiler/blob/master/README.rst</a></p><p>实践例子：<a href="https://programming.insutanto.net/2020-03/python-memory-profile/python_memory_profiler">https://programming.insutanto.net/2020-03/python-memory-profile/python_memory_profiler</a></p></li><li><p>使用方式：使用memory_profile启动python程序或在程序中import装饰器，需要改动代码；</p></li><li><p>优势：可以针对代码级别进行内存消耗的分析；</p></li><li><p>劣势：对代码具有侵入性；</p></li></ul></li><li><p>PyFlame: Uber开源的性能分析工具，使用C++实现，利用ptrace系统调用来收集分析信息；</p><ul><li><p>兼容性：python2/python3</p></li><li><p>文档：<a href="https://github.com/uber/pyflame">https://github.com/uber/pyflame</a></p><p>实践例子：<a href="https://meteorix.github.io/2019/05/24/pyflame/">https://meteorix.github.io/2019/05/24/pyflame/</a></p></li><li><p>使用方式：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># attach to process PID 1024 for duration of 60 seconds and sample every 0.05 seconds</span></span><br><span class="line">$ pyflame -s 60 -r 0.05 -p 1024</span><br><span class="line">....</span><br><span class="line"> </span><br><span class="line">$ pyflame --rate=0.005 -o profile.txt -t python sample.py</span><br><span class="line">Execution time : 1.97 sec</span><br><span class="line"> </span><br><span class="line"><span class="comment"># convert profile.txt to a flame graph</span></span><br><span class="line">flamegraph.pl &amp;lt; profile.txt &gt; profile.svg</span><br></pre></td></tr></tbody></table></figure></li><li><p>优势：通过attach的方式来分析进程，对代码无侵入性，采样流程由单独的进程负责，不会影响现有进程运行，支持多线程/进程；</p></li><li><p>劣势：不支持OSX/Windows平台，而且项目已经不再维护了，使用起来可能会有坑；</p></li></ul></li><li><p>Py-spy: 使用Rust编写的python性能分析工具，实现逻辑是通过系统调用读取python程序的内存，通过解析PyFrameObject结构来获取堆栈信息。</p><ul><li><p>兼容性：python2/python3</p></li><li><p>文档：<a href="https://github.com/benfred/py-spy">https://github.com/benfred/py-spy</a></p></li><li><p>使用方式：使用attach的方式进行，支持record(记录)，top(列出耗时的函数)，dump(导出程序的堆栈信息)</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">py-spy record -o profile.svg --pid 12345</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">py-spy record -o profile.svg -- python myprogram.py</span><br><span class="line"></span><br><span class="line">py-spy top --pid 12345</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">py-spy top -- python myprogram.py</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">py-spy dump --pid 12345</span><br></pre></td></tr></tbody></table></figure></li><li><p>优势：通过attach的方式来分析进程，对代码无侵入性，采样流程由单独的进程负责，不会影响现有进程运行，支持多线程/进程，支持功能较多，且项目一直在持续维护；</p></li><li><p>劣势：需要使用sudo权限进行attach或者修改全局的系统设置；</p></li></ul></li></ul><p>其他：</p><ul><li><p>pyroscope：一个golang编写的持续性能分析平台，整合了各种分析工具和前端显示；</p></li><li><p>github: <a href="https://github.com/pyroscope-io/pyroscope">https://github.com/pyroscope-io/pyroscope</a> </p><p>中文介绍：<a href="https://github.com/pyroscope-io/pyroscope/blob/main/translations/README.ch.md">https://github.com/pyroscope-io/pyroscope/blob/main/translations/README.ch.md</a></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>suggester</title>
      <link href="/2023/03/22/treasurebox/elasticsearch/xue-xi-bi-ji/1.he-xin-zhi-shi-pian-2week/9.suggester/"/>
      <url>/2023/03/22/treasurebox/elasticsearch/xue-xi-bi-ji/1.he-xin-zhi-shi-pian-2week/9.suggester/</url>
      
        <content type="html"><![CDATA[<h2 id="搜索建议Suggester"><a href="#搜索建议Suggester" class="headerlink" title="搜索建议Suggester"></a>搜索建议Suggester</h2><ol><li><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><blockquote><p>搜索一般都会要求具有“搜索推荐”或者叫“搜索补全”的功能，即在用户输入搜索的过程中，进行自动补全或者纠错。以此来提高搜索文档的匹配精准度，进而提升用户的搜索体验，这就是Suggest。</p></blockquote></li><li><h4 id="四种Suggester"><a href="#四种Suggester" class="headerlink" title="四种Suggester"></a>四种<code>Suggester</code></h4><ol><li><p><strong>term suggester</strong>：term suggester正如其名，只基于tokenizer之后的单个term去匹配建议词，并不会考虑多个term之间的关系</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST &lt;index&gt;/_search</span><br><span class="line"><span class="punctuation">{</span> </span><br><span class="line">  <span class="attr">"suggest"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"&lt;suggest_name&gt;"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"text"</span><span class="punctuation">:</span> <span class="string">"&lt;search_content&gt;"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"term"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"suggest_mode"</span><span class="punctuation">:</span> <span class="string">"&lt;suggest_mode&gt;"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"field"</span><span class="punctuation">:</span> <span class="string">"&lt;field_name&gt;"</span></span><br><span class="line">      <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><p><strong>Options：</strong></p><ul><li><strong>text</strong>：用户搜索的文本</li><li><strong>field</strong>：要从哪个字段选取推荐数据</li><li><strong>analyzer</strong>：使用哪种分词器</li><li><strong>size</strong>：每个建议返回的最大结果数</li><li><strong>sort</strong>：如何按照提示词项排序，参数值只可以是以下两个枚举：<ul><li><strong>score</strong>：分数&gt;词频&gt;词项本身</li><li><strong>frequency</strong>：词频&gt;分数&gt;词项本身</li></ul></li><li><strong>suggest_mode</strong>：搜索推荐的推荐模式，参数值亦是枚举：<ul><li>missing：默认值，仅为不在索引中的词项生成建议词</li><li>popular：仅返回与搜索词文档词频或文档词频更高的建议词</li><li>always：根据 建议文本中的词项 推荐 任何匹配的建议词</li></ul></li><li><strong>max_edits</strong>：可以具有最大偏移距离候选建议以便被认为是建议。只能是1到2之间的值。任何其他值都将导致引发错误的请求错误。默认为2</li><li><strong>prefix_length</strong>：前缀匹配的时候，必须满足的最少字符</li><li><strong>min_word_length</strong>：最少包含的单词数量</li><li><strong>min_doc_freq</strong>：最少的文档频率</li><li><strong>max_term_freq</strong>：最大的词频</li></ul></li><li><p><strong>phrase suggester</strong></p><blockquote><p>phrase suggester和term suggester相比，对建议的文本会参考上下文，也就是一个句子的其他token，不只是单纯的token距离匹配，它可以基于共生和频率选出更好的建议。</p></blockquote><p><strong>注意</strong>：purase需要先创建Mapping</p><p><strong>Options</strong>：</p><ul><li>real_word_error_likelihood： 此选项的默认值为 0.95。此选项告诉 Elasticsearch 索引中 5% 的术语拼写错误。这意味着随着这个参数的值越来越低，Elasticsearch 会将越来越多存在于索引中的术语视为拼写错误，即使它们是正确的</li><li>max_errors：为了形成更正，最多被认为是拼写错误的术语的最大百分比。默认值为 1</li><li>confidence：默认值为 1.0，最大值也是。该值充当与建议分数相关的阈值。只有得分超过此值的建议才会显示。例如，置信度为 1.0 只会返回得分高于输入短语的建议</li><li>collate：告诉 Elasticsearch 根据指定的查询检查每个建议，以修剪索引中不存在匹配文档的建议。在这种情况下，它是一个匹配查询。由于此查询是模板查询，因此搜索查询是当前建议，位于查询中的参数下。可以在查询下的“params”对象中添加更多字段。同样，当参数“prune”设置为true时，我们将在响应中增加一个字段“collate_match”，指示建议结果中是否存在所有更正关键字的匹配</li><li>direct_generator：phrase suggester使用候选生成器生成给定文本中每个项可能的项的列表。单个候选生成器类似于为文本中的每个单独的调用term suggester。生成器的输出随后与建议候选项中的候选项结合打分。目前只支持一种候选生成器，即direct_generator。建议API接受密钥直接生成器下的生成器列表；列表中的每个生成器都按原始文本中的每个项调用。</li></ul></li><li><p><strong>completion suggester</strong></p><blockquote><p>自动补全，自动完成，支持三种查询【前缀查询（prefix）模糊查询（fuzzy）正则表达式查询（regex)】 ，主要针对的应用场景就是”Auto Completion”。 此场景下用户每输入一个字符的时候，就需要即时发送一次查询请求到后端查找匹配项，在用户输入速度较高的情况下对后端响应速度要求比较苛刻。因此实现上它和前面两个Suggester采用了不同的数据结构，索引并非通过倒排来完成，而是将analyze过的数据编码成FST和索引一起存放。对于一个open状态的索引，FST会被ES整个装载到内存里的，进行前缀查找速度极快。但是FST只能用于前缀查找，这也是Completion Suggester的局限所在。</p></blockquote><ol><li>completion：es的一种特有类型，专门为suggest提供，基于内存，性能很高。</li><li>prefix query：基于前缀查询的搜索提示，是最常用的一种搜索推荐查询。<ul><li>prefix：客户端搜索词</li><li>field：建议词字段</li><li>size：需要返回的建议词数量（默认5）</li><li>skip_duplicates：是否过滤掉重复建议，默认false</li></ul></li><li>fuzzy query<ul><li>fuzziness：允许的偏移量，默认auto</li><li>transpositions：如果设置为true，则换位计为一次更改而不是两次更改，默认为true。</li><li>min_length：返回模糊建议之前的最小输入长度，默认 3</li><li>prefix_length：输入的最小长度（不检查模糊替代项）默认为 1</li><li>unicode_aware：如果为true，则所有度量（如模糊编辑距离，换位和长度）均以Unicode代码点而不是以字节为单位。这比原始字节略慢，因此默认情况下将其设置为false。</li></ul></li><li>regex query：可以用正则表示前缀，不建议使用</li></ol></li><li><p><strong>context suggester</strong></p><blockquote><p>完成建议者会考虑索引中的所有文档，但是通常来说，我们在进行智能推荐的时候最好通过某些条件过滤，并且有可能会针对某些特性提升权重。</p></blockquote><ol><li>contexts：上下文对象，可以定义多个<ul><li>name：<code>context</code>的名字，用于区分同一个索引中不同的<code>context</code>对象。需要在查询的时候指定当前name</li><li>type：<code>context</code>对象的类型，目前支持两种：category和geo，分别用于对suggest  item分类和指定地理位置。</li><li>boost：权重值，用于提升排名</li></ul></li><li>path：如果没有path，相当于在PUT数据的时候需要指定context.name字段，如果在Mapping中指定了path，在PUT数据的时候就不需要了，因为           Mapping是一次性的，而PUT数据是频繁操作，这样就简化了代码。这段解释有木有很牛逼，网上搜到的都是官方文档的翻译，觉悟雷同。</li></ol></li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>分析python程序CPU使用率案例</title>
      <link href="/2023/03/22/treasurebox/python/python-cheng-xu-cpu-shi-yong-lu-fen-xi/fen-xi-python-cheng-xu-cpu-shi-yong-lu-an-li/"/>
      <url>/2023/03/22/treasurebox/python/python-cheng-xu-cpu-shi-yong-lu-fen-xi/fen-xi-python-cheng-xu-cpu-shi-yong-lu-an-li/</url>
      
        <content type="html"><![CDATA[<h2 id="分析python程序CPU使用率案例"><a href="#分析python程序CPU使用率案例" class="headerlink" title="分析python程序CPU使用率案例"></a>分析python程序CPU使用率案例</h2><ol><li><p>用到工具</p><ol><li>cProfile</li><li>line_profiler</li><li>pprofile</li><li>vprof</li></ol></li><li><p>示例代码</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">primes</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> [<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">elif</span> n &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    s = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, n + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">            s.append(i)</span><br><span class="line">    mront = n ** <span class="number">0.5</span></span><br><span class="line">    half = (n + <span class="number">1</span>) / <span class="number">2</span> - <span class="number">1</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    m = <span class="number">3</span></span><br><span class="line">    <span class="keyword">while</span> m &lt;= mront:</span><br><span class="line">        <span class="keyword">if</span> s[i]:</span><br><span class="line">            j = (m * m - <span class="number">3</span>) / <span class="number">2</span></span><br><span class="line">            s[j] = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> j &lt; half:</span><br><span class="line">                s[j] = <span class="number">0</span></span><br><span class="line">                j += m</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">        m = <span class="number">2</span> * i + <span class="number">3</span></span><br><span class="line">    l = [<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> x:</span><br><span class="line">            l.append(x)</span><br><span class="line">    <span class="keyword">return</span> l</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bechmark</span>():</span><br><span class="line">    start = time.time()</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(<span class="number">40</span>):</span><br><span class="line">        count = <span class="built_in">len</span>(primes(<span class="number">1000000</span>))</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span> <span class="string">"BechMark duration %r seconds, count:%r"</span> %(end- start, count)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    bechmark()</span><br></pre></td></tr></tbody></table></figure></li><li><p>cProfile</p><ol><li><p>安装：python自带</p></li><li><p>使用：python -m cProfile demo.py</p></li><li><p>运行结果分析</p><ol><li>结果参数说明：<ol><li>ncalls：执行次数</li><li>tottime：执行耗时</li><li>percall：平均每次执行耗时</li><li>cumtime：在此函数以及子函数执行期间的耗时</li><li>percall：cumtime/ncalls</li><li>filename:lineno：文件名和函数名</li></ol></li></ol></li><li><p>运行结果示例</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">BechMark duration 19.009029865264893 seconds, count:78498</span><br><span class="line">         23139965 function calls in 19.010 seconds</span><br><span class="line"></span><br><span class="line">   Ordered by: standard name</span><br><span class="line">   </span><br><span class="line">   ncalls  tottime  percall  cumtime  percall filename:lineno(function)</span><br><span class="line">       40   14.327    0.358   18.846    0.471 demo.py:10(primes)</span><br><span class="line">        1    0.163    0.163   19.009   19.009 demo.py:39(bechmark)</span><br><span class="line">        1    0.001    0.001   19.010   19.010 demo.py:7(&lt;module&gt;)</span><br><span class="line">       40    0.000    0.000    0.000    0.000 {len}</span><br><span class="line"> 23139840    1.418    0.000    1.418    0.000 {method 'append' of 'list' objects}</span><br><span class="line">        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}</span><br><span class="line">       40    3.101    0.078    3.101    0.078 {range}</span><br><span class="line">        2    0.000    0.000    0.000    0.000 {time.time}</span><br></pre></td></tr></tbody></table></figure></li><li><p>将运行结果可视化展示：</p><ol><li><p>需要安装graphviz，mac安装：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新brew</span></span><br><span class="line">brew update </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装依赖</span></span><br><span class="line">brew install harfbuzz </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装graphviz</span></span><br><span class="line">brew install graphviz</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装gprof2dot</span></span><br><span class="line">pip install gprof2dot</span><br></pre></td></tr></tbody></table></figure></li><li><p>使用：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 将执行结果导出到文件</span><br><span class="line">python -m cProfile -o output.pstats demo.py</span><br><span class="line"># 根据根据文件生成图片</span><br><span class="line">gprof2dot -f pstats output.pstats | dot -Tpng -o output.png</span><br></pre></td></tr></tbody></table></figure></li><li><p>分析结果</p><p><img src="/images/output.png" alt="output"></p></li><li><p>​其他示例：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import cProfile</span><br><span class="line">import re</span><br><span class="line">cProfile.run('re.compile("foo|bar")', 'restats')</span><br></pre></td></tr></tbody></table></figure></li><li><p>调用参数说明</p><ol><li>-o：将执行结果写入到文件中，而不是显示在控制台</li><li>-s：指定排序值方式以对输出进行排序。</li><li><code>python -m cProfile [-o output_file] [-s sort_order] myscript.py</code></li></ol></li></ol></li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前缀-正则-模糊查询</title>
      <link href="/2023/03/20/treasurebox/elasticsearch/xue-xi-bi-ji/1.he-xin-zhi-shi-pian-2week/8.qian-zhui-zheng-ze-mo-hu-cha-xun/"/>
      <url>/2023/03/20/treasurebox/elasticsearch/xue-xi-bi-ji/1.he-xin-zhi-shi-pian-2week/8.qian-zhui-zheng-ze-mo-hu-cha-xun/</url>
      
        <content type="html"><![CDATA[<h2 id="其他查询"><a href="#其他查询" class="headerlink" title="其他查询"></a>其他查询</h2><ol><li><h3 id="前缀搜索prefix"><a href="#前缀搜索prefix" class="headerlink" title="前缀搜索prefix"></a>前缀搜索prefix</h3><ol><li><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>以xx开头，不计算相关度评分</p></li><li><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><ol><li>前缀匹配的是term，而不是field</li><li>前缀搜索的性能很差</li><li>前缀搜索没有缓存</li><li>前缀搜索时尽可能把前缀长度设置的更长</li></ol></li><li><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建索引</span></span><br><span class="line">PUT test</span><br><span class="line">{</span><br><span class="line">  <span class="string">"mappings"</span>: {</span><br><span class="line">    <span class="string">"_doc"</span>: {</span><br><span class="line">      <span class="string">"_all"</span>: {</span><br><span class="line">        <span class="string">"enabled"</span>: false</span><br><span class="line">      },</span><br><span class="line">      <span class="string">"properties"</span>: {</span><br><span class="line">        <span class="string">"text"</span>: {</span><br><span class="line">          <span class="string">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">          <span class="string">"analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">          <span class="string">"fields"</span>: {</span><br><span class="line">            <span class="string">"keyword"</span>: {</span><br><span class="line">              <span class="string">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">              <span class="string">"ignore_above"</span>: <span class="number">256</span></span><br><span class="line">            }</span><br><span class="line">          },</span><br><span class="line">          <span class="string">"index_prefixes"</span>: {</span><br><span class="line">            <span class="string">"min_chars"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="string">"max_chars"</span>: <span class="number">3</span></span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先写入数据</span></span><br><span class="line">POST _bulk</span><br><span class="line">{<span class="string">"index"</span>:{<span class="string">"_index"</span>:<span class="string">"test"</span>,<span class="string">"_type"</span>:<span class="string">"_doc"</span>,<span class="string">"_id"</span>:<span class="string">"1"</span>}}</span><br><span class="line">{<span class="string">"text"</span>:<span class="string">"城管打电话喊商贩去摆地摊"</span>}</span><br><span class="line">{<span class="string">"index"</span>:{<span class="string">"_index"</span>:<span class="string">"test"</span>,<span class="string">"_type"</span>:<span class="string">"_doc"</span>,<span class="string">"_id"</span>:<span class="string">"2"</span>}}</span><br><span class="line">{<span class="string">"text"</span>:<span class="string">"笑果文化回应商贩老农去摆地摊"</span>}</span><br><span class="line">{<span class="string">"index"</span>:{<span class="string">"_index"</span>:<span class="string">"test"</span>,<span class="string">"_type"</span>:<span class="string">"_doc"</span>,<span class="string">"_id"</span>:<span class="string">"3"</span>}}</span><br><span class="line">{<span class="string">"text"</span>:<span class="string">"老农耗时17年种出椅子树"</span>}</span><br><span class="line">{<span class="string">"index"</span>:{<span class="string">"_index"</span>:<span class="string">"test"</span>,<span class="string">"_type"</span>:<span class="string">"_doc"</span>,<span class="string">"_id"</span>:<span class="string">"4"</span>}}</span><br><span class="line">{<span class="string">"text"</span>:<span class="string">"夫妻结婚30多年AA制，被城管抓"</span>}</span><br><span class="line">{<span class="string">"index"</span>:{<span class="string">"_index"</span>:<span class="string">"test"</span>,<span class="string">"_type"</span>:<span class="string">"_doc"</span>,<span class="string">"_id"</span>:<span class="string">"5"</span>}}</span><br><span class="line">{<span class="string">"text"</span>:<span class="string">"黑人见义勇为组织抢劫反被铐住"</span>}</span><br><span class="line"></span><br><span class="line">GET test/_search</span><br><span class="line">{</span><br><span class="line">  <span class="string">"query"</span>: {</span><br><span class="line">    <span class="string">"prefix"</span>: {</span><br><span class="line">      <span class="string">"text"</span>: {</span><br><span class="line">        <span class="string">"value"</span>: <span class="string">"城管"</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>支持的参数：</p><ol><li><code>min_chars</code>：建立前缀索引时开始字符的最小长度，比如设置为2，表示从2个字符开始</li><li><code>max_chars</code>：建立前缀索引时开始字符的最大长度，比如设置为5，表示最大5个字符</li></ol></li></ol></li><li><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><ol><li><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><ol><li>通配符运算符是匹配一个或多个字符的占位符。例如，*通配符运算符匹配零个或多个字符。您可以将通配符运算符与其他字符结合使用以创建通配符模式。</li></ol></li><li><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><ol><li><p>使用通配符查询，关键词：<code>wildcard</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">PUT product_en</span><br><span class="line">{</span><br><span class="line">  <span class="string">"mappings"</span>: {</span><br><span class="line">    <span class="string">"_doc"</span>: {</span><br><span class="line">      <span class="string">"_all"</span>: {</span><br><span class="line">        <span class="string">"enabled"</span>: false</span><br><span class="line">      },</span><br><span class="line">      <span class="string">"properties"</span>: {</span><br><span class="line">        <span class="string">"desc"</span>: {</span><br><span class="line">          <span class="string">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">          <span class="string">"fields"</span>: {</span><br><span class="line">            <span class="string">"keyword"</span>: {</span><br><span class="line">              <span class="string">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">              <span class="string">"ignore_above"</span>: <span class="number">256</span></span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"title"</span>: {</span><br><span class="line">          <span class="string">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">          <span class="string">"fields"</span>: {</span><br><span class="line">            <span class="string">"keyword"</span>: {</span><br><span class="line">              <span class="string">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">              <span class="string">"ignore_above"</span>: <span class="number">256</span></span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"tags"</span>: {</span><br><span class="line">          <span class="string">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">          <span class="string">"fields"</span>: {</span><br><span class="line">            <span class="string">"keyword"</span>: {</span><br><span class="line">              <span class="string">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">              <span class="string">"ignore_above"</span>: <span class="number">256</span></span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">POST /product_en/_bulk</span><br><span class="line">{ <span class="string">"index"</span>: { <span class="string">"_id"</span>: <span class="string">"1"</span>} }</span><br><span class="line">{ <span class="string">"title"</span>: <span class="string">"my english"</span>,<span class="string">"desc"</span> :  <span class="string">"shouji zhong de zhandouji"</span>,<span class="string">"price"</span> :  <span class="number">3999</span>, <span class="string">"tags"</span>: [ <span class="string">"xingjiabi"</span>, <span class="string">"fashao"</span>, <span class="string">"buka"</span>, <span class="string">"1"</span>]}</span><br><span class="line">{ <span class="string">"index"</span>: { <span class="string">"_id"</span>: <span class="string">"2"</span>} }</span><br><span class="line">{ <span class="string">"title"</span>: <span class="string">"xiaomi nfc phone"</span>,<span class="string">"desc"</span> :  <span class="string">"zhichi quangongneng nfc,shouji zhong de jianjiji"</span>,<span class="string">"price"</span> :  <span class="number">4999</span>, <span class="string">"tags"</span>: [ <span class="string">"xingjiabi"</span>, <span class="string">"fashao"</span>, <span class="string">"gongjiaoka"</span> , <span class="string">"asd2fgas"</span>]}</span><br><span class="line">{ <span class="string">"index"</span>: { <span class="string">"_id"</span>: <span class="string">"3"</span>} }</span><br><span class="line">{ <span class="string">"title"</span>: <span class="string">"nfc phone"</span>,<span class="string">"desc"</span> :  <span class="string">"shouji zhong de hongzhaji"</span>,<span class="string">"price"</span> :  <span class="number">2999</span>, <span class="string">"tags"</span>: [ <span class="string">"xingjiabi"</span>, <span class="string">"fashao"</span>, <span class="string">"menjinka"</span> , <span class="string">"as345"</span>]}</span><br><span class="line">{ <span class="string">"title"</span>: { <span class="string">"_id"</span>: <span class="string">"4"</span>} }</span><br><span class="line">{ <span class="string">"text"</span>: <span class="string">"xiaomi erji"</span>,<span class="string">"desc"</span> :  <span class="string">"erji zhong de huangmenji"</span>,<span class="string">"price"</span> :  <span class="number">999</span>, <span class="string">"tags"</span>: [ <span class="string">"low"</span>, <span class="string">"bufangshui"</span>, <span class="string">"yinzhicha"</span>, <span class="string">"4dsg"</span> ]}</span><br><span class="line">{ <span class="string">"index"</span>: { <span class="string">"_id"</span>: <span class="string">"5"</span>} }</span><br><span class="line">{ <span class="string">"title"</span>: <span class="string">"hongmi erji"</span>,<span class="string">"desc"</span> :  <span class="string">"erji zhong de kendeji"</span>,<span class="string">"price"</span> :  <span class="number">399</span>, <span class="string">"tags"</span>: [ <span class="string">"lowbee"</span>, <span class="string">"xuhangduan"</span>, <span class="string">"zhiliangx"</span> , <span class="string">"sdg5"</span>]}</span><br><span class="line"></span><br><span class="line">GET product_en/_search</span><br><span class="line">{</span><br><span class="line">  <span class="string">"query"</span>: {</span><br><span class="line">    <span class="string">"wildcard"</span>: {</span><br><span class="line">      <span class="string">"title"</span>: {</span><br><span class="line">        <span class="string">"value"</span>: <span class="string">"eng*ish"</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ol></li></ol></li><li><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><ol><li><h4 id="关键词：regex"><a href="#关键词：regex" class="headerlink" title="关键词：regex"></a>关键词：<code>regex</code></h4></li><li><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET product_en/_search</span><br><span class="line">{</span><br><span class="line">  <span class="string">"query"</span>: {</span><br><span class="line">    <span class="string">"regexp"</span>: {</span><br><span class="line">      <span class="string">"desc.keyword"</span>: {</span><br><span class="line">        <span class="string">"value"</span>: <span class="string">"zh~o"</span>,</span><br><span class="line">        <span class="string">"flags"</span>: <span class="string">"COMPLEMENT"</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="flags参数说明："><a href="#flags参数说明：" class="headerlink" title="flags参数说明："></a>flags参数说明：</h4><ol><li><p>ALL</p><blockquote><p>启用所有可选操作符。</p></blockquote></li><li><p>COMPLEMENT</p><blockquote><p>启用<del>操作符。可以使用</del>对下面最短的模式进行否定。例如</p><p>a~bc  # matches ‘adc’ and ‘aec’ but not ‘abc’</p></blockquote></li><li><p>INTERVAL</p><blockquote><p>启用&lt;&gt;操作符。可以使用&lt;&gt;匹配数值范围。例如</p><p>foo&lt;1-100&gt;    # matches ‘foo1’, ‘foo2’ … ‘foo99’, ‘foo100’</p><p>foo&lt;01-100&gt;   # matches ‘foo01’, ‘foo02’ … ‘foo99’, ‘foo100’</p></blockquote></li><li><p>INTERSECTION</p><blockquote><p>启用&amp;操作符，它充当AND操作符。如果左边和右边的模式都匹配，则匹配成功。例如:</p><p>aaa.+&amp;.+bbb  # matches ‘aaabbb’</p></blockquote></li><li><p>ANYSTRING</p><blockquote><p>启用@操作符。您可以使用@来匹配任何整个字符串。<br>您可以将@操作符与&amp;和~操作符组合起来，创建一个“everything except”逻辑。例如:</p><p>@&amp;~(abc.+)  # matches everything except terms beginning with ‘abc’</p></blockquote></li></ol></li></ol></li><li><h3 id="模糊查询-fuzzy"><a href="#模糊查询-fuzzy" class="headerlink" title="模糊查询 -fuzzy"></a>模糊查询 -fuzzy</h3><blockquote><p>混淆字符 (<strong>b</strong>ox → fox)</p><p>缺少字符 (<strong>b</strong>lack → lack)</p><p>多出字符 (sic → sic<strong>k</strong>)</p><p>颠倒次序 (a<strong>c</strong>t → <strong>c</strong>at)</p></blockquote><ol><li><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">GET &lt;index&gt;/_search</span><br><span class="line">{</span><br><span class="line">  <span class="string">"query"</span>: {</span><br><span class="line">    <span class="string">"fuzzy"</span>: {</span><br><span class="line">      <span class="string">"&lt;field&gt;"</span>: {</span><br><span class="line">        <span class="string">"value"</span>: <span class="string">"&lt;keyword&gt;"</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模糊匹配</span></span><br><span class="line">GET product_en/_search</span><br><span class="line">{</span><br><span class="line">  <span class="string">"query"</span>: {</span><br><span class="line">    <span class="string">"fuzzy"</span>: {</span><br><span class="line">      <span class="string">"desc"</span>: {</span><br><span class="line">        <span class="string">"value"</span>: <span class="string">"zhon"</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><ol><li><code>value</code>：必须，搜索的字段</li><li><code>fuzziness</code>：编辑距离：(0,1,2)并非越大越好，召回率高但结果不准确，例如zho到zhong的编辑距离为2<ol><li>最小编辑距离：一个单词经过（插入、删除、修改、调换）转换为另一个单词时需要的次数</li><li><code>transpositions</code>：表示编辑距离修改时是否包含反转。默认为true，包含反转，false时不包含反转。如设置为false，fuzziness设置为1时，<code>hzong</code>不能匹配到<code>zhong</code>。因为<code>hzong</code>转换为<code>zhong</code>在不反转时需要两次操作。</li></ol></li></ol></li><li><p>在match中使用fuzziness</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET product_en/_search</span><br><span class="line">{</span><br><span class="line">  <span class="string">"query"</span>: {</span><br><span class="line">    <span class="string">"match"</span>: {</span><br><span class="line">      <span class="string">"desc"</span>: {</span><br><span class="line">        <span class="string">"query"</span>: <span class="string">"quangengneng"</span>,</span><br><span class="line">        <span class="string">"fuzziness"</span>: <span class="number">1</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol></li><li><h3 id="智能推荐"><a href="#智能推荐" class="headerlink" title="智能推荐"></a>智能推荐</h3></li><li><h3 id="match-phrase-prefix"><a href="#match-phrase-prefix" class="headerlink" title="match_phrase_prefix"></a>match_phrase_prefix</h3><ol><li><h4 id="match-phrase"><a href="#match-phrase" class="headerlink" title="match_phrase"></a>match_phrase</h4><ol><li>match_phrase_prefix会分词</li><li>被检索字段必须包含match_phrase中的所有词频并且顺序必须是相同的</li><li>被检索字段包含的match_phrase中的词项之间不能有其他词项</li></ol></li><li><h5 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h5><p>​match_phrase_prefix与match_phrase相同，但是它多了一个特性,就是它允许在文本的最后一个词项(term)上的前缀匹配,如果是一个单词，比如a，它会匹配文档字段所有以a开头的文档，如果是一个短语，比如 “this is ma” ，他会先在倒排索引中做以ma做前缀搜索，然后在匹配到的doc中做match_phrase查询，(网上有的说是先match_phrase，然后再进行前缀搜索,，是不对的)。</p><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><ul><li>analyzer：指定何种分析器来对该短语进行分词处理</li><li>max_expansions：在分片级别限制匹配的最大词项，如果多个分片还是会返回多个结果</li><li>boost：用于设置该查询的权重</li><li>slop：允许短语间的词项(term)间隔：slop 参数告诉 match_phrase 查询词条相隔多远时仍然能将文档视为匹配。<ul><li>相隔多远： 意思是说为了让查询和文档匹配你需要移动词条多少次。</li><li>例如：slop为1时，使用<code>shouji de</code> 可以匹配到<code>shouji zhong de</code></li></ul></li></ul></li><li><h4 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">GET product_en/_search</span><br><span class="line">{</span><br><span class="line">  <span class="string">"query"</span>: {</span><br><span class="line">    <span class="string">"match_phrase_prefix"</span>: {</span><br><span class="line">      <span class="string">"desc"</span>: {</span><br><span class="line">        <span class="string">"query"</span>: <span class="string">"shouji zhong de"</span>,</span><br><span class="line">        <span class="string">"max_expansions"</span>: <span class="number">1</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加上slop参数</span></span><br><span class="line">GET product_en/_search</span><br><span class="line">{</span><br><span class="line">  <span class="string">"query"</span>: {</span><br><span class="line">    <span class="string">"match_phrase_prefix"</span>: {</span><br><span class="line">      <span class="string">"desc"</span>: {</span><br><span class="line">        <span class="string">"query"</span>: <span class="string">"shouji de"</span>,</span><br><span class="line">        <span class="string">"max_expansions"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"slop"</span>:<span class="number">1</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol></li><li><h3 id="N-gram和edge-ngram"><a href="#N-gram和edge-ngram" class="headerlink" title="N-gram和edge ngram"></a>N-gram和edge ngram</h3><ol><li><h5 id="tokenizer"><a href="#tokenizer" class="headerlink" title="tokenizer"></a>tokenizer</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">{</span><br><span class="line">  <span class="string">"tokenizer"</span>: <span class="string">"ngram"</span>,</span><br><span class="line">  <span class="string">"text"</span>: <span class="string">"reba always loves me"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="token-filter"><a href="#token-filter" class="headerlink" title="token filter"></a>token filter</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">{</span><br><span class="line">  <span class="string">"tokenizer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">  <span class="string">"filter"</span>: [ <span class="string">"ngram"</span> ],</span><br><span class="line">  <span class="string">"text"</span>: <span class="string">"reba always loves me"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><ul><li><h5 id="min-gram：创建索引所拆分字符的最小阈值"><a href="#min-gram：创建索引所拆分字符的最小阈值" class="headerlink" title="min_gram：创建索引所拆分字符的最小阈值"></a>min_gram：创建索引所拆分字符的最小阈值</h5></li><li><h5 id="max-gram：创建索引所拆分字符的最大阈值"><a href="#max-gram：创建索引所拆分字符的最大阈值" class="headerlink" title="max_gram：创建索引所拆分字符的最大阈值"></a>max_gram：创建索引所拆分字符的最大阈值</h5></li></ul><h5 id="ngram：从每一个字符开始-按照步长-进行分词-适合前缀中缀检索"><a href="#ngram：从每一个字符开始-按照步长-进行分词-适合前缀中缀检索" class="headerlink" title="ngram：从每一个字符开始,按照步长,进行分词,适合前缀中缀检索"></a>ngram：从每一个字符开始,按照步长,进行分词,适合前缀中缀检索</h5><h5 id="edge-ngram：从第一个字符开始-按照步长-进行分词-适合前缀匹配场景"><a href="#edge-ngram：从第一个字符开始-按照步长-进行分词-适合前缀匹配场景" class="headerlink" title="edge_ngram：从第一个字符开始,按照步长,进行分词,适合前缀匹配场景"></a>edge_ngram：从第一个字符开始,按照步长,进行分词,适合前缀匹配场景</h5></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>索引的批量操作</title>
      <link href="/2023/03/20/treasurebox/elasticsearch/xue-xi-bi-ji/1.he-xin-zhi-shi-pian-2week/7.suo-yin-de-pi-liang-cao-zuo/"/>
      <url>/2023/03/20/treasurebox/elasticsearch/xue-xi-bi-ji/1.he-xin-zhi-shi-pian-2week/7.suo-yin-de-pi-liang-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="索引的批量操作"><a href="#索引的批量操作" class="headerlink" title="索引的批量操作"></a>索引的批量操作</h2><ol><li><h3 id="基于-mget的批量操作"><a href="#基于-mget的批量操作" class="headerlink" title="基于_mget的批量操作"></a>基于_mget的批量操作</h3><ol><li><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>Multi get API 基于索引、类型、（可选）和 id（可能还有路由）返回多个文档。响应包括一个<code>docs</code>数组，其中包含所有获取的文档，顺序与原始多获取请求相对应（如果特定获取失败，则包含此错误的对象将包含在响应中）。获取的数据结构类似于查询时返回的数据结构。</p></li><li><h4 id="查询结构体"><a href="#查询结构体" class="headerlink" title="查询结构体"></a>查询结构体</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 基于mget的批量查询</span></span><br><span class="line">GET /_mget</span><br><span class="line">{</span><br><span class="line">  <span class="string">"docs"</span>: [</span><br><span class="line">    {</span><br><span class="line">      <span class="string">"_index"</span>: <span class="string">"product"</span>,</span><br><span class="line">      <span class="string">"_type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">      <span class="string">"_id"</span>: <span class="number">3</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      <span class="string">"_index"</span>: <span class="string">"product"</span>,</span><br><span class="line">      <span class="string">"_type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">      <span class="string">"_id"</span>: <span class="number">1</span></span><br><span class="line">    }</span><br><span class="line">  ]</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询单个索引时，将索引提前</span></span><br><span class="line">GET product/_mget</span><br><span class="line">{</span><br><span class="line">  <span class="string">"docs"</span>: [</span><br><span class="line">    {</span><br><span class="line">      <span class="string">"_id"</span>: <span class="number">1</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      <span class="string">"_id"</span>: <span class="number">3</span></span><br><span class="line">    }</span><br><span class="line">  ]</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询单个索引时，可以将索引提前</span></span><br><span class="line">GET product/_mget</span><br><span class="line">{</span><br><span class="line">  <span class="string">"docs"</span>: [</span><br><span class="line">    {</span><br><span class="line">      <span class="string">"_id"</span>: <span class="number">1</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      <span class="string">"_id"</span>: <span class="number">3</span></span><br><span class="line">    }</span><br><span class="line">  ]</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GET product/_mget</span><br><span class="line">{</span><br><span class="line">  <span class="string">"docs"</span>: [</span><br><span class="line">    {</span><br><span class="line">      <span class="string">"_id"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="string">"_source"</span>:[</span><br><span class="line">        <span class="string">"name"</span>, <span class="string">"price"</span></span><br><span class="line">        ]</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      <span class="string">"_id"</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="string">"_source"</span>:{</span><br><span class="line">        <span class="string">"include"</span>:[</span><br><span class="line">          <span class="string">"name"</span>, <span class="string">"price"</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="string">"exclude"</span>:[</span><br><span class="line">          <span class="string">"name"</span>, <span class="string">"tags"</span></span><br><span class="line">          ]</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="返回的结果"><a href="#返回的结果" class="headerlink" title="返回的结果"></a>返回的结果</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="string">"docs"</span> : [</span><br><span class="line">    {</span><br><span class="line">      <span class="string">"_index"</span> : <span class="string">"product"</span>,</span><br><span class="line">      <span class="string">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">      <span class="string">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">      <span class="string">"_version"</span> : <span class="number">4</span>,</span><br><span class="line">      <span class="string">"_seq_no"</span> : <span class="number">13</span>,</span><br><span class="line">      <span class="string">"_primary_term"</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="string">"found"</span> : true,</span><br><span class="line">      <span class="string">"_source"</span> : {</span><br><span class="line">        <span class="string">"price"</span> : <span class="number">1899</span>,</span><br><span class="line">        <span class="string">"name"</span> : <span class="string">"小米手机10"</span></span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      <span class="string">"_index"</span> : <span class="string">"product"</span>,</span><br><span class="line">      <span class="string">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">      <span class="string">"_id"</span> : <span class="string">"3"</span>,</span><br><span class="line">      <span class="string">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="string">"_seq_no"</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="string">"_primary_term"</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="string">"found"</span> : true,</span><br><span class="line">      <span class="string">"_source"</span> : {</span><br><span class="line">        <span class="string">"price"</span> : <span class="number">2999</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  ]</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ol></li><li><h3 id="文档的操作类型"><a href="#文档的操作类型" class="headerlink" title="文档的操作类型"></a>文档的操作类型</h3><ol><li><p>create：不存在则创建，存在则报错</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建</span></span><br><span class="line">POST test_index/_doc</span><br><span class="line">{</span><br><span class="line">  <span class="string">"field1"</span>:<span class="string">"test1"</span>,</span><br><span class="line">  <span class="string">"field2"</span>:<span class="string">"test2"</span></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p>delete：删除文档，删除时并没有真正删除，而是更新了版本</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE test_index/_doc/qTzpA4cBcYeZSWHOL6lh</span><br></pre></td></tr></tbody></table></figure></li><li><p>update：全量替换或部分更新</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建</span></span><br><span class="line">POST test_index/_doc/43L0A4cB88BkTKJBzyYc/_update</span><br><span class="line">{</span><br><span class="line">  <span class="string">"doc"</span>: {</span><br><span class="line">    <span class="string">"field1"</span>:<span class="string">"update_test1"</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>index：索引（动词）</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建，存在时覆盖，不存在就创建</span></span><br><span class="line">POST test_index/_doc/<span class="number">2</span>?op_type=index</span><br><span class="line">{</span><br><span class="line">  <span class="string">"field"</span>: <span class="number">1</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol></li><li><h3 id="索引的批量操作-bulk"><a href="#索引的批量操作-bulk" class="headerlink" title="索引的批量操作_bulk"></a>索引的批量操作_bulk</h3><ol><li><h5 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _bulk批量操作</span></span><br><span class="line"><span class="comment"># POST /index/_bulk</span></span><br><span class="line"><span class="comment"># {"action": "metadata"}</span></span><br><span class="line"><span class="comment"># {"data"}</span></span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST _bulk</span><br><span class="line">{ <span class="string">"index"</span>:{<span class="string">"_index"</span>:<span class="string">"test"</span>, <span class="string">"_type"</span>:<span class="string">"_doc"</span>, <span class="string">"_id"</span> :<span class="string">"1"</span>}}</span><br><span class="line">{ <span class="string">"field1"</span> : <span class="string">"value1"</span> }</span><br><span class="line"></span><br><span class="line">POST _bulk</span><br><span class="line">{<span class="string">"index"</span>:{ <span class="string">"_index"</span>:<span class="string">"test_index"</span>,<span class="string">"_type"</span>:<span class="string">"_doc"</span>,<span class="string">"_id"</span>:<span class="number">4</span>}}</span><br><span class="line">{<span class="string">"field1"</span>:<span class="string">"test_bulk"</span>}</span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST _bulk</span><br><span class="line">{<span class="string">"delete"</span>:{<span class="string">"_index"</span>:<span class="string">"test_index"</span>, <span class="string">"_type"</span>:<span class="string">"_doc"</span>,<span class="string">"_id"</span>:<span class="string">"10"</span>}}</span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST _bulk</span><br><span class="line">{<span class="string">"update"</span>:{<span class="string">"_index"</span>:<span class="string">"test_index"</span>,<span class="string">"_type"</span>:<span class="string">"_doc"</span>,<span class="string">"_id"</span>:<span class="string">"10"</span>}}</span><br><span class="line">{<span class="string">"doc"</span>:{<span class="string">"field1"</span>:<span class="string">"bulk update"</span>}}</span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="filter-path参数说明"><a href="#filter-path参数说明" class="headerlink" title="filter_path参数说明"></a>filter_path参数说明</h5><ol><li>使用filter_path 可以筛选将处理报错的数据返回</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用filter_path 可以筛选将处理报错的数据返回</span></span><br><span class="line">POST _bulk?filter_path=items.*.error</span><br><span class="line">{<span class="string">"update"</span>:{<span class="string">"_index"</span>:<span class="string">"test_index"</span>,<span class="string">"_type"</span>:<span class="string">"_doc"</span>,<span class="string">"_id"</span>:<span class="string">"10"</span>}}</span><br><span class="line">{<span class="string">"doc"</span>:{<span class="string">"field1"</span>:<span class="string">"bulk update 222"</span>}}</span><br><span class="line">{<span class="string">"create"</span>:{ <span class="string">"_index"</span>:<span class="string">"test_index"</span>,<span class="string">"_type"</span>:<span class="string">"_doc"</span>,<span class="string">"_id"</span>:<span class="number">11</span>}}</span><br><span class="line">{<span class="string">"field1"</span>:<span class="string">"test_bulk"</span>}</span><br><span class="line">{ <span class="string">"index"</span>:{<span class="string">"_index"</span>:<span class="string">"test"</span>, <span class="string">"_type"</span>:<span class="string">"_doc"</span>, <span class="string">"_id"</span> :<span class="string">"1"</span>}}</span><br><span class="line">{ <span class="string">"field1"</span> : <span class="string">"value2222"</span> }</span><br><span class="line">{ <span class="string">"delete"</span>:{<span class="string">"_index"</span>:<span class="string">"test"</span>, <span class="string">"_type"</span>:<span class="string">"_doc"</span>, <span class="string">"_id"</span> :<span class="string">"1"</span>}}</span><br><span class="line"></span><br><span class="line">POST _bulk?filter_path=items.*.error</span><br><span class="line">{<span class="string">"create"</span>:{ <span class="string">"_index"</span>:<span class="string">"test_index"</span>,<span class="string">"_type"</span>:<span class="string">"_doc"</span>,<span class="string">"_id"</span>:<span class="number">11</span>}}</span><br><span class="line">{<span class="string">"field1"</span>:<span class="string">"test_bulk"</span>}</span><br></pre></td></tr></tbody></table></figure></li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>脚本查询Scripting</title>
      <link href="/2023/03/19/treasurebox/elasticsearch/xue-xi-bi-ji/1.he-xin-zhi-shi-pian-2week/6.jiao-ben-cha-xun-scripting/"/>
      <url>/2023/03/19/treasurebox/elasticsearch/xue-xi-bi-ji/1.he-xin-zhi-shi-pian-2week/6.jiao-ben-cha-xun-scripting/</url>
      
        <content type="html"><![CDATA[<h2 id="脚本查询Scripting"><a href="#脚本查询Scripting" class="headerlink" title="脚本查询Scripting"></a>脚本查询Scripting</h2><ol><li><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Scripting是Elasticsearch支持的一种专门用于复杂场景下支持自定义编程的强大的脚本功能，ES支持多种脚本语言，如painless，其语法类似于Java,也有注释、关键字、类型、变量、函数等，其就要相对于其他脚本高出几倍的性能，并且安全可靠，可以用于内联和存储脚本。</p><p>es在执行脚本时需要先进行编译，编译的结果存储在缓冲区中。</p></li><li><h3 id="支持的语言"><a href="#支持的语言" class="headerlink" title="支持的语言"></a>支持的语言</h3><ol><li><p><strong>groovy</strong>：ES 1.4.x-5.0的默认脚本语言</p></li><li><p><strong>painless</strong>：JavaEE使用java语言开发，.Net使用C#/F#语言开发，Flutter使用Dart语言开发，同样，ES 5.0+版本后的Scripting使用的语言默认就是painless，painless是一种专门用于Elasticsearch的简单,用于内联和存储脚本，是ES 5.0+的默认脚本语言，类似于Java,也有注释、关键字、类型、变量、函数等，是一种安全的脚本语言。并且是Elasticsearch的默认脚本语言。</p></li><li><p><strong>其他</strong>：</p><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting-expression.html">expression</a>：每个文档的开销较低：表达式的作用更多，可以非常快速地执行，甚至比编写native脚本还要快，支持javascript语法的子集：单个表达式。缺点：只能访问数字，布尔值，日期和geo_point字段，存储的字段不可用</p><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html">mustache</a>：提供模板参数化查询</p></li></ol></li><li><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>语法简单，学习成本低</li><li>灵活度高，可编程能力强</li><li>性能相较于其他脚本语言很高</li><li>安全性好</li><li>独立语言，虽然易学但仍需单独学习</li><li>相较于DSL性能低</li><li>不适用于复杂的业务场景</li></ol></li><li><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ol><li><p>自定义评分</p></li><li><p>自定义相关度</p></li><li><p>自定义过滤器</p></li><li><p>自定义聚合分析</p></li><li><p>自定义reindex</p></li><li><p>其他自定义操作</p></li></ol></li><li><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ol><li><strong>lang</strong>:编写脚本的语言，默认为painless</li><li><strong>source</strong>:脚本本身可以指定为source内联脚本或id存储脚本</li><li><strong>params</strong>:可以传递到脚本中的任何参数名，推荐使用这种方式传参，可以减少编译的过程</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#语法:ctx._source.field_name</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"script"</span>: {</span><br><span class="line">  <span class="string">"lang"</span>:   <span class="string">"..."</span>,  <span class="comment">#1</span></span><br><span class="line">  <span class="string">"source"</span> | <span class="string">"id"</span>: <span class="string">"..."</span>, <span class="comment">#2</span></span><br><span class="line">  <span class="string">"params"</span>: { ... } <span class="comment">#3</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>示例</strong>：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#语法:ctx._source.field_name</span></span><br><span class="line"><span class="comment">#可以进行查找、更新等操作</span></span><br><span class="line"><span class="comment"># 1.修改price字段</span></span><br><span class="line">POST product/_doc/<span class="number">1</span>/_update</span><br><span class="line">{</span><br><span class="line">  <span class="string">"script"</span>: {</span><br><span class="line">    <span class="string">"source"</span>: <span class="string">"ctx._source.price+=params.level"</span>,</span><br><span class="line">    <span class="string">"params"</span>: {</span><br><span class="line">      <span class="string">"level"</span>:<span class="number">100</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.给tags字段加入一个属性，tags字段为数组</span></span><br><span class="line">POST product/_doc/<span class="number">1</span>/_update</span><br><span class="line">{</span><br><span class="line">  <span class="string">"script"</span>: {</span><br><span class="line">    <span class="string">"source"</span>: <span class="string">"ctx._source.tags.add('无线充电')"</span></span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.删除id为1的数据</span></span><br><span class="line">POST product/_doc/<span class="number">1</span>/_update</span><br><span class="line">{</span><br><span class="line">  <span class="string">"script"</span>: {</span><br><span class="line">    <span class="string">"source"</span>: <span class="string">"ctx.op='delete'"</span></span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.查询或者插入</span></span><br><span class="line">POST product/_doc/<span class="number">1</span>/_update</span><br><span class="line">{</span><br><span class="line">  <span class="string">"script"</span>: {</span><br><span class="line">    <span class="string">"source"</span>: <span class="string">"ctx._source.price+=100"</span></span><br><span class="line">  },</span><br><span class="line">  <span class="string">"upsert"</span>: {</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"小米手机10"</span>,</span><br><span class="line">    <span class="string">"desc"</span>: <span class="string">"充电贼快掉电更快，超级无敌望远镜，高刷电竞屏"</span>,</span><br><span class="line">    <span class="string">"price"</span>: <span class="number">1999</span></span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.GET 查询打9折之后的价格</span></span><br><span class="line"><span class="comment"># GET 查询打9折之后的价格</span></span><br><span class="line">GET product/_search</span><br><span class="line">{</span><br><span class="line">  <span class="string">"script_fields"</span>: {</span><br><span class="line">    <span class="string">"price"</span>: {</span><br><span class="line">      <span class="string">"script"</span>: {</span><br><span class="line">        <span class="string">"lang"</span>: <span class="string">"painless"</span>,</span><br><span class="line">        <span class="string">"source"</span>: <span class="string">"doc['price'].value*params.level"</span>,</span><br><span class="line">        <span class="string">"params"</span>: {</span><br><span class="line">          <span class="string">"level"</span>:<span class="number">0.9</span></span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h3 id="存储脚本"><a href="#存储脚本" class="headerlink" title="存储脚本"></a>存储脚本</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成script脚本模板</span></span><br><span class="line">POST _scripts/calculate_discount</span><br><span class="line">{</span><br><span class="line">  <span class="string">"script"</span>:{</span><br><span class="line">    <span class="string">"lang"</span>: <span class="string">"painless"</span>,</span><br><span class="line">    <span class="string">"source"</span>:<span class="string">"doc.price.value*params.discount"</span></span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询脚本</span></span><br><span class="line">GET _scripts/calculate_discount</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用脚本</span></span><br><span class="line">GET product/_search</span><br><span class="line">{</span><br><span class="line">  <span class="string">"script_fields"</span>: {</span><br><span class="line">    <span class="string">"discount_fields"</span>: {</span><br><span class="line">      <span class="string">"script"</span>: {</span><br><span class="line">        <span class="string">"id"</span>: <span class="string">"calculate_discount"</span>,</span><br><span class="line">        <span class="string">"params"</span>: {</span><br><span class="line">          <span class="string">"discount"</span>: <span class="number">0.8</span></span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><h3 id="使用复杂脚本"><a href="#使用复杂脚本" class="headerlink" title="使用复杂脚本"></a>使用复杂脚本</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用复杂脚本</span></span><br><span class="line"><span class="comment"># 脚本内容使用三个""""""括起来</span></span><br><span class="line">POST product/_doc/<span class="number">1</span>/_update</span><br><span class="line">{</span><br><span class="line">  <span class="string">"script"</span>: {</span><br><span class="line">    <span class="string">"lang"</span>: <span class="string">"painless"</span>,</span><br><span class="line">    <span class="string">"source"</span>: <span class="string">"""</span></span><br><span class="line"><span class="string">      ctx._source.tags=[params.tag_name];</span></span><br><span class="line"><span class="string">      ctx._source.price-=100;</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    , <span class="string">"params"</span>: {</span><br><span class="line">      <span class="string">"tag_name"</span>:<span class="string">"无线秒充1"</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><h3 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h3><p>早先某些版本正则表达式默认情况下处于禁用模式，因为它绕过了painless的针对长时间运行和占用内存脚本的保护机制。而且有深度堆栈行为。如果需要开启正则，需要配置：script.painless.regex.enabled: true</p><p><strong>注意</strong>：通常正则的使用范围比较小，应用范围基本限制在数据量比较小和并发量比较小的应用场景下。</p></li><li><h4 id="doc-‘field’-value和params-‘-source’-‘field’-："><a href="#doc-‘field’-value和params-‘-source’-‘field’-：" class="headerlink" title="doc[‘field’].value和params[‘_source’][‘field’]："></a>doc[‘field’].value和params[‘_source’][‘field’]：</h4><p>理解之间的区别是很重要的，doc[‘field’].value和params[‘_source’][‘field’]。首先，使用doc关键字，将导致该字段的条件被加载到内存（缓存），这将导致更快的执行，但更多的内存消耗。此外，doc[…]符号只允许简单类型（不能返回一个复杂类型(JSON对象或者nested类型)），只有在非分析或单个词条的基础上有意义。但是，doc如果可能，使用仍然是从文档访问值的推荐方式，因为_source每次使用时都必须加载并解析。使用_source非常缓慢</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>es集群重要配置</title>
      <link href="/2023/03/15/treasurebox/elasticsearch/cao-zuo-shou-ce/es-ji-qun-chong-yao-pei-zhi/"/>
      <url>/2023/03/15/treasurebox/elasticsearch/cao-zuo-shou-ce/es-ji-qun-chong-yao-pei-zhi/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="comment"># 永久生效配置</span></span><br><span class="line">  <span class="string">"persistent"</span> : {</span><br><span class="line">    <span class="string">"action"</span> : {</span><br><span class="line">      <span class="string">"destructive_requires_name"</span> : <span class="string">"false"</span></span><br><span class="line">    },</span><br><span class="line">    <span class="string">"cluster"</span> : {</span><br><span class="line">      <span class="string">"routing"</span> : {</span><br><span class="line">        <span class="string">"allocation"</span> : {</span><br><span class="line">          <span class="string">"node_concurrent_incoming_recoveries"</span> : <span class="string">"2"</span>,</span><br><span class="line">          <span class="string">"node_concurrent_recoveries"</span> : <span class="string">"2"</span>,</span><br><span class="line">          <span class="string">"node_initial_primaries_recoveries"</span> : <span class="string">"4"</span>,</span><br><span class="line">          <span class="string">"node_concurrent_outgoing_recoveries"</span> : <span class="string">"2"</span></span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      <span class="string">"metadata"</span> : {</span><br><span class="line">        <span class="string">"async_write"</span> : {</span><br><span class="line">          <span class="string">"enable"</span> : <span class="string">"false"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"master_async_write"</span> : {</span><br><span class="line">          <span class="string">"enable"</span> : <span class="string">"false"</span></span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"indices"</span> : {</span><br><span class="line">      <span class="string">"recovery"</span> : {</span><br><span class="line">        <span class="string">"max_bytes_per_sec"</span> : <span class="string">"40mb"</span> <span class="comment"># 集群恢复时每秒最大处理量</span></span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"logger"</span> : {</span><br><span class="line">      <span class="string">"org"</span> : <span class="string">"info"</span></span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="string">"transient"</span> : {</span><br><span class="line">    <span class="string">"action"</span> : {</span><br><span class="line">      <span class="string">"destructive_requires_name"</span> : <span class="string">"false"</span></span><br><span class="line">    },</span><br><span class="line">    <span class="string">"cluster"</span> : {</span><br><span class="line">      <span class="string">"routing"</span> : {</span><br><span class="line">        <span class="string">"allocation"</span> : {</span><br><span class="line">          <span class="string">"node_concurrent_incoming_recoveries"</span> : <span class="string">"2"</span>,</span><br><span class="line">          <span class="string">"node_concurrent_recoveries"</span> : <span class="string">"2"</span>,</span><br><span class="line">          <span class="string">"node_initial_primaries_recoveries"</span> : <span class="string">"4"</span>,</span><br><span class="line">          <span class="string">"node_concurrent_outgoing_recoveries"</span> : <span class="string">"2"</span></span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      <span class="string">"metadata"</span> : {</span><br><span class="line">        <span class="string">"async_write"</span> : {</span><br><span class="line">          <span class="string">"enable"</span> : <span class="string">"false"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"master_async_write"</span> : {</span><br><span class="line">          <span class="string">"enable"</span> : <span class="string">"false"</span></span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"indices"</span> : {</span><br><span class="line">      <span class="string">"recovery"</span> : {</span><br><span class="line">        <span class="string">"max_bytes_per_sec"</span> : <span class="string">"40mb"</span></span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"logger"</span> : {</span><br><span class="line">      <span class="string">"org"</span> : <span class="string">"info"</span></span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="string">"defaults"</span> : {</span><br><span class="line">    <span class="string">"cluster"</span> : {</span><br><span class="line">      <span class="string">"routing"</span> : {</span><br><span class="line">        <span class="string">"use_adaptive_replica_selection"</span> : <span class="string">"false"</span>,</span><br><span class="line">        <span class="string">"rebalance"</span> : {</span><br><span class="line">          <span class="string">"enable"</span> : <span class="string">"all"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"allocation"</span> : {</span><br><span class="line">          <span class="string">"multi_path_relocation_balance"</span> : {</span><br><span class="line">            <span class="string">"enable"</span> : <span class="string">"true"</span></span><br><span class="line">          },</span><br><span class="line">          <span class="string">"same_shard"</span> : {</span><br><span class="line">            <span class="string">"host"</span> : <span class="string">"false"</span></span><br><span class="line">          },</span><br><span class="line">          <span class="string">"total_shards_per_node"</span> : <span class="string">"-1"</span>,</span><br><span class="line">          <span class="string">"multi_path_relocation"</span> : {</span><br><span class="line">            <span class="string">"max_factor"</span> : <span class="string">"2"</span></span><br><span class="line">          },</span><br><span class="line">          <span class="string">"delay_allocate"</span> : {</span><br><span class="line">            <span class="string">"enable"</span> : <span class="string">"true"</span></span><br><span class="line">          },</span><br><span class="line">          <span class="string">"shard_state"</span> : {</span><br><span class="line">            <span class="string">"started"</span> : {</span><br><span class="line">              <span class="string">"priority"</span> : <span class="string">"URGENT"</span></span><br><span class="line">            },</span><br><span class="line">            <span class="string">"failed"</span> : {</span><br><span class="line">              <span class="string">"priority"</span> : <span class="string">"URGENT"</span></span><br><span class="line">            }</span><br><span class="line">          },</span><br><span class="line">          <span class="string">"type"</span> : <span class="string">"balanced"</span>,</span><br><span class="line">          <span class="string">"random_path_allocate"</span> : {</span><br><span class="line">            <span class="string">"enable"</span> : <span class="string">"true"</span></span><br><span class="line">          },</span><br><span class="line">          <span class="string">"disk"</span> : {</span><br><span class="line">            <span class="string">"threshold_enabled"</span> : <span class="string">"true"</span>,</span><br><span class="line">            <span class="string">"watermark"</span> : {</span><br><span class="line">              <span class="string">"low"</span> : <span class="string">"85%"</span>,</span><br><span class="line">              <span class="string">"flood_stage"</span> : <span class="string">"95%"</span>,</span><br><span class="line">              <span class="string">"high"</span> : <span class="string">"90%"</span></span><br><span class="line">            },</span><br><span class="line">            <span class="string">"include_relocations"</span> : <span class="string">"true"</span>,</span><br><span class="line">            <span class="string">"reroute_interval"</span> : <span class="string">"60s"</span></span><br><span class="line">          },</span><br><span class="line">          <span class="string">"awareness"</span> : {</span><br><span class="line">            <span class="string">"attributes"</span> : [</span><br><span class="line">              <span class="string">"ip"</span></span><br><span class="line">            ]</span><br><span class="line">          },</span><br><span class="line">          <span class="string">"balance"</span> : {</span><br><span class="line">            <span class="string">"index"</span> : <span class="string">"0.55"</span>,</span><br><span class="line">            <span class="string">"threshold"</span> : <span class="string">"1.0"</span>,</span><br><span class="line">            <span class="string">"shard"</span> : <span class="string">"0.45"</span></span><br><span class="line">          },</span><br><span class="line">          <span class="string">"random_allocate"</span> : {</span><br><span class="line">            <span class="string">"enable"</span> : <span class="string">"true"</span></span><br><span class="line">          },</span><br><span class="line">          <span class="string">"enable"</span> : <span class="string">"all"</span>,</span><br><span class="line">          <span class="string">"same_ip_relocate"</span> : {</span><br><span class="line">            <span class="string">"enable"</span> : <span class="string">"false"</span></span><br><span class="line">          },</span><br><span class="line">          <span class="string">"allow_rebalance"</span> : <span class="string">"indices_all_active"</span>,</span><br><span class="line">          <span class="string">"cluster_concurrent_rebalance"</span> : <span class="string">"2"</span></span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      <span class="string">"indices"</span> : {</span><br><span class="line">        <span class="string">"tombstones"</span> : {</span><br><span class="line">          <span class="string">"size"</span> : <span class="string">"500"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"close"</span> : {</span><br><span class="line">          <span class="string">"enable"</span> : <span class="string">"true"</span></span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      <span class="string">"nodes"</span> : {</span><br><span class="line">        <span class="string">"reconnect_interval"</span> : <span class="string">"10s"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"persistent_tasks"</span> : {</span><br><span class="line">        <span class="string">"allocation"</span> : {</span><br><span class="line">          <span class="string">"enable"</span> : <span class="string">"all"</span>,</span><br><span class="line">          <span class="string">"recheck_interval"</span> : <span class="string">"30s"</span></span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      <span class="string">"auth"</span> : {</span><br><span class="line">        <span class="string">"extra"</span> : {</span><br><span class="line">          <span class="string">"permission"</span> : <span class="string">""</span></span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      <span class="string">"blocks"</span> : {</span><br><span class="line">        <span class="string">"read_only_allow_delete"</span> : <span class="string">"false"</span>,</span><br><span class="line">        <span class="string">"read_only"</span> : <span class="string">"false"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"service"</span> : {</span><br><span class="line">        <span class="string">"slow_task_logging_threshold"</span> : <span class="string">"30s"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"name"</span> : <span class="string">"es-1a35xrhw"</span>,</span><br><span class="line">      <span class="string">"max_shards_per_node"</span> : <span class="string">"1000"</span>,</span><br><span class="line">      <span class="string">"remote"</span> : {</span><br><span class="line">        <span class="string">"node"</span> : {</span><br><span class="line">          <span class="string">"attr"</span> : <span class="string">""</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"initial_connect_timeout"</span> : <span class="string">"30s"</span>,</span><br><span class="line">        <span class="string">"connect"</span> : <span class="string">"true"</span>,</span><br><span class="line">        <span class="string">"connections_per_cluster"</span> : <span class="string">"3"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"info"</span> : {</span><br><span class="line">        <span class="string">"update"</span> : {</span><br><span class="line">          <span class="string">"interval"</span> : <span class="string">"30s"</span>,</span><br><span class="line">          <span class="string">"timeout"</span> : <span class="string">"15s"</span></span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"chunk_size"</span> : <span class="string">"1gb"</span>,</span><br><span class="line">    <span class="string">"auth"</span> : <span class="string">""</span>,</span><br><span class="line">    <span class="string">"end_point"</span> : <span class="string">""</span>,</span><br><span class="line">    <span class="string">"logger"</span> : {</span><br><span class="line">      <span class="string">"level"</span> : <span class="string">"INFO"</span></span><br><span class="line">    },</span><br><span class="line">    <span class="string">"cluster_type"</span> : <span class="string">"clog"</span>,</span><br><span class="line">    <span class="string">"processors"</span> : <span class="string">"16"</span>,</span><br><span class="line">    <span class="string">"ingest"</span> : {</span><br><span class="line">      <span class="string">"geoip"</span> : {</span><br><span class="line">        <span class="string">"cache_size"</span> : <span class="string">"1000"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"grok"</span> : {</span><br><span class="line">        <span class="string">"watchdog"</span> : {</span><br><span class="line">          <span class="string">"max_execution_time"</span> : <span class="string">"1s"</span>,</span><br><span class="line">          <span class="string">"interval"</span> : <span class="string">"1s"</span></span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"pidfile"</span> : <span class="string">""</span>,</span><br><span class="line">    <span class="string">"path"</span> : {</span><br><span class="line">      <span class="string">"data"</span> : [</span><br><span class="line">        <span class="string">"/data1/containers/1656662142001104232/es/data"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"logs"</span> : <span class="string">"/data1/containers/1656662142001104232/es/logs"</span>,</span><br><span class="line">      <span class="string">"shared_data"</span> : <span class="string">""</span>,</span><br><span class="line">      <span class="string">"home"</span> : <span class="string">"/data1/containers/1656662142001104232/es"</span>,</span><br><span class="line">      <span class="string">"repo"</span> : [ ]</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"ccr"</span> : {</span><br><span class="line">      <span class="string">"wait_for_metadata_timeout"</span> : <span class="string">"60s"</span>,</span><br><span class="line">      <span class="string">"indices"</span> : {</span><br><span class="line">        <span class="string">"recovery"</span> : {</span><br><span class="line">          <span class="string">"recovery_activity_timeout"</span> : <span class="string">"60s"</span>,</span><br><span class="line">          <span class="string">"chunk_size"</span> : <span class="string">"1mb"</span>,</span><br><span class="line">          <span class="string">"internal_action_timeout"</span> : <span class="string">"60s"</span>,</span><br><span class="line">          <span class="string">"max_bytes_per_sec"</span> : <span class="string">"40mb"</span>,</span><br><span class="line">          <span class="string">"max_concurrent_file_chunks"</span> : <span class="string">"5"</span></span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      <span class="string">"auto_follow"</span> : {</span><br><span class="line">        <span class="string">"wait_for_metadata_timeout"</span> : <span class="string">"60s"</span></span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"scheduler_period_min"</span> : <span class="string">"30"</span>,</span><br><span class="line">    <span class="string">"repositories"</span> : {</span><br><span class="line">      <span class="string">"fs"</span> : {</span><br><span class="line">        <span class="string">"compress"</span> : <span class="string">"false"</span>,</span><br><span class="line">        <span class="string">"chunk_size"</span> : <span class="string">"9223372036854775807b"</span>,</span><br><span class="line">        <span class="string">"location"</span> : <span class="string">""</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"url"</span> : {</span><br><span class="line">        <span class="string">"supported_protocols"</span> : [</span><br><span class="line">          <span class="string">"http"</span>,</span><br><span class="line">          <span class="string">"https"</span>,</span><br><span class="line">          <span class="string">"ftp"</span>,</span><br><span class="line">          <span class="string">"file"</span>,</span><br><span class="line">          <span class="string">"jar"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"allowed_urls"</span> : [ ],</span><br><span class="line">        <span class="string">"url"</span> : <span class="string">"http:"</span></span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"action"</span> : {</span><br><span class="line">      <span class="string">"auto_create_index"</span> : <span class="string">"true"</span>,</span><br><span class="line">      <span class="string">"search"</span> : {</span><br><span class="line">        <span class="string">"shard_count"</span> : {</span><br><span class="line">          <span class="string">"limit"</span> : <span class="string">"9223372036854775807"</span></span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      <span class="string">"master"</span> : {</span><br><span class="line">        <span class="string">"force_local"</span> : <span class="string">"false"</span></span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"app_id"</span> : <span class="string">""</span>,</span><br><span class="line">    <span class="string">"cache"</span> : {</span><br><span class="line">      <span class="string">"recycler"</span> : {</span><br><span class="line">        <span class="string">"page"</span> : {</span><br><span class="line">          <span class="string">"limit"</span> : {</span><br><span class="line">            <span class="string">"heap"</span> : <span class="string">"10%"</span></span><br><span class="line">          },</span><br><span class="line">          <span class="string">"type"</span> : <span class="string">"CONCURRENT"</span>,</span><br><span class="line">          <span class="string">"weight"</span> : {</span><br><span class="line">            <span class="string">"longs"</span> : <span class="string">"1.0"</span>,</span><br><span class="line">            <span class="string">"ints"</span> : <span class="string">"1.0"</span>,</span><br><span class="line">            <span class="string">"bytes"</span> : <span class="string">"1.0"</span>,</span><br><span class="line">            <span class="string">"objects"</span> : <span class="string">"0.1"</span></span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"reindex"</span> : {</span><br><span class="line">      <span class="string">"remote"</span> : {</span><br><span class="line">        <span class="string">"whitelist"</span> : [ ]</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"compress"</span> : <span class="string">"false"</span>,</span><br><span class="line">    <span class="string">"resource"</span> : {</span><br><span class="line">      <span class="string">"reload"</span> : {</span><br><span class="line">        <span class="string">"enabled"</span> : <span class="string">"true"</span>,</span><br><span class="line">        <span class="string">"interval"</span> : {</span><br><span class="line">          <span class="string">"low"</span> : <span class="string">"60s"</span>,</span><br><span class="line">          <span class="string">"high"</span> : <span class="string">"5s"</span>,</span><br><span class="line">          <span class="string">"medium"</span> : <span class="string">"30s"</span></span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"thread_pool"</span> : {</span><br><span class="line">      <span class="string">"force_merge"</span> : {</span><br><span class="line">        <span class="string">"queue_size"</span> : <span class="string">"-1"</span>,</span><br><span class="line">        <span class="string">"size"</span> : <span class="string">"1"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"fetch_shard_started"</span> : {</span><br><span class="line">        <span class="string">"core"</span> : <span class="string">"1"</span>,</span><br><span class="line">        <span class="string">"max"</span> : <span class="string">"32"</span>,</span><br><span class="line">        <span class="string">"keep_alive"</span> : <span class="string">"5m"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"listener"</span> : {</span><br><span class="line">        <span class="string">"queue_size"</span> : <span class="string">"-1"</span>,</span><br><span class="line">        <span class="string">"size"</span> : <span class="string">"8"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"index"</span> : {</span><br><span class="line">        <span class="string">"queue_size"</span> : <span class="string">"200"</span>,</span><br><span class="line">        <span class="string">"size"</span> : <span class="string">"16"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"refresh"</span> : {</span><br><span class="line">        <span class="string">"core"</span> : <span class="string">"1"</span>,</span><br><span class="line">        <span class="string">"max"</span> : <span class="string">"8"</span>,</span><br><span class="line">        <span class="string">"keep_alive"</span> : <span class="string">"5m"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"generic"</span> : {</span><br><span class="line">        <span class="string">"core"</span> : <span class="string">"4"</span>,</span><br><span class="line">        <span class="string">"max"</span> : <span class="string">"128"</span>,</span><br><span class="line">        <span class="string">"keep_alive"</span> : <span class="string">"30s"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"warmer"</span> : {</span><br><span class="line">        <span class="string">"core"</span> : <span class="string">"1"</span>,</span><br><span class="line">        <span class="string">"max"</span> : <span class="string">"5"</span>,</span><br><span class="line">        <span class="string">"keep_alive"</span> : <span class="string">"5m"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"search"</span> : {</span><br><span class="line">        <span class="string">"max_queue_size"</span> : <span class="string">"1000"</span>,</span><br><span class="line">        <span class="string">"queue_size"</span> : <span class="string">"1000"</span>,</span><br><span class="line">        <span class="string">"size"</span> : <span class="string">"25"</span>,</span><br><span class="line">        <span class="string">"auto_queue_frame_size"</span> : <span class="string">"2000"</span>,</span><br><span class="line">        <span class="string">"target_response_time"</span> : <span class="string">"1s"</span>,</span><br><span class="line">        <span class="string">"min_queue_size"</span> : <span class="string">"1000"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"fetch_shard_store"</span> : {</span><br><span class="line">        <span class="string">"core"</span> : <span class="string">"1"</span>,</span><br><span class="line">        <span class="string">"max"</span> : <span class="string">"32"</span>,</span><br><span class="line">        <span class="string">"keep_alive"</span> : <span class="string">"5m"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"flush"</span> : {</span><br><span class="line">        <span class="string">"core"</span> : <span class="string">"1"</span>,</span><br><span class="line">        <span class="string">"max"</span> : <span class="string">"5"</span>,</span><br><span class="line">        <span class="string">"keep_alive"</span> : <span class="string">"5m"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"management"</span> : {</span><br><span class="line">        <span class="string">"core"</span> : <span class="string">"1"</span>,</span><br><span class="line">        <span class="string">"max"</span> : <span class="string">"5"</span>,</span><br><span class="line">        <span class="string">"keep_alive"</span> : <span class="string">"5m"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"analyze"</span> : {</span><br><span class="line">        <span class="string">"queue_size"</span> : <span class="string">"16"</span>,</span><br><span class="line">        <span class="string">"size"</span> : <span class="string">"1"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"get"</span> : {</span><br><span class="line">        <span class="string">"queue_size"</span> : <span class="string">"1000"</span>,</span><br><span class="line">        <span class="string">"size"</span> : <span class="string">"16"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"bulk"</span> : {</span><br><span class="line">        <span class="string">"queue_size"</span> : <span class="string">"200"</span>,</span><br><span class="line">        <span class="string">"size"</span> : <span class="string">"16"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"estimated_time_interval"</span> : <span class="string">"200ms"</span>,</span><br><span class="line">      <span class="string">"write"</span> : {</span><br><span class="line">        <span class="string">"queue_size"</span> : <span class="string">"1024"</span>,</span><br><span class="line">        <span class="string">"size"</span> : <span class="string">"16"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"snapshot"</span> : {</span><br><span class="line">        <span class="string">"core"</span> : <span class="string">"1"</span>,</span><br><span class="line">        <span class="string">"max"</span> : <span class="string">"5"</span>,</span><br><span class="line">        <span class="string">"keep_alive"</span> : <span class="string">"5m"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"search_throttled"</span> : {</span><br><span class="line">        <span class="string">"max_queue_size"</span> : <span class="string">"100"</span>,</span><br><span class="line">        <span class="string">"queue_size"</span> : <span class="string">"100"</span>,</span><br><span class="line">        <span class="string">"size"</span> : <span class="string">"1"</span>,</span><br><span class="line">        <span class="string">"auto_queue_frame_size"</span> : <span class="string">"200"</span>,</span><br><span class="line">        <span class="string">"target_response_time"</span> : <span class="string">"1s"</span>,</span><br><span class="line">        <span class="string">"min_queue_size"</span> : <span class="string">"100"</span></span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"index"</span> : {</span><br><span class="line">      <span class="string">"codec"</span> : <span class="string">"default"</span>,</span><br><span class="line">      <span class="string">"store"</span> : {</span><br><span class="line">        <span class="string">"hybrid"</span> : {</span><br><span class="line">          <span class="string">"extension"</span> : [</span><br><span class="line">            <span class="string">"nvd"</span>,</span><br><span class="line">            <span class="string">"dvd"</span>,</span><br><span class="line">            <span class="string">"tim"</span>,</span><br><span class="line">            <span class="string">"cfs"</span></span><br><span class="line">          ]</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"type"</span> : <span class="string">""</span>,</span><br><span class="line">        <span class="string">"fs"</span> : {</span><br><span class="line">          <span class="string">"fs_lock"</span> : <span class="string">"native"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"preload"</span> : [ ]</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"indices_expire"</span> : {</span><br><span class="line">      <span class="string">"disable"</span> : <span class="string">"false"</span></span><br><span class="line">    },</span><br><span class="line">    <span class="string">"script"</span> : {</span><br><span class="line">      <span class="string">"allowed_contexts"</span> : [ ],</span><br><span class="line">      <span class="string">"max_compilations_rate"</span> : <span class="string">"75/5m"</span>,</span><br><span class="line">      <span class="string">"cache"</span> : {</span><br><span class="line">        <span class="string">"max_size"</span> : <span class="string">"100"</span>,</span><br><span class="line">        <span class="string">"expire"</span> : <span class="string">"0ms"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"painless"</span> : {</span><br><span class="line">        <span class="string">"regex"</span> : {</span><br><span class="line">          <span class="string">"enabled"</span> : <span class="string">"false"</span></span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      <span class="string">"max_size_in_bytes"</span> : <span class="string">"65535"</span>,</span><br><span class="line">      <span class="string">"allowed_types"</span> : [ ]</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"auth_version"</span> : <span class="string">"0"</span>,</span><br><span class="line">    <span class="string">"bucket"</span> : <span class="string">""</span>,</span><br><span class="line">    <span class="string">"node"</span> : {</span><br><span class="line">      <span class="string">"data"</span> : <span class="string">"true"</span>,</span><br><span class="line">      <span class="string">"enable_lucene_segment_infos_trace"</span> : <span class="string">"false"</span>,</span><br><span class="line">      <span class="string">"local_storage"</span> : <span class="string">"true"</span>,</span><br><span class="line">      <span class="string">"max_local_storage_nodes"</span> : <span class="string">"1"</span>,</span><br><span class="line">      <span class="string">"name"</span> : <span class="string">"1656662142001104232"</span>,</span><br><span class="line">      <span class="string">"id"</span> : {</span><br><span class="line">        <span class="string">"seed"</span> : <span class="string">"0"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"store"</span> : {</span><br><span class="line">        <span class="string">"allow_mmap"</span> : <span class="string">"true"</span>,</span><br><span class="line">        <span class="string">"allow_mmapfs"</span> : <span class="string">"true"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"attr"</span> : {</span><br><span class="line">        <span class="string">"rack"</span> : <span class="string">"cvm_4_200005"</span>,</span><br><span class="line">        <span class="string">"set"</span> : <span class="string">"200005"</span>,</span><br><span class="line">        <span class="string">"ip"</span> : <span class="string">"9.20.83.249"</span>,</span><br><span class="line">        <span class="string">"temperature"</span> : <span class="string">"hot"</span>,</span><br><span class="line">        <span class="string">"region"</span> : <span class="string">"4"</span>,</span><br><span class="line">        <span class="string">"xpack"</span> : {</span><br><span class="line">          <span class="string">"installed"</span> : <span class="string">"true"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"ml"</span> : {</span><br><span class="line">          <span class="string">"machine_memory"</span> : <span class="string">"67211829248"</span>,</span><br><span class="line">          <span class="string">"max_open_jobs"</span> : <span class="string">"20"</span>,</span><br><span class="line">          <span class="string">"enabled"</span> : <span class="string">"true"</span></span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      <span class="string">"portsfile"</span> : <span class="string">"false"</span>,</span><br><span class="line">      <span class="string">"ingest"</span> : <span class="string">"true"</span>,</span><br><span class="line">      <span class="string">"master"</span> : <span class="string">"true"</span>,</span><br><span class="line">      <span class="string">"ml"</span> : <span class="string">"true"</span></span><br><span class="line">    },</span><br><span class="line">    <span class="string">"max_running_jobs"</span> : <span class="string">"20"</span>,</span><br><span class="line">    <span class="string">"tribe"</span> : {</span><br><span class="line">      <span class="string">"name"</span> : <span class="string">""</span>,</span><br><span class="line">      <span class="string">"on_conflict"</span> : <span class="string">"any"</span>,</span><br><span class="line">      <span class="string">"blocks"</span> : {</span><br><span class="line">        <span class="string">"metadata"</span> : <span class="string">"false"</span>,</span><br><span class="line">        <span class="string">"read"</span> : {</span><br><span class="line">          <span class="string">"indices"</span> : [ ]</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"write.indices"</span> : [ ],</span><br><span class="line">        <span class="string">"write"</span> : <span class="string">"false"</span>,</span><br><span class="line">        <span class="string">"metadata.indices"</span> : [ ]</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"http"</span> : {</span><br><span class="line">      <span class="string">"cors"</span> : {</span><br><span class="line">        <span class="string">"max-age"</span> : <span class="string">"1728000"</span>,</span><br><span class="line">        <span class="string">"allow-origin"</span> : <span class="string">""</span>,</span><br><span class="line">        <span class="string">"allow-headers"</span> : <span class="string">"X-Requested-With,Content-Type,Content-Length"</span>,</span><br><span class="line">        <span class="string">"allow-credentials"</span> : <span class="string">"false"</span>,</span><br><span class="line">        <span class="string">"allow-methods"</span> : <span class="string">"OPTIONS,HEAD,GET,POST,PUT,DELETE"</span>,</span><br><span class="line">        <span class="string">"enabled"</span> : <span class="string">"false"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"max_chunk_size"</span> : <span class="string">"8kb"</span>,</span><br><span class="line">      <span class="string">"compression_level"</span> : <span class="string">"3"</span>,</span><br><span class="line">      <span class="string">"max_initial_line_length"</span> : <span class="string">"4kb"</span>,</span><br><span class="line">      <span class="string">"type"</span> : <span class="string">"security4"</span>,</span><br><span class="line">      <span class="string">"pipelining"</span> : <span class="string">"true"</span>,</span><br><span class="line">      <span class="string">"enabled"</span> : <span class="string">"true"</span>,</span><br><span class="line">      <span class="string">"type.default"</span> : <span class="string">"netty4"</span>,</span><br><span class="line">      <span class="string">"content_type"</span> : {</span><br><span class="line">        <span class="string">"required"</span> : <span class="string">"true"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"host"</span> : [ ],</span><br><span class="line">      <span class="string">"publish_port"</span> : <span class="string">"-1"</span>,</span><br><span class="line">      <span class="string">"read_timeout"</span> : <span class="string">"0ms"</span>,</span><br><span class="line">      <span class="string">"max_content_length"</span> : <span class="string">"100mb"</span>,</span><br><span class="line">      <span class="string">"netty"</span> : {</span><br><span class="line">        <span class="string">"receive_predictor_size"</span> : <span class="string">"64kb"</span>,</span><br><span class="line">        <span class="string">"max_composite_buffer_components"</span> : <span class="string">"69905"</span>,</span><br><span class="line">        <span class="string">"receive_predictor_max"</span> : <span class="string">"64kb"</span>,</span><br><span class="line">        <span class="string">"worker_count"</span> : <span class="string">"32"</span>,</span><br><span class="line">        <span class="string">"receive_predictor_min"</span> : <span class="string">"64kb"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"tcp"</span> : {</span><br><span class="line">        <span class="string">"reuse_address"</span> : <span class="string">"true"</span>,</span><br><span class="line">        <span class="string">"keep_alive"</span> : <span class="string">"true"</span>,</span><br><span class="line">        <span class="string">"receive_buffer_size"</span> : <span class="string">"-1b"</span>,</span><br><span class="line">        <span class="string">"no_delay"</span> : <span class="string">"true"</span>,</span><br><span class="line">        <span class="string">"send_buffer_size"</span> : <span class="string">"-1b"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"bind_host"</span> : [ ],</span><br><span class="line">      <span class="string">"reset_cookies"</span> : <span class="string">"false"</span>,</span><br><span class="line">      <span class="string">"max_warning_header_count"</span> : <span class="string">"-1"</span>,</span><br><span class="line">      <span class="string">"max_warning_header_size"</span> : <span class="string">"-1b"</span>,</span><br><span class="line">      <span class="string">"detailed_errors"</span> : {</span><br><span class="line">        <span class="string">"enabled"</span> : <span class="string">"true"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"port"</span> : <span class="string">"9200"</span>,</span><br><span class="line">      <span class="string">"max_header_size"</span> : <span class="string">"8kb"</span>,</span><br><span class="line">      <span class="string">"pipelining.max_events"</span> : <span class="string">"10000"</span>,</span><br><span class="line">      <span class="string">"tcp_no_delay"</span> : <span class="string">"true"</span>,</span><br><span class="line">      <span class="string">"compression"</span> : <span class="string">"true"</span>,</span><br><span class="line">      <span class="string">"publish_host"</span> : [ ]</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"region"</span> : <span class="string">""</span>,</span><br><span class="line">    <span class="string">"access_key_id"</span> : <span class="string">""</span>,</span><br><span class="line">    <span class="string">"no"</span> : {</span><br><span class="line">      <span class="string">"model"</span> : {</span><br><span class="line">        <span class="string">"state"</span> : {</span><br><span class="line">          <span class="string">"persist"</span> : <span class="string">"false"</span></span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"bootstrap"</span> : {</span><br><span class="line">      <span class="string">"memory_lock"</span> : <span class="string">"false"</span>,</span><br><span class="line">      <span class="string">"system_call_filter"</span> : <span class="string">"false"</span>,</span><br><span class="line">      <span class="string">"ctrlhandler"</span> : <span class="string">"true"</span></span><br><span class="line">    },</span><br><span class="line">    <span class="string">"network"</span> : {</span><br><span class="line">      <span class="string">"host"</span> : [</span><br><span class="line">        <span class="string">"0.0.0.0"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"tcp"</span> : {</span><br><span class="line">        <span class="string">"reuse_address"</span> : <span class="string">"true"</span>,</span><br><span class="line">        <span class="string">"keep_alive"</span> : <span class="string">"true"</span>,</span><br><span class="line">        <span class="string">"connect_timeout"</span> : <span class="string">"30s"</span>,</span><br><span class="line">        <span class="string">"receive_buffer_size"</span> : <span class="string">"-1b"</span>,</span><br><span class="line">        <span class="string">"no_delay"</span> : <span class="string">"true"</span>,</span><br><span class="line">        <span class="string">"send_buffer_size"</span> : <span class="string">"-1b"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"bind_host"</span> : [</span><br><span class="line">        <span class="string">"0.0.0.0"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"server"</span> : <span class="string">"true"</span>,</span><br><span class="line">      <span class="string">"breaker"</span> : {</span><br><span class="line">        <span class="string">"inflight_requests"</span> : {</span><br><span class="line">          <span class="string">"limit"</span> : <span class="string">"100%"</span>,</span><br><span class="line">          <span class="string">"overhead"</span> : <span class="string">"1.0"</span></span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      <span class="string">"publish_host"</span> : [</span><br><span class="line">        <span class="string">"9.20.83.249"</span></span><br><span class="line">      ]</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"pre-create_index"</span> : {</span><br><span class="line">      <span class="string">"reserved_hours"</span> : <span class="string">"2"</span>,</span><br><span class="line">      <span class="string">"enable"</span> : <span class="string">"true"</span>,</span><br><span class="line">      <span class="string">"inherit_metric"</span> : {</span><br><span class="line">        <span class="string">"enable"</span> : <span class="string">"false"</span></span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"search"</span> : {</span><br><span class="line">      <span class="string">"default_search_timeout"</span> : <span class="string">"30000ms"</span>,</span><br><span class="line">      <span class="string">"check_buckets_step_size"</span> : <span class="string">"1024"</span>,</span><br><span class="line">      <span class="string">"max_open_scroll_context"</span> : <span class="string">"2147483647"</span>,</span><br><span class="line">      <span class="string">"max_buckets"</span> : <span class="string">"-1"</span>,</span><br><span class="line">      <span class="string">"composite_aggregation"</span> : {</span><br><span class="line">        <span class="string">"early_terminal_enabled"</span> : <span class="string">"true"</span>,</span><br><span class="line">        <span class="string">"seek_after_enabled"</span> : <span class="string">"true"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"simplify_search_results"</span> : <span class="string">"false"</span>,</span><br><span class="line">      <span class="string">"keep_alive_interval"</span> : <span class="string">"1m"</span>,</span><br><span class="line">      <span class="string">"remote"</span> : {</span><br><span class="line">        <span class="string">"node"</span> : {</span><br><span class="line">          <span class="string">"attr"</span> : <span class="string">""</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"initial_connect_timeout"</span> : <span class="string">"30s"</span>,</span><br><span class="line">        <span class="string">"connect"</span> : <span class="string">"true"</span>,</span><br><span class="line">        <span class="string">"connections_per_cluster"</span> : <span class="string">"3"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"max_keep_alive"</span> : <span class="string">"24h"</span>,</span><br><span class="line">      <span class="string">"composite_aggregations"</span> : {</span><br><span class="line">        <span class="string">"use_global_ordinal"</span> : <span class="string">"true"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"highlight"</span> : {</span><br><span class="line">        <span class="string">"term_vector_multi_value"</span> : <span class="string">"true"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"default_allow_partial_results"</span> : <span class="string">"true"</span>,</span><br><span class="line">      <span class="string">"low_level_cancellation"</span> : <span class="string">"false"</span>,</span><br><span class="line">      <span class="string">"simplify_aggregation_results"</span> : <span class="string">"false"</span>,</span><br><span class="line">      <span class="string">"default_search_rpc_timeout"</span> : <span class="string">"30000ms"</span>,</span><br><span class="line">      <span class="string">"bucket_expansion_ratio"</span> : <span class="string">"10"</span>,</span><br><span class="line">      <span class="string">"allow_parent_breaker_partial_results"</span> : <span class="string">"false"</span>,</span><br><span class="line">      <span class="string">"default_keep_alive"</span> : <span class="string">"5m"</span></span><br><span class="line">    },</span><br><span class="line">    <span class="string">"security"</span> : {</span><br><span class="line">      <span class="string">"manager"</span> : {</span><br><span class="line">        <span class="string">"filter_bad_defaults"</span> : <span class="string">"true"</span></span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"root"</span> : {</span><br><span class="line">      <span class="string">"routing"</span> : {</span><br><span class="line">        <span class="string">"rebalance"</span> : {</span><br><span class="line">          <span class="string">"enable"</span> : <span class="string">"ALL"</span></span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"client"</span> : {</span><br><span class="line">      <span class="string">"type"</span> : <span class="string">"node"</span>,</span><br><span class="line">      <span class="string">"transport"</span> : {</span><br><span class="line">        <span class="string">"ignore_cluster_name"</span> : <span class="string">"false"</span>,</span><br><span class="line">        <span class="string">"nodes_sampler_interval"</span> : <span class="string">"5s"</span>,</span><br><span class="line">        <span class="string">"sniff"</span> : <span class="string">"false"</span>,</span><br><span class="line">        <span class="string">"ping_timeout"</span> : <span class="string">"5s"</span></span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"table_version"</span> : <span class="string">"0"</span>,</span><br><span class="line">    <span class="string">"table"</span> : <span class="string">""</span>,</span><br><span class="line">    <span class="string">"xpack"</span> : {</span><br><span class="line">      <span class="string">"watcher"</span> : {</span><br><span class="line">        <span class="string">"execution"</span> : {</span><br><span class="line">          <span class="string">"scroll"</span> : {</span><br><span class="line">            <span class="string">"size"</span> : <span class="string">"0"</span>,</span><br><span class="line">            <span class="string">"timeout"</span> : <span class="string">""</span></span><br><span class="line">          },</span><br><span class="line">          <span class="string">"default_throttle_period"</span> : <span class="string">"5s"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"internal"</span> : {</span><br><span class="line">          <span class="string">"ops"</span> : {</span><br><span class="line">            <span class="string">"bulk"</span> : {</span><br><span class="line">              <span class="string">"default_timeout"</span> : <span class="string">""</span></span><br><span class="line">            },</span><br><span class="line">            <span class="string">"index"</span> : {</span><br><span class="line">              <span class="string">"default_timeout"</span> : <span class="string">""</span></span><br><span class="line">            },</span><br><span class="line">            <span class="string">"search"</span> : {</span><br><span class="line">              <span class="string">"default_timeout"</span> : <span class="string">""</span></span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"thread_pool"</span> : {</span><br><span class="line">          <span class="string">"queue_size"</span> : <span class="string">"1000"</span>,</span><br><span class="line">          <span class="string">"size"</span> : <span class="string">"50"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"index"</span> : {</span><br><span class="line">          <span class="string">"rest"</span> : {</span><br><span class="line">            <span class="string">"direct_access"</span> : <span class="string">""</span></span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"history"</span> : {</span><br><span class="line">          <span class="string">"cleaner_service"</span> : {</span><br><span class="line">            <span class="string">"enabled"</span> : <span class="string">"true"</span></span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"trigger"</span> : {</span><br><span class="line">          <span class="string">"schedule"</span> : {</span><br><span class="line">            <span class="string">"ticker"</span> : {</span><br><span class="line">              <span class="string">"tick_interval"</span> : <span class="string">"500ms"</span></span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"enabled"</span> : <span class="string">"true"</span>,</span><br><span class="line">        <span class="string">"input"</span> : {</span><br><span class="line">          <span class="string">"search"</span> : {</span><br><span class="line">            <span class="string">"default_timeout"</span> : <span class="string">""</span></span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"encrypt_sensitive_data"</span> : <span class="string">"false"</span>,</span><br><span class="line">        <span class="string">"transform"</span> : {</span><br><span class="line">          <span class="string">"search"</span> : {</span><br><span class="line">            <span class="string">"default_timeout"</span> : <span class="string">""</span></span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"stop"</span> : {</span><br><span class="line">          <span class="string">"timeout"</span> : <span class="string">"30s"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"watch"</span> : {</span><br><span class="line">          <span class="string">"scroll"</span> : {</span><br><span class="line">            <span class="string">"size"</span> : <span class="string">"0"</span></span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"require_manual_start"</span> : <span class="string">"false"</span>,</span><br><span class="line">        <span class="string">"bulk"</span> : {</span><br><span class="line">          <span class="string">"concurrent_requests"</span> : <span class="string">"0"</span>,</span><br><span class="line">          <span class="string">"flush_interval"</span> : <span class="string">"1s"</span>,</span><br><span class="line">          <span class="string">"size"</span> : <span class="string">"1mb"</span>,</span><br><span class="line">          <span class="string">"actions"</span> : <span class="string">"1"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"actions"</span> : {</span><br><span class="line">          <span class="string">"bulk"</span> : {</span><br><span class="line">            <span class="string">"default_timeout"</span> : <span class="string">""</span></span><br><span class="line">          },</span><br><span class="line">          <span class="string">"index"</span> : {</span><br><span class="line">            <span class="string">"default_timeout"</span> : <span class="string">""</span></span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      <span class="string">"ilm"</span> : {</span><br><span class="line">        <span class="string">"enabled"</span> : <span class="string">"true"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"monitoring"</span> : {</span><br><span class="line">        <span class="string">"collection"</span> : {</span><br><span class="line">          <span class="string">"cluster"</span> : {</span><br><span class="line">            <span class="string">"stats"</span> : {</span><br><span class="line">              <span class="string">"timeout"</span> : <span class="string">"10s"</span></span><br><span class="line">            }</span><br><span class="line">          },</span><br><span class="line">          <span class="string">"node"</span> : {</span><br><span class="line">            <span class="string">"stats"</span> : {</span><br><span class="line">              <span class="string">"timeout"</span> : <span class="string">"10s"</span></span><br><span class="line">            }</span><br><span class="line">          },</span><br><span class="line">          <span class="string">"indices"</span> : [ ],</span><br><span class="line">          <span class="string">"ccr"</span> : {</span><br><span class="line">            <span class="string">"stats"</span> : {</span><br><span class="line">              <span class="string">"timeout"</span> : <span class="string">"10s"</span></span><br><span class="line">            }</span><br><span class="line">          },</span><br><span class="line">          <span class="string">"index"</span> : {</span><br><span class="line">            <span class="string">"stats"</span> : {</span><br><span class="line">              <span class="string">"timeout"</span> : <span class="string">"10s"</span></span><br><span class="line">            },</span><br><span class="line">            <span class="string">"recovery"</span> : {</span><br><span class="line">              <span class="string">"active_only"</span> : <span class="string">"false"</span>,</span><br><span class="line">              <span class="string">"timeout"</span> : <span class="string">"10s"</span></span><br><span class="line">            }</span><br><span class="line">          },</span><br><span class="line">          <span class="string">"interval"</span> : <span class="string">"60s"</span>,</span><br><span class="line">          <span class="string">"enabled"</span> : <span class="string">"true"</span>,</span><br><span class="line">          <span class="string">"ml"</span> : {</span><br><span class="line">            <span class="string">"job"</span> : {</span><br><span class="line">              <span class="string">"stats"</span> : {</span><br><span class="line">                <span class="string">"timeout"</span> : <span class="string">"10s"</span></span><br><span class="line">              }</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"history"</span> : {</span><br><span class="line">          <span class="string">"duration"</span> : <span class="string">"168h"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"elasticsearch"</span> : {</span><br><span class="line">          <span class="string">"collection"</span> : {</span><br><span class="line">            <span class="string">"enabled"</span> : <span class="string">"true"</span></span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"enabled"</span> : <span class="string">"true"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"graph"</span> : {</span><br><span class="line">        <span class="string">"enabled"</span> : <span class="string">"true"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"rollup"</span> : {</span><br><span class="line">        <span class="string">"enabled"</span> : <span class="string">"true"</span>,</span><br><span class="line">        <span class="string">"task_thread_pool"</span> : {</span><br><span class="line">          <span class="string">"queue_size"</span> : <span class="string">"4"</span>,</span><br><span class="line">          <span class="string">"size"</span> : <span class="string">"4"</span></span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      <span class="string">"sql"</span> : {</span><br><span class="line">        <span class="string">"enabled"</span> : <span class="string">"true"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"license"</span> : {</span><br><span class="line">        <span class="string">"self_generated"</span> : {</span><br><span class="line">          <span class="string">"type"</span> : <span class="string">"basic"</span></span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      <span class="string">"logstash"</span> : {</span><br><span class="line">        <span class="string">"enabled"</span> : <span class="string">"true"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"notification"</span> : {</span><br><span class="line">        <span class="string">"hipchat"</span> : {</span><br><span class="line">          <span class="string">"host"</span> : <span class="string">""</span>,</span><br><span class="line">          <span class="string">"port"</span> : <span class="string">"443"</span>,</span><br><span class="line">          <span class="string">"default_account"</span> : <span class="string">""</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"pagerduty"</span> : {</span><br><span class="line">          <span class="string">"default_account"</span> : <span class="string">""</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"email"</span> : {</span><br><span class="line">          <span class="string">"default_account"</span> : <span class="string">""</span>,</span><br><span class="line">          <span class="string">"html"</span> : {</span><br><span class="line">            <span class="string">"sanitization"</span> : {</span><br><span class="line">              <span class="string">"allow"</span> : [</span><br><span class="line">                <span class="string">"body"</span>,</span><br><span class="line">                <span class="string">"head"</span>,</span><br><span class="line">                <span class="string">"_tables"</span>,</span><br><span class="line">                <span class="string">"_links"</span>,</span><br><span class="line">                <span class="string">"_blocks"</span>,</span><br><span class="line">                <span class="string">"_formatting"</span>,</span><br><span class="line">                <span class="string">"img:embedded"</span></span><br><span class="line">              ],</span><br><span class="line">              <span class="string">"disallow"</span> : [ ],</span><br><span class="line">              <span class="string">"enabled"</span> : <span class="string">"true"</span></span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"reporting"</span> : {</span><br><span class="line">          <span class="string">"retries"</span> : <span class="string">"40"</span>,</span><br><span class="line">          <span class="string">"interval"</span> : <span class="string">"15s"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"jira"</span> : {</span><br><span class="line">          <span class="string">"default_account"</span> : <span class="string">""</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"slack"</span> : {</span><br><span class="line">          <span class="string">"default_account"</span> : <span class="string">""</span></span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      <span class="string">"security"</span> : {</span><br><span class="line">        <span class="string">"dls_fls"</span> : {</span><br><span class="line">          <span class="string">"enabled"</span> : <span class="string">"true"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"transport"</span> : {</span><br><span class="line">          <span class="string">"filter"</span> : {</span><br><span class="line">            <span class="string">"allow"</span> : [ ],</span><br><span class="line">            <span class="string">"deny"</span> : [ ],</span><br><span class="line">            <span class="string">"enabled"</span> : <span class="string">"true"</span></span><br><span class="line">          },</span><br><span class="line">          <span class="string">"ssl"</span> : {</span><br><span class="line">            <span class="string">"enabled"</span> : <span class="string">"true"</span></span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"enabled"</span> : <span class="string">"true"</span>,</span><br><span class="line">        <span class="string">"filter"</span> : {</span><br><span class="line">          <span class="string">"always_allow_bound_address"</span> : <span class="string">"true"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"encryption"</span> : {</span><br><span class="line">          <span class="string">"algorithm"</span> : <span class="string">"AES/CTR/NoPadding"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"audit"</span> : {</span><br><span class="line">          <span class="string">"outputs"</span> : [</span><br><span class="line">            <span class="string">"logfile"</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="string">"index"</span> : {</span><br><span class="line">            <span class="string">"bulk_size"</span> : <span class="string">"1000"</span>,</span><br><span class="line">            <span class="string">"rollover"</span> : <span class="string">"DAILY"</span>,</span><br><span class="line">            <span class="string">"flush_interval"</span> : <span class="string">"1s"</span>,</span><br><span class="line">            <span class="string">"events"</span> : {</span><br><span class="line">              <span class="string">"emit_request_body"</span> : <span class="string">"false"</span>,</span><br><span class="line">              <span class="string">"include"</span> : [</span><br><span class="line">                <span class="string">"ACCESS_DENIED"</span>,</span><br><span class="line">                <span class="string">"ACCESS_GRANTED"</span>,</span><br><span class="line">                <span class="string">"ANONYMOUS_ACCESS_DENIED"</span>,</span><br><span class="line">                <span class="string">"AUTHENTICATION_FAILED"</span>,</span><br><span class="line">                <span class="string">"REALM_AUTHENTICATION_FAILED"</span>,</span><br><span class="line">                <span class="string">"CONNECTION_DENIED"</span>,</span><br><span class="line">                <span class="string">"CONNECTION_GRANTED"</span>,</span><br><span class="line">                <span class="string">"TAMPERED_REQUEST"</span>,</span><br><span class="line">                <span class="string">"RUN_AS_DENIED"</span>,</span><br><span class="line">                <span class="string">"RUN_AS_GRANTED"</span>,</span><br><span class="line">                <span class="string">"AUTHENTICATION_SUCCESS"</span></span><br><span class="line">              ],</span><br><span class="line">              <span class="string">"exclude"</span> : [ ]</span><br><span class="line">            },</span><br><span class="line">            <span class="string">"queue_max_size"</span> : <span class="string">"10000"</span></span><br><span class="line">          },</span><br><span class="line">          <span class="string">"enabled"</span> : <span class="string">"false"</span>,</span><br><span class="line">          <span class="string">"logfile"</span> : {</span><br><span class="line">            <span class="string">"emit_node_id"</span> : <span class="string">"true"</span>,</span><br><span class="line">            <span class="string">"emit_node_host_name"</span> : <span class="string">"false"</span>,</span><br><span class="line">            <span class="string">"emit_node_name"</span> : <span class="string">"true"</span>,</span><br><span class="line">            <span class="string">"events"</span> : {</span><br><span class="line">              <span class="string">"emit_request_body"</span> : <span class="string">"false"</span>,</span><br><span class="line">              <span class="string">"include"</span> : [</span><br><span class="line">                <span class="string">"ACCESS_DENIED"</span>,</span><br><span class="line">                <span class="string">"ACCESS_GRANTED"</span>,</span><br><span class="line">                <span class="string">"ANONYMOUS_ACCESS_DENIED"</span>,</span><br><span class="line">                <span class="string">"AUTHENTICATION_FAILED"</span>,</span><br><span class="line">                <span class="string">"CONNECTION_DENIED"</span>,</span><br><span class="line">                <span class="string">"TAMPERED_REQUEST"</span>,</span><br><span class="line">                <span class="string">"RUN_AS_DENIED"</span>,</span><br><span class="line">                <span class="string">"RUN_AS_GRANTED"</span></span><br><span class="line">              ],</span><br><span class="line">              <span class="string">"exclude"</span> : [ ]</span><br><span class="line">            },</span><br><span class="line">            <span class="string">"prefix"</span> : {</span><br><span class="line">              <span class="string">"emit_node_host_name"</span> : <span class="string">"false"</span>,</span><br><span class="line">              <span class="string">"emit_node_name"</span> : <span class="string">"true"</span>,</span><br><span class="line">              <span class="string">"emit_node_host_address"</span> : <span class="string">"false"</span></span><br><span class="line">            },</span><br><span class="line">            <span class="string">"emit_node_host_address"</span> : <span class="string">"false"</span></span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"authc"</span> : {</span><br><span class="line">          <span class="string">"password_hashing"</span> : {</span><br><span class="line">            <span class="string">"algorithm"</span> : <span class="string">"bcrypt"</span></span><br><span class="line">          },</span><br><span class="line">          <span class="string">"success_cache"</span> : {</span><br><span class="line">            <span class="string">"size"</span> : <span class="string">"10000"</span>,</span><br><span class="line">            <span class="string">"enabled"</span> : <span class="string">"false"</span>,</span><br><span class="line">            <span class="string">"expire_after_access"</span> : <span class="string">"1h"</span></span><br><span class="line">          },</span><br><span class="line">          <span class="string">"api_key"</span> : {</span><br><span class="line">            <span class="string">"cache"</span> : {</span><br><span class="line">              <span class="string">"hash_algo"</span> : <span class="string">"ssha256"</span>,</span><br><span class="line">              <span class="string">"max_keys"</span> : <span class="string">"10000"</span>,</span><br><span class="line">              <span class="string">"ttl"</span> : <span class="string">"24h"</span></span><br><span class="line">            },</span><br><span class="line">            <span class="string">"delete"</span> : {</span><br><span class="line">              <span class="string">"interval"</span> : <span class="string">"24h"</span>,</span><br><span class="line">              <span class="string">"timeout"</span> : <span class="string">"-1"</span></span><br><span class="line">            },</span><br><span class="line">            <span class="string">"enabled"</span> : <span class="string">"false"</span>,</span><br><span class="line">            <span class="string">"hashing"</span> : {</span><br><span class="line">              <span class="string">"algorithm"</span> : <span class="string">"pbkdf2"</span></span><br><span class="line">            }</span><br><span class="line">          },</span><br><span class="line">          <span class="string">"anonymous"</span> : {</span><br><span class="line">            <span class="string">"authz_exception"</span> : <span class="string">"true"</span>,</span><br><span class="line">            <span class="string">"roles"</span> : [ ],</span><br><span class="line">            <span class="string">"username"</span> : <span class="string">"_anonymous"</span></span><br><span class="line">          },</span><br><span class="line">          <span class="string">"run_as"</span> : {</span><br><span class="line">            <span class="string">"enabled"</span> : <span class="string">"true"</span></span><br><span class="line">          },</span><br><span class="line">          <span class="string">"reserved_realm"</span> : {</span><br><span class="line">            <span class="string">"enabled"</span> : <span class="string">"false"</span></span><br><span class="line">          },</span><br><span class="line">          <span class="string">"token"</span> : {</span><br><span class="line">            <span class="string">"compat"</span> : {</span><br><span class="line">              <span class="string">"enabled"</span> : <span class="string">"false"</span></span><br><span class="line">            },</span><br><span class="line">            <span class="string">"delete"</span> : {</span><br><span class="line">              <span class="string">"interval"</span> : <span class="string">"30m"</span>,</span><br><span class="line">              <span class="string">"timeout"</span> : <span class="string">"-1"</span></span><br><span class="line">            },</span><br><span class="line">            <span class="string">"enabled"</span> : <span class="string">"false"</span>,</span><br><span class="line">            <span class="string">"thread_pool"</span> : {</span><br><span class="line">              <span class="string">"queue_size"</span> : <span class="string">"1000"</span>,</span><br><span class="line">              <span class="string">"size"</span> : <span class="string">"1"</span></span><br><span class="line">            },</span><br><span class="line">            <span class="string">"timeout"</span> : <span class="string">"20m"</span></span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"fips_mode"</span> : {</span><br><span class="line">          <span class="string">"enabled"</span> : <span class="string">"false"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"encryption_key"</span> : {</span><br><span class="line">          <span class="string">"length"</span> : <span class="string">"128"</span>,</span><br><span class="line">          <span class="string">"algorithm"</span> : <span class="string">"AES"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"http"</span> : {</span><br><span class="line">          <span class="string">"filter"</span> : {</span><br><span class="line">            <span class="string">"allow"</span> : [ ],</span><br><span class="line">            <span class="string">"deny"</span> : [ ],</span><br><span class="line">            <span class="string">"enabled"</span> : <span class="string">"true"</span></span><br><span class="line">          },</span><br><span class="line">          <span class="string">"ssl"</span> : {</span><br><span class="line">            <span class="string">"enabled"</span> : <span class="string">"false"</span></span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"automata"</span> : {</span><br><span class="line">          <span class="string">"max_determinized_states"</span> : <span class="string">"100000"</span>,</span><br><span class="line">          <span class="string">"cache"</span> : {</span><br><span class="line">            <span class="string">"size"</span> : <span class="string">"10000"</span>,</span><br><span class="line">            <span class="string">"ttl"</span> : <span class="string">"48h"</span>,</span><br><span class="line">            <span class="string">"enabled"</span> : <span class="string">"true"</span></span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"user"</span> : null,</span><br><span class="line">        <span class="string">"authz"</span> : {</span><br><span class="line">          <span class="string">"store"</span> : {</span><br><span class="line">            <span class="string">"roles"</span> : {</span><br><span class="line">              <span class="string">"index"</span> : {</span><br><span class="line">                <span class="string">"cache"</span> : {</span><br><span class="line">                  <span class="string">"ttl"</span> : <span class="string">"20m"</span>,</span><br><span class="line">                  <span class="string">"max_size"</span> : <span class="string">"10000"</span></span><br><span class="line">                }</span><br><span class="line">              },</span><br><span class="line">              <span class="string">"auth_indices_cache"</span> : {</span><br><span class="line">                <span class="string">"enable"</span> : <span class="string">"true"</span></span><br><span class="line">              },</span><br><span class="line">              <span class="string">"cache"</span> : {</span><br><span class="line">                <span class="string">"max_size"</span> : <span class="string">"10000"</span></span><br><span class="line">              },</span><br><span class="line">              <span class="string">"negative_lookup_cache"</span> : {</span><br><span class="line">                <span class="string">"max_size"</span> : <span class="string">"10000"</span></span><br><span class="line">              },</span><br><span class="line">              <span class="string">"max_auth_indices_cache_count"</span> : <span class="string">"10000"</span>,</span><br><span class="line">              <span class="string">"field_permissions"</span> : {</span><br><span class="line">                <span class="string">"cache"</span> : {</span><br><span class="line">                  <span class="string">"max_size_in_bytes"</span> : <span class="string">"104857600"</span></span><br><span class="line">                }</span><br><span class="line">              }</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      <span class="string">"ccr"</span> : {</span><br><span class="line">        <span class="string">"enabled"</span> : <span class="string">"true"</span>,</span><br><span class="line">        <span class="string">"ccr_thread_pool"</span> : {</span><br><span class="line">          <span class="string">"queue_size"</span> : <span class="string">"100"</span>,</span><br><span class="line">          <span class="string">"size"</span> : <span class="string">"32"</span></span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      <span class="string">"http"</span> : {</span><br><span class="line">        <span class="string">"default_connection_timeout"</span> : <span class="string">"10s"</span>,</span><br><span class="line">        <span class="string">"proxy"</span> : {</span><br><span class="line">          <span class="string">"host"</span> : <span class="string">""</span>,</span><br><span class="line">          <span class="string">"scheme"</span> : <span class="string">""</span>,</span><br><span class="line">          <span class="string">"port"</span> : <span class="string">"0"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"default_read_timeout"</span> : <span class="string">"10s"</span>,</span><br><span class="line">        <span class="string">"max_response_size"</span> : <span class="string">"10mb"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"ml"</span> : {</span><br><span class="line">        <span class="string">"utility_thread_pool"</span> : {</span><br><span class="line">          <span class="string">"queue_size"</span> : <span class="string">"500"</span>,</span><br><span class="line">          <span class="string">"size"</span> : <span class="string">"80"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"max_anomaly_records"</span> : <span class="string">"500"</span>,</span><br><span class="line">        <span class="string">"enable_config_migration"</span> : <span class="string">"true"</span>,</span><br><span class="line">        <span class="string">"max_open_jobs"</span> : <span class="string">"20"</span>,</span><br><span class="line">        <span class="string">"min_disk_space_off_heap"</span> : <span class="string">"5gb"</span>,</span><br><span class="line">        <span class="string">"node_concurrent_job_allocations"</span> : <span class="string">"2"</span>,</span><br><span class="line">        <span class="string">"max_model_memory_limit"</span> : <span class="string">"0b"</span>,</span><br><span class="line">        <span class="string">"enabled"</span> : <span class="string">"true"</span>,</span><br><span class="line">        <span class="string">"max_lazy_ml_nodes"</span> : <span class="string">"0"</span>,</span><br><span class="line">        <span class="string">"max_machine_memory_percent"</span> : <span class="string">"30"</span>,</span><br><span class="line">        <span class="string">"autodetect_process"</span> : <span class="string">"true"</span>,</span><br><span class="line">        <span class="string">"datafeed_thread_pool"</span> : {</span><br><span class="line">          <span class="string">"queue_size"</span> : <span class="string">"200"</span>,</span><br><span class="line">          <span class="string">"size"</span> : <span class="string">"20"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"process_connect_timeout"</span> : <span class="string">"10s"</span>,</span><br><span class="line">        <span class="string">"autodetect_thread_pool"</span> : {</span><br><span class="line">          <span class="string">"queue_size"</span> : <span class="string">"80"</span>,</span><br><span class="line">          <span class="string">"size"</span> : <span class="string">"80"</span></span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"auth.disable"</span> : <span class="string">"true"</span>,</span><br><span class="line">    <span class="string">"netty"</span> : {</span><br><span class="line">      <span class="string">"breaker"</span> : {</span><br><span class="line">        <span class="string">"limit"</span> : <span class="string">"95%"</span>,</span><br><span class="line">        <span class="string">"type"</span> : <span class="string">"memory"</span>,</span><br><span class="line">        <span class="string">"enabled"</span> : <span class="string">"true"</span>,</span><br><span class="line">        <span class="string">"timeout"</span> : <span class="string">"30000ms"</span></span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"rest"</span> : {</span><br><span class="line">      <span class="string">"action"</span> : {</span><br><span class="line">        <span class="string">"multi"</span> : {</span><br><span class="line">          <span class="string">"allow_explicit_index"</span> : <span class="string">"true"</span></span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"max"</span> : {</span><br><span class="line">      <span class="string">"anomaly"</span> : {</span><br><span class="line">        <span class="string">"records"</span> : <span class="string">"500"</span></span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"base_path"</span> : <span class="string">""</span>,</span><br><span class="line">    <span class="string">"monitor"</span> : {</span><br><span class="line">      <span class="string">"jvm"</span> : {</span><br><span class="line">        <span class="string">"gc"</span> : {</span><br><span class="line">          <span class="string">"enabled"</span> : <span class="string">"true"</span>,</span><br><span class="line">          <span class="string">"overhead"</span> : {</span><br><span class="line">            <span class="string">"warn"</span> : <span class="string">"50"</span>,</span><br><span class="line">            <span class="string">"debug"</span> : <span class="string">"10"</span>,</span><br><span class="line">            <span class="string">"info"</span> : <span class="string">"25"</span></span><br><span class="line">          },</span><br><span class="line">          <span class="string">"refresh_interval"</span> : <span class="string">"1s"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"refresh_interval"</span> : <span class="string">"1s"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"process"</span> : {</span><br><span class="line">        <span class="string">"refresh_interval"</span> : <span class="string">"1s"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"os"</span> : {</span><br><span class="line">        <span class="string">"refresh_interval"</span> : <span class="string">"1s"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"fs"</span> : {</span><br><span class="line">        <span class="string">"refresh_interval"</span> : <span class="string">"1s"</span></span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"transport"</span> : {</span><br><span class="line">      <span class="string">"tcp"</span> : {</span><br><span class="line">        <span class="string">"reuse_address"</span> : <span class="string">"true"</span>,</span><br><span class="line">        <span class="string">"connect_timeout"</span> : <span class="string">"30s"</span>,</span><br><span class="line">        <span class="string">"compress"</span> : <span class="string">"false"</span>,</span><br><span class="line">        <span class="string">"port"</span> : <span class="string">"9300"</span>,</span><br><span class="line">        <span class="string">"no_delay"</span> : <span class="string">"true"</span>,</span><br><span class="line">        <span class="string">"keep_alive"</span> : <span class="string">"true"</span>,</span><br><span class="line">        <span class="string">"receive_buffer_size"</span> : <span class="string">"-1b"</span>,</span><br><span class="line">        <span class="string">"send_buffer_size"</span> : <span class="string">"-1b"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"bind_host"</span> : [ ],</span><br><span class="line">      <span class="string">"connect_timeout"</span> : <span class="string">"30s"</span>,</span><br><span class="line">      <span class="string">"compress"</span> : <span class="string">"false"</span>,</span><br><span class="line">      <span class="string">"ping_schedule"</span> : <span class="string">"-1"</span>,</span><br><span class="line">      <span class="string">"connections_per_node"</span> : {</span><br><span class="line">        <span class="string">"recovery"</span> : <span class="string">"2"</span>,</span><br><span class="line">        <span class="string">"state"</span> : <span class="string">"1"</span>,</span><br><span class="line">        <span class="string">"bulk"</span> : <span class="string">"3"</span>,</span><br><span class="line">        <span class="string">"reg"</span> : <span class="string">"6"</span>,</span><br><span class="line">        <span class="string">"ping"</span> : <span class="string">"1"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"tracer"</span> : {</span><br><span class="line">        <span class="string">"include"</span> : [ ],</span><br><span class="line">        <span class="string">"exclude"</span> : [</span><br><span class="line">          <span class="string">"internal:discovery/zen/fd*"</span>,</span><br><span class="line">          <span class="string">"cluster:monitor/nodes/liveness"</span></span><br><span class="line">        ]</span><br><span class="line">      },</span><br><span class="line">      <span class="string">"type"</span> : <span class="string">"security4"</span>,</span><br><span class="line">      <span class="string">"type.default"</span> : <span class="string">"netty4"</span>,</span><br><span class="line">      <span class="string">"features"</span> : {</span><br><span class="line">        <span class="string">"x-pack"</span> : <span class="string">"true"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"port"</span> : <span class="string">"9300"</span>,</span><br><span class="line">      <span class="string">"host"</span> : [ ],</span><br><span class="line">      <span class="string">"publish_port"</span> : <span class="string">"-1"</span>,</span><br><span class="line">      <span class="string">"connection"</span> : {</span><br><span class="line">        <span class="string">"max_corrupted_msg_bytes"</span> : <span class="string">"512"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"tcp_no_delay"</span> : <span class="string">"true"</span>,</span><br><span class="line">      <span class="string">"publish_host"</span> : [ ],</span><br><span class="line">      <span class="string">"netty"</span> : {</span><br><span class="line">        <span class="string">"receive_predictor_size"</span> : <span class="string">"64kb"</span>,</span><br><span class="line">        <span class="string">"receive_predictor_max"</span> : <span class="string">"64kb"</span>,</span><br><span class="line">        <span class="string">"worker_count"</span> : <span class="string">"32"</span>,</span><br><span class="line">        <span class="string">"receive_predictor_min"</span> : <span class="string">"64kb"</span>,</span><br><span class="line">        <span class="string">"boss_count"</span> : <span class="string">"1"</span></span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"preferred_master_name"</span> : <span class="string">""</span>,</span><br><span class="line">    <span class="string">"indices"</span> : {</span><br><span class="line">      <span class="string">"cache"</span> : {</span><br><span class="line">        <span class="string">"cleanup_interval"</span> : <span class="string">"1m"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"mapping"</span> : {</span><br><span class="line">        <span class="string">"dynamic_timeout"</span> : <span class="string">"30s"</span>,</span><br><span class="line">        <span class="string">"put"</span> : {</span><br><span class="line">          <span class="string">"priority"</span> : <span class="string">"URGENT"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"max_in_flight_updates"</span> : <span class="string">"10"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"memory"</span> : {</span><br><span class="line">        <span class="string">"interval"</span> : <span class="string">"5s"</span>,</span><br><span class="line">        <span class="string">"max_index_buffer_size"</span> : <span class="string">"-1"</span>,</span><br><span class="line">        <span class="string">"shard_inactive_time"</span> : <span class="string">"5m"</span>,</span><br><span class="line">        <span class="string">"index_buffer_size"</span> : <span class="string">"15%"</span>,</span><br><span class="line">        <span class="string">"min_index_buffer_size"</span> : <span class="string">"48mb"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"breaker"</span> : {</span><br><span class="line">        <span class="string">"request"</span> : {</span><br><span class="line">          <span class="string">"limit"</span> : <span class="string">"60%"</span>,</span><br><span class="line">          <span class="string">"type"</span> : <span class="string">"memory"</span>,</span><br><span class="line">          <span class="string">"overhead"</span> : <span class="string">"1.0"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"search"</span> : {</span><br><span class="line">          <span class="string">"throttle"</span> : <span class="string">"90%"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"total"</span> : {</span><br><span class="line">          <span class="string">"limit"</span> : <span class="string">"90%"</span>,</span><br><span class="line">          <span class="string">"use_real_memory"</span> : <span class="string">"true"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"fielddata"</span> : {</span><br><span class="line">          <span class="string">"limit"</span> : <span class="string">"20%"</span>,</span><br><span class="line">          <span class="string">"type"</span> : <span class="string">"memory"</span>,</span><br><span class="line">          <span class="string">"overhead"</span> : <span class="string">"1.03"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"single_request"</span> : {</span><br><span class="line">          <span class="string">"limit"</span> : <span class="string">"20%"</span>,</span><br><span class="line">          <span class="string">"type"</span> : <span class="string">"memory"</span>,</span><br><span class="line">          <span class="string">"overhead"</span> : <span class="string">"1.0"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"accounting"</span> : {</span><br><span class="line">          <span class="string">"limit"</span> : <span class="string">"100%"</span>,</span><br><span class="line">          <span class="string">"overhead"</span> : <span class="string">"1.0"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"bulk"</span> : {</span><br><span class="line">          <span class="string">"throttle"</span> : <span class="string">"90%"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"type"</span> : <span class="string">"hierarchy"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"segment_memory"</span> : {</span><br><span class="line">        <span class="string">"off_heap"</span> : {</span><br><span class="line">          <span class="string">"segment_count"</span> : <span class="string">"1"</span>,</span><br><span class="line">          <span class="string">"min_size"</span> : <span class="string">"500mb"</span>,</span><br><span class="line">          <span class="string">"size"</span> : <span class="string">"500mb"</span>,</span><br><span class="line">          <span class="string">"enable"</span> : <span class="string">"false"</span>,</span><br><span class="line">          <span class="string">"max_size"</span> : <span class="string">"32gb"</span>,</span><br><span class="line">          <span class="string">"min_value_size"</span> : <span class="string">"512"</span></span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      <span class="string">"query"</span> : {</span><br><span class="line">        <span class="string">"bool"</span> : {</span><br><span class="line">          <span class="string">"max_clause_count"</span> : <span class="string">"1024"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"query_string"</span> : {</span><br><span class="line">          <span class="string">"analyze_wildcard"</span> : <span class="string">"false"</span>,</span><br><span class="line">          <span class="string">"allowLeadingWildcard"</span> : <span class="string">"true"</span></span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      <span class="string">"admin"</span> : {</span><br><span class="line">        <span class="string">"filtered_fields"</span> : <span class="string">"true"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"allow_multi_types"</span> : <span class="string">"false"</span>,</span><br><span class="line">      <span class="string">"recovery"</span> : {</span><br><span class="line">        <span class="string">"recovery_activity_timeout"</span> : <span class="string">"1800000ms"</span>,</span><br><span class="line">        <span class="string">"retry_delay_network"</span> : <span class="string">"5s"</span>,</span><br><span class="line">        <span class="string">"internal_action_timeout"</span> : <span class="string">"15m"</span>,</span><br><span class="line">        <span class="string">"retry_delay_state_sync"</span> : <span class="string">"500ms"</span>,</span><br><span class="line">        <span class="string">"internal_action_long_timeout"</span> : <span class="string">"1800000ms"</span>,</span><br><span class="line">        <span class="string">"max_concurrent_file_chunks"</span> : <span class="string">"1"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"requests"</span> : {</span><br><span class="line">        <span class="string">"cache"</span> : {</span><br><span class="line">          <span class="string">"size"</span> : <span class="string">"1%"</span>,</span><br><span class="line">          <span class="string">"expire"</span> : <span class="string">"0ms"</span></span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      <span class="string">"store"</span> : {</span><br><span class="line">        <span class="string">"delete"</span> : {</span><br><span class="line">          <span class="string">"shard"</span> : {</span><br><span class="line">            <span class="string">"timeout"</span> : <span class="string">"30s"</span></span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      <span class="string">"analysis"</span> : {</span><br><span class="line">        <span class="string">"hunspell"</span> : {</span><br><span class="line">          <span class="string">"dictionary"</span> : {</span><br><span class="line">            <span class="string">"ignore_case"</span> : <span class="string">"false"</span>,</span><br><span class="line">            <span class="string">"lazy"</span> : <span class="string">"false"</span></span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      <span class="string">"queries"</span> : {</span><br><span class="line">        <span class="string">"cache"</span> : {</span><br><span class="line">          <span class="string">"count"</span> : <span class="string">"300"</span>,</span><br><span class="line">          <span class="string">"max_times_of_leading_cost"</span> : <span class="string">"250"</span>,</span><br><span class="line">          <span class="string">"size"</span> : <span class="string">"5%"</span>,</span><br><span class="line">          <span class="string">"all_segments"</span> : <span class="string">"false"</span>,</span><br><span class="line">          <span class="string">"max_doc_count"</span> : <span class="string">"5000000"</span></span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      <span class="string">"lifecycle"</span> : {</span><br><span class="line">        <span class="string">"poll_interval"</span> : <span class="string">"10m"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"fielddata"</span> : {</span><br><span class="line">        <span class="string">"cache"</span> : {</span><br><span class="line">          <span class="string">"size"</span> : <span class="string">"15%"</span></span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      <span class="string">"bulk"</span> : {</span><br><span class="line">        <span class="string">"reject_illegal_time_data"</span> : {</span><br><span class="line">          <span class="string">"enable"</span> : <span class="string">"true"</span></span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"plugin"</span> : {</span><br><span class="line">      <span class="string">"mandatory"</span> : [ ]</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"metric"</span> : {</span><br><span class="line">      <span class="string">"create_deduplicate_optimize"</span> : {</span><br><span class="line">        <span class="string">"enable"</span> : <span class="string">"true"</span></span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"discovery"</span> : {</span><br><span class="line">      <span class="string">"type"</span> : <span class="string">"zen"</span>,</span><br><span class="line">      <span class="string">"zen"</span> : {</span><br><span class="line">        <span class="string">"commit_timeout"</span> : <span class="string">"30s"</span>,</span><br><span class="line">        <span class="string">"no_master_block"</span> : <span class="string">"write"</span>,</span><br><span class="line">        <span class="string">"join_retry_delay"</span> : <span class="string">"100ms"</span>,</span><br><span class="line">        <span class="string">"join_retry_attempts"</span> : <span class="string">"3"</span>,</span><br><span class="line">        <span class="string">"ping"</span> : {</span><br><span class="line">          <span class="string">"unicast"</span> : {</span><br><span class="line">            <span class="string">"concurrent_connects"</span> : <span class="string">"10"</span>,</span><br><span class="line">            <span class="string">"hosts"</span> : [</span><br><span class="line">              <span class="string">"9.20.83.249:9300"</span>,</span><br><span class="line">              <span class="string">"9.20.85.27:9300"</span>,</span><br><span class="line">              <span class="string">"9.20.91.71:9300"</span>,</span><br><span class="line">              <span class="string">"9.20.86.14:9300"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"hosts.resolve_timeout"</span> : <span class="string">"5s"</span></span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"master_election"</span> : {</span><br><span class="line">          <span class="string">"ignore_non_master_pings"</span> : <span class="string">"false"</span>,</span><br><span class="line">          <span class="string">"wait_for_joins_timeout"</span> : <span class="string">"30000ms"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"send_leave_request"</span> : <span class="string">"true"</span>,</span><br><span class="line">        <span class="string">"ping_timeout"</span> : <span class="string">"3s"</span>,</span><br><span class="line">        <span class="string">"join_timeout"</span> : <span class="string">"60000ms"</span>,</span><br><span class="line">        <span class="string">"publish_diff"</span> : {</span><br><span class="line">          <span class="string">"enable"</span> : <span class="string">"true"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"publish"</span> : {</span><br><span class="line">          <span class="string">"max_pending_cluster_states"</span> : <span class="string">"25"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"minimum_master_nodes"</span> : <span class="string">"3"</span>,</span><br><span class="line">        <span class="string">"hosts_provider"</span> : [ ],</span><br><span class="line">        <span class="string">"publish_timeout"</span> : <span class="string">"30s"</span>,</span><br><span class="line">        <span class="string">"fd"</span> : {</span><br><span class="line">          <span class="string">"connect_on_network_disconnect"</span> : <span class="string">"false"</span>,</span><br><span class="line">          <span class="string">"ping_interval"</span> : <span class="string">"1s"</span>,</span><br><span class="line">          <span class="string">"ping_retries"</span> : <span class="string">"3"</span>,</span><br><span class="line">          <span class="string">"register_connection_listener"</span> : <span class="string">"true"</span>,</span><br><span class="line">          <span class="string">"ping_timeout"</span> : <span class="string">"30s"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"max_pings_from_another_master"</span> : <span class="string">"3"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"initial_state_timeout"</span> : <span class="string">"30s"</span></span><br><span class="line">    },</span><br><span class="line">    <span class="string">"access_key_secret"</span> : <span class="string">""</span>,</span><br><span class="line">    <span class="string">"gateway"</span> : {</span><br><span class="line">      <span class="string">"recover_after_master_nodes"</span> : <span class="string">"0"</span>,</span><br><span class="line">      <span class="string">"expected_nodes"</span> : <span class="string">"-1"</span>,</span><br><span class="line">      <span class="string">"recover_after_data_nodes"</span> : <span class="string">"-1"</span>,</span><br><span class="line">      <span class="string">"expected_data_nodes"</span> : <span class="string">"-1"</span>,</span><br><span class="line">      <span class="string">"recover_after_time"</span> : <span class="string">"0ms"</span>,</span><br><span class="line">      <span class="string">"expected_master_nodes"</span> : <span class="string">"-1"</span>,</span><br><span class="line">      <span class="string">"recover_after_nodes"</span> : <span class="string">"-1"</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>桶分析</title>
      <link href="/2023/03/14/treasurebox/elasticsearch/xue-xi-bi-ji/1.he-xin-zhi-shi-pian-2week/5.tong-fen-xi/"/>
      <url>/2023/03/14/treasurebox/elasticsearch/xue-xi-bi-ji/1.he-xin-zhi-shi-pian-2week/5.tong-fen-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="桶分析"><a href="#桶分析" class="headerlink" title="桶分析"></a>桶分析</h2><p>聚合查询通用结构</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># aggs聚合查询</span></span><br><span class="line"><span class="comment"># NAME 聚合的名称</span></span><br><span class="line"><span class="comment"># AGG_TYPE聚合的类型</span></span><br><span class="line">GET product/_search</span><br><span class="line">{</span><br><span class="line"><span class="string">"size"</span>:<span class="number">0</span>,</span><br><span class="line">  <span class="string">"aggs"</span>: {</span><br><span class="line">    <span class="string">"NAME"</span>: {</span><br><span class="line">      <span class="string">"AGG_TYPE"</span>: {}</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol><li><h3 id="使用post-filter时查询时不会影响聚合结果"><a href="#使用post-filter时查询时不会影响聚合结果" class="headerlink" title="使用post_filter时查询时不会影响聚合结果"></a>使用post_filter时查询时不会影响聚合结果</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 想让聚合和查询互不影响时，使用post_filter</span></span><br><span class="line">GET product/_search</span><br><span class="line">{</span><br><span class="line">  <span class="string">"aggs"</span>: {</span><br><span class="line">    <span class="string">"tags_bucket"</span>: {</span><br><span class="line">      <span class="string">"terms"</span>: {</span><br><span class="line">        <span class="string">"field"</span>: <span class="string">"tags.keyword"</span>,</span><br><span class="line">        <span class="string">"size"</span>: <span class="number">10</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="string">"post_filter"</span>: {</span><br><span class="line">    <span class="string">"term"</span>: {</span><br><span class="line">      <span class="string">"tags.keyword"</span>: <span class="string">"性价比"</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><h3 id="分桶聚合"><a href="#分桶聚合" class="headerlink" title="分桶聚合"></a>分桶聚合</h3><p>类似mysql数据库中的group by之后计算，按照某种维度进行分桶，计算数量信息</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 求最大值、最小值、均值、数量、求和</span></span><br><span class="line">GET product/_search</span><br><span class="line">{</span><br><span class="line">  <span class="string">"size"</span>: <span class="number">0</span>, </span><br><span class="line">  <span class="string">"aggs"</span>: {</span><br><span class="line">    <span class="string">"max_price"</span>: {</span><br><span class="line">      <span class="string">"max"</span>: {</span><br><span class="line">        <span class="string">"field"</span>: <span class="string">"price"</span></span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"avg_price"</span>: {</span><br><span class="line">      <span class="string">"avg"</span>: {</span><br><span class="line">        <span class="string">"field"</span>: <span class="string">"price"</span></span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"min_price"</span>: {</span><br><span class="line">      <span class="string">"min"</span>: {</span><br><span class="line">        <span class="string">"field"</span>: <span class="string">"price"</span></span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"count_price"</span>: {</span><br><span class="line">      <span class="string">"value_count"</span>: {</span><br><span class="line">        <span class="string">"field"</span>: <span class="string">"price"</span></span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"sum_price"</span>: {</span><br><span class="line">      <span class="string">"sum"</span>: {</span><br><span class="line">        <span class="string">"field"</span>: <span class="string">"price"</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># stats求五个值</span></span><br><span class="line">GET product/_search</span><br><span class="line">{</span><br><span class="line">  <span class="string">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">"aggs"</span>: {</span><br><span class="line">    <span class="string">"price_stats"</span>: {</span><br><span class="line">      <span class="string">"stats"</span>: {</span><br><span class="line">        <span class="string">"field"</span>: <span class="string">"price"</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol><li><strong>cardinality</strong>：根据某个字段去重之后计算数量</li></ol></li><li><h3 id="指标聚合"><a href="#指标聚合" class="headerlink" title="指标聚合"></a>指标聚合</h3><p>根据某种metric做指标分析：</p><ul><li><p>Avg：平均值</p></li><li><p>Max：最大值</p></li><li><p>Min：最小值</p></li><li><p>Sum：求和</p></li><li><p>Cardinality：基数（去重）</p></li><li><p>Value Count计数</p></li><li><p>Stats统计聚合</p></li><li><p>Top Hits聚合</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算平均分类的平均价格</span></span><br><span class="line"><span class="comment"># 1.先根据类别分组。2.再计算平均价格</span></span><br><span class="line">GET product/_search</span><br><span class="line">{</span><br><span class="line">  <span class="string">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">"aggs"</span>: {</span><br><span class="line">    <span class="string">"type_bucket"</span>: {</span><br><span class="line">      <span class="string">"terms"</span>: {</span><br><span class="line">        <span class="string">"field"</span>: <span class="string">"type.keyword"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"aggs"</span>: {</span><br><span class="line">        <span class="string">"price"</span>: {</span><br><span class="line">          <span class="string">"avg"</span>: {</span><br><span class="line">            <span class="string">"field"</span>: <span class="string">"price"</span></span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><h3 id="管道聚合"><a href="#管道聚合" class="headerlink" title="管道聚合"></a>管道聚合</h3><p>对聚合的结果做二次聚合，比如统计平均价格最低的商品分类：先根据商品类别进行分类求平均值，再计算平均值最小的类别。</p><p>语法：buckets_path</p></li></ol><p>​<strong>buckets_path</strong>：统计的对象必须为Object，意味着只能在当前计算值的上层，嵌套两层进行计算。支持七种</p><ol><li><strong>min_bucket</strong>：最小值</li><li><strong>max_bucket</strong>：最大值</li><li><strong>avg_bucket</strong>：平均值</li><li><strong>percentiles_bucket</strong>：分位值</li><li><strong>sum_bucket</strong>：求和</li><li><strong>extended_stats_bucket</strong>：最小最大、均值等信息</li><li><strong>stats_bucket</strong>：最小最大均值等</li><li>使用</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 管道聚合</span></span><br><span class="line"><span class="comment"># 先根据类型分桶，求出价格的均值</span></span><br><span class="line"><span class="comment"># 再将计算出的桶结果作为管道进行二次运算</span></span><br><span class="line"><span class="comment"># 将哪个bucket作为管道就跟哪一层平级</span></span><br><span class="line">GET product/_search</span><br><span class="line">{</span><br><span class="line">  <span class="string">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">"aggs"</span>: {</span><br><span class="line">    <span class="string">"type_bucket"</span>: {</span><br><span class="line">      <span class="string">"terms"</span>: {</span><br><span class="line">        <span class="string">"field"</span>: <span class="string">"type.keyword"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"aggs"</span>: {</span><br><span class="line">        <span class="string">"price_bucket"</span>: {</span><br><span class="line">          <span class="string">"avg"</span>: {</span><br><span class="line">            <span class="string">"field"</span>: <span class="string">"price"</span></span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"minbucket"</span>: {</span><br><span class="line">      <span class="string">"min_bucket"</span>: {</span><br><span class="line">        <span class="string">"buckets_path"</span>: <span class="string">"type_bucket&gt;price_bucket"</span></span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"percentile_ranks_minbucket"</span>: {</span><br><span class="line">      <span class="string">"percentiles_bucket"</span>: {</span><br><span class="line">        <span class="string">"buckets_path"</span>: <span class="string">"type_bucket&gt;price_bucket"</span>,</span><br><span class="line">        <span class="string">"percents"</span>: [<span class="number">10</span>,<span class="number">95</span>,<span class="number">99</span>]</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先根据类型分组，再根据lv分级，最后计算最大值、最小值、平均值</span></span><br><span class="line">GET product/_search</span><br><span class="line">{</span><br><span class="line">  <span class="string">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">"aggs"</span>: {</span><br><span class="line">    <span class="string">"group_by_type"</span>: {</span><br><span class="line">      <span class="string">"terms"</span>: {</span><br><span class="line">        <span class="string">"field"</span>: <span class="string">"type.keyword"</span>,</span><br><span class="line">        <span class="string">"size"</span>: <span class="number">30</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"aggs"</span>: {</span><br><span class="line">        <span class="string">"group_by_lv"</span>: {</span><br><span class="line">          <span class="string">"terms"</span>: {</span><br><span class="line">            <span class="string">"field"</span>: <span class="string">"lv.keyword"</span></span><br><span class="line">          },</span><br><span class="line">          <span class="string">"aggs"</span>: {</span><br><span class="line">            <span class="string">"price_stats"</span>: {</span><br><span class="line">              <span class="string">"stats"</span>: {</span><br><span class="line">                <span class="string">"field"</span>: <span class="string">"price"</span></span><br><span class="line">              }</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">GET product/_search</span><br><span class="line">{</span><br><span class="line">  <span class="string">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">"aggs"</span>: {</span><br><span class="line">    <span class="string">"group_by_type"</span>: {</span><br><span class="line">      <span class="string">"terms"</span>: {</span><br><span class="line">        <span class="string">"field"</span>: <span class="string">"type.keyword"</span>,</span><br><span class="line">        <span class="string">"size"</span>: <span class="number">30</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"aggs"</span>: {</span><br><span class="line">        <span class="string">"group_by_lv"</span>: {</span><br><span class="line">          <span class="string">"terms"</span>: {</span><br><span class="line">            <span class="string">"field"</span>: <span class="string">"lv.keyword"</span></span><br><span class="line">          },</span><br><span class="line">          <span class="string">"aggs"</span>: {</span><br><span class="line">            <span class="string">"avg_price"</span>: {</span><br><span class="line">              <span class="string">"avg"</span>: {</span><br><span class="line">                <span class="string">"field"</span>: <span class="string">"price"</span></span><br><span class="line">              }</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"min_bucket"</span>:{</span><br><span class="line">          <span class="string">"min_bucket"</span>: {</span><br><span class="line">            <span class="string">"buckets_path"</span>: <span class="string">"group_by_lv&gt;avg_price"</span></span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"max_bucket"</span>:{</span><br><span class="line">          <span class="string">"max_bucket"</span>: {</span><br><span class="line">            <span class="string">"buckets_path"</span>: <span class="string">"group_by_lv&gt;avg_price"</span></span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"avg_bucket"</span>:{</span><br><span class="line">          <span class="string">"avg_bucket"</span>: {</span><br><span class="line">            <span class="string">"buckets_path"</span>: <span class="string">"group_by_lv&gt;avg_price"</span></span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"percentiles_buckets"</span>:{</span><br><span class="line">          <span class="string">"percentiles_bucket"</span>: {</span><br><span class="line">            <span class="string">"buckets_path"</span>: <span class="string">"group_by_lv&gt;avg_price"</span></span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"sum_buckets"</span>:{</span><br><span class="line">          <span class="string">"sum_bucket"</span>: {</span><br><span class="line">            <span class="string">"buckets_path"</span>: <span class="string">"group_by_lv&gt;avg_price"</span></span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"extended_stats_bucket"</span>:{</span><br><span class="line">          <span class="string">"extended_stats_bucket"</span>: {</span><br><span class="line">            <span class="string">"buckets_path"</span>: <span class="string">"group_by_lv&gt;avg_price"</span></span><br><span class="line">          }</span><br><span class="line">        },<span class="string">"stats_buckets"</span>:{</span><br><span class="line">          <span class="string">"stats_bucket"</span>: {</span><br><span class="line">            <span class="string">"buckets_path"</span>: <span class="string">"group_by_lv&gt;avg_price"</span></span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><h5 id="在聚合查询中嵌套global"><a href="#在聚合查询中嵌套global" class="headerlink" title="在聚合查询中嵌套global"></a>在聚合查询中嵌套global</h5></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用global时可以不受外围查询条件影响，直接聚合所有数据,例如筛选出&gt;4000数据的最大值，再查所有数据的平均值</span></span><br><span class="line">GET product/_search</span><br><span class="line">{</span><br><span class="line">  <span class="string">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">"query"</span>: {</span><br><span class="line">    <span class="string">"range"</span>: {</span><br><span class="line">      <span class="string">"price"</span>: {</span><br><span class="line">        <span class="string">"gte"</span>: <span class="number">4000</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="string">"aggs"</span>: {</span><br><span class="line">    <span class="string">"max_price"</span>: {</span><br><span class="line">      <span class="string">"max"</span>: {</span><br><span class="line">        <span class="string">"field"</span>: <span class="string">"price"</span></span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"all_avg_price"</span>: {</span><br><span class="line">      <span class="string">"global"</span>: {},</span><br><span class="line">      <span class="string">"aggs"</span>: {</span><br><span class="line">        <span class="string">"avg_price"</span>: {</span><br><span class="line">          <span class="string">"avg"</span>: {</span><br><span class="line">            <span class="string">"field"</span>: <span class="string">"price"</span></span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><h5 id="在分桶查询中嵌套filter"><a href="#在分桶查询中嵌套filter" class="headerlink" title="在分桶查询中嵌套filter"></a>在分桶查询中嵌套filter</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在聚合语句中嵌套filter，可以在聚合之前再单独增加筛选条件</span></span><br><span class="line">GET product/_search</span><br><span class="line">{</span><br><span class="line">  <span class="string">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">"query"</span>: {</span><br><span class="line">    <span class="string">"range"</span>: {</span><br><span class="line">      <span class="string">"price"</span>: {</span><br><span class="line">        <span class="string">"gte"</span>: <span class="number">4000</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="string">"aggs"</span>: {</span><br><span class="line">    <span class="string">"max_price"</span>: {</span><br><span class="line">      <span class="string">"max"</span>: {</span><br><span class="line">        <span class="string">"field"</span>: <span class="string">"price"</span></span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"muti_avg_price"</span>: {</span><br><span class="line">      <span class="string">"filter"</span>: {</span><br><span class="line">        <span class="string">"range"</span>: {</span><br><span class="line">          <span class="string">"price"</span>: {</span><br><span class="line">            <span class="string">"lte"</span>: <span class="number">3000</span></span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      <span class="string">"aggs"</span>: {</span><br><span class="line">        <span class="string">"avg_price"</span>: {</span><br><span class="line">          <span class="string">"avg"</span>: {</span><br><span class="line">            <span class="string">"field"</span>: <span class="string">"price"</span></span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="对分桶结果进行排序"><a href="#对分桶结果进行排序" class="headerlink" title="对分桶结果进行排序"></a>对分桶结果进行排序</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对分桶结果排序</span></span><br><span class="line"><span class="comment"># _count:按照分桶的数量排序</span></span><br><span class="line"><span class="comment"># _可以:按照字典序排列</span></span><br><span class="line">GET product/_search</span><br><span class="line">{</span><br><span class="line">  <span class="string">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">"aggs"</span>: {</span><br><span class="line">    <span class="string">"tags_aggs"</span>:{</span><br><span class="line">      <span class="string">"terms"</span>: {</span><br><span class="line">        <span class="string">"field"</span>: <span class="string">"tags.keyword"</span>,</span><br><span class="line">        <span class="string">"size"</span>: <span class="number">30</span>,</span><br><span class="line">        <span class="string">"order"</span>: {</span><br><span class="line">          <span class="string">"_count"</span>: <span class="string">"asc"</span>,</span><br><span class="line">          <span class="string">"_key"</span>: <span class="string">"asc"</span></span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="嵌套分桶排序方式"><a href="#嵌套分桶排序方式" class="headerlink" title="嵌套分桶排序方式"></a>嵌套分桶排序方式</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对分桶结果排序</span></span><br><span class="line"><span class="comment"># _count:按照分桶的数量排序</span></span><br><span class="line">GET product/_search?search_type=dfs_query_then_fetch</span><br><span class="line">{</span><br><span class="line">  <span class="string">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">"aggs"</span>: {</span><br><span class="line">    <span class="string">"tags_aggs"</span>:{</span><br><span class="line">      <span class="string">"terms"</span>: {</span><br><span class="line">        <span class="string">"field"</span>: <span class="string">"type.keyword"</span>,</span><br><span class="line">        <span class="string">"size"</span>: <span class="number">30</span>,</span><br><span class="line">        <span class="string">"order"</span>: {</span><br><span class="line">          <span class="string">"_count"</span>: <span class="string">"asc"</span></span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      <span class="string">"aggs"</span>: {</span><br><span class="line">        <span class="string">"group_by_lv"</span>: {</span><br><span class="line">          <span class="string">"terms"</span>: {</span><br><span class="line">            <span class="string">"field"</span>: <span class="string">"lv.keyword"</span>,</span><br><span class="line">            <span class="string">"order"</span>: {</span><br><span class="line">              <span class="string">"_count"</span>: <span class="string">"desc"</span></span><br><span class="line">            }</span><br><span class="line">            </span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="父桶根据子桶的聚合结果排序"><a href="#父桶根据子桶的聚合结果排序" class="headerlink" title="父桶根据子桶的聚合结果排序"></a>父桶根据子桶的聚合结果排序</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 父桶根据子桶的聚合结果排序</span></span><br><span class="line">GET product/_search</span><br><span class="line">{</span><br><span class="line">  <span class="string">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">"aggs"</span>: {</span><br><span class="line">    <span class="string">"tags_aggs"</span>: {</span><br><span class="line">      <span class="string">"terms"</span>: {</span><br><span class="line">        <span class="string">"field"</span>: <span class="string">"type.keyword"</span>,</span><br><span class="line">        <span class="string">"order"</span>: {</span><br><span class="line">          <span class="string">"agg_stats&gt;stats_bucket.min"</span>: <span class="string">"desc"</span></span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      <span class="string">"aggs"</span>: {</span><br><span class="line">        <span class="string">"agg_stats"</span>: {</span><br><span class="line">          <span class="string">"filter"</span>: {</span><br><span class="line">            <span class="string">"range"</span>: {</span><br><span class="line">              <span class="string">"price"</span>: {</span><br><span class="line">                <span class="string">"gte"</span>: <span class="number">1000</span></span><br><span class="line">              }</span><br><span class="line">            }</span><br><span class="line">          },</span><br><span class="line">          <span class="string">"aggs"</span>: {</span><br><span class="line">            <span class="string">"stats_bucket"</span>: {</span><br><span class="line">              <span class="string">"stats"</span>: {</span><br><span class="line">                <span class="string">"field"</span>: <span class="string">"price"</span></span><br><span class="line">              }</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="date-histogram：根据日期分桶"><a href="#date-histogram：根据日期分桶" class="headerlink" title="date_histogram：根据日期分桶"></a>date_histogram：根据日期分桶</h4></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>分词器</title>
      <link href="/2023/03/13/treasurebox/elasticsearch/xue-xi-bi-ji/1.he-xin-zhi-shi-pian-2week/4.fen-ci-qi/"/>
      <url>/2023/03/13/treasurebox/elasticsearch/xue-xi-bi-ji/1.he-xin-zhi-shi-pian-2week/4.fen-ci-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="分词器"><a href="#分词器" class="headerlink" title="分词器"></a>分词器</h1><h2 id="规范化normalization"><a href="#规范化normalization" class="headerlink" title="规范化normalization"></a>规范化normalization</h2><p>提高文档的查询成功率，对词进行切分、同义词归并、大写转小些、负数转单数等；主要分为4步：</p><ol><li>切词(word segmentation)</li><li>规范化：normalization</li><li>去重</li><li>字典序</li></ol><h2 id="字符过滤器character-filter"><a href="#字符过滤器character-filter" class="headerlink" title="字符过滤器character filter"></a>字符过滤器character filter</h2><ol><li><h4 id="HTML-Strip：处理html标签"><a href="#HTML-Strip：处理html标签" class="headerlink" title="HTML Strip：处理html标签"></a>HTML Strip：处理html标签</h4><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">创建分词器</span><br><span class="line"># analysis表示分析器</span><br><span class="line"># char_filter表示字符串过滤器，过滤器类型是html_strip</span><br><span class="line"># my_analyzer表示分词</span><br><span class="line"># escaped_tags表示希望保留的标签</span><br><span class="line">PUT my_index</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"settings"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"analysis"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"char_filter"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"my_char_filter"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"type"</span><span class="punctuation">:</span><span class="string">"html_strip"</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">      <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"analyzer"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"my_analyzer"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"tokenizer"</span><span class="punctuation">:</span><span class="string">"keyword"</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"char_filter"</span><span class="punctuation">:</span> <span class="string">"my_char_filter"</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">      <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"></span><br><span class="line"># 使用分词器</span><br><span class="line">GET my_index/_analyze</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"analyzer"</span><span class="punctuation">:</span> <span class="string">"my_analyzer"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"text"</span><span class="punctuation">:</span><span class="string">"&lt;p&gt;I'm so &lt;a&gt;happy&lt;/a&gt;&lt;/p&gt;"</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 返回的结果</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"tokens"</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"token"</span> <span class="punctuation">:</span> <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">I'm so &lt;a&gt;happy&lt;/a&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span><span class="string">""</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"start_offset"</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"end_offset"</span> <span class="punctuation">:</span> <span class="number">26</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="string">"word"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"position"</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="Mapping-Character-Filter"><a href="#Mapping-Character-Filter" class="headerlink" title="Mapping Character Filter"></a>Mapping Character Filter</h4><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"># 使用分词器</span><br><span class="line">GET my_index/_analyze</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"analyzer"</span><span class="punctuation">:</span> <span class="string">"my_analyzer"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"text"</span><span class="punctuation">:</span><span class="string">"&lt;p&gt;I'm so &lt;a&gt;happy&lt;/a&gt;&lt;/p&gt;"</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PUT my_index</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"settings"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"analysis"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"char_filter"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"my_char_filter"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"type"</span><span class="punctuation">:</span><span class="string">"mapping"</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"mappings"</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">            <span class="string">"滚 =&gt; *"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">"垃圾 =&gt; **"</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">      <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"analyzer"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"my_analyzer"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"tokenizer"</span><span class="punctuation">:</span><span class="string">"keyword"</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"char_filter"</span><span class="punctuation">:</span> <span class="string">"my_char_filter"</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">      <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"># 使用分词器</span><br><span class="line">GET my_index/_analyze</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"analyzer"</span><span class="punctuation">:</span> <span class="string">"my_analyzer"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"text"</span><span class="punctuation">:</span><span class="string">"垃圾应该滚去垃-级堆"</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"></span><br><span class="line"># 返回的结果</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"tokens"</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"token"</span> <span class="punctuation">:</span> <span class="string">"**应该*去垃-级堆"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"start_offset"</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"end_offset"</span> <span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="string">"word"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"position"</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="Pattern-Replace"><a href="#Pattern-Replace" class="headerlink" title="Pattern Replace"></a>Pattern Replace</h4><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 正则替换</span><br><span class="line">PUT my_index</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"settings"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"analysis"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"char_filter"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"my_char_filter"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"type"</span><span class="punctuation">:</span><span class="string">"pattern_replace"</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"pattern"</span><span class="punctuation">:</span><span class="string">"(\\d{3})\\d{4}(\\d{4})"</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"replacement"</span><span class="punctuation">:</span><span class="string">"$1****$2"</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">      <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"analyzer"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"my_analyzer"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"tokenizer"</span><span class="punctuation">:</span><span class="string">"keyword"</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"char_filter"</span><span class="punctuation">:</span> <span class="string">"my_char_filter"</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">      <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"># 使用分词器</span><br><span class="line">GET my_index/_analyze</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"analyzer"</span><span class="punctuation">:</span> <span class="string">"my_analyzer"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"text"</span><span class="punctuation">:</span><span class="string">"手机号是18764077883"</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="分词器-tokenizer"><a href="#分词器-tokenizer" class="headerlink" title="分词器 tokenizer"></a>分词器 tokenizer</h2><h2 id="令牌过滤器-token-filter"><a href="#令牌过滤器-token-filter" class="headerlink" title="令牌过滤器 token filter"></a>令牌过滤器 token filter</h2><h2 id="常用分词器"><a href="#常用分词器" class="headerlink" title="常用分词器"></a>常用分词器</h2><h2 id="中文分词器"><a href="#中文分词器" class="headerlink" title="中文分词器"></a>中文分词器</h2><p>ik分词器简单示例</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"text"</span><span class="punctuation">:</span><span class="string">"你好，吃早饭了吗"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"analyzer"</span><span class="punctuation">:</span> <span class="string">"ik_smart"</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><h2 id="自定义分词器"><a href="#自定义分词器" class="headerlink" title="自定义分词器"></a>自定义分词器</h2><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 自定义分词器</span><br><span class="line">PUT custom_analysis</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"settings"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"analysis"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"char_filter"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"my_char_filter"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"type"</span><span class="punctuation">:</span> <span class="string">"mapping"</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"mappings"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">"滚 =&gt; *"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">"垃圾 =&gt; **"</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">      <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"filter"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"my_stopword"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"type"</span><span class="punctuation">:</span> <span class="string">"stop"</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"stopwords"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">"is"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">"in"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">"the"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">"a"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">"at"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">"for"</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">      <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"tokenizer"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"my_tokenizer"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"type"</span><span class="punctuation">:</span><span class="string">"pattern"</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"pattern"</span><span class="punctuation">:</span><span class="string">"[,.!?]"</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">      <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"analyzer"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"my_analyzer"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"type"</span><span class="punctuation">:</span><span class="string">"custom"</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"char_filter"</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">"my_char_filter"</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"tokenizer"</span><span class="punctuation">:</span><span class="string">"my_tokenizer"</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"filter"</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">"my_stopword"</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">      <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"></span><br><span class="line"># 测试分词器</span><br><span class="line">GET custom_analysis/_analyze</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"analyzer"</span><span class="punctuation">:</span> <span class="string">"my_analyzer"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"text"</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">"what is asdf,.? ss in &amp; | is the good boy滚hh"</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ES入门指南</title>
      <link href="/2023/03/12/treasurebox/elasticsearch/xue-xi-bi-ji/1.he-xin-zhi-shi-pian-2week/es-ru-men-zhi-nan/"/>
      <url>/2023/03/12/treasurebox/elasticsearch/xue-xi-bi-ji/1.he-xin-zhi-shi-pian-2week/es-ru-men-zhi-nan/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>核心知识点</title>
      <link href="/2023/03/05/treasurebox/elasticsearch/xue-xi-bi-ji/he-xin-zhi-shi-dian/"/>
      <url>/2023/03/05/treasurebox/elasticsearch/xue-xi-bi-ji/he-xin-zhi-shi-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="ES基本介绍"><a href="#ES基本介绍" class="headerlink" title="ES基本介绍"></a>ES基本介绍</h1><h2 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h2><h3 id="从一条数据入门倒排索引"><a href="#从一条数据入门倒排索引" class="headerlink" title="从一条数据入门倒排索引"></a>从一条数据入门倒排索引</h3><table><thead><tr><th>id</th><th><strong>title</strong></th><th><strong>info</strong></th></tr></thead><tbody><tr><td>1</td><td>念奴娇·昆仑</td><td>横空出世，莽昆仑，阅尽人间春色….</td></tr><tr><td><strong>2</strong></td><td>公无渡河</td><td>黄河西来决昆仑，咆哮万里触龙门…</td></tr></tbody></table><h4 id="在mysql中查询"><a href="#在mysql中查询" class="headerlink" title="在mysql中查询:"></a>在mysql中查询:</h4><p> select * from table where info like “%昆仑%“;这种查询时索引失效</p><h4 id="倒排索引数据的存储格式"><a href="#倒排索引数据的存储格式" class="headerlink" title="倒排索引数据的存储格式"></a>倒排索引数据的存储格式</h4><p>通过为每一个field分词后建立倒排索引加速查找效率，以field value为key，数据id为值组建结构</p><table><thead><tr><th><strong>term</strong></th><th><strong>posting list</strong></th></tr></thead><tbody><tr><td>横空出世</td><td>1</td></tr><tr><td>莽</td><td>1</td></tr><tr><td>昆仑</td><td>1,2</td></tr><tr><td>黄河</td><td>2</td></tr></tbody></table><h2 id="Elastic-Stack-ELKB-家族"><a href="#Elastic-Stack-ELKB-家族" class="headerlink" title="Elastic Stack(ELKB)家族"></a>Elastic Stack(ELKB)家族</h2><h3 id="Elastic-Search"><a href="#Elastic-Search" class="headerlink" title="Elastic Search"></a>Elastic Search</h3><p>是一个分布式的开放搜索和分析引擎，适用于所有类型的数据格式，包括文本、数字、地理空间、结构化和非结构化数据，基于Lucene基础开发。是一个近实时的搜索平台(1秒)左右。</p><h3 id="LogStash"><a href="#LogStash" class="headerlink" title="LogStash"></a>LogStash</h3><p>开放性的服务器端数据处理管道，能够从多个来源采集数据、转换数据，对数据进行聚合和处理，然后将数据发送到存储库中。</p><h3 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h3><p>搜索、查看并可视化es中存储的数据，并通过创建柱状图、饼状图、表格、直方图、地图等对数据进行分析。</p><h3 id="Beats"><a href="#Beats" class="headerlink" title="Beats"></a>Beats</h3><p>轻量级数据采集器，可以从各种环境中收集日志、指标安全数据或网格数据，通过logstash或kafka等传输到es中进行存储。</p><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><h3 id="集群-cluster"><a href="#集群-cluster" class="headerlink" title="集群(cluster)"></a>集群(cluster)</h3><p>集群由一个或多个节点组成，通过集群名称进行表示。通常集群名称在ES配置文件(config/elasticsearch.tml)中设置</p><h3 id="节点-node"><a href="#节点-node" class="headerlink" title="节点(node)"></a>节点(node)</h3><p>单个ES实例成为节点，依据功能可以分为下面几种，在(config/elasticsearch.tml)配置：</p><p><strong>master</strong>：候选节点（创建、更新、删除索引，添加、删除node，分配shard）</p><p><strong>data</strong>：数据节点</p><p>data_content：数据内容没电</p><p><strong>data_hot</strong>：热节点，可读可更新</p><p><strong>data_warm</strong>：warm节点：只读不更新</p><p><strong>data_code</strong>：冷节点，存放历史数据（不常访问）</p><p>ingest：预处理节点，类似LogStash中的Filter</p><p>ml(machine learning)：机器学习节点</p><p><strong>voting node</strong>：仅投票节点（选主）</p><p><strong>coordination node</strong>：协调节点，接受外部请求并转发到相应节点（不特指某个节点，所有节点都有可能成为协调节点）</p><p><strong>如何避免脑裂：</strong></p><p><strong>脑裂</strong>：正常es集群中只有一个主节点，主节点负责管理整个集群，集群的所有节点都会选择同一个节点作为主节点，所以无论访问那个节点都可以查看集群的状态信息。 而脑裂问题的出现就是因为从节点在选择主节点上出现分歧导致一个集群出现多个主节点从而使集群分裂，使得集群处于异常状态。</p><p><strong>原因</strong>：</p><ol><li><p>网络问题：主节点未及时响应，集群以为主节点下线，选举一个新的主节点，原主节点恢复后集群就会形成两个主节点，导致集群分裂</p></li><li><p>节点负载：主节点同时承担数据节点角色时，可能会出现负载比较大，引发较大规模的内存回收(GC)，造成ES进程失去响应。</p></li><li><p>内存回收：数据节点上的ES进程占用的内存较大，较大规模的内存回收操作也能造成ES进程失去响应</p></li></ol><p><strong>解决办法</strong>：</p><ol><li><p>master node与data node分别设置，即node.master与node.data不要同时为True，主节点配置为：node.master: true ，node.data: false。数据节点配置为：node.master: false，node.data: true。</p></li><li><p>调整节点响应超时时间：discovery.zen.ping_timeout默认为(3s)，如果master节点超过3s未响应时就认为master节点挂了，增加等待响应时间能减少误判。</p></li><li><p>调整discovery.zen.minimum_master_nodes(默认值是1)参数，该参数表示， 一个节点需要看到的具有master节点资格的最小数量， 然后才能在集群中做操作，即重新选举主节点。官方的推荐值是(N/2)+1，其中 N 是具有 master资格的节点的数量，即只有超过(N/2)+1个主节点同意，才能重新选举主节点。</p></li></ol><p><strong>从脑裂中恢复</strong>：</p><ol><li><p>给所有数据重新索引：POST _reindex{ “source”: { “index”: “index_name” }, “dest”: { “index”: “new_index_name”, “op_type”: “create” } }</p></li><li><p>逐个关闭节点并备份数据，分析比对数据是否是最新的。如果是保存的数据是最新的，启动它并且让它被选为主节点，之后启动集群中其他节点。</p></li></ol><h3 id="索引-index"><a href="#索引-index" class="headerlink" title="索引(index)"></a>索引(index)</h3><p>​类似数据库的概念，以分片为单位，可以设置副本及分片个数</p><h3 id="类型-type"><a href="#类型-type" class="headerlink" title="类型(type)"></a>类型(type)</h3><p>每一个index中分为不同的type，使用type可以在同一个index里存储多种类型的数据，可以减少index的数量，好处是搜索同一个index 的多个type时不会产生额外的开销，因为遍历的分片数是一样的。</p><p>示例：index为qemu_disk_iostat，type为qemu_disk_iostat_20230312、qemu_disk_iostat_20230313</p><p>缺点：不同type名称相同的field要完全保持一致（字段类型、是否能索引等）；在某个type有的字段，其他没有该字段的type也会消耗资源(posting list,doc value)。搜索评分是在index级别计算，多个type会相互影响，<strong>比较鸡肋</strong>。如果只是相对数据进行分割，使用多个index比使用type要好。</p><p>在7.x版本中弱化，统一使用_doc使用，在8.x中彻底删除。</p><h3 id="分片-shard"><a href="#分片-shard" class="headerlink" title="分片(shard)"></a>分片(shard)</h3><p>一个索引中包含一个或者多个分片，在7.0之前默认创建5个分片，每个主分片一个副本；7.x之后默认创建1个主分片，每个节点默认只允许1000个分片。副本可以在索引创建之后修改数量，但是主分片的数量一旦确定之后不能修改，只能删除之后重新创建。</p><p>主分片挂掉之后副分片升级为主分片。原分片加入之后从当前主分片中同步数据。主分片和副分片不会在同一个节点中。</p><p>每个分片都是一个<strong>Lucene</strong>实例，有完整的创建索引和处理请求能力，搜索时<strong>所有</strong>的分片都会被扫描，最终被ES合并所有的搜索结果。</p><p><strong>ES会在nodes上做分片均衡</strong>：所有的分片尽量均匀的分布在所有的节点上rebalance(分片平衡策略)。一个doc不会存在于多个主分片中，但是当每个主分片的副本数量不唯一时，可以同时存在于多个副本中</p><p><strong>分片设计原则：</strong>受JVM大小影响，64G内存机器按照每个分片30-50G分配，32G机器按照最大不超过30G分配。分片数尽量保证data node的整数倍。例如3个data node 64G内存节点，索引大小为500GB，则分应设置12个分片，每个42GB左右，3个节点每个可以分4个分片。</p><h3 id="副本-replace"><a href="#副本-replace" class="headerlink" title="副本(replace)"></a>副本(replace)</h3><p>副本分片，主分片和副分片不能在同一个节点上，如果设置副本&gt;0时，最少要有两个data node，否则分配一直处于无法分配状态。</p><h3 id="文档-doc"><a href="#文档-doc" class="headerlink" title="文档(doc)"></a>文档(doc)</h3><p>es中的数据都是以json文档的形式存储，是数据存储的基本单元，每个doc都会有_id字段，可以在存储时指定_id，或者es会自动生成，推荐自动生成，es默认根据_id做routing，分配该数据要存储的分片。</p><p><strong>routing计算规则：</strong></p><p>shard = hash(routing) % number_of_primary_shards</p><p>routing可以自定义，这样方便将某一类数据分配在同一个分片中，但是如果设置的routing不合适，可能导致数据写入不均。</p><h3 id="mapping"><a href="#mapping" class="headerlink" title="mapping"></a>mapping</h3><p>maping类似于RDB中的“表结构”概念，在MySQL中，表结构里包含了字段名称，字段的类型还有索引信息等。在Mapping里也包含了一些属性，比如字段名称、类型、字段使用的分词器、是否评分、是否创建索引等属性，并且在ES中一个字段可以有对个类型。分词器、评分等概念。</p><h4 id="常见类型"><a href="#常见类型" class="headerlink" title="常见类型"></a>常见类型</h4><p><strong>数字类型：</strong></p><p>long 个带符号的 64 位整数，最小值为，最大值为。 -263 263-1</p><p>integer 一个带符号的 32 位整数，最小值为，最大值为。 -231 231-1</p><p>short 一个带符号的 16 位整数，最小值为-32768，最大值为32767。</p><p>byte 一个带符号的 8 位整数，最小值为-128，最大值为127。</p><p>double 双精度 64 位 IEEE 754 浮点数，仅限于有限值。最小2的-1074次方</p><p>float 单精度 32 位 IEEE 754 浮点数，仅限于有限值。最小2的-149次方</p><p>half_float 半精度 16 位 IEEE 754 浮点数，仅限于有限值。最小2的-24次方</p><p>scaled_float 由 支持的有限浮点数long，按固定double比例因子缩放</p><p><strong>keyword</strong> ：适用于索引结构化的字段，可以用于过滤、排序、聚合。keyword类型的字段只能通过精确值（exact value）搜索到。</p><p><strong>Date类型</strong>：包括date和 date_nanos</p><p><strong>text</strong>：全文索引会被用于分词</p><p><strong>对象关系类型</strong>：</p><p>object：用于单个JSON对象</p><p>nested：用于JSON对象数组</p><p><strong>结构化类型：</strong></p><p>geo-point：纬度/经度积分</p><p>geo-shape：用于多边形等复杂形状</p><p>point：笛卡尔坐标点</p><p>shape：笛卡尔任意几何图形</p><p><strong>特殊类型：</strong></p><p><strong>ip</strong>：用于IPv4和IPv6地址</p><p>…</p><p><strong>array（数组）</strong></p><p>数组不需要专用的字段数据类型。默认情况下，任何字段都可以包含零个或多个值，但是数组中的所有值都必须具有相同的数据类型</p><h4 id="动态字段映射-Dynamic-field-mapping"><a href="#动态字段映射-Dynamic-field-mapping" class="headerlink" title="动态字段映射(Dynamic field mapping)"></a>动态字段映射(Dynamic field mapping)</h4><p>建议使用ES时显示指定字段类型，毕竟相对于ES，写入者更了解自己的数据。如果不指定字段类型时ES的默认映射方式：</p><p>整数 =&gt; long</p><p>浮点数 =&gt; float</p><p>true || false =&gt; boolean</p><p>日期 =&gt; date</p><p>数组 =&gt; 取决于数组中的第一个有效值</p><p>对象 =&gt; object</p><p>字符串 =&gt; 如果不是数字和日期类型，会被映射为text和keyword两个类型</p><table><thead><tr><th>基本数据类型</th><th>占用的内存（byte）</th><th>范围</th></tr></thead><tbody><tr><td>byte</td><td>1</td><td>-2^7 ~ 2^7-1</td></tr><tr><td>short</td><td>2</td><td>-2^15 ~ 2^15-1</td></tr><tr><td>int</td><td>4</td><td>-2^31 ~ 2^31-1</td></tr><tr><td>long</td><td>8</td><td>-2^63 ~ 2^63-1</td></tr><tr><td>float</td><td>4</td><td>-3.4e+38 ~ 3.4e+38</td></tr><tr><td>double</td><td>8</td><td>-1.7e+308 ~ 1.7e+308</td></tr><tr><td>boolean</td><td>1</td><td>true/false</td></tr><tr><td>char</td><td>2</td><td>0~65535</td></tr></tbody></table><p><strong>问题</strong>：0应该选择哪种数据结构存储？<a href="https://mp.weixin.qq.com/s/eIy1Tv1Teonl2HWtvPVUZg">推荐阅读</a></p><p>[</p><p>{“id”:1,”disk_uuid”:”test-diskuuid”,”util”:0, “svctm”: 6,”time”:”2023-03-12 14:50:00”,”set”:”test-set”}, </p><p>{“id”:2,”disk_uuid”:”test-diskuuid”,”util”:94.6, “time”:”2023-03-12 14:50:10”,”set”:”test-set”}</p><p>]</p><h1 id="数据存储结构"><a href="#数据存储结构" class="headerlink" title="数据存储结构"></a>数据存储结构</h1><h2 id="ES数据存储结构"><a href="#ES数据存储结构" class="headerlink" title="ES数据存储结构"></a>ES数据存储结构</h2><p>ES底层使用 Lucene 存储数据，Lucene 的索引包含以下部分：</p><p><strong>inverted index</strong>：倒排索引。<br>bkd tree: Block k-d tree，用于在高维空间内做索引，如地理坐标的索引。<br><strong>column store</strong>：doc values，列式存储，批量读取连续的数据以提高排序和聚合的效率。<br><strong>document store</strong>：Store Fileds，行式存储文档，用于控制 doc 原始数据的存储，其中占比最大的是 source 字段。<br><strong>term vectors</strong>：用于存储各个词在文档中出现的位置等信息。</p><h2 id="常见配置项说明"><a href="#常见配置项说明" class="headerlink" title="常见配置项说明"></a>常见配置项说明</h2><p>两组示例数据:</p><p>[</p><p>{“id”:1,”title”:”念奴娇·昆仑”,”info”:”横空出世，莽昆仑，阅尽人间春色….”},</p><p>{“id”:2,”title”:”公无渡河”,”info”:”黄河西来决昆仑，咆哮万里触龙门…”}</p><p>]</p><p>[</p><p>{“id”:1,”disk_uuid”:”test”,”util”:0, “svctm”: 6,”time”:”2023-03-12 14:50:00”,”set”:”test-set”}},</p><p>{“id”:2,”disk_uuid”:”test”,”util”:94.6, “time”:”2023-03-12 14:50:10”,”set”:”test-set”}}</p><p>]</p><table><thead><tr><th>配置项</th><th><strong>作用</strong></th><th><strong>注意事项</strong></th><th><strong>默认值</strong></th><th><strong>数据格式</strong></th></tr></thead><tbody><tr><td>_all</td><td>提供跨字段全文检索</td><td>（1）会占用额外空间，把 mapping 中的所有字段通过空格拼接起来做索引，在跨字段全文检索才需要打开；（2）在 v6.0+已被弃用，v7.0会正式移除，可以使用 [copy_to] 来自定义组合字段</td><td>关闭</td><td>以title和info字段设置all为例<em>，</em>存储结构为：”念奴娇·昆仑 横空出世，莽昆仑，阅尽人间春色….”es同样会对all字段做分词</td></tr><tr><td>_source</td><td>存储 post 提交到ES的原始 json 内容</td><td>（1）会占用很多存储空间。数据压缩存储，读取会有额外解压开销。（2）不需要读取原始字段内容可以考虑关闭，但关闭后无法 reindex</td><td><strong>开启</strong></td><td>{“id”:1,”title”:”念奴娇·昆仑”,”info”:”横空出世，莽昆仑，阅尽人间春色….”}{“id”:2,”title”:”公无渡河”,”info”:”黄河西来决昆仑，咆哮万里触龙门…”}</td></tr><tr><td>store</td><td>是否单独存储该字段</td><td>（1）会占用额外存储空间，与_source 独立，同时开启 store 和 source 则会将该字段原始内容保存两份，不同字段单独存储，不同字段的数据在磁盘上不连续，若读取多个字段则需要查询多次，如需读取多个字段，需权衡比较 source 与 store 效率</td><td>关闭</td><td>通过黄河搜索info信息时，先找到了posting list为2，接着查询具体的info信息info: 黄河西来决昆仑，咆哮万里触龙门…title: 公无渡河，使用时：stored_fields</td></tr><tr><td>doc_values</td><td>支持排序、聚合</td><td>支持排序、聚合会占用额外存储空间，与 source 独立，同时开启 doc_values 和 _source 则会将该字段原始内容保存两份。doc_values 数据在磁盘上采用<strong>列式</strong>存储，关闭后无法使用排序和聚合</td><td><strong>开启</strong></td><td>util [0, 94.6]以disk_uuid字段倒排索引为例：test:[1, 2] ,查询disk_uuid为test的sum util值数据，查询到了1, 2，接着进行聚合</td></tr><tr><td>index</td><td>是否加入倒排索引</td><td>关闭后无法对其进行搜索，但字段仍会存储到 _source 和 doc_values，字段可以被排序和聚合</td><td><strong>开启</strong></td><td>test: [1,2]</td></tr><tr><td>enabled</td><td>是否对该字段进行处理</td><td>关闭后，只在 _source中存储，类似 index 与 doc_values 的总开关</td><td><strong>开启</strong></td><td></td></tr></tbody></table><h3 id="all"><a href="#all" class="headerlink" title="_all"></a>_all</h3><p>all 字段的作用是提供跨字段查询的支持，把 mapping 中的所有字段通过空格拼接起来做索引。ES在正常查询的过程中，需要指定在哪一个field里面查询，但是在某种场景下比如搜索一首包含“昆仑”的诗，可能在title字段，或者info字段，查询时需要查title或者info中，查询两次。</p><p>如果开启al，会将title 字段和info 字段拼接组成一个虚拟的字段all，值为各个field拼接起来的很长的字符串如（念奴娇·昆仑 横空出世….），实现跨字段检索，用户不需要关心查询的数据具体在哪个字段中。</p><p>该字段的内容来源于 source 字段，因此默认情况下，该字段的内容并不会被保存，可以通过设置 store 属性来强制保存 all 字段。开启 all 字段，会带来额外的CPU开销和存储，如果没有使用到，可以关闭 all 字段。</p><h3 id="source"><a href="#source" class="headerlink" title="_source"></a>_source</h3><p>source 字段用于存储 post 到 ES 的原始 json 文档。为什么要存储原始文档呢？因为 ES 采用倒排索引对文本进行搜索，而倒排索引无法存储原始输入文本。一段文本交给ES后，首先会被分析器(analyzer)打散成单词，为了保证搜索的准确性，在打散的过程中，会去除文本中的标点符号，统一文本的大小写，甚至对于英文等主流语言，会把发生形式变化的单词恢复成原型或词根，然后再根据统一规整之后的单词建立倒排索引，经过如此一番处理，原文已经面目全非。因此需要有一个地方来存储原始的信息，以便在搜到这个文档时能够把原文返回给查询者。</p><p>是否一定需要存储原始文档？不一定！如果没有取出整个原始 json 结构体的需求，可以在 mapping 中关闭 source 字段或者只在 source 中存储部分字段（使用store）。 </p><p><strong>关闭source的负面影响</strong>：</p><p>（1）<strong>不能获取到原文</strong>，不能使用update、update_by_query api<br>（2）<strong>无法reindex</strong>：如果存储了 source，当 index 发生损坏，或需要改变 mapping 结构时，由于存在原始数据，ES可以通过原始数据自动重建index，如果不存 source 则无法实现<br>（3）无法在查询中使用script：因为 script 需要访问 source 中的字段</p><h3 id="store"><a href="#store" class="headerlink" title="store"></a>store</h3><p>store 决定一个字段是否要被单独存储。source 里面中已经存储了原始的文档，为什么还需要一个额外的 store 属性呢？原因如下：</p><p>（1）如果禁用了 source 保存，可以通过指定 store 属性来单独保存某个或某几个字段，而不是将整个输入文档保存到 source 中。</p><p>（2）如果 source 中有长度很长的文本（如一篇文章）和较短的文本（如文章标题），当只需要取出标题时，如果使用 source 字段，ES需要读取整个 source 字段，然后返回其中的 title，由此会引来额外的IO开销，降低效率。此时可以选择将 title 的 store 设置为true，在 source 字段外单独存储一份。读取时不必在读取整 source 字段了。但是需要注意，应该避免使用 store 查询多个字段，因为 store 的存储在磁盘上不连续，ES在读取不同的 store 字段时，每个字段的读取均需要在磁盘上进行查询操作，而使用 source 字段可以一次性连续读取多个字段。</p><h3 id="doc-values"><a href="#doc-values" class="headerlink" title="doc_values"></a>doc_values</h3><p>倒排索引可以提供全文检索能力，但是无法提供对排序和数据聚合的支持。doc_values 本质上是一个序列化的列式存储结构，适用于聚合（aggregations）、排序（Sorting）、脚本（scripts access to field）等操作。</p><p>默认情况下，ES几乎会为所有类型的字段存储doc_value，但是 text 或 text_annotated 等可分词字段不支持 doc values 。如果不需要对某个字段进行排序或者聚合，则可以关闭该字段的doc_value存储。</p><h3 id="index"><a href="#index" class="headerlink" title="index"></a>index</h3><p>控制倒排索引，用于标识指定字段是否需要被索引。默认情况下是开启的，如果关闭了 index，则该字段的内容不会被 analyze 分词，也不会存入倒排索引，即意味着该字段无法被搜索。</p><h3 id="enabled"><a href="#enabled" class="headerlink" title="enabled"></a>enabled</h3><p>一个 index 和 doc_value 的总开关，如果 enabled 设置为false，则这个字段将会仅存在于 source 中，其对应的 index 和 doc_value 都不会被创建。这意味着，该字段将不可以被搜索、排序或者聚合，但可以通过 source 获取其原始值。</p><h3 id="term-vector"><a href="#term-vector" class="headerlink" title="term_vector"></a>term_vector</h3><p>在对文本进行 analyze 的过程中，可以保留有关分词结果的相关信息，包括单词列表、单词之间的先后顺序、单词在原文中的位置等信息。查询结果返回的高亮信息就可以利用其中的数据来返回。默认情况下，term_vector是关闭的，如有需要（如加速highlight结果）可以开启该字段的存储。</p><h3 id="doc-values详细说明"><a href="#doc-values详细说明" class="headerlink" title="doc_values详细说明"></a><strong>doc_values详细说明</strong></h3><p>1.doc_values 的作用：</p><p>基于 lucene 的 solr 和 es 都是使用倒排索引实现快速检索的，也就是通过建立 “搜索关键词 ==&gt;文档ID列表” 的关系映射实现快速检索，但是倒排索引也是有缺陷的，比如我们需要字段值做一些排序、分组、聚合操作，lucene 内部会遍历提取所有出现在文档集合的排序字段，然后再次构建一个最终的排好序的文档集合list，这个步骤的过程全部维持在内存中操作，而且如果排序数据量巨大的话，非常容易就造成solr内存溢出和性能缓慢。</p><p>doc values 就是在构建倒排索引时，会对开启 doc values 的字段额外构建一个有序的 “document文档 ==&gt; field value“ 的列式存储映射，从而实现对指定字段进行排序和聚合时对内存的依赖，提升该过程的性能。默认情况下每个字段的 doc values 都是开启的，当然 doc values 也会耗费一定的磁盘空间。</p><p>另外 doc values 保存在操作系统的磁盘中，当 doc values 大于节点的可用内存，ES 可以从操作系统页缓存中加载或弹出，从而避免发生 JVM 内存溢出的异常，docValues 远小于节点的可用内存，操作系统自然将所有Doc Values存于内存中（堆外内存），有助于快速访问。</p><p>2.doc_values 与 source 的区别？使用 docvalue_fields 检索指定的字段？</p><p>post 提交到 ES 的原始 Json 文档都存储在 source 字段中，默认情况下，每次搜索的命中结果都包含文档 source，即使仅请求少量字段，也必须加载并解析整个 source 对象，而 source 每次使用时都必须加载和解析，所以使用 source 非常慢。为避免该问题，当我们只需要返回相当少的支持 doc_values 的字段时，可以使用 docvalue_fields 参数获取选定字段的值。</p><p>doc values 存储与 _source 相同的值，但在磁盘上基于列的结构中进行了优化，以进行排序和汇总。由于每个字段都是单独存储的，因此 Elasticsearch 仅读取请求的字段值，并且可以避免加载整个文档 _source。通过 docvalue_fields 可以从建好的列式存储结果中直接返回字段值，毕竟 source 是从一大片物理磁盘去，理论上从 doc values 处拿这个字段值会比 source 要快一点，页面抖动少一点。</p><p>3.doc values 通过牺牲一定的磁盘空间带来的好处主要有两个：</p><p>节省内存<br>提升排序，分组等聚合操作的性能</p><p>4.如何在 ES 中使用 doc values？</p><p>（1）我们首先关注如何激活 doc values，只要开启 doc values 后，排序，分组，聚合的时候会自动使用 doc values 提速。在 ES 中，doc values 默认是开启的，比较简单暴力，可以酌情关闭一些不需要使用 doc values 的字段，以节省磁盘空间，只需要设置 doc_values 为 false 就可以了。</p><p>示例如下：”session_id”:{“type”:”string”,”index”:”not_analyzed”,”doc_values”:false}</p><p>（2）使用 docvalue_fields 的检索指定的字段：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET test/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match": {</span><br><span class="line">      "disk_uuid": "test"</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  "docvalue_fields": ["util", "svctm"]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>使用方式</strong></p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET product/_search</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"stored_fields"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">"name"</span><span class="punctuation">,</span><span class="string">"tags"</span><span class="punctuation">,</span><span class="string">"price"</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"docvalue_fields"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"_source"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><h2 id="总结：什么场景可以去掉-source-什么场景可以去掉doc-values"><a href="#总结：什么场景可以去掉-source-什么场景可以去掉doc-values" class="headerlink" title="总结：什么场景可以去掉_source?什么场景可以去掉doc_values?"></a>总结：什么场景可以去掉_source?什么场景可以去掉doc_values?</h2><h3 id="去掉-source"><a href="#去掉-source" class="headerlink" title="去掉_source"></a>去掉_source</h3><p>原数据过大、指标类数据</p><h3 id="去掉doc-values"><a href="#去掉doc-values" class="headerlink" title="去掉doc values"></a>去掉doc values</h3><p>不需要用户聚合、排序</p><h1 id="数据写入过程"><a href="#数据写入过程" class="headerlink" title="数据写入过程"></a>数据写入过程</h1><h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><p><strong>Document（文档）</strong>: 文档是存储在elasticsearch中的一个JSON文件，相当于关系数据库中表的一行数据。</p><p><strong>Shard（分片）</strong>：索引数据可以拆分为较小的分片，每个分片放到不同的服务器上，提高并发能力。Lucene 中的 Lucene index 相当于 ES 的一个 shard。</p><p><strong>Segments（段）</strong>: 分片由多个segments组成，每个segments都是一个独立的倒排索引，且具有不变性，segment 提供了搜索功能。</p><p><strong>Transaction Log（translog，事务日志）</strong>：ES使用translog来记录index,delete,update,bulk请求，保障数据不丢失，如果Elasticsearch需要恢复数据可以从translog中读取。每个分片对应一个translog文件。</p><p><strong>Commit point（提交点）</strong>：记录着所有已知的segment。</p><p><strong>Lucene index</strong> ：由一堆 Segment 的集合加上一个Commit point组成。</p><h2 id="写入模型"><a href="#写入模型" class="headerlink" title="写入模型"></a>写入模型</h2><p>ES 的任意节点可作为写入请求的协调节点，接收用户请求，协调节点先将写入请求 hash 至分片粒度并先转发对应主分片写入，主分片写入成功再转发至从分片，主从分片均写入完毕经协调节点返回客户端成功。写操作一般会经历三种节点：<strong>协调节点</strong>、<strong>主分片</strong>所在节点、<strong>从分片</strong>所在节点。</p><p>如图NODE1可视为协调节点，协调节点接收到请求后，确定写入的文档属于分片0，于是将请求转发到分片0的主分片所在的节点NODE3，</p><p>NODE3完成写入后，再将请求转发给分片0所属的从分片所在的节点NODE1和NODE2</p><p>待所有从分片写入成功后，NODE3则认为整个写入成功并将结果反馈给协调节点，协调节点再将结果返回客户端。</p><p>写⼊时设置副本，有副本的索引创建操作，然后写⼊；如果是写⼊后，再设置副本，则此时采⽤的是复制操作ES为了减少磁盘IO保证读写性能，⼀般是每隔⼀段时间（⽐如5分钟）才会把Lucene的segment写⼊磁盘持久化在每个shard中，写⼊流程分为两部分，先写⼊Lucene，后写⼊Translog</p><h2 id="写入流程优化"><a href="#写入流程优化" class="headerlink" title="写入流程优化"></a>写入流程优化</h2><h3 id="translog-flush间隔调整"><a href="#translog-flush间隔调整" class="headerlink" title="translog flush间隔调整"></a>translog flush间隔调整</h3><p>这是影响ES写⼊的最⼤因素。translog flush操作是将内存中的数据写⼊磁盘，典型的IO操作。ES默认为了写⼊的可靠性，采⽤的配置</p><p>为:index.translog.durability: request</p><p>每个写⼊请求都flflush到磁盘，确保写操作是可靠的</p><p>如果系统接受⼀定概率的数据丢失，可设置为根据固定周期和固定⼤⼩的flush操作，⽐如</p><p>index.translog.durability: async</p><p>index.translog.sync_interval: 120s</p><p>or</p><p>index.translog.flflush_threshold_size: 1024mb</p><p>设置translog的flush频率可以控制可靠性，要么是按请求，每次请求都flush；要么是按时间，每隔⼀段时间flush⼀次，⼀般为了性能考虑，会设置为每隔5秒或者1分钟flush⼀次；flush间隔时间越⻓，可靠性就会越低。</p><h3 id="索引刷新间隔refresh-interval"><a href="#索引刷新间隔refresh-interval" class="headerlink" title="索引刷新间隔refresh_interval"></a>索引刷新间隔refresh_interval</h3><p>每次索引的refresh会产⽣⼀个新的Lucene段，增⼤refresh周期，可减少段的创建以及后续的Force Merge操作</p><h3 id="段合并优化"><a href="#段合并优化" class="headerlink" title="段合并优化"></a>段合并优化</h3><p>segment merge操作对系统I/O和内存占⽤都⽐较⾼，需要调整参数，改变⾏为。（这点⽤的少）</p><h3 id="indexing-buffer"><a href="#indexing-buffer" class="headerlink" title="indexing buffer"></a>indexing buffer</h3><p>indexing buffer在为doc建⽴索引时使⽤，当缓冲满时会刷⼊磁盘，⽣成⼀个新的segment，这是除了refresh_interval刷新索引之外，另⼀个⽣成新segment的机会。</p><p>indices.memory.index_buffer_size</p><p>indices.memory.min_index_buffer_size</p><p>indices.memory.max_index_buffer_size</p><p>当执⾏⼤量的索引操作时，indices.memory.index_buffer_size的默认设置可能不够，这和可⽤堆内存、单节点上的</p><p>shard数量相关，可以考虑适当增⼤该值</p><h3 id="使⽤bulk请求"><a href="#使⽤bulk请求" class="headerlink" title="使⽤bulk请求"></a>使⽤bulk请求</h3><p>批量写效率更⾼，每个请求最好避免超过⼏⼗兆，避免给集群带来压⼒</p><h3 id="bulk线程池和队列"><a href="#bulk线程池和队列" class="headerlink" title="bulk线程池和队列"></a>bulk线程池和队列</h3><p>建⽴索引过程属于CPU密集型任务，应该使⽤固定⼤⼩的线程池配置，来不及处理的任务放⼊队列。线程池最⼤线程数量应配置为</p><p>CPU核⼼数+1，队列可以适当的增加，但要控制⼤⼩，过⼤的队列会导致较⾼的GC压⼒</p><h3 id="并发执⾏bulk请求"><a href="#并发执⾏bulk请求" class="headerlink" title="并发执⾏bulk请求"></a>并发执⾏bulk请求</h3><p>bulk写请求是个⻓任务，为了给系统增加⾜够的写⼊压⼒，写⼊过程应该多个客户端、多线程地并⾏执⾏，直⾄CPU打满。</p><h3 id="⾃动⽣成Doc-ID"><a href="#⾃动⽣成Doc-ID" class="headerlink" title="⾃动⽣成Doc ID"></a>⾃动⽣成Doc ID</h3><p>如果写⼊doc时指定了id，则ES会先尝试读取原来doc的版本号以判断是否需要更新，这会涉及⼀次读取磁盘的操作。总结下来两点：</p><p>减少磁盘的IO操作</p><p>⾃动⽣成的ID具有⼀定的规律，有利于FST的压缩。</p><p>Lucene从4.0版本开始⼤量使⽤FST（Finite State Transducer）；具有两个优点：1）空间占⽤⼩。通过对词典中单词前缀和后缀的重复利⽤，压缩了存储空间；2）查询速度快，O(len(str))的查询时间复杂度</p><h3 id="调整字段Mappings"><a href="#调整字段Mappings" class="headerlink" title="调整字段Mappings"></a>调整字段Mappings</h3><p>减少字段数量、对于不需要建⽴索引的字段，不写⼊ES（ES+HBase的组合使⽤）</p><p>将不需要建⽴索引的字段index属性设置为not_analyzed或no。对字段不分词，或者不索引，可以减少很多运算操作，降低CPU使⽤</p><p>减少字段内容⻓度</p><p>使⽤不同的分词器，不同的分词器在索引过程中运算复杂度也有较⼤的差异</p><h3 id="调整-source字段"><a href="#调整-source字段" class="headerlink" title="调整_source字段"></a>调整_source字段</h3><p>_source字段⽤于存储doc原始数据，对于部分不需要存储的字段，可以通过includes、excludes过滤。实际环境，⼀般不做调整</p><h3 id="禁⽤-all字段"><a href="#禁⽤-all字段" class="headerlink" title="禁⽤_all字段"></a>禁⽤_all字段</h3><p>ES 5.x _all默认开启，ES 6.x _all字段默认为不启⽤。_all字段中包含所有字段分词后的关键词，作⽤是可以在搜索的时候不指定特定字段，从所有字段中检索。ES 6.x默认禁⽤_all字段主要有以下⼏点原因：</p><p>由于需要从其他的全部字段复制所有字段值，导致_all字段占⽤⾮常⼤的空间</p><p>_all字段有⾃⼰的分析器，在进⾏某些查询时，结果不符合预期</p><p>由于数据重复引起的额外建⽴索引的开销</p><p>想要调试时，其内容不容易检查</p><p>有些⽤户甚⾄不知道存在这个字段，导致了查询混乱</p><p>可以通过mapping中将enabled设置为false来禁⽤_all字段，禁⽤_all字段可以明显降低对CPU和I/O的压⼒。</p><h3 id="对Analyzed的字段禁⽤Norms"><a href="#对Analyzed的字段禁⽤Norms" class="headerlink" title="对Analyzed的字段禁⽤Norms"></a>对Analyzed的字段禁⽤Norms</h3><p>Norms⽤于在搜索时计算doc的评分，如果不需要评分，则可以将其禁⽤：</p><p>“title”: {“type”: “text”, “norms”: {“enabled”: false}}</p><h3 id="index-options设置"><a href="#index-options设置" class="headerlink" title="index_options设置"></a>index_options设置</h3><p>index_options⽤于控制在建⽴倒排索引过程中，哪些内容会被添加到倒排索引中；例如doc数量、词频、positions、offsets等，优化这些设置可以⼀定程度上降低索引过程中的运算任务（较少使用）。</p><h1 id="数据查询过程"><a href="#数据查询过程" class="headerlink" title="数据查询过程"></a>数据查询过程</h1><h2 id="查询流程示意图"><a href="#查询流程示意图" class="headerlink" title="查询流程示意图"></a>查询流程示意图</h2><h2 id="查询模型"><a href="#查询模型" class="headerlink" title="查询模型"></a>查询模型</h2><h2 id="查询优化"><a href="#查询优化" class="headerlink" title="查询优化"></a>查询优化</h2><h3 id="为⽂件系统cache预留⾜够的内存"><a href="#为⽂件系统cache预留⾜够的内存" class="headerlink" title="为⽂件系统cache预留⾜够的内存"></a>为⽂件系统cache预留⾜够的内存</h3><p>命中cache可以降低对磁盘的直接访问频率，搜索很依赖对系统cache的命中；如果某个请求需要从磁盘读取数据，则⼀定会产⽣相对较⾼的延迟。应该⾄少为系统cache预留⼀半的可⽤物理内存，更⼤的内存有更⾼的cache命中率。</p><h3 id="使⽤更快的硬件"><a href="#使⽤更快的硬件" class="headerlink" title="使⽤更快的硬件"></a>使⽤更快的硬件</h3><p>搜索性能在⼀般情况下更多的是在于IO能⼒，使⽤SSD会⽐旋转类存储介质好的多。如果搜索类型属于计算⽐较多，则可以考虑使⽤更快的CPU。</p><h3 id="⽂档模型"><a href="#⽂档模型" class="headerlink" title="⽂档模型"></a>⽂档模型</h3><p>为了让搜索时的成本更低，⽂档应该合理建模。特别是应该避免join操作，嵌套（nested）会使查询慢⼏倍，⽗⼦（parent-child）关系可能使查询慢数百倍，因此最好通过⾮规范化（denormalizing）⽂档来回答相同的问题，则可以显著提⾼搜索速度。</p><h3 id="预索引数据"><a href="#预索引数据" class="headerlink" title="预索引数据"></a>预索引数据</h3><p>例如根据价格区间进行group，以及计算数量，则可以增加price_range字段</p><p>PUT index/type/1</p><p>{</p><p> “designation”: “spoon”,</p><p> “price”: 13</p><p>}</p><p>富化为</p><p>PUT index/type/1</p><p>{</p><p> “designation”: “spoon”,</p><p> “price”: 13,</p><p> “price_range”: “10 - 100”</p><p>}</p><h3 id="优化⽇期搜索"><a href="#优化⽇期搜索" class="headerlink" title="优化⽇期搜索"></a>优化⽇期搜索</h3><p>在使⽤⽇期范围检索时，使⽤now的查询通常不能缓存，因为匹配到的范围⼀直在变化。但是从⽤户体验的⻆度来看，切换到⼀个完整的⽇期通常是可以接受的，这样可以更好地利⽤查询缓存。因为使⽤now形成的⽇期是⼀个⾮固定的值，每次查询从当前now往前推算形成的时间间隔都会是⼀个崭新的值，因此⽤不到缓存。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>FST构建过程</title>
      <link href="/2023/03/05/treasurebox/elasticsearch/xue-xi-bi-ji/5.luence/3.fst-gou-jian-guo-cheng/"/>
      <url>/2023/03/05/treasurebox/elasticsearch/xue-xi-bi-ji/5.luence/3.fst-gou-jian-guo-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="FST构建过程"><a href="#FST构建过程" class="headerlink" title="FST构建过程"></a>FST构建过程</h1><p>FST表示有限状态集</p><h2 id="FSM-Finle-State-machine-有限状态机"><a href="#FSM-Finle-State-machine-有限状态机" class="headerlink" title="FSM(Finle State machine)有限状态机"></a>FSM(Finle State machine)有限状态机</h2><p>表示有限个状态(State)集合以及这些状态之间转移和动作的数学模型，其中一个状态被标记为开始状态，0个或更多的状态被标记为final状态。</p><p>要素：</p><ol><li>有限个状态</li><li>同一时间只能处于同一个状态</li><li>不同状态可以互相转换</li><li>状态是无序</li></ol><p>例如：</p><ul><li>睡觉——&gt;工作——&gt;卫生间——&gt;吃饭</li><li>睡觉——&gt;吃饭——&gt;卫生间——&gt;工作</li><li>睡觉——&gt;卫生间——&gt;工作——&gt;吃饭</li></ul><h2 id="FSA-有限状态接收机"><a href="#FSA-有限状态接收机" class="headerlink" title="FSA 有限状态接收机"></a>FSA 有限状态接收机</h2><p>要素：</p><ol><li>确定性：在任何给定状态下，对于任何输入，最多只能遍历一个transition</li><li>非循环：不可能重复遍历同一个状态</li><li>Final唯一性：当且仅当有限状态机在输入序列的末尾处于最终状态时，才接受特定输入序列</li></ol><ul><li>输入msbtech</li><li>输入msn</li><li>输入wltech</li></ul><h2 id="FST-有限状态转换机"><a href="#FST-有限状态转换机" class="headerlink" title="FST 有限状态转换机"></a>FST 有限状态转换机</h2><p>FST最重要的功能是可以实现key到value的映射，相当于HashMa p&lt;key, value&gt;，FST的查询速度要比HashMap要慢一些，但是FST的内存消耗要比HashMap少很多，FST在Lucene中大量使用，例如：倒排索引存储，同义词典的存储，搜索关键词等</p><p>例如给定一些词项：</p><ul><li>msb/10</li><li>msbtech/5</li><li>msn/2</li><li>wltech/8</li><li>wth/16</li></ul><h2 id="Lucene源码解析FST构建过程"><a href="#Lucene源码解析FST构建过程" class="headerlink" title="Lucene源码解析FST构建过程"></a><strong>Lucene</strong>源码解析FST构建过程</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>压缩算法</title>
      <link href="/2023/03/05/treasurebox/elasticsearch/xue-xi-bi-ji/5.luence/2.ya-suo-suan-fa/"/>
      <url>/2023/03/05/treasurebox/elasticsearch/xue-xi-bi-ji/5.luence/2.ya-suo-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="posting-list压缩算法"><a href="#posting-list压缩算法" class="headerlink" title="posting list压缩算法"></a>posting list压缩算法</h1><h2 id="FOR压缩算法"><a href="#FOR压缩算法" class="headerlink" title="FOR压缩算法"></a>FOR压缩算法</h2><h2 id="RBM压缩"><a href="#RBM压缩" class="headerlink" title="RBM压缩"></a>RBM压缩</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mac</title>
      <link href="/2023/03/02/treasurebox/elasticsearch/ben-di-diao-shi-elasticsearch/mac/"/>
      <url>/2023/03/02/treasurebox/elasticsearch/ben-di-diao-shi-elasticsearch/mac/</url>
      
        <content type="html"><![CDATA[<h2 id="mac环境运行linux"><a href="#mac环境运行linux" class="headerlink" title="mac环境运行linux"></a>mac环境运行linux</h2><p>参考链接：<a href="https://www.elastic.co/cn/blog/how-to-debug-elasticsearch-source-code-in-intellij-idea">https://www.elastic.co/cn/blog/how-to-debug-elasticsearch-source-code-in-intellij-idea</a></p><ol><li><h4 id="首先clone-ElasticSearch源码到本地"><a href="#首先clone-ElasticSearch源码到本地" class="headerlink" title="首先clone ElasticSearch源码到本地"></a>首先clone ElasticSearch源码到本地</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/elastic/elasticsearch.git</span><br><span class="line"></span><br><span class="line">cd elasticsearch </span><br><span class="line">git checkout --track origin/6.6</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="安装IntelliJ-IDEA-软件"><a href="#安装IntelliJ-IDEA-软件" class="headerlink" title="安装IntelliJ IDEA 软件"></a>安装<a href="https://www.jetbrains.com/idea/">IntelliJ IDEA</a> 软件</h4></li><li><h4 id="安装Java并配置java路径"><a href="#安装Java并配置java路径" class="headerlink" title="安装Java并配置java路径"></a>安装Java并配置java路径</h4><ol><li><h5 id="elasticsearch6-6-可以基于java11构建，但是也需要java9的部分功能，所以需要安装java9和java11"><a href="#elasticsearch6-6-可以基于java11构建，但是也需要java9的部分功能，所以需要安装java9和java11" class="headerlink" title="elasticsearch6.6 可以基于java11构建，但是也需要java9的部分功能，所以需要安装java9和java11."></a><strong>elasticsearch6.6 可以基于java11构建，但是也需要java9的部分功能，所以需要安装java9和java11.</strong></h5></li><li><p><strong>java9</strong>:<a href="https://www.oracle.com/java/technologies/javase/javase9-archive-downloads.html">https://www.oracle.com/java/technologies/javase/javase9-archive-downloads.html</a></p></li><li><p><strong>java11</strong>:<a href="https://www.oracle.com/java/technologies/downloads/#java11">https://www.oracle.com/java/technologies/downloads/#java11</a></p></li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开文件</span></span><br><span class="line">vim ～/.bash_profile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加入java安装路径</span></span><br><span class="line">JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk-11.0.2.jdk/Contents/Home </span><br><span class="line">export JAVA_HOME</span><br><span class="line"></span><br><span class="line">JAVA9_HOME=/Library/Java/JavaVirtualMachines/jdk-9.0.4.jdk/Contents/Home </span><br><span class="line">export JAVA9_HOME</span><br><span class="line"></span><br><span class="line">退出文件然后输入：</span><br><span class="line">source ～/.bash_profile</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="使用IntelliJ-IDEA-打开elasticsearch源码"><a href="#使用IntelliJ-IDEA-打开elasticsearch源码" class="headerlink" title="使用IntelliJ IDEA 打开elasticsearch源码"></a>使用IntelliJ IDEA 打开elasticsearch源码</h4><p><img src="/mac/images/image-20230302230200602.png" alt="image-20230302230200602"></p></li><li><h4 id="初始化gradlew，详细步骤可以参考es代码中的CONTRIBUTING-md文件"><a href="#初始化gradlew，详细步骤可以参考es代码中的CONTRIBUTING-md文件" class="headerlink" title="初始化gradlew，详细步骤可以参考es代码中的CONTRIBUTING.md文件"></a>初始化gradlew，详细步骤可以参考es代码中的CONTRIBUTING.md文件</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在终端中执行</span></span><br><span class="line"></span><br><span class="line">./gradlew idea</span><br><span class="line"></span><br><span class="line">./gradlew run --debug-jvm</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="然后等待片刻，如果遇到这个报错，说明8000端口被占用，需要开放端口。"><a href="#然后等待片刻，如果遇到这个报错，说明8000端口被占用，需要开放端口。" class="headerlink" title="然后等待片刻，如果遇到这个报错，说明8000端口被占用，需要开放端口。"></a>然后等待片刻，如果遇到这个报错，说明<strong>8000</strong>端口被占用，需要开放端口。</h4><p><img src="/mac/images/image-20230302222745201.png" alt="image-20230302222745201"></p></li><li><h4 id="下图表示运行成功"><a href="#下图表示运行成功" class="headerlink" title="下图表示运行成功"></a>下图表示运行成功<img src="/mac/images/image-20230302223411391.png" alt="image-20230302223411391"></h4></li><li><p>这时在浏览器上访问<a href="http://localhost:9200/%E5%B9%B6%E4%B8%8D%E8%83%BD%E8%AE%BF%E9%97%AE%EF%BC%8C%E9%9C%80%E8%A6%81%E5%9C%A8idea%E4%B8%8A%E9%85%8D%E7%BD%AEdebug%E6%A8%A1%E5%BC%8F">http://localhost:9200/并不能访问，需要在idea上配置debug模式</a></p><p><img src="/mac/images/image-20230302225150362.png" alt="image-20230302225150362"></p><h5 id="新建一个remote连接："><a href="#新建一个remote连接：" class="headerlink" title="新建一个remote连接："></a>新建一个remote连接：</h5><p><img src="/mac/images/image-20230302225220938.png" alt="image-20230302225220938"></p><h5 id="修改名称和端口"><a href="#修改名称和端口" class="headerlink" title="修改名称和端口"></a>修改名称和端口<img src="/mac/images/image-20230302225315563.png" alt="image-20230302225315563"></h5></li><li><h4 id="看到如下日志代表成功"><a href="#看到如下日志代表成功" class="headerlink" title="看到如下日志代表成功"></a>看到如下日志代表成功</h4><p><img src="/mac/images/image-20230302225612172.png" alt="image-20230302225612172"></p></li><li><h4 id="在浏览器上输入http-localhost-9200-即可访问-image-20230302231400414-mac-images-image-20230302231400414-png"><a href="#在浏览器上输入http-localhost-9200-即可访问-image-20230302231400414-mac-images-image-20230302231400414-png" class="headerlink" title="在浏览器上输入http://localhost:9200/即可访问![image-20230302231400414](mac/images/image-20230302231400414.png)"></a>在浏览器上输入<a href="http://localhost:9200/%E5%8D%B3%E5%8F%AF%E8%AE%BF%E9%97%AE![image-20230302231400414](mac/images/image-20230302231400414.png)">http://localhost:9200/即可访问![image-20230302231400414](mac/images/image-20230302231400414.png)</a></h4></li><li><h4 id="源码文件说明"><a href="#源码文件说明" class="headerlink" title="源码文件说明"></a>源码文件说明</h4><blockquote><p>docs 项目文件</p><p>distribution 分发</p><p>libs 用于构建项目其他部分的库。这些是注定的</p><p>modules 模块</p><p>plugins 插件</p><p>qa 质量保证</p><p>server服务器组件，包含所有模块和插件</p><p>test测试框架和测试工具</p><p>x-packES其余部分集成的商业许可码</p><p>Gradle Build 使用gradle构建和打包</p><p>ConfigurationsGradle依赖的配置</p></blockquote></li></ol><p></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>elsaticsearch操作手册</title>
      <link href="/2023/02/24/treasurebox/elasticsearch/cao-zuo-shou-ce/elsaticsearch-cao-zuo-shou-ce/"/>
      <url>/2023/02/24/treasurebox/elasticsearch/cao-zuo-shou-ce/elsaticsearch-cao-zuo-shou-ce/</url>
      
        <content type="html"><![CDATA[<h1 id="ES操作手册"><a href="#ES操作手册" class="headerlink" title="ES操作手册"></a>ES操作手册</h1><ol><li><h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h3><ol><li><h5 id="集群异常情况GET-cluster-allocation-explain"><a href="#集群异常情况GET-cluster-allocation-explain" class="headerlink" title="集群异常情况GET _cluster/allocation/explain"></a>集群异常情况<code>GET _cluster/allocation/explain</code></h5><ol><li><p>可选参数：</p><ol><li><strong>include_disk_info</strong>：bool，可选，如果为true，返回有关磁盘使用情况和分片大小的情况，默认为false。</li><li><strong>include_yes_decisions</strong>：可选，布尔值）如果<code>true</code>，则在解释中返回<em>YES</em>决定</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看集群状态异常</span></span><br><span class="line">GET _cluster/allocation/explain</span><br></pre></td></tr></tbody></table></figure></li></ol></li><li><h5 id="集群配置GET-cluster-settings"><a href="#集群配置GET-cluster-settings" class="headerlink" title="集群配置GET /_cluster/settings"></a>集群配置<code>GET /_cluster/settings</code></h5><ol><li>查询参数<ol><li><strong><code>flat_settings</code></strong>:（可选，布尔值）如果<code>true</code>，则以平面格式返回设置。默认为 <code>false</code>.</li><li><strong><code>include_defaults</code></strong>:（可选，布尔值）如果<code>true</code>，返回所有默认集群设置。默认为<code>false</code>.</li><li><strong><code>master_timeout</code></strong>:（可选，<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/api-conventions.html#time-units">时间单位</a>）等待连接到主节点的时间。如果在超时到期之前未收到响应，则请求失败并返回错误。默认为 <code>30s</code>.</li><li><strong><code>timeout</code></strong>:（可选，<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/api-conventions.html#time-units">时间单位</a>）等待响应的时间。如果在超时到期之前未收到响应，则请求失败并返回错误。默认为<code>30s</code>.</li></ol></li></ol></li><li><h5 id="集群健康度：GET-cluster-health-lt-target-gt"><a href="#集群健康度：GET-cluster-health-lt-target-gt" class="headerlink" title="集群健康度：GET /_cluster/health/<target>"></a>集群健康度：<code>GET /_cluster/health/&lt;target&gt;</code></h5></li><li><h5 id="集群state：GET-cluster-state"><a href="#集群state：GET-cluster-state" class="headerlink" title="集群state：GET _cluster/state"></a>集群state：<code>GET _cluster/state</code></h5></li><li><h5 id="集群stats："><a href="#集群stats：" class="headerlink" title="集群stats："></a>集群stats：</h5><ol><li><code>GET _cluster/stats</code></li><li><code>GET /_cluster/stats/nodes/&lt;node_filter&gt;</code></li></ol></li><li><h5 id="更新集群配置"><a href="#更新集群配置" class="headerlink" title="更新集群配置"></a>更新集群配置</h5><ol><li><p><code>PUT _cluster/settings</code>，persistent表示永久更新，transient表示临时更新</p></li><li><p>修改集群恢复时每秒的大小</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT /_cluster/settings</span><br><span class="line">{</span><br><span class="line">  "persistent" : {</span><br><span class="line">    "indices.recovery.max_bytes_per_sec" : "50mb"</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>修改集群允许通配符删除</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改集群配置，允许使用通配符删除</span></span><br><span class="line">PUT _cluster/settings</span><br><span class="line">{</span><br><span class="line">  <span class="string">"persistent"</span>:{</span><br><span class="line">    <span class="string">"action.destructive_requires_name"</span>:false</span><br><span class="line">  },</span><br><span class="line">  <span class="string">"transient"</span>:{</span><br><span class="line">    <span class="string">"action.destructive_requires_name"</span>:false</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol></li><li><h5 id="节点功能查询，获取集群中每个节点的作用"><a href="#节点功能查询，获取集群中每个节点的作用" class="headerlink" title="节点功能查询，获取集群中每个节点的作用"></a>节点功能查询，获取集群中每个节点的作用</h5><ol><li><code>GET /_nodes/usage</code></li><li><code>GET /_nodes/&lt;node_id&gt;/usage</code></li><li><code>GET /_nodes/usage/&lt;metric&gt;</code></li><li><code>GET /_nodes/&lt;node_id&gt;/usage/&lt;metric&gt;</code></li><li></li></ol></li><li><h5 id="节点热线程：获取每个选定节点上的热线程情况"><a href="#节点热线程：获取每个选定节点上的热线程情况" class="headerlink" title="节点热线程：获取每个选定节点上的热线程情况"></a>节点热线程：获取每个选定节点上的热线程情况</h5><ol><li><code>GET /_nodes/hot_threads</code></li><li><code>GET /_nodes/&lt;node_id&gt;/hot_threads</code></li><li>查询参数：<ol><li><strong>ignore_idle_threads</strong>：可选，布尔值，如果为真，则过滤掉已知空闲县城</li><li>**<code>interval</code>**：（可选，<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/api-conventions.html#time-units">时间单位</a>）对线程进行第二次采样的时间间隔。默认为<code>500ms</code>.</li><li>**<code>snapshots</code>**：（可选，整数）线程堆栈跟踪的样本数。默认为 <code>10</code>.</li><li>**<code>threads</code>**：（可选，整数）指定要为其提供信息的热线程数。默认为<code>3</code>.</li><li>**<code>master_timeout</code>**：（可选，<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/api-conventions.html#time-units">时间单位</a>）等待连接到主节点的时间。如果在超时到期之前未收到响应，则请求失败并返回错误。默认为 <code>30s</code>.</li><li>**<code>timeout</code><strong>：（可选，<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/api-conventions.html#time-units">时间单位</a>）等待响应的时间。如果在超时到期之前未收到响应，则请求失败并返回错误。默认为<code>30s</code>.</strong><code>type</code>**（可选，字符串）要采样的类型。可用选项有<code>block</code>、<code>cpu</code>和 <code>wait</code>。默认为<code>cpu</code>.</li></ol></li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line">GET  /_nodes/hot_threads </span><br><span class="line">GET /_nodes/nodeId1,nodeId2/hot_threads</span><br><span class="line">GET /_nodes/hot_threads </span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="查询节点信息：检索一个或集群全部节点信息。"><a href="#查询节点信息：检索一个或集群全部节点信息。" class="headerlink" title="查询节点信息：检索一个或集群全部节点信息。"></a>查询节点信息：检索一个或集群全部节点信息。</h5><ol><li><code>GET /_nodes</code></li><li><code>GET /_nodes/&lt;node_id&gt;</code></li><li><code>GET /_nodes/&lt;metric&gt;</code></li><li><code>GET /_nodes/&lt;node_id&gt;/&lt;metric&gt;</code></li><li>metric可选的参数<ol><li>**<code>aggregations</code>**：有关可用聚合类型的信息。</li><li>**<code>http</code>**：有关此节点的 HTTP 接口的信息。</li><li>**<code>indices</code>**：与索引相关的节点级配置：<ul><li><code>total_indexing_buffer</code>: 此节点上索引缓冲区的最大大小。</li></ul></li><li>**<code>ingest</code>**：有关摄取管道和处理器的信息。</li><li>**<code>jvm</code>**：JVM 信息，包括其名称、版本和配置。</li><li>**<code>os</code>**：操作系统信息，包括其名称和版本。</li><li>**<code>plugins</code>**：有关每个节点安装的插件和模块的详细信息。以下信息适用于每个插件和模块：<ul><li><code>name</code>: 插件名称</li><li><code>version</code>: 构建插件的 Elasticsearch 版本</li><li><code>description</code>: 插件用途的简短描述</li><li><code>classname</code>: 插件入口点的完全限定类名</li><li><code>has_native_controller</code>: 插件是否有一个本地控制器进程</li></ul></li><li>**<code>process</code>**：进程信息，包括数字进程 ID。</li><li>**<code>settings</code>**：列出文件中定义的所有正在使用的节点设置<code>elasticsearch.yml</code>。</li><li>**<code>thread_pool</code>**：有关每个线程池的配置信息。</li><li>**<code>transport</code>**：有关节点传输接口的信息。</li></ol></li></ol></li><li><h5 id="验证节点是否可以删除POST-internal-prevalidate-node-removal"><a href="#验证节点是否可以删除POST-internal-prevalidate-node-removal" class="headerlink" title="验证节点是否可以删除POST /_internal/prevalidate_node_removal"></a>验证节点是否可以删除<code>POST /_internal/prevalidate_node_removal</code></h5></li><li><p>此 API 检查尝试从集群中删除指定节点是否可能成功。对于没有未分配分片的集群，删除任何节点都被认为是安全的，这意味着删除节点很可能会成功。如果集群的<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-health.html"><code>red</code>集群健康状况</a>为 ，它会验证节点的移除不会冒移除未分配分片的最后剩余副本的风险。</p><p>响应包括删除指定节点的整体安全性，以及每个节点的详细响应。响应的特定于节点的部分还包括有关为什么删除该节点可能不成功的更多详细信息。</p></li><li><h5 id="节点重新加载安全设置"><a href="#节点重新加载安全设置" class="headerlink" title="节点重新加载安全设置"></a>节点重新加载安全设置</h5></li><li><h5 id="节点统计"><a href="#节点统计" class="headerlink" title="节点统计"></a>节点统计</h5></li><li><h5 id="挂起的集群任务"><a href="#挂起的集群任务" class="headerlink" title="挂起的集群任务"></a>挂起的集群任务</h5></li><li><h5 id="远程集群信息"><a href="#远程集群信息" class="headerlink" title="远程集群信息"></a>远程集群信息</h5></li><li><h5 id="任务管理"><a href="#任务管理" class="headerlink" title="任务管理"></a>任务管理</h5></li><li><h5 id="投票配置排除"><a href="#投票配置排除" class="headerlink" title="投票配置排除"></a>投票配置排除</h5></li><li><h5 id="创建或更新所需的节点"><a href="#创建或更新所需的节点" class="headerlink" title="创建或更新所需的节点"></a>创建或更新所需的节点</h5></li><li><h5 id="获取所需的节点"><a href="#获取所需的节点" class="headerlink" title="获取所需的节点"></a>获取所需的节点</h5></li><li><h5 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h5></li><li><h5 id="获取剩余的节点"><a href="#获取剩余的节点" class="headerlink" title="获取剩余的节点"></a>获取剩余的节点</h5></li></ol></li><li><h3 id="分片"><a href="#分片" class="headerlink" title="分片"></a>分片</h3><ol><li><h5 id="查看索引分片-GET-cat-shards-v"><a href="#查看索引分片-GET-cat-shards-v" class="headerlink" title="查看索引分片:GET _cat/shards?v"></a>查看索引分片:<code>GET _cat/shards?v</code></h5></li></ol></li><li><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><ol><li><h5 id="查看所有索引"><a href="#查看所有索引" class="headerlink" title="查看所有索引"></a>查看所有索引</h5><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 查看索引按照大小排序</span><br><span class="line">GET _cat/indices?s=store.size<span class="punctuation">:</span>desc&amp;v</span><br><span class="line"></span><br><span class="line">#创建索引</span><br><span class="line">curl -XPUT <span class="string">"http://127.0.0.1:9200/test1/"</span> -d</span><br><span class="line">'<span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"settings"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"number_of_shards"</span> <span class="punctuation">:</span> <span class="string">"1"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"number_of_replicas"</span> <span class="punctuation">:</span> <span class="string">"1"</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span>' -H<span class="string">"content-type:application/json"</span></span><br><span class="line"></span><br><span class="line">#删除索引</span><br><span class="line">DELETE test</span><br><span class="line"></span><br><span class="line"># 批量删除索引</span><br><span class="line">DELETE test_*</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="创建索引指定mapping"><a href="#创建索引指定mapping" class="headerlink" title="创建索引指定mapping"></a>创建索引指定mapping</h5><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT <span class="string">"127.0.0.1:9200/test1"</span> -H<span class="string">"content-type:application/json"</span> -d'<span class="punctuation">{</span><span class="attr">"mappings"</span><span class="punctuation">:</span><span class="punctuation">{</span><span class="attr">"properties"</span><span class="punctuation">:</span><span class="punctuation">{</span><span class="attr">"field1"</span><span class="punctuation">:</span><span class="punctuation">{</span><span class="attr">"type"</span><span class="punctuation">:</span><span class="string">"keyword"</span><span class="punctuation">,</span><span class="attr">"copy_to"</span><span class="punctuation">:</span><span class="string">"field_all"</span><span class="punctuation">}</span><span class="punctuation">,</span><span class="attr">"field2"</span><span class="punctuation">:</span><span class="punctuation">{</span><span class="attr">"type"</span><span class="punctuation">:</span><span class="string">"text"</span><span class="punctuation">}</span><span class="punctuation">,</span><span class="attr">"field_all"</span><span class="punctuation">:</span><span class="punctuation">{</span><span class="attr">"type"</span><span class="punctuation">:</span><span class="string">"text"</span><span class="punctuation">}</span><span class="punctuation">}</span><span class="punctuation">}</span><span class="punctuation">}</span>'</span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="查看索引mapping"><a href="#查看索引mapping" class="headerlink" title="查看索引mapping"></a>查看索引mapping</h5><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">$ curl -XGET '<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="punctuation">:</span><span class="number">9200</span>/test/_mapping?pretty'</span><br><span class="line"># ignore_above 表示最长存储的长度，超过时会被丢弃</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"test"</span> <span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"mappings"</span> <span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"properties"</span> <span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"desc"</span> <span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="string">"text"</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"fields"</span> <span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"keyword"</span> <span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">              <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="string">"keyword"</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">"ignore_above"</span> <span class="punctuation">:</span> <span class="number">256</span></span><br><span class="line">            <span class="punctuation">}</span></span><br><span class="line">          <span class="punctuation">}</span></span><br><span class="line">        <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="string">"text"</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"fields"</span> <span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"keyword"</span> <span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">              <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="string">"keyword"</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">"ignore_above"</span> <span class="punctuation">:</span> <span class="number">256</span></span><br><span class="line">            <span class="punctuation">}</span></span><br><span class="line">          <span class="punctuation">}</span></span><br><span class="line">        <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"price"</span> <span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="string">"long"</span></span><br><span class="line">        <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"tags"</span> <span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="string">"text"</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"fields"</span> <span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"keyword"</span> <span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">              <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="string">"keyword"</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">"ignore_above"</span> <span class="punctuation">:</span> <span class="number">256</span></span><br><span class="line">            <span class="punctuation">}</span></span><br><span class="line">          <span class="punctuation">}</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">      <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure></li></ol></li><li><h3 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h3><ol><li><h5 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h5><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST <span class="string">"http://127.0.0.1:9200/test/_doc"</span> -d'<span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"iphone11"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"desc"</span><span class="punctuation">:</span> <span class="string">"256G"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"price"</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">"tags"</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">"shouji"</span><span class="punctuation">,</span> <span class="string">"fangshui"</span><span class="punctuation">,</span> <span class="string">"nfc"</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">}</span>' -H<span class="string">"content-type:application/json"</span></span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h5><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST <span class="string">"http://127.0.0.1:9200/test/_update/1"</span> -d'<span class="punctuation">{</span><span class="attr">"doc"</span><span class="punctuation">:</span><span class="punctuation">{</span><span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"iphone14"</span><span class="punctuation">}</span><span class="punctuation">}</span>' -H<span class="string">"content-type:application/json"</span></span><br></pre></td></tr></tbody></table></figure></li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>算法</title>
      <link href="/2023/02/11/treasurebox/shu-ju-jie-gou/suan-fa/"/>
      <url>/2023/02/11/treasurebox/shu-ju-jie-gou/suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><p>递归：在函数中自己调用自身，类似于压栈</p><p>递归三要素：</p><ol><li>递归边界：一定要有终止条件</li><li>逻辑处理</li><li>调用自身</li><li>状态清理</li></ol><p>例如：</p><p>斐波那契</p><p>某个数的阶乘</p><h2 id="分治：Divde-amp-Conquer"><a href="#分治：Divde-amp-Conquer" class="headerlink" title="分治：Divde &amp; Conquer"></a>分治：Divde &amp; Conquer</h2><p>分而治之：将一个大问题依次解决，类似于庖丁解牛。</p><p>经典算法：二分查找、快排</p><h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><p>简单来说：问题能够分解成子问题来解决，子问题的最优解能递推到最终的最优解，这样子问题最优解称为最优子结构。</p><p>贪心算法与动态规划的不同在于它对每个子问题的解决方案都做出选择，不能回退。动态规划则会保存以前的运算结果，并根据以前的结果对当前进行选择，有回退功能。</p><h2 id="广度优先算法"><a href="#广度优先算法" class="headerlink" title="广度优先算法"></a>广度优先算法</h2><p>Breadth First Search</p><p>在树（图/状态集）中查找特定节点</p><p>每层推进的过程中没有重复的，先扫描某个节点时，将该节点的所有子节点全部加入，以作为下次继续推进。</p><p>又称为地毯式搜索</p><h2 id="深度优先"><a href="#深度优先" class="headerlink" title="深度优先"></a>深度优先</h2><p>Depth First Search</p><p>每层推进的过程中没有重复的，先扫描某个节点时，将某个节点一直扫描到叶子节点之后，再扫描该节点的其他节点。</p><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><ol><li>单调递增或递减</li><li>存在上下界</li><li>能够通过索引访问</li></ol><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>什么是位运算：程序中所有数在计算机内存中都是以二进制的形式储存的。位运算说白了就是对证书在内存中的二进制位进行操作。比如：and运算本来是一个逻辑运算符，但整数与整数之间也可以进行and运算。举个例子：6的二进制是110，11的二进制是1011，那么6 and 11的结果就是2，它的二进制对应位进行逻辑运算的结果（0表示False，1表示True，空位都当0处理）：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">110 AND 1011 &gt;&gt; 0010(b)——&gt; 2(d)</span><br></pre></td></tr></tbody></table></figure><p>由于位运算直接对内存数据进行操作，不需要转成十进制，因此处理速度非常快。</p><table><thead><tr><th>符号</th><th>描述</th><th>运算规则</th></tr></thead><tbody><tr><td>&amp;</td><td>与</td><td>两个位都为1时，结果才为1</td></tr><tr><td>|</td><td>或</td><td>两个位都为0时，结果才为0</td></tr><tr><td>^</td><td>异或</td><td>两个位相同时为0，相异为1</td></tr><tr><td>-</td><td>取反</td><td>0变1，1变0</td></tr><tr><td>&lt;&lt;</td><td>左移</td><td>各二进制位全部左移若敢为，高位丢弃，低位补0</td></tr><tr><td>&gt;&gt;</td><td>右移</td><td>各二进制位全部右移若干位，对无符号数，高位补0，有符号数，各编译器处理方式不一样，有的补符号位(算数右移)，有的补0（逻辑右移）</td></tr></tbody></table><h2 id="动态规划-Dynamic-Programming"><a href="#动态规划-Dynamic-Programming" class="headerlink" title="动态规划(Dynamic Programming)"></a>动态规划(Dynamic Programming)</h2><p>动态规划分为4个思路：</p><ol><li>递归+记忆化 ——&gt; 递推</li><li>状态的定义：opt[n]，dp[n]，fib[n]</li><li>状态转移方程：opt[n] = best_of(opt[n-1],opt[n-2],…)</li><li>最优子结构</li></ol><p>先规划最基础的一步怎么执行，然后逐层反推，得到最优的方案</p><h2 id="DP-vs-回溯-vs-贪心"><a href="#DP-vs-回溯-vs-贪心" class="headerlink" title="DP vs 回溯 vs 贪心"></a>DP vs 回溯 vs 贪心</h2><ul><li>回溯（递归）—— 重复计算，尽可能考虑重复计算问题，减少重复计算</li><li>贪心 —— 永远局部最优</li><li>DP —— 记录局部最优子结构 / 多种记录值</li></ul><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><p>并查集(union &amp; find)是一种树形的数据结构，用于处理一些不交集(Disjoint Sets)的合并及查询问题</p><p>Find：确定元素属于哪一个子集。它可以被用来确定两个元素是否属于同一个子集</p><p>union：将两个子集合并为同一个集合。</p><p>示例，给定一串数组<code>1 2 3 4 5 6 7 8 </code></p><p>拆分为<code>1 2 5 6 8</code> <code>3 4</code> <code>7</code>子集形式</p><h5 id="生活中的例子"><a href="#生活中的例子" class="headerlink" title="生活中的例子"></a>生活中的例子</h5><ol><li>小弟——&gt; 老大</li><li>帮派识别</li><li>两种优化方式：并查集的深度成为rank<ol><li>将rank低的合并到rank高的并查集中</li><li>进行读路径优化：将<code>d c b a a</code>路径全部压缩为<code>d a</code>,<code>c a</code>,<code>b a</code>,<code>a a</code></li></ol></li></ol><h2 id="Cache-缓存"><a href="#Cache-缓存" class="headerlink" title="Cache 缓存"></a>Cache 缓存</h2><ol><li>记忆</li><li>钱包——储物柜</li><li>代码模块</li></ol><h2 id="LRU-Cache"><a href="#LRU-Cache" class="headerlink" title="LRU Cache"></a>LRU Cache</h2><ol><li>Least recently used（最近最少使用）</li><li>Double LinkedList</li><li>O(1)查询，查询最近的数据是O(1)</li><li>O(1)修改</li></ol><h2 id="LFU-Cache"><a href="#LFU-Cache" class="headerlink" title="LFU Cache"></a>LFU Cache</h2><ol><li>LFU ——least frequently used 最近最不常用页面置换算法</li><li>LRU——least recently used 最近最少使用页面置换算法</li></ol><h2 id="Bloom-Filter-布隆过滤器"><a href="#Bloom-Filter-布隆过滤器" class="headerlink" title="Bloom Filter 布隆过滤器"></a>Bloom Filter 布隆过滤器</h2><p>一个很长的二进制向量和一个映射函数</p><p>布隆过滤器可以用于检索一个元素是否在一个集合中</p><p>他的优点是空间效率和查询效率远远超过一般算法，缺点是有一定的误识别率和删除困难</p><p>误识别率：数据存在时会出现误判，不存在时一定不存在</p><p>删除困难：哈希之后的结果不好删除，可能会误删其他元素的值</p><p>案例：</p><ol><li>比特币</li><li>分布式系统（Map-Reduce）</li></ol><h2 id="现实中的算法问题"><a href="#现实中的算法问题" class="headerlink" title="现实中的算法问题"></a>现实中的算法问题</h2><p>适用于找房子，找女朋友，吃饭等等选择问题。</p><p>假设1年找2个女朋友，</p><ol><li>如果能选择之前的，O(n)</li><li>如果不能后悔，则用37%原则</li></ol><p>其他：</p><ol><li>Priority Queue 一个任务的密度=重要程度/完成时间</li><li>Kelly Formula 凯利公式</li><li>Game Theory 博弈论</li></ol><h2 id="代码模版"><a href="#代码模版" class="headerlink" title="代码模版"></a>代码模版</h2><ol><li>递归</li><li>DFS：深度优先遍历</li><li>BFS：广度优先遍历</li><li>二分查找</li><li>DP方程</li></ol><h2 id="练习和切题"><a href="#练习和切题" class="headerlink" title="练习和切题"></a>练习和切题</h2><p><strong>持续练习+精深练习（刻意练习）</strong></p><ol><li>除了做熟悉的题和会做的题之外，去刻意练习自己不熟悉的算法和数据结构，不要为了切题而切题</li><li>做过的题目后续要返回再复习</li></ol><h2 id="面试答题四件套"><a href="#面试答题四件套" class="headerlink" title="面试答题四件套"></a>面试答题四件套</h2><ol><li>Clarification 询问题目细节、边界条件、可能的极端错误</li><li>Possible Solution 所有可能的解法都和面试官沟通一下<ol><li>时间复杂度 &amp; 空间复杂度</li><li>最优解</li></ol></li><li>Coding 写代码</li><li>Test Cases 测试用例</li></ol><p> <strong>沟通和交流很重要</strong></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>常学常新</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>trie</title>
      <link href="/2023/02/11/treasurebox/shu-ju-jie-gou/2.trie/"/>
      <url>/2023/02/11/treasurebox/shu-ju-jie-gou/2.trie/</url>
      
        <content type="html"><![CDATA[<h1 id="Trie树"><a href="#Trie树" class="headerlink" title="Trie树"></a>Trie树</h1><h2 id="trie的数据结构"><a href="#trie的数据结构" class="headerlink" title="trie的数据结构"></a>trie的数据结构</h2><p>trie树，即字典树有称为单词查找树或键树，是一种树形结构，是一种哈希树的变种。典型应用于统计和排序大量的字符串（但不限于字符串），所以经常被搜索引擎系统用于文本词频统计。</p><p>它的优点是：最大限度地减少无谓的字符串比较，查询效率比哈希表高。</p><h2 id="trie的核心思想"><a href="#trie的核心思想" class="headerlink" title="trie的核心思想"></a>trie的核心思想</h2><p>Trie的核心思想是空间换时间。利用字符串的公共前缀来降低查询时间的开销以达到提高效率的目的。</p><h2 id="trie的基本性质"><a href="#trie的基本性质" class="headerlink" title="trie的基本性质"></a>trie的基本性质</h2><ol><li>根节点不包含字符，除根节点外每个节点都只包含一个字符。</li><li>从根节点到某一节点，路径上经过的字符串连接起来，为该节点对应的字符串</li><li>每个节点的所有子节点包含的字符都不相同</li></ol><p><strong>树&amp;二叉树&amp;二叉搜索树</strong></p><p>trie结构类似生活中倒立的树。</p><p>树最头上的节点叫做头结点，左边任何一个树叫做左子树，右边叫右子树。</p><p>其中节点称为父节点，同一个父节点的子节点称为兄弟节点。</p><p>子节点距离头节点的距离为层级，头节点所在的层级为level0.</p><h2 id="二叉搜索树-Binary-Search-Tree-："><a href="#二叉搜索树-Binary-Search-Tree-：" class="headerlink" title="二叉搜索树(Binary Search Tree)："></a>二叉搜索树(Binary Search Tree)：</h2><p>也称为二叉搜索树、有序二叉树(Ordered binary tree)、排序二叉树（Sorted binary tree），是指一颗空树或者具有下列性质的二叉树：</p><ol><li><code>左子树</code>上所有结点的值均小于它的根节点的值。</li><li><code>右子树</code>上所有结点的值均大于它的根结点的值。</li><li>Recursively，左、右子树也分别为二叉查找树。</li></ol><h2 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h2><ol><li>前序遍历：根左右</li><li>中序遍历：左根右</li><li>后序遍历：左右根</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>code review总结</title>
      <link href="/2022/12/29/treasurebox/ji-zhu-wen-dang/code-review-zong-jie/"/>
      <url>/2022/12/29/treasurebox/ji-zhu-wen-dang/code-review-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>作为公司代码委员会golang分会的理事，作为(还未任命)的技术leader，我review了很多代码，看了很多别人的review评论。发现，即使是委员会的委员，code review的水品，写出好代码的水品，不乏缺乏根本性的思路、设计原则的同学。特此，想分享一下我的很多理念和思路。</p><h1 id="为什么技术人员包括leader都要做code-review"><a href="#为什么技术人员包括leader都要做code-review" class="headerlink" title="为什么技术人员包括leader都要做code review"></a>为什么技术人员包括leader都要做code review</h1><p>​        谚语曰: ‘Talk Is Cheap, Show Me The Code’。知易行难，知行合一难。嘴里要讲出来总是轻松，把别人讲过的话记住，组织一下语言，再讲出来，很容易。绝知此事要躬行。设计理念你可能道听途说了一些，以为自己掌握了，但是你会做么？有能力去思考、改进自己当前的实践方式和实践中的代码细节么？不客气地说，很多人仅仅是知道并且认同了某个设计理念，进而产生了一种虚假的安心感—自己的技术并不差。但是，他根本没有去实践这些设计理念，甚至根本实践不了这些设计理念，从结果来说，他懂不懂这些道理/理念，有什么差别？变成了自欺欺人。</p><p>​        代码，是设计理念落地的地方，是技术的呈现和根本。同学们可以在review过程中做到落地沟通，不再是空对空的讨论，可以在实际问题中产生思考的碰撞，互相学习，大家都掌握团队里积累出来最好的实践方式！当然，如果leader没时间写代码，仅仅是review代码，指出其他同学某些实践方式不好，要给出好的实践的意见，即使没亲手写代码，也是对最佳实践要有很多思考。</p><h1 id="为什么同学们要在review中思考和总结最佳实践"><a href="#为什么同学们要在review中思考和总结最佳实践" class="headerlink" title="为什么同学们要在review中思考和总结最佳实践"></a>为什么同学们要在review中思考和总结最佳实践</h1><p>我这里先给一个我自己的总结：所谓架构师，就是掌握大量设计理念和原则、落地到各种语言及附带工具链（生态）下的实践方法、垂直行业模型理解，定制系统模型设计和工程实践规范细则。进而控制30+万行代码项目的开发便利性、可维护性、可测试性、运营质量。</p><p>接着，有一些同学就说了，张小龙老板是厉害的技术人，他是这样的人么？阿里巴巴的王坚是厉害的CTO，他懂golang、c++、java么？接着，我这里拓展讲解一下，我们和他们的不同。我的总结，厉害的技术人，主要可以分为下面几个方向：</p><ul><li><p>奇技淫巧</p><p>掌握很多技巧，以及发现技巧一系列思路，比如很多编程大赛，比的就是这个。但是，这个对工程，用处好像并不是很大。</p></li><li><p>领域奠基</p></li></ul><p>  比如约翰*卡马克，他创造出了现代计算机图形高效渲染的方法论。不论如果没有他，后面会不会有人发明，他就是第一个发明了。1999年，卡马克登上了美国时代杂志评选出来的科技领域50大影响力人物榜单，并且名列第10位。但是，类似的殿堂级位置，没有几个，不够大家分，没我们的事儿。</p><ul><li>理论研究</li></ul><p>  八十年代李开复博士坚持采用隐含马尔可夫模型的框架，成功地开发了世界上第一个大词汇量连续语音识别系统Sphinx。我辈工程师，好像擅长这个的很少。</p><ul><li>产品成功</li></ul><p>  小龙哥，不解释，同学们应该也做不到。</p><ul><li>最佳实践</li></ul><p>  这个是大家都可以做到，按照上面架构师的定义。在这条路上走得好，就能为任何公司组件技术团队，组织建设高质量的系统。</p><p>从上面的讨论中，可以看出，我们普通工程师的进化之路，就是不断打磨最佳实践方法论、落地细节。</p><h1 id="代码变坏的根源"><a href="#代码变坏的根源" class="headerlink" title="代码变坏的根源"></a>代码变坏的根源</h1><p>在讨论什么代码是好代码之前，我们先讨论什么是不好的。计算机是人造的学科，我们自己制造了很多问题，进而去思考解法。</p><h2 id="重复的代码"><a href="#重复的代码" class="headerlink" title="重复的代码"></a>重复的代码</h2><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BatchGetQQTinyWithAdmin 获取QQ uin的tinyID, 需要主uin的tiny和登录态</span></span><br><span class="line"><span class="comment">// friendUins 可以是空列表, 只要admin uin的tiny</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BatchGetQQTinyWithAdmin</span><span class="params">(ctx context.Context, adminUin <span class="type">uint64</span>, friendUin []<span class="type">uint64</span>)</span></span> (</span><br><span class="line">adminTiny <span class="type">uint64</span>, sig []<span class="type">byte</span>, frdTiny <span class="keyword">map</span>[<span class="type">uint64</span>]<span class="type">uint64</span>, err <span class="type">error</span>) {</span><br><span class="line"><span class="keyword">var</span> friendAccountList []*basedef.AccountInfo</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> friendUin {</span><br><span class="line">friendAccountList = <span class="built_in">append</span>(friendAccountList, &amp;basedef.AccountInfo{</span><br><span class="line">AccountType: proto.String(def.StrQQU),</span><br><span class="line">Userid:      proto.String(fmt.Sprint(v)),</span><br><span class="line">})</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">req := &amp;cmd0xb91.ReqBody{</span><br><span class="line">Appid:       proto.Uint32(model.DocAppID),</span><br><span class="line">CheckMethod: proto.String(CheckQQ),</span><br><span class="line">AdminAccount: &amp;basedef.AccountInfo{</span><br><span class="line">AccountType: proto.String(def.StrQQU),</span><br><span class="line">Userid:      proto.String(fmt.Sprint(adminUin)),</span><br><span class="line">},</span><br><span class="line">FriendAccountList: friendAccountList,</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>因为最开始协议设计得不好，第一个使用接口的人，没有类似上面这个函数的代码，自己实现了一个嵌入逻辑代码的填写请求结构结构体的代码，一开始，挺好的。但当有第二个人，第三个人干了类似的事情，我们将无法再重构这个协议，必须做到麻烦的向前兼容。而且每个同学，都要理解一遍上面这个协议怎么填，理解有问题，就触发bug。或者，如果某个错误的理解，普遍存在，我们就得找到所有这些重复的片段，都修改一遍。</p><p>当你要读一个数据，发现两个地方有，不知道该选择哪个。当你要实现一个功能，发现两个rpc接口、两个函数能做到，你不知道选哪一个。你有面临过这样的’人生难题’么？其实怎么选并不重要了，你写的这个代码已经在走向shit的道路上迈出了坚实的一步。</p><p>但是，A little copying is better than a little dependency。这里提一嘴，不展开。</p><p>这里，我必须额外说一句。大家使用trpc。感觉自己被鼓励’每个服务搞一个git’。那，你这个服务里访问db的代码，rpc的代码，各种可以复用的代码，是用的大家都复用的git下的代码么？每次都重复写一遍，db字段细节改了，每个使用过db的server对应的git都改一遍？这个通用git已经写好的接口应该不知道哪些git下的代码因为自己不向前兼容的修改而永远放弃了向前不兼容的修改？</p><h2 id="早期有效的决策不再有效"><a href="#早期有效的决策不再有效" class="headerlink" title="早期有效的决策不再有效"></a>早期有效的决策不再有效</h2><p>很多时候，我们第一版代码写出来，是没有太大的问题的。比如，下面这个代码</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Update 增量更新</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *FilePrivilegeStore)</span></span> Update(key def.PrivilegeKey,</span><br><span class="line">clear, isMerge <span class="type">bool</span>, subtract []*access.AccessInfo, increment []*access.AccessInfo,</span><br><span class="line">policy *<span class="type">uint32</span>, adv *access.AdvPolicy, shareKey <span class="type">string</span>, importQQGroupID <span class="type">uint64</span>) <span class="type">error</span> {</span><br><span class="line"><span class="comment">// 获取之前的数据</span></span><br><span class="line">info, err := s.Get(key)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">incOnlyModify := update(info, &amp;key, clear, subtract, </span><br><span class="line">increment, policy, adv, shareKey, importQQGroupID)</span><br><span class="line">stat := statAndUpdateAccessInfo(info)</span><br><span class="line"><span class="keyword">if</span> !incOnlyModify {</span><br><span class="line"><span class="keyword">if</span> stat.groupNumber &gt; model.FilePrivilegeGroupMax {</span><br><span class="line"><span class="keyword">return</span> errors.Errorf(errors.PrivilegeGroupLimit, </span><br><span class="line"><span class="string">"group num %d larger than limit %d"</span>,</span><br><span class="line">stat.groupNumber, model.FilePrivilegeGroupMax)</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !isMerge {</span><br><span class="line"><span class="keyword">if</span> key.DomainID == <span class="type">uint64</span>(access.SPECIAL_FOLDER_DOMAIN_ID) &amp;&amp;</span><br><span class="line"><span class="built_in">len</span>(info.AccessInfos) &gt; model.FilePrivilegeMaxFolderNum {</span><br><span class="line"><span class="keyword">return</span> errors.Errorf(errors.PrivilegeFolderLimit, </span><br><span class="line"><span class="string">"folder owner num %d larger than limit %d"</span>,</span><br><span class="line"><span class="built_in">len</span>(info.AccessInfos), model.FilePrivilegeMaxFolderNum)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(info.AccessInfos) &gt; model.FilePrivilegeMaxNum {</span><br><span class="line"><span class="keyword">return</span> errors.Errorf(errors.PrivilegeUserLimit, </span><br><span class="line"><span class="string">"file owner num %d larger than limit %d"</span>,</span><br><span class="line"><span class="built_in">len</span>(info.AccessInfos), model.FilePrivilegeMaxNum)</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">pbDataSt := infoToData(info, &amp;key)</span><br><span class="line"><span class="keyword">var</span> updateBuf []<span class="type">byte</span></span><br><span class="line"><span class="keyword">if</span> updateBuf, err = proto.Marshal(pbDataSt); err != <span class="literal">nil</span> {</span><br><span class="line"><span class="keyword">return</span> errors.Wrapf(err, errors.MarshalPBError,</span><br><span class="line"><span class="string">"FilePrivilegeStore.Update Marshal data error, key[%v]"</span>, key)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> err = s.setCKV(generateKey(&amp;key), updateBuf); err != <span class="literal">nil</span> {</span><br><span class="line"><span class="keyword">return</span> errors.Wrapf(err, errors.Code(err),</span><br><span class="line"><span class="string">"FilePrivilegeStore.Update setCKV error, key[%v]"</span>, key)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>现在看，这个代码挺好的，长度没超过80行，逻辑比价清晰。但是当isMerge这里判断逻辑，如果加入更多的逻辑，把局部行数撑到50行以上，这个函数，味道就坏了。出现两个问题：</p><p>1）函数内代码不在一个逻辑层次上，阅读代码，本来在阅读着顶层逻辑，突然就掉入了长达50行的isMerge的逻辑处理细节，还没看完，读者已经忘了前面的代码讲了什么，需要来回看，挑战自己大脑的cache尺寸。</p><p>2）代码有问题后，再新加代码的同学，是改还是不改前人写好的代码呢？要不要往里面填屎，堆屎山呢？出bug谁来背？这是一个灵魂拷问。</p><h2 id="过早的优化"><a href="#过早的优化" class="headerlink" title="过早的优化"></a>过早的优化</h2><p>这个大家听了很多了，这里不赘述。</p><h2 id="对合理性没有苛求"><a href="#对合理性没有苛求" class="headerlink" title="对合理性没有苛求"></a>对合理性没有苛求</h2><p>‘两种写法都ok，你随便挑一种吧’，’我这样也没什么吧’，这是我经常听到的话。</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get 获取IP</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *IPGetter)</span></span> Get(cardName <span class="type">string</span>) <span class="type">string</span> {</span><br><span class="line">i.l.RLock()</span><br><span class="line">ip, found := i.m[cardName]</span><br><span class="line">i.l.RUnlock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> found {</span><br><span class="line"><span class="keyword">return</span> ip</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">i.l.Lock()</span><br><span class="line"><span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line">ip, err = getNetIP(cardName)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> {</span><br><span class="line">i.m[cardName] = ip</span><br><span class="line">}</span><br><span class="line">  </span><br><span class="line">  i.l.Unlock()</span><br><span class="line"><span class="keyword">return</span> ip</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>i.l.Unlock()可以放在当前的位置，也可以放在i.l.Lock()下面，做成defer。两种在最初构造的时候，好像都行。这个时候，很多同学态度就变得不坚决。实际上，这里必须是defer的。</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> i.l.Lock()</span><br><span class="line"><span class="keyword">defer</span> i.l.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line">ip, err = getNetIP(cardName)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line"><span class="keyword">return</span> <span class="string">"127.0.0.1"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">i.m[cardName] = ip</span><br><span class="line"><span class="keyword">return</span> ip</span><br></pre></td></tr></tbody></table></figure><p>这样的修改，是极有可能发生的，它还是要变成defer，那，为什么不一开始就是defer，进入最合理的状态？不一开始就进入最合理的状态，在后续协作种，其他同学很可能犯错！</p><p>##总是面向对象/总喜欢封装</p><p>我是软件工程科班出身。学的第一门编程预言是c++。教材是<a href="https://book.douban.com/subject/1112255/">这本</a> 。当时自己读完教材，初入程序设计之门，对于里面讲的’封装’，惊为天人，多么美妙的设计啊，面向对象，多么智慧的设计啊。但是，这些年来，我看到了大牛’云风’对于’毕业生使用mysql api就喜欢搞个class封装再用’的嘲讽；看到了各种莫名其妙的class定义；体会到了经常要去看一个莫名其妙的继承树，必须要把整个继承树整体读明白才能确认一个细小的逻辑分支；多次体会到了我需要辛苦地压抑住自己的抵触情绪，去细度一个自作聪明的被封装的代码，确认我的bug。除了UI类场景，我认为少用继承、多用组合。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_PKG_TYPE</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CSuperAction</span> : <span class="keyword">public</span> CSuperActionBase {</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> _PKG_TYPE pkg_type;</span><br><span class="line">    <span class="keyword">typedef</span> CSuperAction&lt;pkg_type&gt; this_type;</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这是sspp的代码。CSuperAction和CSuperActionBase，一会儿super，一会儿又base，Super和SuperBase是在怎样的两个抽象层次上，不通读代码，没人能读明白。我想确认任何细节，都要把多个层次的代码都通读了，有什么封装性可言？</p><p>好，你说是作者没有把class name取得好。那，问题是，你能取得好么？一个刚入职的T1.2的同学能把class name、class树设计得好么？即使是对简单的业务模型，也需要无数次’坏’的对象抽象实践，才能培养出一个具有合格的class抽象能力的同学，这对于大型却松散的团队协作，不是破坏性的？已经有了一套继承树，想要添加功能就只能在这个继承树里添加，以前的继承树不再适合新的需求，这个继承树上所有的class，以及使用它们的地方，你都去改？不，是个正常人都会放弃，开始堆屎山。</p><p>封装，就是我可以不关心实现。但是，做一个稳定的系统，每一层设计都可能出问题。abi，总有合适的用法和不合适的用法，真的存在我们能完全不关心封装的部分是怎么实现的？不，你不能。bug和性能问题，常常就出现在，你用了错误的用法去使用一个封装好的函数。即使是android、ios的api，golang、java现成的api，我们常常都要去探究实现，才能把api用好。那，我们是不是该一上来，就做一个透明性很强的函数，才更为合理？使用者想知道细节，进来吧，我的实现很易读，你看看就明白，使用时不会迷路！对于逻辑复杂的函数，我们还要强调函数内部工作方式’可以让读者在大脑里想象呈现完整过程’的可显性，让使用者轻松读懂，有把握，使用时，不迷路！</p><h2 id="根本没有设计"><a href="#根本没有设计" class="headerlink" title="根本没有设计"></a>根本没有设计</h2><p>这个最可怕，所有需求，上手就是一顿撸，’设计是什么东西？我一个文件5w行，一个函数5k行，干不完需求？’从第一行代码开始，就是无设计的，随意地踩着满地的泥坑，对于旁人的眼光没有感觉，一个人独舞，产出的代码，完成了需求，毁灭了接手自己代码的人本该用来啪啪啪的夜晚~ 这个就不举例了，每个同学应该都能在自己的项目类发现这种代码。</p><h1 id="必须形而上的思考"><a href="#必须形而上的思考" class="headerlink" title="必须形而上的思考"></a>必须形而上的思考</h1><p>常常，同学们听演讲，公开课，就喜欢听一些细枝末节的’干活’。这没有问题。但是，你干了几年活，学习了多少干货知识点？构建起自己的技术思考’面’，进入立体的’工程思维’，把技术细节和系统要满足的需求在思考上连接起来了么？当听一个需求的时候，你能思考到自己的code package该怎么组织，函数该怎么组织了么？我相信，在腾讯，大多数人没做到，不客气地说，即使是很多T4。</p><p>那，技术点要怎么和需求连接起来呢？答案很简单，你需要在时间里总结，总结出一些明确的原则、思维过程。思考怎么去总结，特别像是在思考哲学问题。从一些琐碎的细节中，由具体情况上升到一些原则、公理。同时，大家在接受原则时，不应该是接受和记住原则本身，而应该是结构原则，让这个原则在自己这里重新推理一遍，自己完全掌握这个原则的适用范围。</p><p>再进一步具体地说，对于工程最佳实践的形而上的思考过程，就是：</p><p>把工程实践中遇到的问题，从问题类型和解法类型，两个角度去归类，总结出一些有限适用的原则，就从点到了面。把诸多总结出的原则，组合应用到自己的项目代码中，就是把多个面结合起来构建了一套立体的最佳实践的方案。当你这套方案能适应30w+行代码的项目，超过30人的项目，你就架构师入门了！当你这个项目，是多端，多语言，代码量超过300w行，参与人数超过300人，代码质量依然很高，代码依然在高效地自我迭代，每天消除掉过时的代码，填充高质量的替换旧代码和新生的代码。恭喜你，你已经是一个很高级的架构师了！再进一步，你对某个业务模型有独到或者全面的理解，构建了一套行业第一的解决方案，结合刚才高质量实现的能力，实现了这么一个项目。没啥好说的，你已经是专家工程师了。级别再高，我就不了解了，不在这里讨论。</p><p>那么，我们要重头开始积累思考和总结？不，有一本书叫做&lt;unix编程艺术&gt;，我在不同的时期分别读了3遍，等一会，我讲一些里面提到的，我觉得在腾讯尤其值得拿出来说的原则。这些原则，正好就能作为code review时大家判定代码质量的准绳。但，在那之前，我得讲一下另外一个很重要的话题，模型设计。</p><h1 id="model设计"><a href="#model设计" class="headerlink" title="model设计"></a>model设计</h1><p>没读过oauth2.0 RFC，就去设计第三方授权登陆的人，终归还要再发明一个撇脚的oauth。</p><p>2012年我刚毕业，我和一个去了广州联通公司的华南理工毕业生聊天。当时他说他工作很不开心，因为工作里 不经常写代码，而且认为自己，有ACM竞赛金牌级的算法熟练度+对CPP代码的熟悉，写下一个个指针操作内存，什么程序写不出来，什么事情做不好。当时我觉得，挺有道理，编程工具在手，我什么事情做不了？</p><p>现在，我会告诉他，复杂如linux操作系统、Chromium引擎、windows office，你做不了。原因是，他根本没进入软件工程的工程世界。不是会搬砖就能修出港珠澳大桥。但是，这么回答并不好，举证用的论据离我们太遥远了。见微知著。我现在会回答，你做不了，简单如一个权限系统，你知道怎么做么？堆积一堆逻辑层次一维展开的ifelse？简单如一个共享文件管理，你知道怎么做么？堆积一堆逻辑层次一维展开的ifelse？你联通有上完台服务器，你要怎么写一个管理平台？堆积一堆逻辑层次一维展开的ifelse？</p><p>上来就是干，能实现上面提到的三个看似简单的需求？想一想，亚马逊、阿里云折腾了多少年，最后才找到了容器+Kubernetes的大杀器。这里，需要谷歌多少年在BORG系统上的实践，提出了优秀的服务编排领域模型。权限领域，有RBAC、DAC、MAC等等模型，到了业务，又会有细节的不同。如Domain Driven Design说的，没有良好的领域思考和模型抽象，逻辑复杂度就是n^2指数级的，你得写多少ifelse，得思考多少可能的if路径，来cover所有的不合符预期的情况。你必须要有Domain思考探索、model拆解/抽象/构建的能力。有人问过我，要怎么有效地获得这个能力？这个问题我没能回答，就像是在问我，怎么才能获得MIT博士的学术能力？我无法回答。唯一回答就是，进入某个领域，就是首先去看前人的思考，站在前人的肩膀上，再用上自己的通识能力，去进一步思考。至于怎么建立好的通识思考能力，可能得去常青藤读个书吧：）或者，就在工程实践中思考和锻炼自己的这个能力！</p><p>同时，基于model设计的代码，能更好地适应产品经理不断变更的需求。比如说，一个calendar(日历)应用，简单来想，不要太简单！以’userid_date’为key记录一个用户的每日安排不就完成了么？只往前走一步，设计了一个任务，上限分发给100w个人，创建这么一个任务，是往100w个人下面添加一条记录？你得改掉之前的设计，换db。再往前走一步，要拉出某个用户和某个人一起要参与的所有事务，是把两个人的所有任务来做join？好像还行。如果是和100个人一起参与的所有任务呢？100个人的任务来join？不现实了吧。好，你引入一个群组id，那么，你最开始的’userid_date’为key的设计，是不是又要修改和做数据迁移了？经常来一个需求，你就得把系统推翻重来，或者根本就只能拒绝用户的需求，这样的战斗力，还好意思叫自己工程师？你一开始就应该思考自己面对的业务领域，思考自己的日历应用可能的模型边界，把可能要做的能力都拿进来思考，构建一个model，设计一套通用的store层接口，基于通用接口的逻辑代码。当产品不断发展，就是不停往模型里填内容，而不是推翻重来。这，思考模型边界，构建模型细节，就是两个很重要的能力，也是绝大多数腾讯产品经理不具备的能力，你得具备，对整个团队都是极其有益的。你面对产品经理时，就听取他们出于对用户体验负责思考出的需求点，到你自己这里，用一个完整的模型去涵盖这些零碎的点。</p><p>model设计，是形而上思考中的一个方面，一个特别重要的方面。接下来，我们来抄袭抄袭unix操作系统构建的实践为我们提出的前人实践经验和’公理’总结。在自己的coding/code review中，站在巨人的肩膀上去思考。不重复地发现经典力学，而是往相对论挺进。</p><h1 id="UNIX设计哲学"><a href="#UNIX设计哲学" class="headerlink" title="UNIX设计哲学"></a>UNIX设计哲学</h1><p>不懂Unix的人注定最终还要重复发明一个撇脚的Unix。–Henry Spenncer, 1987.11</p><p>下面这一段话太经典，我必须要摘抄一遍(自《UNIX编程艺术》)：<br>“工程和设计的每个分支都有自己的技术文化。在大多数工程领域中，就一个专业人员的素养组成来说，有些不成文的行业素养具有与标准手册及教科书同等重要的地位(并且随着专业人员经验的日积月累，这些经验常常会比书本更重要)。资深工程师们在工作中会积累大量的隐性知识，他们用类似禅宗’教外别传’的方式，通过言传身教传授给后辈。<br>软件工程算是此规则的一个例外：技术变革如此之快，软件环境日新月异，软件技术文化暂如朝露。然而，例外之中也有例外。确有极少数软件技术被证明经久耐用，足以演进为强势的技术文化、有鲜明特色的艺术和世代相传的设计哲学。“</p><p>接下来，我用我的理解，讲解一下几个我们常常做不到的原则。</p><h2 id="Keep-It-Simple-Stuped"><a href="#Keep-It-Simple-Stuped" class="headerlink" title="Keep It Simple Stuped!"></a>Keep It Simple Stuped!</h2><p>KISS原则，大家应该是如雷贯耳了。但是，你真的在遵守？什么是Simple？简单？golang语言主要设计者之一的Rob Pike说’大道至简’，这个’简’和简单是一个意思么？</p><p>首先，简单不是面对一个问题，我们印入眼帘第一映像的解法为简单。我说一句，感受一下。”把一个事情做出来容易，把事情用最简单有效的方法做出来，是一个很难的事情。”比如，做一个三方授权，oauth2.0很简单，所有概念和细节都是紧凑、完备、易用的。你觉得要设计到oauth2.0这个效果很容易么？要做到简单，就要对自己处理的问题有全面的了解，然后需要不断积累思考，才能做到从各个角度和层级去认识这个问题，打磨出一个通俗、紧凑、完备的设计，就像ios的交互设计。简单不是容易做到的，需要大家在不断的时间和code review过程中去积累思考，pk中触发思考，交流中总结思考，才能做得愈发地好，接近’大道至简’。</p><p>两张经典的模型图，简单又全面，感受一下，没看懂，可以立即自行google学习一下：<br>RBAC:<br><img src="../../resource/pic/common_privilege.png" alt="avatar" style="zoom:50%;" title="rbac"><br>logging:<br><img src="../../resource/pic/logging.png" alt="avatar" style="zoom:50%;" title="logging"></p><h2 id="原则3-组合原则-设计时考虑拼接组合"><a href="#原则3-组合原则-设计时考虑拼接组合" class="headerlink" title="原则3 组合原则: 设计时考虑拼接组合"></a>原则3 组合原则: 设计时考虑拼接组合</h2><p>关于OOP，关于继承，我前面已经说过了。那我们怎么组织自己的模块？对，用组合的方式来达到。linux操作系统离我们这么近，它是怎么架构起来的？往小里说，我们一个串联一个业务请求的数据集合，如果使用BaseSession，XXXSession inherit BaseSession的设计，其实，这个继承树，很难适应层出不穷的变化。但是如果使用组合，就可以拆解出UserSignature等等各种可能需要的部件，在需要的时候组合使用，不断添加新的部件而没有对老的继承树的记忆这个心智负担。</p><p>使用组合，其实就是要让你明确清楚自己现在所拥有的是哪个部件。如果部件过于多，其实完成组合最终成品这个步骤，就会有较高的心智负担，每个部件展开来，琳琅满目，眼花缭乱。比如QT这个通用UI框架，看它的<a href="https://doc.qt.io/qt-5/classes.html">Class列表</a>，有1000多个。如果不用继承树把它组织起来，平铺展开，组合出一个页面，将会变得心智负担高到无法承受。OOP在’需要无数元素同时展现出来’这种复杂度极高的场景，有效的控制了复杂度 。’那么，古尔丹，代价是什么呢？’代价就是，一开始做出这个自上而下的设计，牵一发而动全身，每次调整都变得异常困难。实际项目中，各种职业级别不同的同学一起协作修改一个server的代码，就会出现，职级低的同学改哪里都改不对，根本没能力进行修改，高级别的同学能修改对，也不愿意大规模修改，整个项目变得愈发不合理。对整个继承树没有完全认识的同学都没有资格进行任何一个对继承树有调整的修改，协作变得寸步难行。代码的修改，都变成了依赖一个高级架构师高强度监控继承体系的变化，低级别同学们束手束脚的结果。组合，就很好的解决了这个问题，把问题不断细分，每个同学都可以很好地攻克自己需要攻克的点，实现一个package。产品逻辑代码，只需要去组合各个package，就能达到效果。</p><p>这是golang标准库里http request的定义，它就是Http请求所有特性集合出来的结果。其中通用/异变/多种实现的部分，通过duck interface抽象，比如Body io.ReadCloser。你想知道哪些细节，就从组合成request的部件入手，要修改，只需要修改对应部件。[这段代码后，对比.NET的HTTP基于OOP的抽象]</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A Request represents an HTTP request received by a server</span></span><br><span class="line"><span class="comment">// or to be sent by a client.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The field semantics differ slightly between client and server</span></span><br><span class="line"><span class="comment">// usage. In addition to the notes on the fields below, see the</span></span><br><span class="line"><span class="comment">// documentation for Request.Write and RoundTripper.</span></span><br><span class="line"><span class="keyword">type</span> Request <span class="keyword">struct</span> {</span><br><span class="line"><span class="comment">// Method specifies the HTTP method (GET, POST, PUT, etc.).</span></span><br><span class="line"><span class="comment">// For client requests, an empty string means GET.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Go's HTTP client does not support sending a request with</span></span><br><span class="line"><span class="comment">// the CONNECT method. See the documentation on Transport for</span></span><br><span class="line"><span class="comment">// details.</span></span><br><span class="line">Method <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// URL specifies either the URI being requested (for server</span></span><br><span class="line"><span class="comment">// requests) or the URL to access (for client requests).</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// For server requests, the URL is parsed from the URI</span></span><br><span class="line"><span class="comment">// supplied on the Request-Line as stored in RequestURI.  For</span></span><br><span class="line"><span class="comment">// most requests, fields other than Path and RawQuery will be</span></span><br><span class="line"><span class="comment">// empty. (See RFC 7230, Section 5.3)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// For client requests, the URL's Host specifies the server to</span></span><br><span class="line"><span class="comment">// connect to, while the Request's Host field optionally</span></span><br><span class="line"><span class="comment">// specifies the Host header value to send in the HTTP</span></span><br><span class="line"><span class="comment">// request.</span></span><br><span class="line">URL *url.URL</span><br><span class="line"></span><br><span class="line"><span class="comment">// The protocol version for incoming server requests.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// For client requests, these fields are ignored. The HTTP</span></span><br><span class="line"><span class="comment">// client code always uses either HTTP/1.1 or HTTP/2.</span></span><br><span class="line"><span class="comment">// See the docs on Transport for details.</span></span><br><span class="line">Proto      <span class="type">string</span> <span class="comment">// "HTTP/1.0"</span></span><br><span class="line">ProtoMajor <span class="type">int</span>    <span class="comment">// 1</span></span><br><span class="line">ProtoMinor <span class="type">int</span>    <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Header contains the request header fields either received</span></span><br><span class="line"><span class="comment">// by the server or to be sent by the client.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// If a server received a request with header lines,</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//Host: example.com</span></span><br><span class="line"><span class="comment">//accept-encoding: gzip, deflate</span></span><br><span class="line"><span class="comment">//Accept-Language: en-us</span></span><br><span class="line"><span class="comment">//fOO: Bar</span></span><br><span class="line"><span class="comment">//foo: two</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// then</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//Header = map[string][]string{</span></span><br><span class="line"><span class="comment">//"Accept-Encoding": {"gzip, deflate"},</span></span><br><span class="line"><span class="comment">//"Accept-Language": {"en-us"},</span></span><br><span class="line"><span class="comment">//"Foo": {"Bar", "two"},</span></span><br><span class="line"><span class="comment">//}</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// For incoming requests, the Host header is promoted to the</span></span><br><span class="line"><span class="comment">// Request.Host field and removed from the Header map.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// HTTP defines that header names are case-insensitive. The</span></span><br><span class="line"><span class="comment">// request parser implements this by using CanonicalHeaderKey,</span></span><br><span class="line"><span class="comment">// making the first character and any characters following a</span></span><br><span class="line"><span class="comment">// hyphen uppercase and the rest lowercase.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// For client requests, certain headers such as Content-Length</span></span><br><span class="line"><span class="comment">// and Connection are automatically written when needed and</span></span><br><span class="line"><span class="comment">// values in Header may be ignored. See the documentation</span></span><br><span class="line"><span class="comment">// for the Request.Write method.</span></span><br><span class="line">Header Header</span><br><span class="line"></span><br><span class="line"><span class="comment">// Body is the request's body.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// For client requests, a nil body means the request has no</span></span><br><span class="line"><span class="comment">// body, such as a GET request. The HTTP Client's Transport</span></span><br><span class="line"><span class="comment">// is responsible for calling the Close method.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// For server requests, the Request Body is always non-nil</span></span><br><span class="line"><span class="comment">// but will return EOF immediately when no body is present.</span></span><br><span class="line"><span class="comment">// The Server will close the request body. The ServeHTTP</span></span><br><span class="line"><span class="comment">// Handler does not need to.</span></span><br><span class="line">Body io.ReadCloser</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetBody defines an optional func to return a new copy of</span></span><br><span class="line"><span class="comment">// Body. It is used for client requests when a redirect requires</span></span><br><span class="line"><span class="comment">// reading the body more than once. Use of GetBody still</span></span><br><span class="line"><span class="comment">// requires setting Body.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// For server requests, it is unused.</span></span><br><span class="line">GetBody <span class="function"><span class="keyword">func</span><span class="params">()</span></span> (io.ReadCloser, <span class="type">error</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ContentLength records the length of the associated content.</span></span><br><span class="line"><span class="comment">// The value -1 indicates that the length is unknown.</span></span><br><span class="line"><span class="comment">// Values &gt;= 0 indicate that the given number of bytes may</span></span><br><span class="line"><span class="comment">// be read from Body.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// For client requests, a value of 0 with a non-nil Body is</span></span><br><span class="line"><span class="comment">// also treated as unknown.</span></span><br><span class="line">ContentLength <span class="type">int64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// TransferEncoding lists the transfer encodings from outermost to</span></span><br><span class="line"><span class="comment">// innermost. An empty list denotes the "identity" encoding.</span></span><br><span class="line"><span class="comment">// TransferEncoding can usually be ignored; chunked encoding is</span></span><br><span class="line"><span class="comment">// automatically added and removed as necessary when sending and</span></span><br><span class="line"><span class="comment">// receiving requests.</span></span><br><span class="line">TransferEncoding []<span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Close indicates whether to close the connection after</span></span><br><span class="line"><span class="comment">// replying to this request (for servers) or after sending this</span></span><br><span class="line"><span class="comment">// request and reading its response (for clients).</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// For server requests, the HTTP server handles this automatically</span></span><br><span class="line"><span class="comment">// and this field is not needed by Handlers.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// For client requests, setting this field prevents re-use of</span></span><br><span class="line"><span class="comment">// TCP connections between requests to the same hosts, as if</span></span><br><span class="line"><span class="comment">// Transport.DisableKeepAlives were set.</span></span><br><span class="line">Close <span class="type">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// For server requests, Host specifies the host on which the</span></span><br><span class="line"><span class="comment">// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this</span></span><br><span class="line"><span class="comment">// is either the value of the "Host" header or the host name</span></span><br><span class="line"><span class="comment">// given in the URL itself. For HTTP/2, it is the value of the</span></span><br><span class="line"><span class="comment">// ":authority" pseudo-header field.</span></span><br><span class="line"><span class="comment">// It may be of the form "host:port". For international domain</span></span><br><span class="line"><span class="comment">// names, Host may be in Punycode or Unicode form. Use</span></span><br><span class="line"><span class="comment">// golang.org/x/net/idna to convert it to either format if</span></span><br><span class="line"><span class="comment">// needed.</span></span><br><span class="line"><span class="comment">// To prevent DNS rebinding attacks, server Handlers should</span></span><br><span class="line"><span class="comment">// validate that the Host header has a value for which the</span></span><br><span class="line"><span class="comment">// Handler considers itself authoritative. The included</span></span><br><span class="line"><span class="comment">// ServeMux supports patterns registered to particular host</span></span><br><span class="line"><span class="comment">// names and thus protects its registered Handlers.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// For client requests, Host optionally overrides the Host</span></span><br><span class="line"><span class="comment">// header to send. If empty, the Request.Write method uses</span></span><br><span class="line"><span class="comment">// the value of URL.Host. Host may contain an international</span></span><br><span class="line"><span class="comment">// domain name.</span></span><br><span class="line">Host <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Form contains the parsed form data, including both the URL</span></span><br><span class="line"><span class="comment">// field's query parameters and the PATCH, POST, or PUT form data.</span></span><br><span class="line"><span class="comment">// This field is only available after ParseForm is called.</span></span><br><span class="line"><span class="comment">// The HTTP client ignores Form and uses Body instead.</span></span><br><span class="line">Form url.Values</span><br><span class="line"></span><br><span class="line"><span class="comment">// PostForm contains the parsed form data from PATCH, POST</span></span><br><span class="line"><span class="comment">// or PUT body parameters.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// This field is only available after ParseForm is called.</span></span><br><span class="line"><span class="comment">// The HTTP client ignores PostForm and uses Body instead.</span></span><br><span class="line">PostForm url.Values</span><br><span class="line"></span><br><span class="line"><span class="comment">// MultipartForm is the parsed multipart form, including file uploads.</span></span><br><span class="line"><span class="comment">// This field is only available after ParseMultipartForm is called.</span></span><br><span class="line"><span class="comment">// The HTTP client ignores MultipartForm and uses Body instead.</span></span><br><span class="line">MultipartForm *multipart.Form</span><br><span class="line"></span><br><span class="line"><span class="comment">// Trailer specifies additional headers that are sent after the request</span></span><br><span class="line"><span class="comment">// body.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// For server requests, the Trailer map initially contains only the</span></span><br><span class="line"><span class="comment">// trailer keys, with nil values. (The client declares which trailers it</span></span><br><span class="line"><span class="comment">// will later send.)  While the handler is reading from Body, it must</span></span><br><span class="line"><span class="comment">// not reference Trailer. After reading from Body returns EOF, Trailer</span></span><br><span class="line"><span class="comment">// can be read again and will contain non-nil values, if they were sent</span></span><br><span class="line"><span class="comment">// by the client.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// For client requests, Trailer must be initialized to a map containing</span></span><br><span class="line"><span class="comment">// the trailer keys to later send. The values may be nil or their final</span></span><br><span class="line"><span class="comment">// values. The ContentLength must be 0 or -1, to send a chunked request.</span></span><br><span class="line"><span class="comment">// After the HTTP request is sent the map values can be updated while</span></span><br><span class="line"><span class="comment">// the request body is read. Once the body returns EOF, the caller must</span></span><br><span class="line"><span class="comment">// not mutate Trailer.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Few HTTP clients, servers, or proxies support HTTP trailers.</span></span><br><span class="line">Trailer Header</span><br><span class="line"></span><br><span class="line"><span class="comment">// RemoteAddr allows HTTP servers and other software to record</span></span><br><span class="line"><span class="comment">// the network address that sent the request, usually for</span></span><br><span class="line"><span class="comment">// logging. This field is not filled in by ReadRequest and</span></span><br><span class="line"><span class="comment">// has no defined format. The HTTP server in this package</span></span><br><span class="line"><span class="comment">// sets RemoteAddr to an "IP:port" address before invoking a</span></span><br><span class="line"><span class="comment">// handler.</span></span><br><span class="line"><span class="comment">// This field is ignored by the HTTP client.</span></span><br><span class="line">RemoteAddr <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// RequestURI is the unmodified request-target of the</span></span><br><span class="line"><span class="comment">// Request-Line (RFC 7230, Section 3.1.1) as sent by the client</span></span><br><span class="line"><span class="comment">// to a server. Usually the URL field should be used instead.</span></span><br><span class="line"><span class="comment">// It is an error to set this field in an HTTP client request.</span></span><br><span class="line">RequestURI <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// TLS allows HTTP servers and other software to record</span></span><br><span class="line"><span class="comment">// information about the TLS connection on which the request</span></span><br><span class="line"><span class="comment">// was received. This field is not filled in by ReadRequest.</span></span><br><span class="line"><span class="comment">// The HTTP server in this package sets the field for</span></span><br><span class="line"><span class="comment">// TLS-enabled connections before invoking a handler;</span></span><br><span class="line"><span class="comment">// otherwise it leaves the field nil.</span></span><br><span class="line"><span class="comment">// This field is ignored by the HTTP client.</span></span><br><span class="line">TLS *tls.ConnectionState</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cancel is an optional channel whose closure indicates that the client</span></span><br><span class="line"><span class="comment">// request should be regarded as canceled. Not all implementations of</span></span><br><span class="line"><span class="comment">// RoundTripper may support Cancel.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// For server requests, this field is not applicable.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Deprecated: Set the Request's context with NewRequestWithContext</span></span><br><span class="line"><span class="comment">// instead. If a Request's Cancel field and context are both</span></span><br><span class="line"><span class="comment">// set, it is undefined whether Cancel is respected.</span></span><br><span class="line">Cancel &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>{}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Response is the redirect response which caused this request</span></span><br><span class="line"><span class="comment">// to be created. This field is only populated during client</span></span><br><span class="line"><span class="comment">// redirects.</span></span><br><span class="line">Response *Response</span><br><span class="line"></span><br><span class="line"><span class="comment">// ctx is either the client or server context. It should only</span></span><br><span class="line"><span class="comment">// be modified via copying the whole Request using WithContext.</span></span><br><span class="line"><span class="comment">// It is unexported to prevent people from using Context wrong</span></span><br><span class="line"><span class="comment">// and mutating the contexts held by callers of the same request.</span></span><br><span class="line">ctx context.Context</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>看看<a href="https://docs.microsoft.com/en-us/dotnet/api/system.servicemodel.description.webhttpendpoint?view=netframework-4.8#definition">.NET里对于web服务的抽象</a>，仅仅看到末端，不去看完整个继承树的完整图景，我根本无法知道我关心的某个细节在什么位置。进而，我要往整个http服务体系里修改任何功能，都无法抛开对整体完整设计的理解和熟悉，还极容易没有知觉地破坏者整体的设计。</p><p>说到组合，还有一个关系很紧密的词，叫插件化。大家都用vscode用得很开心，它比visual studio成功在哪里？如果vscode通过添加一堆插件达到visual studio具备的能力，那么它将变成另一个和 visual studio差不多的东西，叫做vs studio吧。大家应该发现问题了，我们很多时候其实并不需要visual studio的大多数功能，而且希望灵活定制化一些比较小众的能力，用一些小众的插件。甚至，我们希望选择不同实现的同类型插件。这就是组合的力量，各种不同的组合，它简单，却又满足了各种需求，灵活多变，要实现一个插件，不需要事先掌握一个庞大的体系。体现在代码上，也是一样的道理。至少后端开发领域，组合，比OOP，’香’很多。</p><h2 id="原则6-吝啬原则-除非确无它法-不要编写庞大的程序"><a href="#原则6-吝啬原则-除非确无它法-不要编写庞大的程序" class="headerlink" title="原则6 吝啬原则: 除非确无它法, 不要编写庞大的程序"></a>原则6 吝啬原则: 除非确无它法, 不要编写庞大的程序</h2><p>“大”，是男性们的一致追求。”大”的系统，才能拿得出手去评T11、T12。于是，我们总倾向于把系(肚)统(子)搞大。一个T5的同学做一个服务，也总要搞”大”一点，才好意思拉leader们来评审自己的方案。leader们一看方案，很大，很好，很全面。但是，真的需要这么大么？</p><p>我又要说了”那么，古尔丹，代价是什么呢？”。代价是代码越多，越难维护，难调整。C语言之父Ken Thompson说”删除一行代码，给我带来的成就感要比添加一行要大”。我们对于代码，要吝啬。能把系统做小，就不要做大。腾讯不乏200w+行的客户端，很大，很”牛逼”。但是，同学们自问，现在还调整得动架构么。手Q的同学们，看看自己代码，曾经叹息过么。能小做的事情就小做，寻求通用化，通过duck interface(甚至多进程，用于隔离能力的多线程)把模块、能力隔离开，时刻想着删减代码量，才能保持代码的可维护性和面对未来的需求、架构，调整自身的活力。客户端代码，UI渲染模块可以复杂吊炸天，非UI部分应该追求最简单，能力接口化，可替换、重组合能力强。</p><p>落地到大家的代码，review时，就应该最关注核心struct定义，构建起一个完备的模型，核心interface，明确抽象model对外部的依赖，明确抽象model对外提供的能力。其他代码，就是要用最简单、平平无奇的代码实现模型内部细节。</p><h2 id="原则7-透明性原则-设计要可见，以便审查和调试"><a href="#原则7-透明性原则-设计要可见，以便审查和调试" class="headerlink" title="原则7 透明性原则: 设计要可见，以便审查和调试"></a>原则7 透明性原则: 设计要可见，以便审查和调试</h2><p>首先，定义一下，什么是透明性和可显性。</p><p>“如果没有阴暗的角落和隐藏的深度，软件系统就是透明的。透明性是一种被动的品质。如果实际上能预测到程序行为的全部或大部分情况，并能建立简单的心理模型，这个程序就是透明的，因为可以看透机器究竟在干什么。</p><p>如果软件系统所包含的功能是为了帮助人们对软件建立正确的’做什么、怎么做’的心理模型而设计，这个软件系统就是可显的。因此，举例来说，对用户而言，良好的文档有助于提高可显性；对程序员而言，良好的变量和函数名有助于提高可显性。可显性是一种主动品质。在软件种要达到这一点，仅仅做到不晦涩是不够的，还必须要尽力做到有帮助。”</p><p>我们要写好程序，减少bug，就要增强自己对代码的控制力。你始终做到，理解自己调用的函数/复用的代码大概是怎么实现的。不然，你可能就会在单线程状态机的server里调用有IO阻塞的函数，让自己的server吞吐量直接掉到底。进而，为了保证大家能对自己代码能做到有控制力，所有人写的函数，就必须具备很高的透明性。而不是写一些看了一阵看不明白的函数/代码，结果被迫使用你代码的人，直接放弃了对掌控力的追去，甚至放弃复用你的代码，另起炉灶，走线了’制造重复代码’的深渊。</p><p>透明性其实相对容易做到的，大家有意识地锻炼一两个月，就能做得很好。可显性就不容易了。有一个现象是，你写的每一个函数都不超过80行，每一行我都能看懂，但是你层层调用，很多函数调用，组合起来怎么就实现了某个功能，看两遍，还是看不懂。第三遍可能才能大概看懂。大概看懂了，但太复杂，很难在大脑里构建起你实现这个功能的整体流程。结果就是，阅读者根本做不到对你的代码有好的掌控力。</p><p>可显性的标准很简单，大家看一段代码，懂不懂，一下就明白了。但是，如何做好可显性？那就是要追求合理的函数分组，合理的函数上下级层次，同一层次的代码才会出现在同一个函数里，追求通俗易懂的函数分组分层方式，是通往可显性的道路。</p><p>当然，复杂如linux操作系统，office文档，问题本身就很复杂，拆解、分层、组合得再合理，都难简历心理模型。这个时候，就需要完备的文档了。完备的文档还需要出现在离代码最近的地方，让人’知道这里复杂的逻辑有文档’，而不是其实文档，但是阅读者不知道。再看看上面golang标准库里的http.Request，感受到它在可显性上的努力了么？对，就去学它。</p><h2 id="原则10-通俗原则-接口设计避免标新立异"><a href="#原则10-通俗原则-接口设计避免标新立异" class="headerlink" title="原则10 通俗原则: 接口设计避免标新立异"></a>原则10 通俗原则: 接口设计避免标新立异</h2><p>程序员啊，我们不仅喜欢”大”。我们还喜欢”吊”，我们就是要与众不同，才显得自己厉害。然而，标新立异，就提升了别人理解的难度。</p><p>一般，我们这么定义一个’点’，使用x表示横坐标，用y表示纵坐标：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Point <span class="keyword">struct</span> {</span><br><span class="line">X <span class="type">float64</span></span><br><span class="line">Y <span class="type">float64</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>你就是要不同、精准：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Point <span class="keyword">struct</span> {</span><br><span class="line">VerticalOrdinate   <span class="type">float64</span></span><br><span class="line">HorizontalOrdinate <span class="type">float64</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>很好，你用词很精准，一般人还驳斥不了你。但是，多数人读你的VerticalOrdinate就是没有读X理解来得快，来得容易懂、方便。你是在刻意制造协作成本。</p><p>上面的例子常见，但还不是最小立异原则最想说明的问题。想想一下，一个程序里，你把用’+’这个符号表示数组添加元素，而不是数学’加’，’result := 1+2’ –&gt; ‘result = []int{1, 2}’而不是’result=3’，那么，你这个标新立异，对程序的破坏性，简直无法想象。<br>“最小立异原则的另一面是避免表象想死而实际却略有不同。这会极端危险，因为表象相似往往导致人们产生错误的假定。所以最好让不同事物有明显区别，而不要看起来几乎一模一样。” – Henry Spencer。</p><p>你实现一个db.Add()函数却做着db.AddOrUpdate()的操作，有人使用了你的接口，错误地把数据覆盖了。小心以后有人扎小人来诅咒你。</p><h2 id="原则11-缄默原则-如果一个程序没什么好说的，就沉默"><a href="#原则11-缄默原则-如果一个程序没什么好说的，就沉默" class="headerlink" title="原则11 缄默原则: 如果一个程序没什么好说的，就沉默"></a>原则11 缄默原则: 如果一个程序没什么好说的，就沉默</h2><p>这个原则，应该是大家最经常破坏的原则之一。一段简短的代码里插入了各种’log(“cmd xxx enter”)’, ‘log(“req data “ + req.String())’，非常害怕自己信息打印得不够。害怕自己不知道程序执行成功了，总要最后’log(“success”)’。但是，我问一下大家，你们真的耐心看过别人写的代码打的一堆日志么？不是自己需要哪个，就在一堆日志里，再打印一个日志出来一个带有特殊标记的日志’log(“this_is_my_log_mark” + xxxxx)’？结果，第一个作者打印的日志，在代码交接给其他人或者在跟别人协作的时候，这个日志根本没有价值，反而提升了大家看日志的难度。</p><p>一个服务一跑起来，就疯狂打日志，请求处理正常也打一堆日志。滚滚而来的日志，把错误日志淹没在里面。错误日志失去了效果，简单地tail查看日志，眼花缭乱，看不出任何问题，这不就成了’为了捕获问题’而让自己’根本无法捕获问题’了么？</p><p>沉默是金。除了简单的stat log，如果你的程序’发声’了，那么它抛出的信息就一定要有效！打印一个log(‘process fail’)也是毫无价值，到底什么fail了？是哪个用户带着什么参数在哪个环节怎么fail了？如果发声，就要把必要信息给全。不然就是不发声，表示自己好好地work着呢。不发声就是最好的消息，现在我的work一切正常！</p><p>“设计良好的程序将用户的注意力视为有限的宝贵资源，只有在必要时才要求使用。”程序员自己的主力，也是宝贵的资源！只有有必要的时候，日志才跑来提醒程序员’我有问题，来看看’，而且，必须要给到足够的信息，让一把讲明白现在发生了什么。而不是程序员还需要很多辅助手段来搞明白到底发生了什么。</p><p>每当我发布程序 ，我抽查一个机器，看它的日志。发现只有每分钟外部接入、内部rpc的个数/延时分布日志的时候，我就心情很愉悦。我知道，这一分钟，它的陈功率又是100%，没任何问题！</p><h2 id="原则12-补救原则-出现异常时，马上退出并给出足够错误信息"><a href="#原则12-补救原则-出现异常时，马上退出并给出足够错误信息" class="headerlink" title="原则12 补救原则: 出现异常时，马上退出并给出足够错误信息"></a>原则12 补救原则: 出现异常时，马上退出并给出足够错误信息</h2><p>其实这个问题很简单，如果出现异常，异常并不会因为我们尝试掩盖它，它就不存在了。所以，程序错误和逻辑错误要严格区分对待。这是一个态度问题。</p><p>‘异常是互联网服务器的常态’。逻辑错误通过metrics统计，我们做好告警分析。对于程序错误 ，我们就必须要严格做到在问题最早出现的位置就把必要的信息搜集起来，高调地告知开发和维护者’我出现异常了，请立即修复我!’。可以是直接就没有被捕获的panic了。也可以在一个最上层的位置统一做好recover机制，但是在recover的时候一定要能获得准确异常位置的准确异常信息。不能有中间catch机制，catch之后丢失很多信息再往上传递。</p><p>很多Java开发的同学，不区分程序错误和逻辑错误，要么都很宽容，要么都很严格，对代码的可维护性是毁灭性的破坏。”我的程序没有程序错误，如果有，我当时就解决了。”只有这样，才能保持程序代码质量的相对稳定，在火苗出现时扑灭火灾是最好的扑灭火灾的方式。当然，更有效的方式是全面自动化测试的预防：）</p><h1 id="具体实践点"><a href="#具体实践点" class="headerlink" title="具体实践点"></a>具体实践点</h1><p>前面提了好多思考方向的问题。大的原则问题和方向。我这里，再来给大家简单列举几个细节执行点吧。毕竟，大家要上手，是从执行开始，然后才是总结思考，能把我的思考方式抄过去。下面是针对golang语言的，其他语言略有不同。以及，我一时也想不全我所执行的 所有细则，这就是我强调’原则’的重要性，原则是可枚举的。</p><ul><li><p>对于代码格式规范，100%严格执行，严重容不得一点沙。</p></li><li><p>文件绝不能超过800行，超过，一定要思考怎么拆文件。工程思维，就在于拆文件的时候积累。</p></li><li><p>函数对决不能超过80行，超过，一定要思考怎么拆函数，思考函数分组，层次。工程思维，就在于拆文件的时候积累。</p></li><li><p>代码嵌套层次不能超过4层，超过了就得改。多想想能不能early return。工程思维，就在于拆文件的时候积累。</p></li></ul><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> !needContinue {</span><br><span class="line">doA()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">doB()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> !needContinue {</span><br><span class="line">doA()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">doB()</span><br><span class="line"><span class="keyword">return</span></span><br></pre></td></tr></tbody></table></figure><p>下面这个就是early return，把两端代码从逻辑上解耦了。</p><ul><li>从目录、package、文件、struct、function一层层下来 ，信息一定不能出现冗余。比如file.FileProperty这种定义。只有每个’定语’只出现在一个位置，才为’做好逻辑、定义分组/分层’提供了可能性。</li><li>多用多级目录来组织代码所承载的信息，即使某一些中间目录只有一个子目录。</li><li>随着代码的扩展，老的代码违反了一些设计原则，应该立即原地局部重构，维持住代码质量不滑坡。比如:拆文件；拆函数；用Session来保存一个复杂的流程型函数的所有信息；重新调整目录结构。</li><li>基于上一点考虑，我们应该尽量让项目的代码有一定的组织、层次关系。我个人的当前实践是除了特别通用的代码，都放在一个git里。特别通用、修改少的代码，逐渐独立出git，作为子git连接到当前项目git，让goland的Refactor特性、各种Refactor工具能帮助我们快速、安全局部重构。</li><li>自己的项目代码，应该有一个内生的层级和逻辑关系。flat平铺展开是非常不利于代码复用的。怎么复用、怎么组织复用，肯定会变成’人生难题’。T4-T7的同学根本无力解决这种难题。</li><li>如果被review的代码虽然简短，但是你看了一眼却发现不咋懂，那就一定有问题。自己看不出来，就找高级别的同学交流。这是你和别review代码的同学成长的时刻。</li><li>日志要少打。要打日志就要把关键索引信息带上。必要的日志必须打。</li><li>有疑问就立即问，不要怕问错。让代码作者给出解释。不要怕问出极低问题。</li><li>不要说’建议’，提问题，就是刚，你pk不过我，就给改！</li><li>请积极使用trpc。总是要和老板站在一起！只有和老板达成的对于代码质量建设的共识，才能在团队里更好地做好代码质量建设。</li><li>消灭重复！消灭重复！消灭重复！</li></ul><h1 id="主干开发"><a href="#主干开发" class="headerlink" title="主干开发"></a>主干开发</h1><p>最后，我来为’主干开发’多说一句话。道理很简单，只有每次被review代码不到500行，reviewer才能快速地看完，而且几乎不会看漏。超过500行，reviewer就不能仔细看，只能大概浏览了。而且，让你调整500行代码内的逻辑比调整3000行甚至更多的代码，容易很多，降低不仅仅是6倍，而是一到两个数量级。有问题，在刚出现的时候就调整了，不会给被revew的人带来大的修改负担。</p><p>关于CI(continuous integration)，还有很多好的资料和书籍，大家应该及时去学习学习。</p><h1 id="《unix编程艺术》"><a href="#《unix编程艺术》" class="headerlink" title="《unix编程艺术》"></a>《unix编程艺术》</h1><p>建议大家把这本书找出来读一读。特别是，T7及更高级别的同学。你们已经积累了大量的代码实践，亟需对’工程性’做思考总结。很多工程方法论都过时了，这本书的内容，是例外中的例外。它所表达出的内容没有因为软件技术的不断更替而过时。</p><p>佛教禅宗讲’不立文字’(不立文字，教外别传，直指人心，见性成佛)，很多道理和感悟是不能用文字传达的，文字的表达能力，不能表达。大家尝尝因为”自己听说过、知道某个道理”而产生一种安心感，认为”我懂了这个道理”，但是自己却不能在实践中做到。知易行难，知道却做不到，在工程实践里，就和’不懂这个道理’没有任何区别了。</p><p>曾经，我面试过一个别的公司的总监，讲得好像一套一套，代码拉出来遛一遛，根本就没做到，仅仅会道听途说。他在工程实践上的探索前路可以说已经基本断绝了。我只能祝君能做好向上管理，走自己的纯管理道路吧。请不要再说自己对技术有追求，是个技术人了！</p><p>所以，大家不仅仅是看看我这篇文章，而是在实践中去不断践行和积累自己的’教外别传’吧。</p><p><a href="https://www.oreilly.com/library/view/software-engineering-at/9781492082781/">Software Engineering at Google</a>也是一本必读好书，可惜没找到中文翻译。(电子版放附件里了)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql介绍</title>
      <link href="/2022/12/28/treasurebox/shu-ju-ku/mysql/0.mysql-jie-shao/"/>
      <url>/2022/12/28/treasurebox/shu-ju-ku/mysql/0.mysql-jie-shao/</url>
      
        <content type="html"><![CDATA[<h1 id="mysql技能栈"><a href="#mysql技能栈" class="headerlink" title="mysql技能栈"></a>mysql技能栈</h1><p>从18年开始自己做项目，到后来实习、毕业参加工作，mysql一直扮演着重要角色，偶然也用到过oracle，mongoDB等数据库，但是mysql一直有独特的魅力，吸引着我把它搞明白。这些年工作中使用mysql遇到了很多问题，所以本文带着问题出发，从这些问题中逐渐揭开mysql的神秘面纱。如果本文中对知识点讲的不够细致或者有错误，欢迎各位多多指教。</p><ol><li>一条sql的执行流程</li><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day4</title>
      <link href="/2022/07/16/treasurebox/go/go-ji-chu/4.day4/"/>
      <url>/2022/07/16/treasurebox/go/go-ji-chu/4.day4/</url>
      
        <content type="html"><![CDATA[<h2 id="day04"><a href="#day04" class="headerlink" title="day04"></a>day04</h2><ol><li><p>函数</p></li><li><p>函数的定义</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> 函数名<span class="params">(参数)</span></span>返回值{</span><br><span class="line">函数体</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>函数进阶</p><ol><li><p>高阶函数：函数可以作为<code>参数</code>也可以作为<code>返回值</code></p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">test1(test, <span class="string">"word"</span>)</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用函数名作为参数，并在该方法中调用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test1</span><span class="params">(f <span class="keyword">func</span>(name <span class="type">string</span>)</span></span>, name <span class="type">string</span>) {</span><br><span class="line">f(name)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(name <span class="type">string</span>)</span></span> {</span><br><span class="line">fmt.Println(<span class="string">"name="</span>, name)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用函数作为返回值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test2</span><span class="params">()</span></span> (f <span class="function"><span class="keyword">func</span><span class="params">()</span></span>) {</span><br><span class="line"><span class="keyword">return</span> f</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p>闭包</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//闭包是什么？</span></span><br><span class="line"><span class="comment">//闭包是一个函数，这个函数引用了他外部作用域的变量，外部函数的返回值必须是内嵌函数。</span></span><br><span class="line"><span class="comment">//闭包 = 函数 + 外部变量的引用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">f := f1()</span><br><span class="line">f()</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> {</span><br><span class="line"></span><br><span class="line">i := <span class="number">3</span></span><br><span class="line">f := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> {</span><br><span class="line">fmt.Println(i)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> f</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>defer：延迟调用，多用于处理资源释放</p></li><li><p>内置函数：<code>panic</code>和<code>recover</code></p></li></ol></li><li><p>递归函数</p></li><li><p>结构体</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 结构体：自定义类型和类型别名</span></span><br><span class="line"><span class="comment">// type后边跟的是类型，相当于构建一个自己的数据类型</span></span><br><span class="line"><span class="keyword">type</span> myInt <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加一个=时代表给int类型起别名</span></span><br><span class="line"><span class="keyword">type</span> myInt2 = <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体占用一块连续的内存空间</span></span><br><span class="line"><span class="keyword">type</span> x <span class="keyword">struct</span> {</span><br><span class="line">a <span class="type">int8</span> <span class="comment">// 8bit，1byte</span></span><br><span class="line">b <span class="type">string</span></span><br><span class="line">c []<span class="type">string</span></span><br><span class="line">d <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个匿名结构体，多用于在函数内部临时使用</span></span><br><span class="line"><span class="keyword">var</span> s <span class="keyword">struct</span> {</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age  <span class="type">int</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>构造函数：返回一个结构体变量的函数。</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数：返回一个结构体变量的函数，约定成俗使用new命名</span></span><br><span class="line"><span class="comment">// 返回的结构体还是结构体指针</span></span><br><span class="line"><span class="comment">// 当结构体比较大的时候，尽量使用结构体指针，减少程序的运行开销</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> {</span><br><span class="line">name   <span class="type">string</span></span><br><span class="line">age    <span class="type">int</span></span><br><span class="line">gender <span class="type">string</span></span><br><span class="line">hobby  []<span class="type">string</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newPerson</span><span class="params">(name <span class="type">string</span>, age <span class="type">int</span>)</span></span> Person {</span><br><span class="line"><span class="keyword">var</span> p Person</span><br><span class="line">p.name = name</span><br><span class="line">p.age = age</span><br><span class="line"><span class="keyword">return</span> p</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">newPerson(<span class="string">"zs"</span>, <span class="number">20</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>方法</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 标识符：变量名、函数名、类型名、方法名</span></span><br><span class="line"><span class="comment">// 如果标识符的首字母是大写的，就表示对外部可见（暴露的，公有的），在其他包中可以使用，否则只能在当前包中使用</span></span><br><span class="line"><span class="comment">// 方法：是作用与特定类型的函数，在函数名之前声明指定的类型</span></span><br><span class="line"><span class="comment">// 可以传拷贝的值也可以传地址</span></span><br><span class="line"><span class="comment">// 1. 需要修改接收者中的值</span></span><br><span class="line"><span class="comment">// 2. 接收者是拷贝代价比较大的对象</span></span><br><span class="line"><span class="comment">// 3. 保持一致性，如果使用指针接收者，就全部使用指针接收者</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Dog 这是一个Dog的结构体</span></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> {</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newDog</span><span class="params">(name <span class="type">string</span>)</span></span> (d Dog) {</span><br><span class="line">d = Dog{name: name}</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 针对Dog类型定义方法</span></span><br><span class="line"><span class="comment">// 传的是拷贝的值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Dog)</span></span> wang() {</span><br><span class="line">d.name = <span class="string">"kaixin"</span></span><br><span class="line">fmt.Printf(<span class="string">"%s汪汪汪"</span>, d.name)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传的是地址</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Dog)</span></span> wang2() {</span><br><span class="line">d.name = <span class="string">"kaixin"</span></span><br><span class="line">fmt.Printf(<span class="string">"%s汪汪汪"</span>, d.name)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">d1 := newDog(<span class="string">"白雪"</span>)</span><br><span class="line">d1.wang2()</span><br><span class="line">fmt.Println(<span class="string">"%s"</span>, d1.name)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只能给自定义的类型添加方法，不能给其他包中的类型添加</span></span><br><span class="line"><span class="comment">// 如果需要给其他包中的类型添加方法，需要自定义类型</span></span><br><span class="line"><span class="keyword">type</span> myInt <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i myInt)</span></span> f1() {</span><br><span class="line">fmt.Printf(<span class="string">"%s\n"</span>, i)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>goroutine</title>
      <link href="/2022/07/13/treasurebox/go/go-ji-chu/go-xie-cheng/goroutine/"/>
      <url>/2022/07/13/treasurebox/go/go-ji-chu/go-xie-cheng/goroutine/</url>
      
        <content type="html"><![CDATA[<h1 id="Goroutine"><a href="#Goroutine" class="headerlink" title="Goroutine"></a>Goroutine</h1><h3 id="go语言中的进程、线程、协程、并发和并行、goroutine启动，goroutine特点，runtime包函数"><a href="#go语言中的进程、线程、协程、并发和并行、goroutine启动，goroutine特点，runtime包函数" class="headerlink" title="go语言中的进程、线程、协程、并发和并行、goroutine启动，goroutine特点，runtime包函数"></a>go语言中的进程、线程、协程、并发和并行、goroutine启动，goroutine特点，runtime包函数</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   goroutine是go语言中的协程，MPG概念中重要的一环，当goroutine运行时，系统会分配一个系统级的线程M给逻辑处理器，逻辑处理器的个数可以设置，默认占用所有的核数。</span><br><span class="line">   若干个goroutine在逻辑处理器中顺序执行。</span><br><span class="line">   当goroutine阻塞时，比如打开文件时，调度器就会降这个线程与处理器分离，并创建一个新线程来运行这个处理器上提供的服务。当被阻塞的系统调用执行完成并返回时，</span><br><span class="line">   对应的goroutine会放回到本地运行队列，而之前的线程会保存好，之后可以继续使用。</span><br><span class="line">   调用方式 go funcname()</span><br><span class="line"></span><br><span class="line">goroutine特点：</span><br><span class="line">   1.go的执行是非阻塞的，不会等待。</span><br><span class="line">   2.go后边的函数的返回值会被忽略。</span><br><span class="line">   3.调度器不会保证多个goroutine的执行次序</span><br><span class="line">   4.没有父子goroutine的概念，所有的goroutine是平等的被调度和被执行的。</span><br><span class="line">   5.go程序在执行时会单独为main函数创建一个goroutin，遇到其他go关键字时再去创建其他的goroutine</span><br><span class="line">   6.主函数返回时，所有的goroutine都会被直接打断，程序退出;所以必须要在主函数中进行阻塞，才能保证goroutine执行完成。</span><br><span class="line">   7.go没有暴露goroutine id给用户，所以不能在一个goroutine里面显示的操作另一个goroutine，不过runtime包提供了一些函数和设置goroutine的相关信息</span><br><span class="line">   8.runtime.NumGoroutine返回一个进程的所有goroutine数，main()的goroutine也被算在里面。因此实际创建的goroutine数量为扣除main()的goroutine数。</span><br><span class="line"></span><br><span class="line">   一旦主goroutine中的代码（也就是main函数中的代码执行完毕），当前Go程序就会结束运行。如此一来，如果在Go程序结束的那一刻还有goroutine未得到运行机会，就不会再获得运行机会，其中的代码不会再执行。</span><br><span class="line">   严谨地讲，go语言不会保证这些goroutine会以怎样的顺序运行。由于主goroutine会与我们手动启用的其他goroutine一起接受调度。</span><br><span class="line">      又因为调度器很可能会在goroutine中的代码只执行了一部分的时候暂停，以期所有的goroutine有更公平的运行机会。所以哪个goroutine先执行完，哪个goroutine后执行完往往是不可预知的。</span><br><span class="line">   runtime包函数：在go语言程序运行时（runtime）实现了一个小型的任务调度器，提供了修改Go语言运行时配置参数的能力。这套调度器的工作原理类似于系统调度线程，go程序调度器可以高效地将CPU资源分配给每一个任务。</span><br><span class="line">      GOMAXPROCS：设置逻辑CPU核数。</span><br><span class="line">         fmt.Println("GOMAXPROCS0", runtime.GOMAXPROCS(0))      查询当前的GOMAXPROCS值</span><br><span class="line">         fmt.Println("GOMAXPROCS1", runtime.GOMAXPROCS(1))  设置单核心执行</span><br><span class="line">         fmt.Println("GOMAXPROCS2", runtime.GOMAXPROCS(2))  设置多核并发执行</span><br><span class="line">      Goexit：结束当前goroutine的运行，Goexit在结束当前goroutine运行之前会调用当前goroutine已经注册的defer。</span><br><span class="line">            Goexit并不会产生panic，所以该goroutine defer里面的recover调用都返回nil。</span><br><span class="line">            调用runtime.Goexit将立即终止当前goroutine执行，调度器确保所有已注册defer延迟调用被执行。</span><br><span class="line">      Gosched：goroutine可能切换的点：</span><br><span class="line">       1. I/O、select</span><br><span class="line">       2. channel</span><br><span class="line">       3. 等待锁</span><br><span class="line">       4. 函数调用(有时)</span><br><span class="line">       5. runtime.Gosched()</span><br><span class="line">和协程yield作用类似，Gosched是放弃当前调度执行机会，将当前goroutine暂停，放回队列等待下次被调度执行。</span><br><span class="line">用于让出CPU时间片。类似于接力赛，A先跑了一会碰到代码runtime.Gosched()就把接力棒交给B，A先歇着，B继续跑</span><br><span class="line">      Gosched会在不同的goroutine之间切换，当main goroutine退出时，其他的goroutine都会直接退出。</span><br><span class="line">    一个逻辑处理器处理goroutine时间较长</span><br><span class="line">    给予调度器的内部算法，一个正运行的goroutine在工作结束前，可以被停止并重新调度。</span><br><span class="line">    调度器这样做的目的是防止某个goroutine长时间占用逻辑处理器。当goroutine占用时间过长时，调度器会停止当前正运行的goroutine，并给其他可运行的goroutine运行的机会。</span><br><span class="line">      </span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>kafka详解</title>
      <link href="/2022/06/24/treasurebox/xiao-xi-dui-lie/kafka/1.kafka-xiang-jie/"/>
      <url>/2022/06/24/treasurebox/xiao-xi-dui-lie/kafka/1.kafka-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="kafka入门须知"><a href="#kafka入门须知" class="headerlink" title="kafka入门须知"></a>kafka入门须知</h2><ol><li><h3 id="kafka概述"><a href="#kafka概述" class="headerlink" title="kafka概述"></a>kafka概述</h3><p>kafka是一款开源的消息引擎系统。常见的两种消息传输模型如下：</p><ul><li><strong>点对点模型</strong></li><li><strong>发布/订阅模型</strong></li></ul><p>kafka同时支持这两种模型，是如何做到的？（通过消费者组实现）</p><p>消息引擎系统在什么场景下使用？—<code>削峰填谷</code>。所谓的<code>削峰填谷</code>就是指缓冲上下游瞬发的流量，使其更加平滑。对于发送能力很强的上游系统，如果没有消息引擎的保护，下游系统可能会直接被压垮导致全链路服务雪崩，消息引擎可一直在很大程度上避免流量的震荡。消息引擎系统的另一大好处是发送方和接收方的松耦合，减少系统间不必要的交互（生产者、消费者模式）。</p><ol><li><h4 id="kafka的体系架构"><a href="#kafka的体系架构" class="headerlink" title="kafka的体系架构"></a>kafka的体系架构</h4><p>一个典型的kafka体系架构包含若干Producer、若干Broker、若干Consumer，以及一个zookeeper集群。其中zookeeper负责集群元数据的管理、控制器选举等操作。Producer将消息发送到Broker，Broker负责将收到的消息存储到磁盘中，而Consumer负责从Broker订阅并消费消息。</p><p><img src="/1.kafka%E8%AF%A6%E8%A7%A3/images/1.kafka%E6%9E%B6%E6%9E%84.png" alt="image-20220624143703108"></p><p>整个kafka体系结构中引入了3个术语：</p><ol><li><strong>Producer</strong>：生产者，也就是发送消息的一方。生产者负责创建消息，然后将其投递到kafka中。</li><li><strong>Consumer</strong>：消费者，也就是接收消息的一方。消费者连接到kafka上并接收消息，从而进行相应的业务逻辑处理。</li><li><strong>Broker</strong>：服务节点代理。对于Kafka而言，Broker可以简单的看做一个独立的Kafka服务节点或Kafka实例。大多数情况下也可以将Broker看做一个Kafka服务器，前提是这台服务器上只部署了一个Kafka实例。一个或多个Broker组成一个Kafka集群。一般而言，习惯使用首字母小写的broker来表示服务代理节点。</li></ol><p>在kafka中，还有两个很重要的概念——主题(Topic)与分区（Partition）。kafka中的消息以主题为单位进行归类，生产者负责将消息发送到特定的主题（发送到kafka集群的每一条消息都要指定一个主题），而消费者负责订阅主题并进行消费。</p><p>主题是一个逻辑上的概念，还可以细分为多个分区，一个分区只属于单个主题，很多时候也会把分区成为主题分区（Topic-Partition）。同一个主题下的不同分区包含的消息是不同的，分区在存储层面上可以看做一个可追加的日志(Log)文件，消息在被追加到分区日志文件的时候都会分配一个特定的偏移量（offset）。</p><p>offset是消息在分区中的唯一标识，是一个单调递增且不变的值。Kafka通过它来保证消息在分区内的顺序性，不过offset并不跨越分区，也就是说，Kafka保证的是分区有序而不是主题有序。</p><p><img src="/1.kafka%E8%AF%A6%E8%A7%A3/images/2.kafka%E5%88%86%E5%8C%BA%E6%9E%B6%E6%9E%84.png" alt="image-20220626162723880"></p><p>如图所示kafka某主题中，分为4个分区，消息被顺序追加到每个分区日志文件的尾部。Kafka中的分区可以分布在不同的服务器(Broker)中，也就是说，一个主题可以横跨多个Broker，以此来提供比单个Broker更强大的性能。</p><p>每一条消息在被发送到Broker之前，会根据分区规则选择存储到哪个具体的分区，如果分区规则设定的合理，所有的消息都可以均匀地分配到不同的分区中；如果一个主题只对应一个文件，那么这个文件所在的机器I/O将会成为这个主题的性能瓶颈，而分区解决了这个问题。在创建主题的时候可以通过指定的参数来设置分区的个数，也可以在主题创建完成之后去修改分区的数量，通过增加分区的数量可以实现水平扩展。</p><p>不考虑多副本的情况，一个分区对应一个日志（Log）。为了防止Log过大，Kafka又引入了日志分段（LogSegment）的概念，将Log切分为多个LogSegment，相当于一个巨型文件被平均分配为多个相对较小的文件，这样也便于消息的维护和清理。事实上，Log和LogSegment也不是纯粹物理意义上的概念。Log在物理上只以文件夹的形式存储，而每个LogSegment对应于磁盘上的一个日志文件和两个索引文件，以及可能的其他文件（比如以”.txnindex”为后缀的事务索引文件）。如下图描绘了主题、分区、副本、Log以及LogSegment之间的关系。</p><p><img src="/1.kafka%E8%AF%A6%E8%A7%A3/images/3.kafka%E4%B8%BB%E9%A2%98%E6%97%A5%E5%BF%97%E6%9E%B6%E6%9E%84.png" alt="image-20220626165229254"></p></li><li><h4 id="多副本机制"><a href="#多副本机制" class="headerlink" title="多副本机制"></a>多副本机制</h4><p>Kafka为分区引入了多副本(Replica)机制，通过增加副本数量可以提升容灾能力。备份的思想就是把相同的数据拷贝到多台机器上，而这些相同的数据拷贝在Kafka中被称为副本(Replica)。</p><p>同一个分区的不同副本中保存的是相同的消息（在同一时刻，副本之间并非完全一样），副本之间是”一主多从”的关系，其中Leader副本负责处理读写请求，follwoer副本只负责与Leader副本的消息同步。副本处于不同的broker中，当leader副本出现故障时，从follower副本中重新选举新的leader副本对外提供服务。Kafka通过多副本机制实现了故障的自动转移，当Kafka集群中的某个broker失效时仍能保证服务可用。</p><p>我们知道一些其他的系统中的follower副本可以对外提供服务，比如mysql中的从库可以对外提供读操作，但是Kafka中的follower副本不像mysql的副本可以单独对外提供服务。</p><h5 id="为什么Kafka不像MySQL和Redis那样对外提供服务？"><a href="#为什么Kafka不像MySQL和Redis那样对外提供服务？" class="headerlink" title="为什么Kafka不像MySQL和Redis那样对外提供服务？"></a>为什么Kafka不像MySQL和Redis那样对外提供服务？</h5><ul><li>首先，Redis和MySQL都支持主从读写分离，这与他们的使用场景有关。对于那种读操作很多而写操作相对不频繁的负载类型而言，采用读写分离是非常不错的方案——可以添加很多的follower横向扩展，提升读操作性能。反观Kafka，它的主要使用场景是消息引擎而不是以数据存储的方式对外提供服务，通常涉及频繁的生产消息和消费消息，这不属于典型的读多写少场景，因此读写分离方案不适合当前场景。</li><li>第二，Kafka副本使用的是异步拉取，因此存在leader和follower之间的不一致性。如果要采用读写分离，则要处理副本lag引入的一致性问题。</li><li>第三，主写从读模式是为了减轻leader节点的压力，将读请求的负载均衡到follower节点，如果kafka的分区相对均匀地分散到各个broker上，同样可以起到负载均衡的效果，没必要刻意实现主写从读增加代码实现的复杂程度。</li></ul><p><strong>如下是kafka分区和副本的架构图</strong>：</p><p><img src="/1.kafka%E8%AF%A6%E8%A7%A3/images/4.kafka%E5%88%86%E5%8C%BA%E5%92%8C%E5%89%AF%E6%9C%AC%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="image-20220626184444048"></p><p>如上图所示，Kafka集群中有4个Broker，某个主题中有3个分区，且副本因子（即副本个数）也为3，如此每个分区便有1个leader副本和2个follower副本。生产者和消费者只与leader副本进行交互，而follower副本只负责消息的同步，很多时候follwoer副本中的消息相对leader副本而言会有一定的滞后。</p><p>Kafka消费端也具备一定的容灾能力。Consumer使用(pull)模式从服务器端拉取数据，并且保存消费的具体位置，当消费者宕机后恢复上线时可以根据之前保存的消费位置重新拉取需要的消息进行消费，这样就不会造成消息丢失。</p><p>分区中所有的副本统称为AR(Assigned Replicas)。所有与leader副本保持一定程度同步的副本（包括leader副本在内）组成ISR(In-Sync Replicas)，ISR集合是AR几何中的一个子集。消息会先发送到leader副本，然后follower副本才能从leader副本中拉取消息进行同步，同步期间follower副本相对于leader副本而言会有一定程度的滞后。</p><p>“一定程度的同步”是指可忍受的滞后范围，这个参数可以配置，与leader副本同步滞后过多的副本（不包括leader副本）组成OSR（Out-of-Sync Replicas），由此可见，AR=ISR+OSR。在正常情况下，所有的follower副本都应该与leader副本保持一定程度的同步，即AR=ISR，OSR集合为空。</p><p>leader副本负责维护和跟中ISR几何中所有follower副本的滞后状态，当follower副本“追上”leader副本时，leader副本就会将OSR集合转移至ISR集合。默认情况下，当leader副本发生故障时，只有在ISR集合中的副本才有资格被选举为新的leader，而在OSR几何中的副本则没有任何机会（也可以通过修改参数配置来改变）。</p><p>ISR与KW和LEO也有紧密的关系。HW是High Watermark的缩写，俗称高水位，他标识了一个特定的消息偏移量（offset），消费者只能拉取到这个offset之前的消息。</p><p>![image-20220628200511940](1.kafka详解/images/5.kafka offset详解.png)</p><p>如上图所示，代表一个日志文件，这个日志文件中有9条消息，第一条消息的offset（LogStartOffset）为0，最后一条的offset为8，offset为9 的消息代表下一条将要写入的消息。日志文件的HW为6，表示消费者只能拉取到offset在0-5之间的消息，而offset为6的消息对消费者而言是不可见的。</p><p>LEO是Log End Offset的缩写，它标识当前日志文件中下一条待写入消息的offset，上图中offset为9的位置即为当前日志文件的LEO，LEO的大小相当于当前日志分区中最后一条消息的offset值加1。分区ISR几何中的每个副本都会维护自身的LEO，而ISR集合中最小的LEO即为分区的HW，对消费者而言只能消费HW之前的消息。</p></li><li><h4 id="分区机制"><a href="#分区机制" class="headerlink" title="分区机制"></a>分区机制</h4><p>虽然有了副本机制可以保证数据的高可用，但没有解决伸缩性（Scalability）问题。什么是伸缩性呢？拿副本来说，虽然现在有了领导者副本和追随者副本，但倘若领导者副本积累了太多的数据，以至于单台Broker机器无法容纳，此时应该怎么办呢？一个很自然的想法就是能否把数据分割成多分保存在不同的Broker中？这种机制就是所谓的分区。</p></li></ol></li><li><h3 id="kafka的生产者"><a href="#kafka的生产者" class="headerlink" title="kafka的生产者"></a>kafka的生产者</h3><ol><li><h5 id="为什么要分区"><a href="#为什么要分区" class="headerlink" title="为什么要分区"></a>为什么要分区</h5></li><li><h5 id="分区策略"><a href="#分区策略" class="headerlink" title="分区策略"></a>分区策略</h5><ol><li><strong>轮询策略</strong></li><li><strong>随机策略</strong></li><li><strong>按消息键保存策略</strong></li></ol></li></ol></li><li><h3 id="kafka的消费者"><a href="#kafka的消费者" class="headerlink" title="kafka的消费者"></a>kafka的消费者</h3><ol><li><strong>消费模型</strong></li><li><strong>消费者组</strong></li><li><strong>重平衡</strong><ol><li><strong>消费者组重平衡流程</strong></li></ol></li><li>位移主题<ol><li><strong>位移提交</strong></li></ol></li></ol></li><li><h3 id="kafka的客户端"><a href="#kafka的客户端" class="headerlink" title="kafka的客户端"></a>kafka的客户端</h3><ol><li><strong>kafka副本机制</strong></li><li>副本角色</li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>QueryDSL</title>
      <link href="/2022/06/21/treasurebox/elasticsearch/xue-xi-bi-ji/1.he-xin-zhi-shi-pian-2week/3.querydsl/"/>
      <url>/2022/06/21/treasurebox/elasticsearch/xue-xi-bi-ji/1.he-xin-zhi-shi-pian-2week/3.querydsl/</url>
      
        <content type="html"><![CDATA[<h1 id="Query-DSL-Domain-Specific-Language"><a href="#Query-DSL-Domain-Specific-Language" class="headerlink" title="Query DSL(Domain Specific Language)"></a>Query DSL(Domain Specific Language)</h1><ol><li><h4 id="查询上下文"><a href="#查询上下文" class="headerlink" title="查询上下文"></a>查询上下文</h4><p>使用query关键字进行检索，倾向于相关度搜索，故需要计算评分。搜索是Elasticsearch最关键和重要的部分。</p></li><li><h4 id="相关度评分：-score"><a href="#相关度评分：-score" class="headerlink" title="相关度评分：_score"></a>相关度评分：_score</h4><p>概念：相关度评分用于对搜索结果排序，评分越高则认为其结果和搜索的预期值相关度越高，即越符合搜索预期值。在7.x之前相关度评分默认使用TF/IDF算法计算而来，7.x之后默认为BM25。在核心知识篇不必关心相关评分的具体原理，只需知晓其概念即可。</p><p>排序：相关度评分为搜索结果的排序依据，默认情况下评分越高，则结果越靠前。</p></li><li><h4 id="元数据：-source"><a href="#元数据：-source" class="headerlink" title="元数据：_source"></a>元数据：_source</h4><ol><li><h5 id="禁用-source："><a href="#禁用-source：" class="headerlink" title="禁用_source："></a>禁用_source：</h5><ol><li><p>好处：节省存储开销</p></li><li><p>坏处：</p><ul><li>不支持update、update_by_query和reindex API。</li><li>不支持高亮。</li><li>不支持reindex、更改mapping分析器和版本升级。</li><li>通过查看索引时使用的原始文档来调试查询或聚合的功能。</li><li>将来有可能自动修复索引损坏。</li></ul><p><strong>总结：如果只是为了节省磁盘，可以压缩索引比禁用_source更好。</strong></p></li></ol></li><li><h5 id="数据源过滤器："><a href="#数据源过滤器：" class="headerlink" title="数据源过滤器："></a>数据源过滤器：</h5><ul><li><p><strong>includes：</strong></p><blockquote><p>结果中返回哪些field </p></blockquote></li><li><p><strong>excludes：</strong></p><blockquote><p>结果中不要返回哪些field，不返回的field不代表不能通过该字段进行检索，因为元数据不存在不代表索引不存在</p></blockquote></li></ul><ol><li><p>在mapping中定义过滤：支持通配符，但是这种方式不推荐，因为mapping不可变</p><figure class="highlight console"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PUT product</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "_source": {</span><br><span class="line">      "includes": [</span><br><span class="line">        "name",</span><br><span class="line">        "price"</span><br><span class="line">      ],</span><br><span class="line">      "excludes": [</span><br><span class="line">        "desc",</span><br><span class="line">        "tags"</span><br><span class="line">      ]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>常用过滤规则</p><ul><li>“_source”: “false”, </li><li>“_source”: “obj.*”, </li><li>“_source”: [ “obj1.*“, “obj2.*“ ],</li><li>“_source”: {<br>“includes”: [ “obj1.*“, “obj2.*“ ],<br>“excludes”: [ “*.description” ]<br>  }</li></ul></li></ol></li></ol></li><li><h5 id="Query-String"><a href="#Query-String" class="headerlink" title="Query String"></a>Query String</h5></li></ol><ul><li><h5 id="查询所有："><a href="#查询所有：" class="headerlink" title="查询所有："></a>查询所有：</h5><p><code>GET /product/_search</code></p></li><li><h5 id="带参数："><a href="#带参数：" class="headerlink" title="带参数："></a>带参数：</h5><p><code>GET /product/_search?q=name:xiaomi</code></p></li><li><h5 id="分页："><a href="#分页：" class="headerlink" title="分页："></a>分页：</h5><p><code>GET /product/_search?from=0&amp;size=2&amp;sort=price:asc</code></p></li><li><h5 id="精准匹配-exact-value"><a href="#精准匹配-exact-value" class="headerlink" title="精准匹配 exact value"></a>精准匹配 exact value</h5><p><code>GET /product/_search?q=date:2021-06-01</code></p></li><li><h5 id="all搜索-相当于在所有有索引的字段中检索"><a href="#all搜索-相当于在所有有索引的字段中检索" class="headerlink" title="_all搜索 相当于在所有有索引的字段中检索"></a>_all搜索 相当于在所有有索引的字段中检索</h5><p><code>GET /product/_search?q=2021-06-01</code></p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">DELETE product</span><br><span class="line"># 验证_all搜索</span><br><span class="line">PUT product</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"mappings"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"properties"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"desc"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"type"</span><span class="punctuation">:</span> <span class="string">"text"</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">"index"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">      <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"># 先初始化数据</span><br><span class="line">POST /product/_update/<span class="number">5</span></span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"doc"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"desc"</span><span class="punctuation">:</span> <span class="string">"erji zhong de kendeji 2021-06-01"</span></span><br><span class="line">  <span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure></li></ul><ol start="5"><li><h4 id="全文检索-Fulltext-query"><a href="#全文检索-Fulltext-query" class="headerlink" title="全文检索-Fulltext query"></a>全文检索-Fulltext query</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET index/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    ***</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><h5 id="match：匹配包含某个term的子句，用于text字段分词之后的查询-全文检索"><a href="#match：匹配包含某个term的子句，用于text字段分词之后的查询-全文检索" class="headerlink" title="match：匹配包含某个term的子句，用于text字段分词之后的查询(全文检索)"></a>match：匹配包含某个term的子句，用于text字段分词之后的查询(全文检索)</h5><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 只要desc包含<span class="string">"xiaomi"</span><span class="punctuation">,</span><span class="string">"vivo"</span><span class="punctuation">,</span><span class="string">"iphone"</span>中的任意一个</span><br><span class="line">GET product/_search</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"query"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"match"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"desc"</span><span class="punctuation">:</span> <span class="string">"xiaomi vivo iphone"</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><ul><li><h5 id="match-all：匹配所有结果的子句"><a href="#match-all：匹配所有结果的子句" class="headerlink" title="match_all：匹配所有结果的子句"></a>match_all：匹配所有结果的子句</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 查询所有数据</span><br><span class="line">GET product/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match_all": {</span><br><span class="line">      }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="multi-match：多字段条件匹配，一般用于全文检索"><a href="#multi-match：多字段条件匹配，一般用于全文检索" class="headerlink" title="multi_match：多字段条件匹配，一般用于全文检索"></a>multi_match：多字段条件匹配，一般用于全文检索</h5><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 查name或者desc中包含xiaomi的数据，or的关系</span><br><span class="line">GET product/_search</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"query"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"multi_match"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"query"</span><span class="punctuation">:</span> <span class="string">"xiaomi"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"fields"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">"name"</span><span class="punctuation">,</span> <span class="string">"desc"</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="match-phrase：短语查询"><a href="#match-phrase：短语查询" class="headerlink" title="match_phrase：短语查询"></a>match_phrase：短语查询</h5><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 必须包含要查询的短语，如下：要求desc字段中必须包含“xiaomi made”</span><br><span class="line">GET product/_search</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"query"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"match_phrase"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"desc"</span><span class="punctuation">:</span> <span class="string">"xiaomi made"</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"></span><br><span class="line"># 示例分词结果</span><br><span class="line">GET _analyze</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"analyzer"</span><span class="punctuation">:</span> <span class="string">"standard"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"text"</span><span class="punctuation">:</span><span class="string">"xiaomi made"</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"></span><br><span class="line"># 示例分词结果</span><br><span class="line">GET _analyze</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"analyzer"</span><span class="punctuation">:</span> <span class="string">"standard"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"text"</span><span class="punctuation">:</span><span class="string">"xiaomi made 2023-03-06"</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"> </span><br></pre></td></tr></tbody></table></figure></li></ul></li></ul></li><li><h4 id="精准查询——Term-query"><a href="#精准查询——Term-query" class="headerlink" title="精准查询——Term query"></a>精准查询——Term query</h4><ul><li><p>term：匹配和搜索词项(分词后)完全相等的结果</p><ul><li><p>term和match_phrase区别：</p><blockquote><p>match_phrase 会将检索关键词分词，match_phrase的分词结果必须在被检索字段的分词中都包含，而且顺序必须相同，而且默认必须都是连续的，term搜索不会将搜索词分词</p></blockquote></li><li><p>term和keyword区别 </p><blockquote><p>term是对于搜索词不分词，keyword是字段类型，是对于source data中的字段值不分词</p></blockquote></li></ul></li><li><h5 id="terms：匹配和搜索词项列表中任意项匹配的结果"><a href="#terms：匹配和搜索词项列表中任意项匹配的结果" class="headerlink" title="terms：匹配和搜索词项列表中任意项匹配的结果"></a>terms：匹配和搜索词项列表中任意项匹配的结果</h5></li><li><h5 id="range：范围查找"><a href="#range：范围查找" class="headerlink" title="range：范围查找"></a>range：范围查找</h5></li></ul></li><li><h4 id="过滤器-Filter"><a href="#过滤器-Filter" class="headerlink" title="过滤器-Filter"></a>过滤器-Filter</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET _search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "constant_score": {</span><br><span class="line">      "filter": {</span><br><span class="line">        "term": {</span><br><span class="line">          "status": "active"</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><h5 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h5><ul><li><p>query和filter的主要区别在： filter是结果导向的而query是过程导向。query倾向于“当前文档和查询的语句的相关度”，而filter倾向于“当前文档和查询的条件是不是相符”。即在查询过程中，query是要对查询的每个结果计算相关性得分的，而filter不会。另外filter有相应的缓存机制，可以提高查询效率</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># constant_score 表示固定分数，不计算得分</span><br><span class="line">GET product/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "constant_score": {</span><br><span class="line">      "filter": {</span><br><span class="line">        "term": {</span><br><span class="line">          "name": "phone"</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      "boost": 1.2  # 查询结果的默认分数</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ul></li><li><h4 id="组合查询-Bool-query"><a href="#组合查询-Bool-query" class="headerlink" title="组合查询-Bool query"></a>组合查询-Bool query</h4><ol><li><p><strong>bool</strong>：可以组合多个查询条件，bool查询也是采用more_matches_is_better的机制，因此满足must和should子句的文档将会合并起来计算分值，多个条件<strong>and</strong>的关系。</p><ul><li><p><strong>must</strong>：必须满足子句（查询）条件，并将有助于得分，查询结果会<strong>记分</strong>。</p></li><li><p><strong>filter</strong>：筛选时不计算相关度分数，cache子句（查询）必须出现在匹配的文档中。但是不像 must要求相关度，查询的分数将被忽略。Filter子句在<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-filter-context.html">filter上下文</a>中执行，计分被忽略，并且子句被考虑用于缓存。</p></li><li><p><strong>should</strong>：查询子句中可能符合的条件（or查询）。</p></li><li><p><strong>must_not</strong>：必须不满足不子句查询。子句在<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-filter-context.html">过滤器上下文</a>中执行，这意味着计分被忽略，并且子句被视为用于缓存。由于忽略计分，所有文档的分数会返回为0。</p></li><li><p><strong>minimum_should_match</strong>：指定should返回的文档必须匹配的子句的数量或百分比。如果设置值为1，则要求should语句中至少有一个子句会查询。如果跟must或filter连用事，默认值为0，should失效，不参与查询。</p></li></ul></li></ol></li><li><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3></li></ol><p>​测试数据用到的mapping</p><blockquote><p>PUT product<br>{<br> “mappings”: {<br>   “_doc”: {<br>     “properties”: {<br>       “name”: {<br>         “type”: “text”<br>       },<br>       “price”: {<br>         “type”: “float”<br>       },<br>       “desc”: {<br>         “type”: “text”<br>       },<br>       “tags”: {<br>         “type”: “text”<br>       },<br>       “add_date”: {<br>         “type”: “date”,<br>         “format”: “YYYY-MM-DD”<br>       }<br>     },<br>     “_source”: {<br>       “enabled”: true<br>     }<br>   }<br> }<br>}</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>笔记 (copy)</title>
      <link href="/2022/06/21/treasurebox/elasticsearch/xue-xi-bi-ji/1.he-xin-zhi-shi-pian-2week/bi-ji-copy/"/>
      <url>/2022/06/21/treasurebox/elasticsearch/xue-xi-bi-ji/1.he-xin-zhi-shi-pian-2week/bi-ji-copy/</url>
      
        <content type="html"><![CDATA[<h2 id="分词器"><a href="#分词器" class="headerlink" title="分词器"></a>分词器</h2><h3 id="1normalization：文档规范化-提高召回率"><a href="#1normalization：文档规范化-提高召回率" class="headerlink" title="1normalization：文档规范化,提高召回率"></a>1normalization：文档规范化,提高召回率</h3><h3 id="2字符过滤器（character-filter）：分词之前的预处理，过滤无用字符"><a href="#2字符过滤器（character-filter）：分词之前的预处理，过滤无用字符" class="headerlink" title="2字符过滤器（character filter）：分词之前的预处理，过滤无用字符"></a>2字符过滤器（character filter）：分词之前的预处理，过滤无用字符</h3><ul><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-htmlstrip-charfilter.html">HTML Strip Character Filter</a>：html_strip<ul><li>参数：escaped_tags  需要保留的html标签</li></ul></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-mapping-charfilter.html">Mapping Character Filter</a>：type mapping</li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-pattern-replace-charfilter.html">Pattern Replace Character Filter</a>：type pattern_replace</li></ul><h3 id="3令牌过滤器（token-filter）：停用词、时态转换、大小写转换、同义词转换、语气词处理等。比如：has-x3D-gt-have-him-x3D-gt-he-apples-x3D-gt-apple-the-x2F-oh-x2F-a-x3D-gt-干掉"><a href="#3令牌过滤器（token-filter）：停用词、时态转换、大小写转换、同义词转换、语气词处理等。比如：has-x3D-gt-have-him-x3D-gt-he-apples-x3D-gt-apple-the-x2F-oh-x2F-a-x3D-gt-干掉" class="headerlink" title="3令牌过滤器（token filter）：停用词、时态转换、大小写转换、同义词转换、语气词处理等。比如：has=>have  him=>he  apples=>apple  the/oh/a=>干掉"></a>3令牌过滤器（token filter）：停用词、时态转换、大小写转换、同义词转换、语气词处理等。比如：has=&gt;have  him=&gt;he  apples=&gt;apple  the/oh/a=&gt;干掉</h3><h3 id="4分词器（tokenizer）：切词"><a href="#4分词器（tokenizer）：切词" class="headerlink" title="4分词器（tokenizer）：切词"></a>4分词器（tokenizer）：切词</h3><h3 id="5常见分词器："><a href="#5常见分词器：" class="headerlink" title="5常见分词器："></a>5常见分词器：</h3><ul><li>standard analyzer：默认分词器，中文支持的不理想，会逐字拆分。</li><li>pattern tokenizer：以正则匹配分隔符，把文本拆分成若干词项。</li><li>simple pattern tokenizer：以正则匹配词项，速度比pattern tokenizer快。</li><li>whitespace analyzer：以空白符分隔Tim_cookie</li></ul><h3 id="6自定义分词器：custom-analyzer"><a href="#6自定义分词器：custom-analyzer" class="headerlink" title="6自定义分词器：custom analyzer"></a>6自定义分词器：custom analyzer</h3><ul><li>char_filter：内置或自定义字符过滤器 。</li><li>token filter：内置或自定义token filter 。</li><li>tokenizer：内置或自定义切词器。</li></ul><h3 id="7中文分词器：ik分词"><a href="#7中文分词器：ik分词" class="headerlink" title="7中文分词器：ik分词"></a>7中文分词器：ik分词</h3><ol><li><h4 id="安装和部署"><a href="#安装和部署" class="headerlink" title="安装和部署"></a>安装和部署</h4><ul><li>ik下载地址：<a href="https://github.com/medcl/elasticsearch-analysis-ik">https://github.com/medcl/elasticsearch-analysis-ik</a></li><li>Github加速器：<a href="https://github.com/fhefh2015/Fast-GitHub">https://github.com/fhefh2015/Fast-GitHub</a></li><li>创建插件文件夹 cd your-es-root/plugins/ &amp;&amp; mkdir ik</li><li>将插件解压缩到文件夹 your-es-root/plugins/ik</li><li>重新启动es</li></ul></li><li><h4 id="IK文件描述"><a href="#IK文件描述" class="headerlink" title="IK文件描述"></a>IK文件描述</h4><ul><li>IKAnalyzer.cfg.xml：IK分词配置文件</li></ul></li></ol><ul><li>主词库：main.dic<ul><li>英文停用词：stopword.dic，不会建立在倒排索引中</li><li>特殊词库：<ul><li>quantifier.dic：特殊词库：计量单位等</li><li>suffix.dic：特殊词库：行政单位</li><li>surname.dic：特殊词库：百家姓</li><li>preposition：特殊词库：语气词</li></ul></li><li>自定义词库：网络词汇、流行词、自造词等</li></ul></li></ul><ol start="3"><li><h4 id="ik提供的两种analyzer"><a href="#ik提供的两种analyzer" class="headerlink" title="ik提供的两种analyzer:"></a>ik提供的两种analyzer:</h4><ol><li>ik_max_word会将文本做最细粒度的拆分，比如会将“中华人民共和国国歌”拆分为“中华人民共和国,中华人民,中华,华人,人民共和国,人民,人,民,共和国,共和,和,国国,国歌”，会穷尽各种可能的组合，适合 Term Query；</li><li>ik_smart: 会做最粗粒度的拆分，比如会将“中华人民共和国国歌”拆分为“中华人民共和国,国歌”，适合 Phrase 查询。</li></ol></li><li><h4 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h4><ol><li>远程词库文件<ol><li>优点：上手简单</li><li>缺点：<ol><li>词库的管理不方便，要操作直接操作磁盘文件，检索页很麻烦</li><li>文件的读写没有专门的优化性能不好</li><li>多一层接口调用和网络传输</li></ol></li></ol></li><li>ik访问数据库<ol><li>MySQL驱动版本兼容性<ol><li><a href="https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-versions.html">https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-versions.html</a></li><li><a href="https://dev.mysql.com/doc/connector-j/5.1/en/connector-j-versions.html">https://dev.mysql.com/doc/connector-j/5.1/en/connector-j-versions.html</a></li></ol></li><li>驱动下载地址<ol><li><a href="https://mvnrepository.com/artifact/mysql/mysql-connector-java">https://mvnrepository.com/artifact/mysql/mysql-connector-java</a></li></ol></li></ol></li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mapping</title>
      <link href="/2022/06/21/treasurebox/elasticsearch/xue-xi-bi-ji/1.he-xin-zhi-shi-pian-2week/2.mapping/"/>
      <url>/2022/06/21/treasurebox/elasticsearch/xue-xi-bi-ji/1.he-xin-zhi-shi-pian-2week/2.mapping/</url>
      
        <content type="html"><![CDATA[<h1 id="Mapping"><a href="#Mapping" class="headerlink" title="Mapping"></a>Mapping</h1><ol><li><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>ES中的mapping有点类似与RDB中“表结构”的概念，在MySQL中，表结构里包含了字段名称，字段的类型还有索引信息等。在Mapping里也包含了一些属性，比如字段名称、类型、字段使用的分词器、是否评分、是否创建索引等属性，并且在ES中一个字段可以有对个类型。分词器、评分等概念。</p></li><li><h4 id="查看mapping"><a href="#查看mapping" class="headerlink" title="查看mapping"></a>查看mapping</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /index/_mappings</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="ES数据类型"><a href="#ES数据类型" class="headerlink" title="ES数据类型"></a>ES数据类型</h4><ol><li><h5 id="常见类型"><a href="#常见类型" class="headerlink" title="常见类型"></a>常见类型</h5><ol><li><strong>数字类型</strong></li></ol><blockquote><p>long个带符号的 64 位整数，最小值为，最大值为。 <code>-263</code> <code>263-1</code></p><p>integer 一个带符号的 32 位整数，最小值为，最大值为。 <code>-231</code> <code>231-1</code></p><p>short一个带符号的 16 位整数，最小值为<code>-32768</code>，最大值为<code>32767</code>。</p><p>byte一个带符号的 8 位整数，最小值为<code>-128</code>，最大值为<code>127</code>。</p><p>double双精度 64 位 IEEE 754 浮点数，仅限于有限值。最小2的-1074次方</p><p>float单精度 32 位 IEEE 754 浮点数，仅限于有限值。最小2的-149次方</p><p>half_float半精度 16 位 IEEE 754 浮点数，仅限于有限值。最小2的-24次方</p><p>scaled_float   由 支持的有限浮点数<code>long</code>，按固定<code>double</code>比例因子缩放</p></blockquote><ol start="2"><li><p><strong>keyword类型</strong></p><blockquote><p><strong>keyword</strong>：适用于索引结构化的字段，可以用于过滤、排序、聚合。keyword类型的字段只能通过精确值（exact value）搜索到。Id应该用keyword </p><p><strong>constant_keyword</strong>：始终包含相同值的关键字字段</p><p><strong>wildcard</strong>：可针对类似grep的<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.10/query-dsl-wildcard-query.html">通配符查询</a>优化日志行和类似的关键字值</p><p>关键字字段通常用于<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.10/sort-search-results.html">排序</a>， <a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.10/search-aggregations.html">汇总</a>和<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.10/term-level-queries.html">Term查询</a>，例如<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.10/query-dsl-term-query.html"><code>term</code></a>。</p></blockquote></li><li><p><strong>Date类型</strong>：包括<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.10/date.html"><code>date</code></a>和 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.10/date_nanos.html"><code>date_nanos</code></a></p></li><li><p><strong>alias</strong>：为现有字段定义别名。</p></li><li><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/binary.html">binary</a>（二进制）：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/binary.html">binary</a></p></li><li><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/range.html">range</a>（区间类型）：integer_range、float_range、long_range、double_range、date_range</p></li><li><p><strong>text</strong></p><p>当一个字段是要被全文搜索的，比如Email内容、产品描述，这些字段应该使用text类型。设置text类型以后，字段内容会被分析，在生成倒排索引以前，字符串会被分析器分成一个一个词项。text类型的字段不用于排序，很少用于聚合。（解释一下为啥不会为text创建正排索引：大量堆空间，尤其是在加载高基数text字段时。字段数据一旦加载到堆中，就在该段的生命周期内保持在那里。同样，加载字段数据是一个昂贵的过程，可能导致用户遇到延迟问题。这就是默认情况下禁用字段数据的原因）</p></li></ol></li><li><p>对象关系类型：</p><ol><li>object：用于单个JSON对象</li><li>nested：用于JSON对象数组</li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/flattened.html">flattened</a>：允许将整个JSON对象索引为单个字段。</li></ol></li><li><p>结构化类型：</p></li><li><p>geo-point：纬度/经度积分</p></li><li><p>geo-shape：用于多边形等复杂形状</p></li><li><p>point：笛卡尔坐标点</p></li><li><p>shape：笛卡尔任意几何图形</p></li><li><p>特殊类型：</p><ol><li>IP地址：ip 用于IPv4和IPv6地址</li><li><a href="#completion-suggester">completion</a>：提供自动完成建议</li><li>tocken_count：计算字符串中令牌的数量</li><li><a href="https://www.elastic.co/guide/en/elasticsearch/plugins/7.7/mapper-murmur3.html">murmur3</a>：在索引时计算值的哈希并将其存储在索引中</li><li><a href="https://www.elastic.co/guide/en/elasticsearch/plugins/7.7/mapper-annotated-text.html">annotated-text</a>：索引包含特殊标记的文本（通常用于标识命名实体）</li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/percolator.html">percolator</a>：接受来自query-dsl的查询</li><li>join：为同一索引内的文档定义父/子关系</li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/rank-features.html">rank features</a>：记录数字功能以提高查询时的点击率。</li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/dense-vector.html">dense vector</a>：记录浮点值的密集向量。</li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/sparse-vector.html">sparse vector</a>：记录浮点值的稀疏向量。</li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-as-you-type.html">search-as-you-type</a>：针对查询优化的文本字段，以实现按需输入的完成</li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/histogram.html">histogram</a>：histogram 用于百分位数聚合的预聚合数值。</li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/constant-keyword.html">constant keyword</a>：keyword当所有文档都具有相同值时的情况的 专业化。</li></ol></li><li><p>array（数组）</p><blockquote><p>在Elasticsearch中，数组不需要专用的字段数据类型。默认情况下，任何字段都可以包含零个或多个值，但是数组中的所有值都必须具有相同的数据类型。</p></blockquote></li><li><p>新增</p><ol><li>date_nanos：date plus 纳秒</li><li>features：…</li></ol></li></ol></li><li><h4 id="两种映射类型"><a href="#两种映射类型" class="headerlink" title="两种映射类型"></a>两种映射类型</h4><ol><li>Dynamic field mapping：<ul><li>整数     =&gt;long</li><li>浮点数     =&gt;float</li><li>true || false =&gt;boolean</li><li>日期             =&gt;date</li><li>数组                     =&gt;    取决于数组中的第一个有效值</li><li>对象                     =&gt;    object</li><li>字符串                 =&gt;    如果不是数字和日期类型，会被映射为text和keyword两个类型</li></ul></li></ol><p>除了以上字段类型之外，其他类型都必须显示映射，也就是必须手工指定，因为其他类型ES无法自动识别，如下表示java基础类型占用的字节大小。</p><table><thead><tr><th align="center">基本数据类型</th><th align="center">占用的内存（byte）</th><th align="center">范围</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">1</td><td align="center">-2^7 ~ 2^7-1</td></tr><tr><td align="center">short</td><td align="center">2</td><td align="center">-2^15 ~ 2^15-1</td></tr><tr><td align="center">int</td><td align="center">4</td><td align="center">-2^31 ~ 2^31-1</td></tr><tr><td align="center">long</td><td align="center">8</td><td align="center">-2^63 ~ 2^63-1</td></tr><tr><td align="center">float</td><td align="center">4</td><td align="center">-3.4e+38 ~ 3.4e+38</td></tr><tr><td align="center">double</td><td align="center">8</td><td align="center">-1.7e+308 ~ 1.7e+308</td></tr><tr><td align="center">boolean</td><td align="center">1</td><td align="center">true/false</td></tr><tr><td align="center">char</td><td align="center">2</td><td align="center">0~65535</td></tr></tbody></table></li><li><h4 id="Expllcit-field-mapping：手动映射"><a href="#Expllcit-field-mapping：手动映射" class="headerlink" title="Expllcit field mapping：手动映射"></a>Expllcit field mapping：手动映射</h4><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PUT /product</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line"><span class="attr">"mappings"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"properties"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"field"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"mapping_parameter"</span><span class="punctuation">:</span> <span class="string">"parameter_value"</span></span><br><span class="line">   <span class="punctuation">}</span></span><br><span class="line">   <span class="punctuation">}</span></span><br><span class="line"> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="映射参数"><a href="#映射参数" class="headerlink" title="映射参数"></a>映射参数</h4><ol><li><p><strong>index</strong>：是否对创建对当前字段创建倒排索引，默认true，如果不创建索引，该字段不会通过索引被搜索到,但是仍然会在source元数据中展示</p></li><li><p><strong>analyzer</strong>：指定分析器（character filter、tokenizer、Token filters）</p></li><li><p><strong>boost</strong>：对当前字段相关度的评分权重，默认1</p></li><li><p><strong>coerce</strong>：是否允许强制类型转换 ，例如”1”转为1，默认为true，false时不能强制类型转换，类型不符合时会报错</p></li><li><p><strong>copy_to</strong>：该参数允许将多个字段的值复制到组字段中，然后可以将其作为单个字段进行查询</p></li><li><p><strong>doc_values</strong>：为了提升排序和聚合效率，默认true，如果确定不需要对字段进行排序或聚合，也不需要通过脚本访问字段值，则可以禁用doc值以节省磁盘空间（不支持text和annotated_text）</p></li><li><p><strong>dynamic</strong>：控制是否可以动态添加新字段</p><ul><li>true 新检测到的字段将添加到映射中。（默认）</li><li>false 新检测到的字段将被忽略。这些字段将不会被索引，因此将无法搜索，但仍会出现在_source返回的匹配项中。这些字段不会添加到映射中，必须显式添加新字段。</li><li>strict 如果检测到新字段，则会引发异常并拒绝文档。必须将新字段显式添加到映射中</li></ul></li><li><p><strong>eager_global_ordinals：用于聚合的字段上，优化聚合性能。</strong></p><ul><li>Frozen indices（冻结索引）：有些索引使用率很高，会被保存在内存中，有些使用率特别低，宁愿在使用的时候重新创建，在使用完毕后丢弃数据，Frozen indices的数据命中频率小，不适用于高搜索负载，数据不会被保存在内存中，堆空间占用比普通索引少得多，Frozen indices是只读的，请求可能是秒级或者分钟级。eager_global_ordinals不适用于Frozen indices</li></ul></li><li><p><strong>enable</strong></p><blockquote><p>是否创建倒排索引，可以对字段操作，也可以对索引操作，如果不创建索引，仍然可以检索并在_source元数据中展示，谨慎使用，该状态无法修改。</p></blockquote><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line"><span class="attr">"mappings"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line"><span class="attr">"enabled"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>fielddata</strong></p><blockquote><p>查询时的内存数据结构，在首次用当前字段聚合、排序或者在脚本中使用时，设置字段的fileddata为true</p></blockquote></li><li><p><strong>fields</strong>：给field创建多字段，用于不同目的（全文检索或者聚合分析排序）</p></li><li><p><strong>format</strong>：格式化</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"date": {</span><br><span class="line">   "type":  "date",</span><br><span class="line">   "format": "yyyy-MM-dd"</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>ignore_above</strong>：超过长度将被忽略</p></li><li><p><strong>ignore_malformed</strong>：忽略类型错误，默认为false，为true时类型不符会报错，如“foo”插入int类型中</p></li><li><p>index_options：控制将哪些信息添加到反向索引中以进行搜索和突出显示，仅用于text字段</p></li><li><p>Index_phrases：提升exact_value查询速度，但是要消耗更多磁盘空间</p></li><li><p>Index_prefixes：前缀搜索</p><ul><li>min_chars：前缀最小长度，&gt;0，默认2（包含）</li><li>max_chars：前缀最大长度，&lt;20，默认5（包含）</li></ul></li><li><p>meta：附加元数据</p></li><li><p>normalizer：</p></li><li><p>norms：是否禁用评分（在filter和聚合字段上应该禁用）。</p></li><li><p>null_value：为null值设置默认值</p></li><li><p>position_increment_gap：</p></li><li><p>proterties：除了mapping还可用于object的属性设置</p></li><li><p>search_analyzer：设置单独的查询时分析器：**</p></li><li><p>similarity：为字段设置相关度算法，支持BM25、claassic（TF-IDF）、boolean</p></li><li><p>store：设置字段是否仅查询</p></li><li><p>term_vector：运维参数</p></li></ol></li></ol><p>​</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>项目实战篇</title>
      <link href="/2022/06/09/treasurebox/elasticsearch/xue-xi-bi-ji/3.xiang-mu-shi-zhan-pian-2week/xiang-mu-shi-zhan-pian/"/>
      <url>/2022/06/09/treasurebox/elasticsearch/xue-xi-bi-ji/3.xiang-mu-shi-zhan-pian-2week/xiang-mu-shi-zhan-pian/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>运维调优篇</title>
      <link href="/2022/06/09/treasurebox/elasticsearch/xue-xi-bi-ji/4.yun-wei-diao-you-pian-2week/yun-wei-diao-you-pian/"/>
      <url>/2022/06/09/treasurebox/elasticsearch/xue-xi-bi-ji/4.yun-wei-diao-you-pian-2week/yun-wei-diao-you-pian/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>高手进阶篇</title>
      <link href="/2022/06/09/treasurebox/elasticsearch/xue-xi-bi-ji/2.gao-shou-jin-jie-pian-2week/gao-shou-jin-jie-pian/"/>
      <url>/2022/06/09/treasurebox/elasticsearch/xue-xi-bi-ji/2.gao-shou-jin-jie-pian-2week/gao-shou-jin-jie-pian/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>es基本介绍</title>
      <link href="/2022/06/09/treasurebox/elasticsearch/xue-xi-bi-ji/1.he-xin-zhi-shi-pian-2week/1.es-ji-ben-jie-shao/"/>
      <url>/2022/06/09/treasurebox/elasticsearch/xue-xi-bi-ji/1.he-xin-zhi-shi-pian-2week/1.es-ji-ben-jie-shao/</url>
      
        <content type="html"><![CDATA[<h2 id="核心知识篇"><a href="#核心知识篇" class="headerlink" title="核心知识篇"></a>核心知识篇</h2><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h4 id="ElasticStack四大金刚"><a href="#ElasticStack四大金刚" class="headerlink" title="ElasticStack四大金刚"></a>ElasticStack四大金刚</h4><ol><li><p>elasticsearch 基于Json的分布式搜索和分析引擎</p></li><li><p>Logstash 动态数据收集管道，生态丰富</p></li><li><p>Kibana 提供数据的可视化页面</p></li><li><p>Beats 轻量级的数据采集器</p></li></ol><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><p>兼容性查看：<a href="https://www.elastic.co/cn/support/matrix#matrix_os">https://www.elastic.co/cn/support/matrix#matrix_os</a></p><h5 id="安装ES"><a href="#安装ES" class="headerlink" title="安装ES"></a>安装ES</h5><p><a href="https://www.elastic.co/cn/downloads/past-releases#enterprise-search">https://www.elastic.co/cn/downloads/past-releases#enterprise-search</a></p><h4 id="集群健康度检查"><a href="#集群健康度检查" class="headerlink" title="集群健康度检查"></a>集群健康度检查</h4><ol><li><strong>Green</strong>：所有Primary和Replica均为activate，集群健康</li><li><strong>Yellow</strong>：至少有一个Replica不可用，但是所有Primary均为activate，数据仍然可以保证完整性</li><li><strong>Red</strong>：至少有一个Primary为不可用状态，数据不完整，集群不可用</li></ol><h4 id="查看集群状态"><a href="#查看集群状态" class="headerlink" title="查看集群状态"></a>查看集群状态</h4><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET <span class="string">"http://127.0.0.1:9200/_cluster/health"</span></span><br><span class="line"># 在索引级别上显示异常情况</span><br><span class="line">curl -XGET <span class="string">"http://127.0.0.1:9200/_cluster/health?level=indices"</span></span><br><span class="line">curl -XGET <span class="string">"http://127.0.0.1:9200/_cluster/allocation/explain"</span></span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"cluster_name"</span><span class="punctuation">:</span> <span class="string">"elasticsearch"</span><span class="punctuation">,</span>  # 集群名称</span><br><span class="line">    <span class="attr">"status"</span><span class="punctuation">:</span> <span class="string">"yellow"</span><span class="punctuation">,</span># 集群状态</span><br><span class="line">    <span class="attr">"timed_out"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span># 是否超时</span><br><span class="line">    <span class="attr">"number_of_nodes"</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> # 节点数量</span><br><span class="line">    <span class="attr">"number_of_data_nodes"</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span># 数据节点数量</span><br><span class="line">    <span class="attr">"active_primary_shards"</span><span class="punctuation">:</span> <span class="number">19</span><span class="punctuation">,</span># 活跃的主分片数量</span><br><span class="line">    <span class="attr">"active_shards"</span><span class="punctuation">:</span> <span class="number">19</span><span class="punctuation">,</span># 活跃的分片数量</span><br><span class="line">    <span class="attr">"relocating_shards"</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span># 将要迁往到其他节点的分片</span><br><span class="line">    <span class="attr">"initializing_shards"</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> # 正在初始化的分片数量</span><br><span class="line">    <span class="attr">"unassigned_shards"</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span># 未分配的分片数量</span><br><span class="line">    <span class="attr">"delayed_unassigned_shards"</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span># 延时待分配到具体节点上的分片数</span><br><span class="line">    <span class="attr">"number_of_pending_tasks"</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span>#主节点创建索引并分配shards等任务数，正常为<span class="number">0</span></span><br><span class="line">    <span class="attr">"number_of_in_flight_fetch"</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> # 在分片中执行的集群更新的数量，比如修改某个字段值，正同步到其他副分片的，未分配分片不统计在内</span><br><span class="line">    <span class="attr">"task_max_waiting_in_queue_millis"</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> # 集群任务在队列中等待的最长时长</span><br><span class="line">    <span class="attr">"active_shards_percent_as_number"</span><span class="punctuation">:</span> <span class="number">90.47619047619048</span>  # 活跃分片占比</span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><h4 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h4><blockquote><p>包含term index，term dectionary，posting List。</p><p>分别表示：词项索引、词项字典、倒排表</p></blockquote><table><thead><tr><th>term index</th><th>term dictionary</th><th>posting list</th><th>标记匹配</th></tr></thead><tbody><tr><td></td><td>apple</td><td>1,2,3,…10w</td><td></td></tr><tr><td></td><td>orange</td><td>3.4.5</td><td>True</td></tr><tr><td></td><td>banana</td><td>8</td><td>True</td></tr></tbody></table><p><img src="/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%AF%87/images/image-20220613212159571.png" alt="image-20220613212159571"></p><h4 id="cluster：集群中的基本元素是节点，节点又分为不同的角色，同一个机器中尽量不部署多个节点。"><a href="#cluster：集群中的基本元素是节点，节点又分为不同的角色，同一个机器中尽量不部署多个节点。" class="headerlink" title="cluster：集群中的基本元素是节点，节点又分为不同的角色，同一个机器中尽量不部署多个节点。"></a>cluster：集群中的基本元素是节点，节点又分为不同的角色，同一个机器中尽量不部署多个节点。</h4><blockquote><p>master：候选节点，维护集群元数据，节点状态，创建索引，索引主副分片，选主之后其他节点将信息发送到主节点，主节点再分发到其他节点。<br>data：数据节点<br>data_content：数据内容节点<br>data_hot：热节点，可写可更新节点<br>data_warm：warm节点，一般用于不再更新的节点，只查询<br>data_code：冷节点，只读索引，存放历史数据<br>Ingest：预处理节点，作用类似于Logstash中的Filter<br>ml(machine learning)：机器学习节点<br>remote_cluster_client：候选客户端节点<br>transform：转换节点<br>voting_only：仅投票节点</p></blockquote><h4 id="index：索引"><a href="#index：索引" class="headerlink" title="index：索引"></a>index：索引</h4><blockquote><p>类似数据库的概念，以分片为单位，可以设置副本及分片个数</p></blockquote><h4 id="type：类型"><a href="#type：类型" class="headerlink" title="type：类型"></a>type：类型</h4><blockquote><p>每一个index中分为不同的type，使用type可以在同一个index里存储多种类型的数据，可以减少index的数量，好处是搜索同一个index 的多个type时不会产生额外的开销，因为遍历的分片数是一样的。</p><p>缺点是不同type名称相同的字段要完全保持一致如字段类型等；在某个type有的字段，在其他没有该字段的type也会消耗资源（posting list，doc value）。搜索评分是在index级别计算，多个type会相互影响。</p><p>在7.x版本中开始弱化，使用_doc进行统一使用，在8.x版本中彻底删除</p></blockquote><h4 id="shard：分片"><a href="#shard：分片" class="headerlink" title="shard：分片"></a>shard：分片</h4><p>一个索引中包含一个或者多个分片，在7.0之前默认创建5个分片，每个主分片一个副本；7.0之后默认创建1个主分片。副本可以在索引创建之后修改数量，但是主分片的数量一旦确定之后不能修改，只能删除之后重新创建。主分片挂掉之后副分片升级为主分片。原分片加入之后从当前主分片中同步数据。主分片和副分片不会在同一个节点中。</p><p>每个分片都是一个<strong>Lucene</strong>实例，有完整的创建索引和处理请求能力，搜索时所有的分片都会被扫描，最终被ES合并所有的搜索结果。</p><p><strong>ES会在nodes上做分片均衡</strong>：所有的分片尽量均匀的分布在所有的节点上rebalance，分片平衡策略。</p><p>一个doc不会存在于多个主分片中，但是当每个主分片的副本数量不唯一时，可以同时存在于多个副本中</p><p>每个主分片和副分片不能同时存在于同一个节点中，所以如果设置副本&gt;0时，最少有两个节点，否则分片一直处于无法分配状态，如下图：</p><p><img src="/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%AF%87/images/image-20220621204348468.png" alt="image-20220621204348468"></p><h4 id="doc"><a href="#doc" class="headerlink" title="doc"></a>doc</h4><blockquote><p>文档：es中的数据都是以文档的形式存储，是数据存储的基本单元，每个doc都会有<code>_id</code>字段，可以在存储时指定<code>_id</code>，或者es会自动生成，es默认根据doc做<code>routing</code>，</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ES安装</title>
      <link href="/2022/05/27/treasurebox/elasticsearch/0.es-an-zhuang/"/>
      <url>/2022/05/27/treasurebox/elasticsearch/0.es-an-zhuang/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="title-ElasticSearch-安装"><a href="#title-ElasticSearch-安装" class="headerlink" title="title: ElasticSearch 安装"></a>title: ElasticSearch 安装</h2><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol><li><p>centos系统中安装，es7.6版本中已经有JDK，所以机器不需要本地JDK，可以不用安装JDK：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /home/software</span><br><span class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.6.2-linux-x86_64.tar.gz</span><br><span class="line">tar -zxvf elasticsearch-7.6.2-linux-x86_64.tar.gz</span><br></pre></td></tr></tbody></table></figure></li><li><p>各文件夹作用</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">bin可执行脚本，包含启动文件等</span><br><span class="line">config配置文件</span><br><span class="line">jdk/jdk.appjava的jar文件，自带的java环境</span><br><span class="line">libelastic组件的jar包</span><br><span class="line">LICENSE.txt</span><br><span class="line">logs日志文件夹，需要修改为其他目录</span><br><span class="line">data默认的数据存放目录，包含节点、分片、索引、文档的所有数据，生产环境必须修改。</span><br><span class="line">modules依赖的模块</span><br><span class="line">NOTICE.txt</span><br><span class="line">plugins插件的存放位置，如IK分词器等</span><br><span class="line">README.asciidoc</span><br></pre></td></tr></tbody></table></figure></li><li><p>配置文件</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">es安装目录中的config文件夹下</span><br><span class="line">config/elasticsearch.yml  ES的初始化配置</span><br><span class="line">主要修改，打开以下注释：</span><br><span class="line">node.name: node-1</span><br><span class="line">cluster.initial_master_nodes: ["node-1"]</span><br><span class="line"></span><br><span class="line">config/jvm.options  jvm的配置文件</span><br><span class="line">注意这两个参数要设置为一致，否则会报错</span><br><span class="line">  -Xms512m</span><br><span class="line">-Xmx512m</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"># ======================== Elasticsearch Configuration =========================</span><br><span class="line">#</span><br><span class="line"># NOTE: Elasticsearch comes with reasonable defaults for most settings.</span><br><span class="line">#       Before you set out to tweak and tune the configuration, make sure you</span><br><span class="line">#       understand what are you trying to accomplish and the consequences.</span><br><span class="line">#</span><br><span class="line"># The primary way of configuring a node is via this file. This template lists</span><br><span class="line"># the most important settings you may want to configure for a production cluster.</span><br><span class="line">#</span><br><span class="line"># Please consult the documentation for further information on configuration options:</span><br><span class="line"># https://www.elastic.co/guide/en/elasticsearch/reference/index.html</span><br><span class="line">#</span><br><span class="line"># ---------------------------------- Cluster -----------------------------------</span><br><span class="line">#</span><br><span class="line"># Use a descriptive name for your cluster:</span><br><span class="line"># 集群名称</span><br><span class="line">#cluster.name: my-application</span><br><span class="line">#</span><br><span class="line"># ------------------------------------ Node ------------------------------------</span><br><span class="line">#</span><br><span class="line"># Use a descriptive name for the node:</span><br><span class="line"># 节点名称</span><br><span class="line">#node.name: node-1</span><br><span class="line">#</span><br><span class="line"># Add custom attributes to the node:</span><br><span class="line">#</span><br><span class="line">#node.attr.rack: r1</span><br><span class="line">#</span><br><span class="line"># ----------------------------------- Paths ------------------------------------</span><br><span class="line">#</span><br><span class="line"># Path to directory where to store the data (separate multiple locations by comma):</span><br><span class="line"># 数据的保存路径</span><br><span class="line">#path.data: /path/to/data</span><br><span class="line">#</span><br><span class="line"># Path to log files:</span><br><span class="line"># 日志文件保存位置</span><br><span class="line">#path.logs: /path/to/logs</span><br><span class="line">#</span><br><span class="line"># ----------------------------------- Memory -----------------------------------</span><br><span class="line">#</span><br><span class="line"># Lock the memory on startup:</span><br><span class="line"># 锁定物理内存地址，防止es内存被交换出去，就是避免es使用swap交换分区，频繁的交换，会导致IOPS变高</span><br><span class="line">#bootstrap.memory_lock: true</span><br><span class="line">#</span><br><span class="line"># Make sure that the heap size is set to about half the memory available</span><br><span class="line"># on the system and that the owner of the process is allowed to use this</span><br><span class="line"># limit.</span><br><span class="line">#</span><br><span class="line"># Elasticsearch performs poorly when the system is swapping the memory.</span><br><span class="line">#</span><br><span class="line"># ---------------------------------- Network -----------------------------------</span><br><span class="line"></span><br><span class="line"># By default Elasticsearch is only accessible on localhost. Set a different</span><br><span class="line"># address here to expose this node on the network:</span><br><span class="line"></span><br><span class="line">#network.host: 192.168.0.1</span><br><span class="line">#</span><br><span class="line"># By default Elasticsearch listens for HTTP traffic on the first free port it</span><br><span class="line"># finds starting at 9200. Set a specific HTTP port here:</span><br><span class="line"># 开启的端口，默认9200</span><br><span class="line">#http.port: 9200</span><br><span class="line">#</span><br><span class="line"># For more information, consult the network module documentation.</span><br><span class="line">#</span><br><span class="line"># --------------------------------- Discovery ----------------------------------</span><br><span class="line">#</span><br><span class="line"># Pass an initial list of hosts to perform discovery when this node is started:</span><br><span class="line"># The default list of hosts is ["127.0.0.1", "[::1]"]</span><br><span class="line">#</span><br><span class="line">#discovery.seed_hosts: ["host1", "host2"]</span><br><span class="line">#</span><br><span class="line"># Bootstrap the cluster using an initial set of master-eligible nodes:</span><br><span class="line"># 可以升级为master节点的节点名称，要与node.name配置相同</span><br><span class="line">#cluster.initial_master_nodes: ["node-1", "node-2"]</span><br><span class="line"></span><br><span class="line"># For more information, consult the discovery and cluster formation module documentation.</span><br><span class="line"></span><br><span class="line"># ---------------------------------- Various -----------------------------------</span><br><span class="line"># Require explicit names when deleting indices:</span><br><span class="line"># 默认情况下 Elasticsearch 不允许通配符删除。此更改破坏了许多集成测试</span><br><span class="line">#action.destructive_requires_name: true</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p>启动</p><p>前台启动：<code>./bin/elasticsearch</code></p><p>后台启动：<code>bin/elasticsearch -d</code></p><p>启动之后使用浏览器访问：<code>http://127.0.0.1:9200/</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">启动时如果报错：max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span><br><span class="line">则切换到root用户，然后编辑/etc/sysctl.conf，在最后一行加入：</span><br><span class="line">vm.max_map_count=262144  #max_map_count文件包含限制一个进程可以拥有的VMA(虚拟内存区域)的数量</span><br><span class="line"></span><br><span class="line">sysctl -p  # 保存之后退出执行，让配置生效</span><br></pre></td></tr></tbody></table></figure></li><li><p>数据存储目录</p></li><li><p>节点</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>安装</title>
      <link href="/2022/05/26/treasurebox/grafana/1.an-zhuang/"/>
      <url>/2022/05/26/treasurebox/grafana/1.an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="Grafana安装"><a href="#Grafana安装" class="headerlink" title="Grafana安装"></a>Grafana安装</h1><p>Ubuntu 和 Debian （64 位）SHA256：86acf244ddbbb4b59d4b043d67ad504787facc49b76564f26bb6a5140af76d78</p><p>sudo apt-get install -y adduser libfontconfig1</p><blockquote><p>wget <a href="https://dl.grafana.com/enterprise/release/grafana-enterprise_8.0.4_amd64.deb">https://dl.grafana.com/enterprise/release/grafana-enterprise_8.0.4_amd64.deb</a><br>sudo dpkg -i grafana-enterprise_8.0.4_amd64.deb</p></blockquote><p>阅读 Ubuntu / Debian<a href="https://grafana.com/docs/grafana/latest/installation/debian/#2-start-the-server"> 安装指南 </a>了解更多信息。 我们还提供了一个<a href="https://grafana.com/docs/grafana/latest/installation/debian/#install-from-apt-repository"> APT </a>包存储库。</p><p>独立 Linux 二进制文件（64 位）SHA256：5a6ebec00a099a3b9231538ae1c5135853c8b7f4a668ba42aa5d43f77c34bcaf</p><blockquote><p>wget <a href="https://dl.grafana.com/enterprise/release/grafana-enterprise-8.0.4.linux-amd64.tar.gz">https://dl.grafana.com/enterprise/release/grafana-enterprise-8.0.4.linux-amd64.tar.gz</a><br>tar -zxvf grafana -enterprise-8.0.4.linux-amd64.tar.gz</p></blockquote><p>Red Hat、CentOS、RHEL 和 Fedora （64 位）SHA256：1ded5b790d22ef5e066de7724f8d74635377947dcfa3453428d235b01e0d108b</p><blockquote><p>wget <a href="https://dl.grafana.com/enterprise/release/grafana-enterprise-8.0.4-1.x86_64.rpm">https://dl.grafana.com/enterprise/release/grafana-enterprise-8.0.4-1.x86_64.rpm</a><br>sudo yum install grafana-enterprise-8.0.4-1.x86_64.rpm</p></blockquote><p>OpenSUSE 和 SUSE</p><blockquote><p>wget <a href="https://dl.grafana.com/enterprise/release/grafana-enterprise-8.0.4-1.x86_64.rpm">https://dl.grafana.com/enterprise/release/grafana-enterprise-8.0.4-1.x86_64.rpm</a><br>sudo rpm -i –nodeps grafana-enterprise-8.0.4-1.x86_64.rpm</p></blockquote><p>配置项在/etc/grafana/grafana.ini文件中</p><p>centos7操作</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@cxm ~]#systemctl daemon-reload</span><br><span class="line">[root@cxm ~]#systemctl start grafana-server</span><br><span class="line">[root@cxm ~]#systemctl stop grafana-server</span><br><span class="line">[root@cxm ~]#systemctl restart grafana-server</span><br><span class="line">[root@cxm ~]#systemctl status grafana-server</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git0-安装</title>
      <link href="/2022/05/20/treasurebox/git-ming-ling/git0-an-zhuang/"/>
      <url>/2022/05/20/treasurebox/git-ming-ling/git0-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li><p>linux环境安装</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install git</span><br></pre></td></tr></tbody></table></figure></li><li><p>mac安装</p></li><li><p>windows安装</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装</title>
      <link href="/2022/05/20/treasurebox/docker/2.docker-an-zhuang/"/>
      <url>/2022/05/20/treasurebox/docker/2.docker-an-zhuang/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="title-Docker安装"><a href="#title-Docker安装" class="headerlink" title="title: Docker安装"></a>title: Docker安装</h2><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><ol><li><h4 id="docker-hub"><a href="#docker-hub" class="headerlink" title="docker hub"></a>docker hub</h4><ol><li><a href="https://hub.docker.com/search/?type=image&amp;image_filter=official&amp;q=">https://hub.docker.com/search/?type=image&amp;image_filter=official&amp;q=</a></li></ol></li><li><h4 id="linux安装"><a href="#linux安装" class="headerlink" title="linux安装"></a>linux安装</h4><ol><li><p>先清理旧的docker镜像</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></tbody></table></figure></li><li><p>安装所需的软件包</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br><span class="line">  </span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></tbody></table></figure></li><li><p>安装最新版的docker engine-community和containerd</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></tbody></table></figure></li><li><p>解决报错，执行完之后重新执行<code>3</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></tbody></table></figure></li><li><p>启动和测试</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br><span class="line">sudo docker run hello-world</span><br></pre></td></tr></tbody></table></figure></li></ol></li><li><h4 id="mac安装"><a href="#mac安装" class="headerlink" title="mac安装"></a>mac安装</h4></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hadoop03组件</title>
      <link href="/2022/05/19/treasurebox/hadoop03-zu-jian/"/>
      <url>/2022/05/19/treasurebox/hadoop03-zu-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="hadoop03机器启动hdfs，hbase"><a href="#hadoop03机器启动hdfs，hbase" class="headerlink" title="hadoop03机器启动hdfs，hbase"></a>hadoop03机器启动hdfs，hbase</h2><blockquote><p>bash /opt/module/hadoop-3.1.3/sbin/start-dfs.sh<br>bash /opt/module/hadoop-3.1.3/sbin/start-yarn.sh<br>/opt/module/apache-zookeeper-3.7.0/bin/zkServer.sh start<br>bash /opt/module/hbase-2.4.12/bin/start-hbase.sh<br>bash /opt/module/hbase-2.4.12/bin/hbase-daemons.sh –config $HBASE_HOME/conf start thrift –infoport 9096 -p 9097</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>tencent</title>
      <link href="/2022/05/19/treasurebox/zong-jie/1.tencent/"/>
      <url>/2022/05/19/treasurebox/zong-jie/1.tencent/</url>
      
        <content type="html"><![CDATA[<p>1、Mysql索引联合索引，联合索引不生效怎么办</p><blockquote><p>1.索引失效分析工具：使用explain命令加在要分析的sql语句前面，在执行结果中查看key这一列的值，如果为NULL，说明没有使用索引。</p><p>索引失效的场景：</p><ol><li>or语句前后没有同时使用索引。当or左右查询字段只有一个是索引，该索引失效，只有当or左右查询字段均为索引时，才会生效。</li><li>复合索引未使用左列索引，即不是使用第一列索引，索引失效。</li><li>like以%开头，当like前缀没有%，后缀有%时，索引有效; </li><li>需要类型转换; （比如在一个int字段中使用字符串进行查询，或者在varchar字段中使用int进行查询）</li><li>where中索引列有运算，或者索引列使用了函数;（比如在查询name时使用LENGTH方法）</li><li>where中在索引字段上使用not，&lt;&gt;，!=。（不等于操作符是永远不会用到索引的，因此对它的处理只会产生全表扫描。key&lt;&gt;0 改为 key&gt;0 or key&lt;0。）不等于操作符是永远不会用到索引的，因此对它的处理只会产生全表扫描。优化方法：key&lt;&gt;0 改为 key&gt;0 or key&lt;0。</li><li>如果mysql觉得全表扫描更快时（数据少）;</li><li>在索引列上使用 IS NULL 或 IS NOT NULL操作。</li></ol><p>（索引是不索引空值的，所以这样的操作不能使用索引，可以用其他的办法处理，例如：数字类型，判断大于0，字符串类型设置一个默认值，判断是否等于默认值即可。）</p></blockquote><p>2、分库分表设计怎么保证id的唯一</p><blockquote><p>雪花算法、自增数据库控制</p></blockquote><p>3、redis过期删除的策略</p><blockquote><p>volatile-lru：从已设置过期时间的数据集（server.db[i].expires中挑选最近最少使用的数据淘汰。</p><p>allkeys-lru：从数据集（server.db[i].dict）中挑选最少使用的数据淘汰。</p><p>volatle-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰。</p><p>volatle-lru ：从已设置过期时间的数据集（server.db[i].expires）中挑选最近使用次数最少的数据淘汰。</p><p>allkeys-lfu：从数据集（server.db[i].dict）中挑选最近使用次数最少的数据淘汰。</p><p>volatile-random：从已设置过期时间的数据集(server.db[i].expires)中任意选择数据淘汰。</p><p>allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰</p></blockquote><p>4、redis的hash结构的key跟value都有哪些数据类型</p><p>5、mysql事务的隔离级别</p><blockquote><ol><li>读未提交：该事务中读取了其他事务未提交的数据，导致使用了脏数据。没有视图的概念。可能会导致脏读、幻读、不可重复读问题。</li><li>读已提交：一个事务修改了数据且成功提交事务后，才可查询到更新后的数据。读提交隔离时开始执行SQL时创建视图。</li><li>可重复读：一个事务在执行过程中查询到的数据，总是与该事务启动时看到的数据是一致的。未提交变更对其他事务也是不可见的。可重复读视图是在事务启动时创建的，整个事务期间都使用这个视图。</li><li>串行化：对于同一行记录，写会加写锁。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。川行化直接使用加锁的方式来避免并行访问。</li></ol></blockquote><p>6、脏读、幻读产生的场景</p><p>7、python代码怎么提升if，else的效率</p><p>8、python代码怎么进行测试</p><blockquote><p>单元测试，unitest</p></blockquote><p>9、python2跟python3的区别</p><blockquote><ol><li>python2 print是一个方法，py3是一个类</li><li>py2.6中对format方法有严格限制，必须使用下标</li><li>py2中除法使用的是地板除，比如5/2得到的是2。py3中得到的是2.5</li><li>py3默认编码是utf8，py2中使用utf8编码时需要显示指出</li><li>2.x raise语句使用逗号将抛出对象类型和参数分开，3.x取消了这种奇葩的写法，直接调用构造函数抛出对象即可，只有继承自BaseException的对象才可以被抛出。</li><li>py3中移除了&lt;&gt;表示不等于的写法</li><li>py3中移除了long类型，只有int类型</li><li>py3中的字典的keys、values、items方法返回的是迭代器。py2中返回的是列表。</li><li>six库中有很多兼容py2和py3的库</li></ol></blockquote><p>10、python的数据类型怎么存储的，哪些可变跟不可变</p><blockquote><p>不可变：数字、字符串、远足</p><p>可变：列表、集合、字典</p></blockquote><p>11、单点登录原理</p><blockquote><ol><li>用户访问系统1的受保护资源，系统1发现用户未登录，跳转至sso认证中心，并将自己的地址作为参数 </li><li>sso认证中心发现用户未登录，将用户引导至登录页面 </li><li>用户输入用户名密码提交登录申请 </li><li>sso认证中心校验用户信息，创建用户与sso认证中心之间的会话，称为全局会话，同时创建授权</li></ol></blockquote><p>12、linux中查看端口占用，查看进程资源占用，哪些是close状态</p><blockquote><ol><li>lsof -i:端口或netstat -anp | grep 端口号</li><li>netstat -nulpt查看所有端口使用情况</li><li>ps -ef</li></ol></blockquote><p>13、常用的linux命令</p><blockquote><p>top、ps、netstat、ls、cat、cd、vim、</p></blockquote><p>14、GIL全局解释器锁</p><blockquote><p>GIL使得对象模型都是可以并发访问。GIL全局解释器锁解决多线程之间数据完整性和状态同步的问题，但是这个锁在同一时刻只有一个线程在运行，所以在多核的情况下也只能发挥出单核的性能,多线程依旧像是单线程的运行</p></blockquote><p>15、抓包工具</p><blockquote><p>tcp dump</p></blockquote><p>16、代码的异常怎么处理</p><blockquote><p>try、catch</p></blockquote><p>17、用过哪些orm框架，怎么实现的</p><blockquote><p>peewee、sql_alchemy、底层基于pymysql</p></blockquote><p>18、怎么查看sql的索引命中情况</p><blockquote><p>explain语句</p></blockquote><p>19、<a href="https://cloud.tencent.com/developer/article/1021946?from=article.detail.1729255">B树跟B+的区别。</a></p><blockquote><p>B树，即二叉搜索树。</p><ol><li>所有非叶子结点至多拥有两个儿子（left和right）</li><li>所有节点存储一个关键字</li><li>非叶子结点的左指针指向小于其关键字的子树，右指针指向大于其关键字的子树。</li></ol><p>B树的搜索从根节点开始，如果查询的关键字与节点的关键字相等，那么命中；如果比节点小，则进入左分支。如果B树所有非叶子结点的左右子树节点树木均保持差不多（平衡），那么B树的查找频率逼近二分查找。但B树在经过多次插入删除后，有可能导致不同的结构，实际使用的B树是在原B树的基础上加上平衡算法，即平衡二叉树.</p></blockquote><p><img src="/1.tencent/images/image-20221228223140330.png" alt="image-20221228223140330"></p><blockquote><p>B-树：是一种多路搜索树</p><ol><li>定义任意非叶子结点最多只有M个儿子，且M&gt;2。</li><li>根节点的儿子数为[2,M]</li><li>除根节点以外的非叶子结点儿子数为[M/2,M]</li><li>每个节点存放至少M/2-1（向上取整）和至多M-1个关键字；至少(2个关键字)</li><li>非叶子结点的关键字:[k1]，[k2]，…k[M-1]；且k[i]&lt;k[i+1]</li><li>非叶子结点的关键字：k[1]，p[2],…,P[M]；其中p[1]指向关键字小于k[1]的子树，P[M]指向关键字大于k[M-1]的子树，其它P[i]指向关键字属于(K[i-1], K[i])的子树；</li><li>所有叶子结点位于同一层；如（M=3）</li></ol></blockquote><p><img src="/1.tencent/images/image-20221228222343407.png" alt="image-20221228222343407"></p><blockquote><p>B-树的搜索从根节点开始，对节点内的关键字（有序）序列进行二分查找，如果命中则结束，否则进入查询关键字所属范围的儿子节点；重复直到所对应的儿子指针为空，或已经是叶子结点。</p><p>B-树的特性：</p><ol><li>关键字集合分布在整颗树中</li><li>任何一个关键字出现且只出现在一个节点中</li><li>搜索有可能在非叶子结点结束</li><li>其搜索性能等价于在关键字全集内做一次二分查找</li><li>自动层次控制</li></ol><p>由于限制了除根节点以外的非叶子结点，至少含有M/2个儿子，确保了节点的至少利用率，底层搜索性能为Olong2N。B-树的性能总是等价于二分查找，也就没有B树平衡的问题。由于M/2的限制，在插入节点时，如果节点已满，需要将节点分裂为两个各占M/2的节点，删除节点时，需将两个不足M/2的兄弟节点合并。</p></blockquote><blockquote><p>B+树是B-树的变体，也是一种多路搜索树；</p><ol><li>其定义基本与B-树相同</li><li>非叶子结点的子树指针与关键字个数相同</li><li>非叶子结点的子树指针P[i]，指向关键字属于[K[i],K[i+1]]的子树，B-树是开区间</li><li>为所有叶子结点增加一个链指针</li><li>所有关键字都在叶子结点出现。</li></ol></blockquote><p><img src="/1.tencent/images/image-20221228223511343.png" alt="image-20221228223511343"></p><blockquote><p>B+树搜索也与B-树基本相同，区别是B+树只有达到叶子结点才命中（B-树可以在非叶子结点命中），其性能也等价于在关键字全集做一次二分查找；</p><p>B+树特性：</p><ol><li>所有关键字都出现在叶子结点的链表中（稠密索引），且链表中的关键字恰好是有序的。</li><li>不可能在非叶子结点命中</li><li>非叶子结点相当于叶子结点的索引（稀疏索引），叶子结点相当于存储（关键字）数据的数据层</li><li>更适合文件索引系统</li></ol></blockquote><blockquote><p>B*树</p><p>是B+树的变体，在B+树的非根与非叶子结点再增加指向兄弟的指针。</p></blockquote><p><img src="/1.tencent/images/image-20221228223949808.png" alt="image-20221228223949808"></p><p>B*树定义了非叶子结点关键字个数至少为(2/3)*M，即块的最低使用率为2/3（代替B+树的1/2）；</p><p>​    <strong>B+树的分裂：</strong></p><p>　　当一个结点满时，分配一个新的结点，并将原结点中1/2的数据复制到新结点，最后在父结点中增加新结点的指针；</p><p>　　B+树的分裂只影响原结点和父结点，而不会影响兄弟结点，所以它不需要指向兄弟的指针；</p><p> <strong>B*树的分裂</strong>：</p><p>　　当一个结点满时，如果它的下一个兄弟结点未满，那么将一部分数据移到兄弟结点中，再在原结点插入关键字，最后修改父结点中兄弟结点的关键字（因为兄弟结点的关键字范围改变了）；</p><p>　　如果兄弟也满了，则在原结点与兄弟结点之间增加新结点，并各复制1/3的数据到新结点，最后在父结点增加新结点的指针；</p><p>所以，B*树分配新结点的概率比B+树要低，空间使用率更高；</p><p><strong>小结</strong></p><p> <strong>B树：</strong>二叉树，每个结点只存储一个关键字，等于则命中，小于走左结点，大于走右结点；</p><p> <strong>B-树：</strong>多路搜索树，每个结点存储M/2到M个关键字，非叶子结点存储指向关键字范围的子结点；</p><p>　　　　　　所有关键字在整颗树中出现，且只出现一次，非叶子结点可以命中；</p><p>  <strong>B+树：</strong>在B-树基础上，为叶子结点增加链表指针，所有关键字都在叶子结点中出现，非叶子结点作为叶子结点的索引；B+树总是到叶子结点才命中；</p><p> <strong>B*树：</strong>在B+树基础上，为非叶子结点也增加链表指针，将结点的最低利用率从1/2提高到2/3；</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>升哲科技</title>
      <link href="/2022/05/19/treasurebox/zong-jie/2.sheng-zhe-ke-ji/"/>
      <url>/2022/05/19/treasurebox/zong-jie/2.sheng-zhe-ke-ji/</url>
      
        <content type="html"><![CDATA[<p>1、python多进程、多线程、协程，gil，100个请求怎么用50个线程跑</p><blockquote><p>进程：程序的一次执行过程被成为进程，是CPU调度的最小单位</p><p>线程：进程由若干个线程组成，且最少有一个线程，</p><p>协程：微线程，切换受代码控制</p></blockquote><p>2、tornado跟django的对比，tornado为什么这么快</p><blockquote><p>tornado是协程，django是线程</p></blockquote><p>3、设计模式，知道的设计模式有哪些，怎么使用？</p><blockquote><p>单例</p><p>工厂</p><p>MTV</p><p>修饰器模式</p></blockquote><p>4、单例模式怎么用，使用场景？</p><blockquote><p>控制一个类只会产生一个对象，通常用于数据库连接</p></blockquote><p>5、数据库连接池的概念</p><blockquote><p>在</p></blockquote><p>6、进程池</p><blockquote><p>多进程共享某个消息队列，从队列中消费消息处理</p></blockquote><p>7、除了mysql，mongo，redis三种数据库还用过哪些，优缺点是什么</p><blockquote><p>sqlite，轻量级，并发支持很弱</p></blockquote><p>8、nginx负载均衡</p><blockquote><p>怎么实现？</p></blockquote><p>9、mysql使用在项目中怎么使用的？mysql索引怎么设计的，数据量大怎么分库分表，数据最多的多少</p><blockquote><p>B+树，联合索引，自增为主键索引，char和varchar的区别，</p><p>按照日期分库分表，</p><p>或者地域，用户ID之类的信息</p></blockquote><p>10、根据日期查询的时候怎么查，比如查5个月，数据在5张表中？</p><blockquote><p>通过中间件对数据查询请求进行切分，比如数据落库时根据time字段识别该数据应该落在哪里，查询时根据传入的time区间对查询做拆分。</p></blockquote><p>11、redis在项目中怎么用的，底层实现原理</p><blockquote><p>缓存。</p><p>str，list，hash，set，zset，布隆过滤器，队列等。各数据结构的底层实现？</p></blockquote><p>12、redis的持久化</p><blockquote><p>RDB：快照</p><p>AOF：命令追加</p></blockquote><p>13、redis怎么监听挂了没</p><blockquote><p>哨兵，ElasticSearch采用类似的机制</p></blockquote><p>14、mongo在项目中的使用</p><blockquote><p>优势：非关系型数据库，数据按照文档行存储，存储不确定数据结构的场景</p></blockquote><p>15、rabitmq使用场景，为什么选择，有没有更好的</p><blockquote><p>削峰填谷，单播广播</p><p>kafka等</p></blockquote><p>16、redis哨兵</p><blockquote></blockquote><p>��广播</p><blockquote><p>kafka等</p></blockquote><p>16、redis哨兵</p><blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构初识</title>
      <link href="/2022/05/19/treasurebox/shu-ju-jie-gou/1.shu-ju-jie-gou-chu-shi/"/>
      <url>/2022/05/19/treasurebox/shu-ju-jie-gou/1.shu-ju-jie-gou-chu-shi/</url>
      
        <content type="html"><![CDATA[<p>数据结构分为逻辑结构和物理结构</p><p>逻辑结构：指数据对象中数据元素之间的相互关系，也是最需要关注和讨论的问题。</p><p>物理结构：指数据的逻辑结构在计算机中的存储形式。</p><h3 id="一、逻辑结构"><a href="#一、逻辑结构" class="headerlink" title="一、逻辑结构"></a>一、逻辑结构</h3><p>1、集合结构：集合结构中的数据元素除了同属于一个集合外，它们之间没有其他不三不四的关系。</p><p>2、线性结构：元素之间一对一的关系</p><p>3、树形结构：数据元素之间存在一种一对多的层次关系，类似树。</p><p>4、图形结构：图形结构的元素是多对多的关系。</p><h3 id="二、物理结构"><a href="#二、物理结构" class="headerlink" title="二、物理结构"></a>二、物理结构</h3><p>1、存储器主要是针对计算机中的内存而言。</p><p>2、数据元素的存储形式有两种：顺序存储和链式存储，</p><p>顺序存储结构：把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的。</p><p>链式存储结构：把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的。通过指针存放数据元素的地址，获取元素的顺序。</p><h3 id="三、什么是算法"><a href="#三、什么是算法" class="headerlink" title="三、什么是算法"></a>三、什么是算法</h3><p>算法是解决特定问题求解步骤的描述，在计算机中表现为指令的优先序列，并且每条指令表示一个或多个操作。</p><p>算法特征：输入，输出，有穷性，确定性，可行性。</p><h3 id="四、线性表"><a href="#四、线性表" class="headerlink" title="四、线性表"></a>四、线性表</h3><p>线性表(List)：由零个或多个数据元素组成的有限序列。</p><p>首先它是一个序列，也就是元素之间有先来后到。</p><p>若元素存在多个，则第一个元素无前驱，而最后一个元素无后继，其他元素都有且只有一个前驱和后继。</p><p>线性表强调是有限的，无论计算机发展到多强大，它处理的元素都是有限的。</p><p>数据结构包含：</p><p>数组、链表、栈、队列、树��列、树</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1、TCPIP网络模型</title>
      <link href="/2022/05/19/treasurebox/wang-luo-xie-yi/1-tcpip-wang-luo-mo-xing/"/>
      <url>/2022/05/19/treasurebox/wang-luo-xie-yi/1-tcpip-wang-luo-mo-xing/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="一、TCP-x2F-IP网络模型"><a href="#一、TCP-x2F-IP网络模型" class="headerlink" title="一、TCP/IP网络模型"></a>一、TCP/IP网络模型</h3><p>计算机与网络设备要相互通信，双方就必须基于相同的方法。比如，如何探测到通信目标、由哪一边先发起通信，使用哪种语言进行通信、怎样结束通信等规则都事先确定。</p><p>TCP/IP是互联网相关的是互联网相关的各类协议簇的总称，比如TCP，UDP，IP，FTP，HTTP，ICMP，SMTP等属于TCP/IP族内的协议。</p><p>TCP/IP模型是互联网的基础，它是一些列网络协议的总称，这些协议可以分为四层。</p><ul><li><strong>链路层</strong>：负责封装和解封装IP报文，发送和接收ARP/RARP报文等。</li><li><strong>网络层</strong>：负责路由以及把分组报文发送给目标网络或主机</li><li><strong>传输层</strong>：负责对报文进行分组和重组，并以TCP或UDP协议格式封装报文。</li><li><strong>应用层</strong>：负责向用户提供应用程序，比如HTTP，FTP，Telnet，DNS，SMTP等。</li></ul><table><thead><tr><th>OSI七层模型</th><th>TCP/IP概念层模型</th><th>功能</th><th>TCP/IP协议簇</th></tr></thead><tbody><tr><td>应用层</td><td></td><td>文件传输，电子邮件，文件服务，虚拟终端</td><td>TFTP，HTTP，SNMP，FTP，SMTP，DNS，Telnet</td></tr><tr><td>表示层</td><td></td><td>数据格式化，代码转换，数据加密</td><td>没有协议</td></tr><tr><td>会话层</td><td>应用层</td><td>解除或建立与别的接点的联系</td><td>没有协议</td></tr><tr><td>传输层</td><td>传输层</td><td>提供对端的接口</td><td>TCP，UDP</td></tr><tr><td>网络层</td><td>网络层</td><td>为数据包选择路由</td><td>IP，TCMP，RIP，OSPF，ICMP</td></tr><tr><td>数据链路层</td><td></td><td>传输有地址的帧以及错误检测功能</td><td>SLIP，CSLIP，PPP，ARP，MTV</td></tr><tr><td>物理层</td><td>链路层</td><td>以二进制数据形式在物理媒体上传输数据</td><td>ISO2110，IEEE802，IEEE802.2</td></tr></tbody></table><h3 id="二、UDP"><a href="#二、UDP" class="headerlink" title="二、UDP"></a>二、UDP</h3><p>UDP协议全称是<strong>用户数据报协议</strong>，在网络中它与TCP协议一样用于处理数据包，是一种无连接的协议。在OIS，在第四层——传输层，处于IP协议的上一层。UDP有不提供数据包分组，组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的。</p><h4 id="1、面向无连接"><a href="#1、面向无连接" class="headerlink" title="1、面向无连接"></a>1、面向无连接</h4><p>首先UDP是不需要和TP一样在发送数据前进行三次握手建立连接的，想发数据就可以开始发送了。并且也只是数据报文的搬运工，不会对数据报文进行任何拆分和拼接操作。</p><p>具体就是：</p><ul><li>在发送端，应用层将数据传递给传输层的UDP协议，UDP只会给数据增加一个UDP头标识下是UDP协议，然后就传输给网络层了。</li><li>在接收端，网络层将数据传递给传输层，UDP只去除IP报文头就传递给应用层，不回拼接操作。</li></ul><h4 id="2、有单播、多播、广播功能"><a href="#2、有单播、多播、广播功能" class="headerlink" title="2、有单播、多播、广播功能"></a>2、有单播、多播、广播功能</h4><p>UDP不止支持一对一的传输方式，同样支持一对多，多对多，多对一的方式，也就是说UDP提供了单播，多播，广播的功能。</p><h4 id="3、UDP是面向报文的"><a href="#3、UDP是面向报文的" class="headerlink" title="3、UDP是面向报文的"></a>3、UDP是面向报文的</h4><p>发送方的UDP对应用程序交下来的报文，在添加首部后就向下交给IP层。UDP对应用层交下来的报文，既不合并也不拆分，而是保留这些报文的边界。因此。应用程序必须选择合适大小的报文。</p><h4 id="4、不可靠性"><a href="#4、不可靠性" class="headerlink" title="4、不可靠性"></a>4、不可靠性</h4><p>首先不可靠性体现在无连接上，通信都不需要建立连接。想发就发。这样的情况不可靠。</p><p>并且收到什么数据就传递什么数据，并且不会备份数据，发送数据也不回关心对方是否已经正确接收数据。</p><p>网络环境时好时坏，但是UDP没有拥塞控制，一直会以恒定的速度发送数据，即使网络条件不好，也不回对发送频率调整，这样的弊端就是在网络条件不好的情况下可能会导致丢包，但是优点也很明显，在某些实时性要求高的场景(比如电话会议)就需要使用UDP而不是TCP。</p><h4 id="5、头部开销小，传输数据报文时很高效。"><a href="#5、头部开销小，传输数据报文时很高效。" class="headerlink" title="5、头部开销小，传输数据报文时很高效。"></a>5、头部开销小，传输数据报文时很高效。</h4><ul><li><p>两个十六位的端口号，分别为源端口（可选字段）和目标端口</p></li><li><p>整个数据报文的长度</p></li><li><p>整个数据报文的校验和(IPv4可选字段)，该字段用于头部信息和数据中的错误。</p><p>  因此UDP的头部开销少，只有八字节，相比TCP的至少二十字节要少得多，在传输数据报文时是很高效的。</p></li></ul><h3 id="三、TCP"><a href="#三、TCP" class="headerlink" title="三、TCP"></a>三、TCP</h3><p>当一台计算机想要跟另一台计算机通讯时，两台计算机之间的通信需要畅通且可靠，这样才能保证正确收发数据。例如：查看网页或电子邮件时，希望完整且顺序查看网页，下载文件时，希望获得完整的文件，而不仅仅是文件的一部分，这时就需要用到TCP。</p><p>TCP全称是<strong>传输控制协议</strong>，是一种面向<strong>连接的、可靠的、基于字节流</strong>的传输层通信协议，由IETF的RFC793定义，TCP是面向连接的、可靠的流协议。流就是指不间断的数据结构。</p><h4 id="1、连接过程"><a href="#1、连接过程" class="headerlink" title="1、连接过程"></a>1、连接过程</h4><h5 id="第一次握手："><a href="#第一次握手：" class="headerlink" title="第一次握手："></a>第一次握手：</h5><p>客户端向服务端发送连接请求报文段，该报文段中包含自身的数据通讯初识序号。请求发送后，客户端便进入SYN-SENT状态。</p><h5 id="第二次握手："><a href="#第二次握手：" class="headerlink" title="第二次握手："></a>第二次握手：</h5><p>服务端收到连接请求报文段后，如果同意连接，则会发送一个应答，该应答中也会包含自身的数据通讯初始序号，发送完成后便进入SYN—RECEIVED状态。</p><h5 id="第三次握手："><a href="#第三次握手：" class="headerlink" title="第三次握手："></a>第三次握手：</h5><p>当客户端收到连接同意后，还要向服务端发送一个确认报文。客户端发完这个报文段之后便进入ESTABLISHED状态，服务端收到这个应答后也进入ESTABLISHED状态，此时连接建立成功。</p><p>为什么TCP建立连接需要三次握手，而不是两次呢？这是因为为了防止出现时效的链接请求报文段被服务端接收的情况，从而产生错误。</p><h4 id="2、TCP断开连接"><a href="#2、TCP断开连接" class="headerlink" title="2、TCP断开连接"></a>2、TCP断开连接</h4><p>TCP是全双工的，在断开连接时两端都需要发送FIN和ACK。</p><h5 id="第一次挥手："><a href="#第一次挥手：" class="headerlink" title="第一次挥手："></a>第一次挥手：</h5><p>若客户端A认为数据发送完成，则它需要向服务端B发送连接释放请求。</p><h5 id="第二次挥手："><a href="#第二次挥手：" class="headerlink" title="第二次挥手："></a>第二次挥手：</h5><p>B收到连接释放请求后，会告诉应用层钥匙房TCP连接，然后会发送ACK包，并进入 CLOSE_WAIT 状态，此时表明 A 到 B 的连接已经释放，不再接收 A 发的数据了。但是因为 TCP 连接是双向的，所以 B 仍旧可以发送数据给 A。</p><h5 id="第三次挥手："><a href="#第三次挥手：" class="headerlink" title="第三次挥手："></a>第三次挥手：</h5><p>B如果此时有未发送完成的数据会继续发送，发送完毕后会向A发送连接释放请求，然后B便进入LAST-ACK状态。</p><h5 id="第四次挥手："><a href="#第四次挥手：" class="headerlink" title="第四次挥手："></a>第四次挥手：</h5><p>A收到释放请求后，向B发送确认应答，此时A进入TIME—WAIT状态。该状态会持续2MSL（最大段生存期，只报文段在网络中生存的时间，超时会被抛弃）时间，若该时间段没有B的重发请求的话，就会进入CLOSED状态。当B收到确认应答后，也便进入CLOSED状态。</p><h4 id="3、TCP协议的特点"><a href="#3、TCP协议的特点" class="headerlink" title="3、TCP协议的特点"></a>3、TCP协议的特点</h4><ul><li><p><strong>面向连接</strong></p><p>  面向连接，是指发送数据之前必须在两端建立连接。建立连接的方式是三次握手，这样可以建立可靠的链接。建立连接是为数据的可靠传输做基础。</p></li><li><p><strong>仅支持单播传输</strong></p><p>  每条TCP传输连接只能有两个端点，只能进行点对点的数据传输，不支持多播和广播传输方式。</p></li><li><p><strong>面向字节流</strong></p><p>  TCP不像UDP一样一个个报文独立地传输，而是在不保留报文边界的情况下以字节流方式进行传输。</p></li><li><p><strong>可靠传输</strong></p><p>  对于可靠传输，判断丢包，误码靠的是TCP的段编号以及确认号。TCP为了保证报文传输的可靠，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已经成功收到的字节发回一个想要的确认(ACK)；如果发送端实体在合理的往返时延(RTT)内未收到确认，那么对应的数据(假设丢失了)将会被重传。</p></li><li><p><strong>提供拥塞控制</strong></p><p>  当网络出现拥塞时，TCP能够减少向网络注入数据的速率和数量，缓解拥塞。</p></li><li><p><strong>TCP提供全双工通信</strong></p><p>  TCP允许通信双方的应用程序在任何时候都能发送数据，因为TCP链接的两端都设有缓存，用来临时存放双向通信的数据。当然，TCP可以发送一个数据段，也可以缓存一段时间以便一次发送更多的数据段（最大的数据段大小取决于MSS）。</p></li></ul><h3 id="四、TCP和UDP对比"><a href="#四、TCP和UDP对比" class="headerlink" title="四、TCP和UDP对比"></a>四、TCP和UDP对比</h3><h4 id="1、对比"><a href="#1、对比" class="headerlink" title="1、对比"></a>1、对比</h4><table><thead><tr><th></th><th>UDP</th><th>TCP</th></tr></thead><tbody><tr><td>是否连接</td><td>无连接</td><td>面向连接</td></tr><tr><td>是否可靠</td><td>不可靠传输，不使用流量控制和拥塞控制</td><td>可靠传输，使用流量控制和拥塞控制</td></tr><tr><td>连接对象个数</td><td>支持一对一，一对多，多对一和多对多交互通信</td><td>只能一对一通信</td></tr><tr><td>传输方式</td><td>面向报文</td><td>面向字节流</td></tr><tr><td>首部开销</td><td>首部开销小</td><td>首部最小20字节，最大60字节</td></tr><tr><td>适用场景</td><td>适用于实时应用(IP电话、视频会议、直播等)</td><td>适用于要求可靠传输的应用，比如文件传输等。</td></tr></tbody></table><h4 id="2、总结"><a href="#2、总结" class="headerlink" title="2、总结"></a>2、总结</h4><ul><li>TCP虽然向上层提供面向连接的可靠服务，UDP向上层提供无连接不可靠服务。</li><li>虽然UDP并没有TCP传输来的准确，但是也能在很多实时性要求高的地方有所作为。</li><li>对数据准去性要求高，速度可以相对慢的，可以选用TCP。</li></ul><p>��求高的地方有所作为。</p><ul><li>对数据准去性要求高，速度可以相对慢的，可以选用TCP。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>redis常见面试题</title>
      <link href="/2022/05/19/treasurebox/shu-ju-ku/redis/1.redis-chang-jian-mian-shi-ti/"/>
      <url>/2022/05/19/treasurebox/shu-ju-ku/redis/1.redis-chang-jian-mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="一、Redis常见面试题"><a href="#一、Redis常见面试题" class="headerlink" title="一、Redis常见面试题"></a>一、Redis常见面试题</h3><ol><li><h5 id="redis基本数据类型"><a href="#redis基本数据类型" class="headerlink" title="redis基本数据类型"></a>redis基本数据类型</h5><p> 有String，Hash，List，Set，Sort，SortedSet五种基本的数据结构，除此以外，还有HyperLogLog，Geo，Pub/Sub三种，还有Redis Module像BloomFilter，RedisSearch，Redis-ML。</p></li><li><h5 id="大量key过期时间设置同一个时间过期，一般需要注意什么？"><a href="#大量key过期时间设置同一个时间过期，一般需要注意什么？" class="headerlink" title="大量key过期时间设置同一个时间过期，一般需要注意什么？"></a>大量key过期时间设置同一个时间过期，一般需要注意什么？</h5><p> 如果大量的key过期时间设置的过于集中，到过期的时间点时，redis可能会出现短暂的卡顿现象。严重的话会出现缓存雪崩，一般需要在过期时间上加一个随机值，使得过期时间分散一些。<br> 加上首页经常会使用定时任务刷新缓存，可能大量的数据失效时间都十分集中，如果失效时间一样，又刚好卡在失效的时间点大量用户涌入，就有可能造成缓存雪崩。</p></li><li><h5 id="使用过redis分布式锁吗？是怎么回事？"><a href="#使用过redis分布式锁吗？是怎么回事？" class="headerlink" title="使用过redis分布式锁吗？是怎么回事？"></a>使用过redis分布式锁吗？是怎么回事？</h5><p>  先拿setnx来争抢锁，抢到之后，再用expire给锁加一个过期时间防止锁忘记了释放。</p></li><li><h5 id="如果在setnx之后执行expire之前进程意外crash或者要重启维护了，那会怎么样？"><a href="#如果在setnx之后执行expire之前进程意外crash或者要重启维护了，那会怎么样？" class="headerlink" title="如果在setnx之后执行expire之前进程意外crash或者要重启维护了，那会怎么样？"></a>如果在setnx之后执行expire之前进程意外crash或者要重启维护了，那会怎么样？</h5><p> 使用set指令可以把setnx和expire合成一条指令使用。</p></li><li><h5 id="假入redis中有1亿个key，其中有10W个key是以某个固定的已知的前缀开头的，如何将他们全部找出来？"><a href="#假入redis中有1亿个key，其中有10W个key是以某个固定的已知的前缀开头的，如何将他们全部找出来？" class="headerlink" title="假入redis中有1亿个key，其中有10W个key是以某个固定的已知的前缀开头的，如何将他们全部找出来？"></a>假入redis中有1亿个key，其中有10W个key是以某个固定的已知的前缀开头的，如何将他们全部找出来？</h5><p> 使用keys指令可以扫出指定模式的key列表。</p></li><li><h5 id="如果redis正在给线上的业务提供服务，那使用keys指令会有什么问题？"><a href="#如果redis正在给线上的业务提供服务，那使用keys指令会有什么问题？" class="headerlink" title="如果redis正在给线上的业务提供服务，那使用keys指令会有什么问题？"></a>如果redis正在给线上的业务提供服务，那使用keys指令会有什么问题？</h5><p>  redis是单线程，keys指令会导致线程阻塞一段时间，线上服务会停顿，指导指令执行完毕，服务才能恢复。这个时候可以试用scan指令，scan指令可以无阻塞的提取出指定模式的key列表，但是会有一定的重复概率，在客户端做一次去重就可以了，但是整体所花费的时间会比直接用keys指令长。<br>  不过，增量式迭代命令也不是没有缺点的：试用SMEMBERS命令可以返回集合键当前包含的所有元素，但是对于scan这类增量式迭代命令来说，因为在对键进行增量式迭代的过程中，键可能会被修改，所以增量式迭代命令只能对被返回的元素提供有限的保证。</p></li><li><h5 id="使用过redis做异步队列吗？是怎么使用的？"><a href="#使用过redis做异步队列吗？是怎么使用的？" class="headerlink" title="使用过redis做异步队列吗？是怎么使用的？"></a>使用过redis做异步队列吗？是怎么使用的？</h5><p> 一般使用list结构做为队列，rpush生产消息，lpop消费消息，当lpop没有消息的时候，要适当sleep一会再重试。</p></li><li><h5 id="如果不使用sleep呢？"><a href="#如果不使用sleep呢？" class="headerlink" title="如果不使用sleep呢？"></a>如果不使用sleep呢？</h5><p> list有个指令叫blpop，在没有消息的时候，它会阻塞住直到消息到来。</p></li><li><h5 id="能不能一次消费多次？"><a href="#能不能一次消费多次？" class="headerlink" title="能不能一次消费多次？"></a>能不能一次消费多次？</h5><p> 使用pub/sub主题订阅者模式，可以实现1:N的消息队列。</p></li><li><h5 id="pub-x2F-sub有什么缺点？"><a href="#pub-x2F-sub有什么缺点？" class="headerlink" title="pub/sub有什么缺点？"></a>pub/sub有什么缺点？</h5><p>在消费者下线的情况下，生产的消息会丢失，得使用专业的消息队列如RocketMQ等。</p></li><li><h5 id="Redis如何实现延时队列？"><a href="#Redis如何实现延时队列？" class="headerlink" title="Redis如何实现延时队列？"></a>Redis如何实现延时队列？</h5><p>  使用sorted set，用时间戳作为score，消息内容作为key调用zadd来生产消息，消费者用zrangebyscore指令获取N秒之前的数据轮询进行处理。</p></li><li><h5 id="Redis是怎么持久化的？服务主从数据怎么交互的？"><a href="#Redis是怎么持久化的？服务主从数据怎么交互的？" class="headerlink" title="Redis是怎么持久化的？服务主从数据怎么交互的？"></a>Redis是怎么持久化的？服务主从数据怎么交互的？</h5><p>  RDB做镜像全量持久化，AOF做增量持久化，因为RDB会耗费较长时间，不够实时，在停机的时候会导致大量丢失数据，所以需要AOF来配合使用。在redis实例重启时，会使用RDB持久化文件重新构建内存，再使用AOF重放近期的操作指令来实现完整恢复重启之前的状态。</p></li><li><h5 id="如果突然机器掉电会怎样？"><a href="#如果突然机器掉电会怎样？" class="headerlink" title="如果突然机器掉电会怎样？"></a>如果突然机器掉电会怎样？</h5><p> 取决于AOF日志sync属性的配置，如果不要求性能，在每条写指令时都sync一下磁盘，就不会丢失数据。但是在高性能要求下每次都sync是不现实的，一般都使用定时sync，比如1s1次，这个时候最多就会丢失1s的数据。</p></li><li><h5 id="RDB的原理是什么？"><a href="#RDB的原理是什么？" class="headerlink" title="RDB的原理是什么？"></a>RDB的原理是什么？</h5><p>  fork和cow，fork指redis通过创建子进程来进行RDB操作，cow指copy onwrite，子进程创建后，父子进程共享数据段，父进程继续提供读写服务，写脏的页面数据会逐渐和子进程分离开来。</p></li><li><h5 id="Pipeline有什么好处，为什么要用pipeline。"><a href="#Pipeline有什么好处，为什么要用pipeline。" class="headerlink" title="Pipeline有什么好处，为什么要用pipeline。"></a>Pipeline有什么好处，为什么要用pipeline。</h5><p>可以将多次IO往返的时间缩短为一次，前提是pipeline执行的指令之间没有因果相关性。使用redis-benchmark进行压测的时候可以发现影响redis的QPS峰值的一个重要因素是pipeline批次指令的数目。</p></li><li><h5 id="Redis的同步机制有了解么？"><a href="#Redis的同步机制有了解么？" class="headerlink" title="Redis的同步机制有了解么？"></a>Redis的同步机制有了解么？</h5><p>  Redis可以使用主从同步、从从同步。第一次同步时，主节点做一次bgsave，并同时将后续修改操作记录到内存buffer，待完成后将RDB文件全量同步到复制节点，复制节点接受完成后将RDB镜像加载到内存。加载完成后。在通过主节点将期间修改的操作记录同步到负直节点进行重放就完成了同步过程。后续的增量数据通过AOF日志同步即可。有点类似数据库的binlog。</p></li><li><h5 id="是否使用过redis集群，集群的高可用怎么保证，集群的原理是什么？"><a href="#是否使用过redis集群，集群的高可用怎么保证，集群的原理是什么？" class="headerlink" title="是否使用过redis集群，集群的高可用怎么保证，集群的原理是什么？"></a>是否使用过redis集群，集群的高可用怎么保证，集群的原理是什么？</h5><p> Redis Sentinal 着眼于高可用，在master宕机时会自动将salve提升为master，继续提供服务。<br> Redis Cluster着眼于扩展性，在单个redis内存不足时，使用Cluster进行分片存储。使用Cluster进行分片存储。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1基本命令</title>
      <link href="/2022/05/19/treasurebox/shu-ju-ku/redis/2.1-ji-ben-ming-ling/"/>
      <url>/2022/05/19/treasurebox/shu-ju-ku/redis/2.1-ji-ben-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="一、redis基础知识"><a href="#一、redis基础知识" class="headerlink" title="一、redis基础知识"></a>一、redis基础知识</h2><h4 id="客户端和服务器命令："><a href="#客户端和服务器命令：" class="headerlink" title="客户端和服务器命令："></a>客户端和服务器命令：</h4><p>​默认端口号6379</p><h5 id="服务器命令："><a href="#服务器命令：" class="headerlink" title="服务器命令："></a>服务器命令：</h5><p>​redis-server redis.windows.conf</p><h5 id="客户端命令："><a href="#客户端命令：" class="headerlink" title="客户端命令："></a>客户端命令：</h5><p>​redis-cli</p><p>一个redis.windows.conf配置文件，就是一个redis服务器。需要启动多个服务器时，只需修改配置文件的名称，再使用redis-server命令即可。</p><img src="image/1576045069390.png"><img src="image/1576045229007.png"><img src="image/1576045281626.png"><h4 id="redis和memcache相比的独特之处"><a href="#redis和memcache相比的独特之处" class="headerlink" title="redis和memcache相比的独特之处"></a>redis和memcache相比的独特之处</h4><ol><li>redis可以用来存储(storge)，有持久化的功能（是可以存储到硬盘中），而memcached用来做缓存（cache）。</li><li>redis存储的数据有结构；对于memcache来说，存储的数据只有一种数据类型——字符串，而redis则可以存储字符串，链表，哈希结构，集合，有序集合。，</li></ol><h4 id="redis目录下的重要文件的意义"><a href="#redis目录下的重要文件的意义" class="headerlink" title="redis目录下的重要文件的意义"></a>redis目录下的重要文件的意义</h4><ul><li><strong>redis-benchmark</strong>：性能测试工具</li><li><strong>redis-check-dump</strong>：日志文件检测工具（比如断电造成日志损坏，可以检测并修复。）</li><li><strong>redis-check-dump</strong>：快照文件检测工具，效果同上。</li><li><strong>redis-cli</strong>：客户端。</li><li><strong>redis-server</strong>：服务端</li><li><strong>redis.windows.conf</strong>：配置文件</li></ul><h2 id="二：基础命令"><a href="#二：基础命令" class="headerlink" title="二：基础命令"></a>二：基础命令</h2><ul><li>**keys ***：返回所有的key</li><li><strong>keys list</strong>：返回名以list开头的所有key</li><li><strong>exists list1</strong>：判断名为list1的key是否存在，存在返回1，不存在返回0</li><li><strong>del list1</strong>：删除一个键list1</li><li><strong>exprice list1 10</strong>：设置键名为list1的过期时间为10秒后</li><li><strong>ttl list1</strong>：查看键名为list1的过期时间，若为-1，表示以过期或永不过期</li><li><strong>move age 1</strong>：将键名为age的转移到1数据库中</li><li><strong>select 1</strong>：表示进入1数据库，默认在0中，一共有16个，从0到15</li><li><strong>persist age</strong>：移除age的过期时间。</li><li><strong>flushdb</strong>：删除所有的数据，清除当前所在库的所有数据。</li><li><strong>flushall</strong>：清空所有数据。</li></ul><h3 id="（一）-字符串类型"><a href="#（一）-字符串类型" class="headerlink" title="（一）.字符串类型"></a>（一）.字符串类型</h3><table><thead><tr><th align="center">存命令</th><th align="center">取命令</th></tr></thead><tbody><tr><td align="center">mset</td><td align="center">mget</td></tr><tr><td align="center">setnx</td><td align="center">msetnx</td></tr><tr><td align="center">incr</td><td align="center">decr</td></tr><tr><td align="center">incrby</td><td align="center">decrby</td></tr><tr><td align="center">setrange</td><td align="center">getrange</td></tr><tr><td align="center">set</td><td align="center">get</td></tr></tbody></table><ol><li><p><strong>set方法：设置key对应的值为string类型的value，如果该key已经存在，则覆盖，所以在redis中key唯一。</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set name lijie</span><br><span class="line">OK</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>get：根据key获取value的值</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">"lijie"</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>setnx：设置一个不存在的字符串，返回0表示设置失败，已存在。返回1表示设置新值成功，nx是not exit的意思。</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setnx name zs</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setnx age 20</span><br><span class="line">(integer) 1</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>setex：设置字符串，同时设置有效期</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setex lvjia 10 'jia'</span><br><span class="line">OK</span><br><span class="line">（立即查询）</span><br><span class="line">127.0.0.1:6379&gt; get lvjia</span><br><span class="line">"jia"</span><br><span class="line">（10秒后启动）</span><br><span class="line">127.0.0.1:6379&gt; get lvjia</span><br><span class="line">(nil)</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>setrange：替换字符串，参数为开始位置下标(从0开始)，替换成什么</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set email lvjia@sina.com</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get email</span><br><span class="line">"lvjia@sina.com"</span><br><span class="line">127.0.0.1:6379&gt; setrange email 6 163.com</span><br><span class="line">(integer) 14</span><br><span class="line">127.0.0.1:6379&gt; get email</span><br><span class="line">"lvjia@163.comm"</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>msetnx：一次设置多个不存在的key-value，返回1表示全部设置成功，返回0表示全部失败。</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; msetnx name3 kk name4 mm name2 lvjia</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; get name3</span><br><span class="line">"kk"</span><br><span class="line">127.0.0.1:6379&gt; get name2</span><br><span class="line">"lvjia"</span><br><span class="line">127.0.0.1:6379&gt; get name4</span><br><span class="line">"mm"</span><br><span class="line">127.0.0.1:6379&gt; msetnx name3 cc name4 dd</span><br><span class="line">(integer) 0</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>getset：获取原值，并设置新值</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; getset name4 UU</span><br><span class="line">"mm"</span><br><span class="line">127.0.0.1:6379&gt; get name4</span><br><span class="line">"UU"</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>getrange：获取key对应value的子字符串</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; getrange email 0 4</span><br><span class="line">"lvjia"</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>mget：一次获取多个key对应的value值，不存在返回nil</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; mget name1 name2 name3 name4 name5 name6</span><br><span class="line">1) (nil)</span><br><span class="line">2) "lvjia"</span><br><span class="line">3) "kk"</span><br><span class="line">4) "UU"</span><br><span class="line">5) (nil)</span><br><span class="line">6) (nil)</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>incr：对key对应的value做加1操作，并返回新值</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line">"21"</span><br><span class="line">127.0.0.1:6379&gt; incr age</span><br><span class="line">(integer) 22</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>incrby：与incr类似，加指定值，key不存在的时候会设置key，并认为该key原来的value=0</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line">"22"</span><br><span class="line">127.0.0.1:6379&gt; incrby age 9</span><br><span class="line">(integer) 31</span><br><span class="line">127.0.0.1:6379&gt; get height</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; incrby height 10</span><br><span class="line">(integer) 10</span><br><span class="line">127.0.0.1:6379&gt; get height</span><br><span class="line">"10"</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>decr：对key对应的value做减1操作。</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get height</span><br><span class="line">"10"</span><br><span class="line">127.0.0.1:6379&gt; decr height</span><br><span class="line">(integer) 9</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>decrby:对key对应的value减去指定的值</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get height</span><br><span class="line">"9"</span><br><span class="line">127.0.0.1:6379&gt; decrby height 3</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; decrby height -3</span><br><span class="line">(integer) 9</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>append:对key对应的value字符串追加，返回新字符串的长度</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">"lijie"</span><br><span class="line">127.0.0.1:6379&gt; append name ML</span><br><span class="line">(integer) 7</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">"lijieML"</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>strlen:获取key对应value的长度</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">"lijie"</span><br><span class="line">127.0.0.1:6379&gt; append name ML</span><br><span class="line">(integer) 7</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">"lijieML"</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>del：删除指定key，可一下指定多个，会返回删除成功的条数</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">"lijieML"</span><br><span class="line">127.0.0.1:6379&gt; del age name</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; del name1</span><br><span class="line">(integer) </span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="（二）-hash类型"><a href="#（二）-hash类型" class="headerlink" title="（二）.hash类型"></a>（二）.hash类型</h3><p>Redis hash是一个string类型的filed和value的映射表。Hash特别适合存储对象。相比较于对象的每个字段存成单个string类型。将一个对象存储在hash类型中会占用更少的内存，并且可以更方便存取整个对象。</p><ol><li><p><strong>hset：设置hash field为指定值，如果key不存在，则先创建，key存在则替换，如果不存在时返回1，存在时返回0。</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hset user:001 name zs</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hset user:001 name lvjia</span><br><span class="line">(integer) 0</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>hget：获取指定field字段的值</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hget user:001 name</span><br><span class="line">"lvjia"</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>hsetnx：设置hash field为指定值，如果key不存在，则先创建，如果存在则返回0，表示设置失败。</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hsetnx user:001 name dachang</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; hsetnx user:001 age 20</span><br><span class="line">(integer) 1</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>hmset：同时设置hash的多个field</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hmset user:002 name lvjia age 20</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hget user:002 name</span><br><span class="line">"lvjia"</span><br><span class="line">127.0.0.1:6379&gt; hget user:002 age</span><br><span class="line">"20"</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>hmget：获取多个指定的hash field，必须指定获取的key的名称</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hmget user:002 name age</span><br><span class="line">1) "lvjia"</span><br><span class="line">2) "20"</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>hincrby：对hash field加上指定的值</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hget user:002 age</span><br><span class="line">"20"</span><br><span class="line">127.0.0.1:6379&gt; hincrby user:002 age 5</span><br><span class="line">(integer) 25</span><br><span class="line">127.0.0.1:6379&gt; hincrby user:002 age -4</span><br><span class="line">(integer) 21</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>hexists：测试指定的field是否存在，返回1表示存在，返回0表示不存在。</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hexists user:002 name</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hexists user:002 age</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hexists user:002 height</span><br><span class="line">(integer) 0</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>hdel：返回指定hash的field的数量，返回1表示删除成功，0表示删除失败</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hdel user:001 age</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hdel user:001 address</span><br><span class="line">(integer) 0</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>hkeys：返回hash的所有field</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hkeys user:001</span><br><span class="line">1) "name"</span><br><span class="line">127.0.0.1:6379&gt; hkeys user:002</span><br><span class="line">1) "name"</span><br><span class="line">2) "age"</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>hvals:返回hash的所有value</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hvals user:001</span><br><span class="line">1) "lvjia"</span><br><span class="line">127.0.0.1:6379&gt; hvals user:002</span><br><span class="line">1) "lvjia"</span><br><span class="line">2) "21"</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>hlen:返回hash的key的长度</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hlen user</span><br><span class="line">1) "lvjia"</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="（三）-list类型"><a href="#（三）-list类型" class="headerlink" title="（三）.list类型"></a>（三）.list类型</h3><p>list是一个链表结构，主要功能是push、pop，获取一个范围的所有值等等，操作中key理解为链表的名字。Redis的list类型其实就是一个每个子元素都是string类型的双向链表。我们可以通过push、pop这些操作链表的头部或者链表尾部添加元素，这样list既可以为栈，又可以作为队列。</p><ol><li><p><strong>lpush：在key对应list的头部添加字符串元素，返回list元素中的个数</strong></p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[1]&gt; lpush list1 "hello"</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[1]&gt; lpush list1 "word"</span><br><span class="line">(integer 2</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>lrange：获取list中的元素，后边跟两个参数分别代表起始位置和结束位置。</strong></p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[1]&gt; lrange list1 0 -1</span><br><span class="line">1) "word"</span><br><span class="line">2) "hello"</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>rpush：在key对应的list尾部添加元素</strong></p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[1]&gt; rpush list2 10</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[1]&gt; rpush list2 11</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379[1]&gt; rpush list2 12</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379[1]&gt; lrange list2 0 -1</span><br><span class="line">1) "10"</span><br><span class="line">2) "11"</span><br><span class="line">3) "12"</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>linsert：在key对应list的特定位置前或者后添加字符串</strong></p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[1]&gt; linsert list2 before 11 10.5</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379[1]&gt; lrange list2 0 -1</span><br><span class="line">1) "10"</span><br><span class="line">2) "10.5"</span><br><span class="line">3) "11"</span><br><span class="line">4) "12"</span><br><span class="line">127.0.0.1:6379[1]&gt; linsert list2 before 1 2</span><br><span class="line">(integer) -1</span><br><span class="line">127.0.0.1:6379[1]&gt; lrange list2 0 -1</span><br><span class="line">1) "10"</span><br><span class="line">2) "10.5"</span><br><span class="line">3) "11"</span><br><span class="line">4) "12"</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>lset：更改list中指定下标的元素，返回ok表示设置成功</strong></p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[1]&gt; lrange list2 0 -1</span><br><span class="line">1) "10"</span><br><span class="line">2) "10.5"</span><br><span class="line">3) "11"</span><br><span class="line">4) "12"</span><br><span class="line">127.0.0.1:6379[1]&gt; lset list2 1 10.00</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; lrange list2 0 -1</span><br><span class="line">1) "10"</span><br><span class="line">2) "10.00"</span><br><span class="line">3) "11"</span><br><span class="line">4) "12"</span><br><span class="line">127.0.0.1:6379[1]&gt; lset list2 10 10.00</span><br><span class="line">(error) ERR index out of range</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>lrem：从key对应list中删除n个和value相同的元素(n&lt;0从尾部删除，n=0全部删除)</strong></p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[1]&gt; lrange list2 0 -1</span><br><span class="line">1) "10.00"</span><br><span class="line">2) "11"</span><br><span class="line">3) "12"</span><br><span class="line">127.0.0.1:6379[1]&gt; lrem list2 2 10.00</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[1]&gt; lrange list2 0 -1</span><br><span class="line">1) "11"</span><br><span class="line">2) "12"</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>ltrim：保留list中指定范围的数据全部删除</strong></p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[1]&gt; lrange list2 0 -1</span><br><span class="line">1) "11"</span><br><span class="line">2) "12"</span><br><span class="line">3) "10"</span><br><span class="line">4) "20"</span><br><span class="line">5) "30"</span><br><span class="line">127.0.0.1:6379[1]&gt; ltrim list2 1 2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; lrange list2 0 -1</span><br><span class="line">1) "12"</span><br><span class="line">2) "10"</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>lpop：从list的头部删除元素，并返回该元素</strong></p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[1]&gt; lrange list2 0 -1</span><br><span class="line">1) "12"</span><br><span class="line">2) "10"</span><br><span class="line">127.0.0.1:6379[1]&gt; lpop list2</span><br><span class="line">"12"</span><br><span class="line">127.0.0.1:6379[1]&gt; lrange list2 0 -1</span><br><span class="line">1) "10"</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>rpop：从list尾部删除元素，并返回该元素</strong></p></li><li><p><strong>rpoplpush：从第一个list的尾部删除元素，并添加到第二个list的头部。</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[1]&gt; lrange list2 0 -1</span><br><span class="line">1) "10"</span><br><span class="line">127.0.0.1:6379[1]&gt; lrange list1 0 -1</span><br><span class="line">1) "word"</span><br><span class="line">2) "hello"</span><br><span class="line">127.0.0.1:6379[1]&gt; rpoplpush list1 list2</span><br><span class="line">"hello"</span><br><span class="line">127.0.0.1:6379[1]&gt; lrange list2 0 -1</span><br><span class="line">1) "hello"</span><br><span class="line">2) "10"</span><br><span class="line">127.0.0.1:6379[1]&gt; lrange list1 0 -1</span><br><span class="line">1) "word"</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>lindex：返回名称为key的list中的index位置的元素</strong></p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[1]&gt; lrange list2 0 -1</span><br><span class="line">1) "hello"</span><br><span class="line">2) "10"</span><br><span class="line">127.0.0.1:6379[1]&gt; lindex list2 1</span><br><span class="line">"10"</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>llen：返回指定key对应list的长度</strong></p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[1]&gt; lrange  list2 0 -1</span><br><span class="line">1) "hello"</span><br><span class="line">2) "10"</span><br><span class="line">127.0.0.1:6379[1]&gt; llen list2</span><br><span class="line">(integer) 2</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="（四）-set类型"><a href="#（四）-set类型" class="headerlink" title="（四）.set类型"></a>（四）.set类型</h3><p>Set是一个string类型的无序集合，不允许重复。Set是通过hash table实现的。添加、删除、查找复杂度都是0/1。对集合我们可以取并集、交集、差集。</p><ol><li><p><strong>sadd：向key对应的set集合中添加元素，返回1表示添加成功，返回0表示失败。</strong></p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[2]&gt; sadd myset1 lvjia</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[2]&gt; sadd myset1 lvjia</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379[2]&gt; sadd myset1 dachang</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>smembers：查看集合中的元素</strong></p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[2]&gt; smembers myset1</span><br><span class="line">1) "dachang"</span><br><span class="line">2) "lvjia"</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>srem：删除key对应set集合中的元素，返回1表示删除成功，0表示失败。</strong></p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[2]&gt; smembers myset1</span><br><span class="line">1) "dachang"</span><br><span class="line">2) "lvjia"</span><br><span class="line">127.0.0.1:6379[2]&gt; srem myset1 two</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379[2]&gt; srem myset1 dachang</span><br><span class="line">(integer) 1</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>spop：随即删除set中的一个元素并返回该元素</strong></p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[2]&gt; spop myset1</span><br><span class="line">"dachang"</span><br><span class="line">127.0.0.1:6379[2]&gt; spop myset1</span><br><span class="line">"haha"</span><br><span class="line">127.0.0.1:6379[2]&gt; smembers myset1</span><br><span class="line">1) "wahaha"</span><br><span class="line">2) "lvjia"</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>sdiff：返回给定set集合的差集（以前边的set集合为标准）</strong></p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[2]&gt; smembers myset2</span><br><span class="line">1) "hhaha"</span><br><span class="line">2) "haha"</span><br><span class="line">3) "wahaha"</span><br><span class="line">127.0.0.1:6379[2]&gt; smembers myset1</span><br><span class="line">1) "wahaha"</span><br><span class="line">2) "lvjia"</span><br><span class="line">127.0.0.1:6379[2]&gt; sdiff myset2 myset1</span><br><span class="line">1) "hhaha"</span><br><span class="line">2) "haha"</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>sdiffstore：返回所有给定的set集合的差集，并将差集添加到另一个集合中。</strong></p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[2]&gt; smembers myset1</span><br><span class="line">1) "wahaha"</span><br><span class="line">2) "lvjia"</span><br><span class="line">127.0.0.1:6379[2]&gt; smembers myset2</span><br><span class="line">1) "hhaha"</span><br><span class="line">2) "haha"</span><br><span class="line">3) "wahaha"</span><br><span class="line">127.0.0.1:6379[2]&gt; sdiffstore myset3 myset1 myset2</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[2]&gt; smembers myset3</span><br><span class="line">1) "lvjia"</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>sinter：返回所有给定集合的交集。</strong></p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[2]&gt; smembers myset1</span><br><span class="line">1) "wahaha"</span><br><span class="line">2) "lvjia"</span><br><span class="line">127.0.0.1:6379[2]&gt; smembers myset2</span><br><span class="line">1) "hhaha"</span><br><span class="line">2) "haha"</span><br><span class="line">3) "wahaha"</span><br><span class="line">127.0.0.1:6379[2]&gt; sinter myset1 myset2</span><br><span class="line">1) "wahaha"</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>sinterstore：返回所有给定集合key的交集，并将结果存为另一个key</strong></p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[2]&gt; smembers myset1</span><br><span class="line">1) "wahaha"</span><br><span class="line">2) "lvjia"</span><br><span class="line">127.0.0.1:6379[2]&gt; smebers myset2</span><br><span class="line">(error) ERR unknown command 'smebers'</span><br><span class="line">127.0.0.1:6379[2]&gt; smembers myset2</span><br><span class="line">1) "hhaha"</span><br><span class="line">2) "haha"</span><br><span class="line">3) "wahaha"</span><br><span class="line">127.0.0.1:6379[2]&gt; sinterstore myset4 myset1 myset2</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[2]&gt; smembers myset4</span><br><span class="line">1) "wahaha"</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>sunion：返回所有给定集合的并集。</strong></p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[2]&gt; sunion myset1 myset2</span><br><span class="line">1) "hhaha"</span><br><span class="line">2) "haha"</span><br><span class="line">3) "lvjia"</span><br><span class="line">4) "wahaha"</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>sunionstore：返回所有给定集合的并集，并将结果存入另一个集合。</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[2]&gt; smembers myset1</span><br><span class="line">1) "wahaha"</span><br><span class="line">2) "lvjia"</span><br><span class="line">127.0.0.1:6379[2]&gt; smembers myset2</span><br><span class="line">1) "hhaha"</span><br><span class="line">2) "haha"</span><br><span class="line">3) "wahaha"</span><br><span class="line">127.0.0.1:6379[2]&gt; sunionstore myset5 myset1 myset2</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379[2]&gt; smembers myset5</span><br><span class="line">1) "hhaha"</span><br><span class="line">2) "haha"</span><br><span class="line">3) "lvjia"</span><br><span class="line">4) "wahaha"</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>smove：从第一个集合中移除元素并将该元素添加到另一个集合中。</strong></p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[2]&gt; smembers myset1</span><br><span class="line">1) "wahaha"</span><br><span class="line">2) "lvjia"</span><br><span class="line">127.0.0.1:6379[2]&gt; smembers myset2</span><br><span class="line">1) "hhaha"</span><br><span class="line">2) "haha"</span><br><span class="line">3) "wahaha"</span><br><span class="line">127.0.0.1:6379[2]&gt; smove myset2 myset1 wahaha</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[2]&gt; smembers myset1</span><br><span class="line">1) "wahaha"</span><br><span class="line">2) "lvjia"</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>scard：返回set集合中元素的个数。llen(list),strlen(str)，hlen(hash)</strong></p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[2]&gt; smembers myset2</span><br><span class="line">1) "hhaha"</span><br><span class="line">2) "haha"</span><br><span class="line">127.0.0.1:6379[2]&gt; scard myset1</span><br><span class="line">(integer) 2</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>sismember：测试member元素是否是名为key的set集合，返回1表示是，返回0表示不是。</strong></p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[2]&gt; smembers myset1</span><br><span class="line">1) "wahaha"</span><br><span class="line">2) "lvjia"</span><br><span class="line">127.0.0.1:6379[2]&gt; sismember myset1 two</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379[2]&gt; sismember myset1 wahaha</span><br><span class="line">(integer) 1</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>srandmember：随即返回set集合中的几个元素，但不删除这几个元素</strong></p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[2]&gt; srandmember myset1</span><br><span class="line">"wahaha"</span><br><span class="line">127.0.0.1:6379[2]&gt; smembers myset2</span><br><span class="line">1) "hhaha"</span><br><span class="line">2) "haha"</span><br><span class="line">127.0.0.1:6379[2]&gt; srandmember myset1 2</span><br><span class="line">1) "lvjia"</span><br><span class="line">2) "wahaha"</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="（五）-sorted-set类型"><a href="#（五）-sorted-set类型" class="headerlink" title="（五）.sorted set类型"></a>（五）.sorted set类型</h3><p>sorted set是set的一个升级版，它在set的基础上增加了一个顺序属性，这一属性在添加元素的时候可以指定，每次指定后，zset会自动重新按新的值调整顺序。可以理解为有两列的MySQL表，一列存value，一列存顺序。操作key理解为zset的名字。</p><ol><li><p><strong>zadd：向有序集合zset中添加元素并指定顺序，如果该元素已存在就更新元素顺序。</strong></p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[3]&gt; zadd myzset1 1 one</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[3]&gt; zadd myzset1 2 two</span><br><span class="line">(integer) 1</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>zrange：从zset集合中取元素，（withscores）输出元素顺序号</strong></p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[3]&gt; zrange myzset1 0 -1 withscores</span><br><span class="line">1) "one"</span><br><span class="line">2) "1"</span><br><span class="line">3) "two"</span><br><span class="line">4) "2"</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>zrem：删除zset集合中指定的元素</strong></p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[3]&gt; zrem myzset1 dachang</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[3]&gt; zrange myzset1 0 -1 withscores</span><br><span class="line">1) "one"</span><br><span class="line">2) "1"</span><br><span class="line">3) "lvjia"</span><br><span class="line">4) "5"</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>zincrby：若zset中已经存在元素member、则该元素的score增加increment否则向该集合中添加该元素，其score的值为increment。</strong></p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[3]&gt; zrange myzset1 0 -1 withscores</span><br><span class="line">1) "one"</span><br><span class="line">2) "1"</span><br><span class="line">3) "lvjia"</span><br><span class="line">4) "5"</span><br><span class="line">127.0.0.1:6379[3]&gt; zincrby myzset1 2 one</span><br><span class="line">"3"</span><br><span class="line">127.0.0.1:6379[3]&gt; zincrby myzset1 2 one</span><br><span class="line">"5"</span><br><span class="line">127.0.0.1:6379[3]&gt; zrange myzset1 0 -1 withscores</span><br><span class="line">1) "lvjia"</span><br><span class="line">2) "5"</span><br><span class="line">3) "one"</span><br><span class="line">4) "5"</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>zrank：返回zset中元素member的排名(score从小到大排序)即下标</strong></p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[3]&gt; zrange myzset1 0 -1 withscores</span><br><span class="line">1) "dachang"</span><br><span class="line">2) "1"</span><br><span class="line">3) "lvjia"</span><br><span class="line">4) "2"</span><br><span class="line">5) "one"</span><br><span class="line">6) "5"</span><br><span class="line">127.0.0.1:6379[3]&gt; zrank myzset1 dachang</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379[3]&gt; zrank myzset1 lvjia</span><br><span class="line">(integer) 1</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>zrevrank：返回zset集合中member元素的排名（按照score倒叙）即下标</strong></p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[3]&gt; zrange myzset1 0 -1 withscores</span><br><span class="line">1) "dachang"</span><br><span class="line">2) "1"</span><br><span class="line">3) "lvjia"</span><br><span class="line">4) "2"</span><br><span class="line">5) "one"</span><br><span class="line">6) "5"</span><br><span class="line">127.0.0.1:6379[3]&gt; zrevrank myzset1 dachang</span><br><span class="line">(integer) 2</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>zrevrange：从zset集合中倒叙（score倒叙）获取元素</strong></p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[3]&gt; zrevrange myzset1 0 -1 withscores</span><br><span class="line">1) "one"</span><br><span class="line">2) "5"</span><br><span class="line">3) "lvjia"</span><br><span class="line">4) "2"</span><br><span class="line">5) "dachang"</span><br><span class="line">6) "1"</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>zrangebyscore：从zset集合中根据score顺序获取元素</strong></p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[3]&gt; zrange myzset1 0 -1 withscores</span><br><span class="line">1) "dachang"</span><br><span class="line">2) "1"</span><br><span class="line">3) "lvjia"</span><br><span class="line">4) "2"</span><br><span class="line">5) "one"</span><br><span class="line">6) "5"</span><br><span class="line">127.0.0.1:6379[3]&gt; zrangebyscore myzset1 4 5 withscores</span><br><span class="line">1) "one"</span><br><span class="line">2) "5"</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>zcount：返回zset集合中score在给定区间的所有元素个数</strong></p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[3]&gt; zrange myzset1 0 -1 withscores</span><br><span class="line">1) "dachang"</span><br><span class="line">2) "1"</span><br><span class="line">3) "lvjia"</span><br><span class="line">4) "2"</span><br><span class="line">5) "one"</span><br><span class="line">6) "5"</span><br><span class="line">127.0.0.1:6379[3]&gt; zcount myzset1 4 5</span><br><span class="line">(integer) 1</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>zcard：返回zset集合中所有元素个数</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[3]&gt; zrange myzset1 0 -1 withscores</span><br><span class="line">1) "dachang"</span><br><span class="line">2) "1"</span><br><span class="line">3) "lvjia"</span><br><span class="line">4) "2"</span><br><span class="line">5) "one"</span><br><span class="line">6) "5"</span><br><span class="line">127.0.0.1:6379[3]&gt; zcard myzset1</span><br><span class="line">(integer) 3</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>zremrangebyrank：删除集合中排名（下标）在给定区间的元素。</strong></p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[3]&gt; zrange myzset1 0 -1 withscores</span><br><span class="line">1) "lvjia"</span><br><span class="line">2) "1"</span><br><span class="line">3) "dachang"</span><br><span class="line">4) "2"</span><br><span class="line">5) "haha"</span><br><span class="line">6) "3"</span><br><span class="line">127.0.0.1:6379[3]&gt; zremrangebyrank myzset1 0 1</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379[3]&gt; zrange myzset1 0 -1 withscores</span><br><span class="line">1) "haha"</span><br><span class="line">2) "3"</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>zremrangebyscore：删除集合中顺序（score值）在给定区间的元素</strong></p> <figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">9</span>]&gt; ZADD myzset <span class="number">1</span> <span class="string">"one"</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">9</span>]&gt; ZADD myzset <span class="number">2</span> <span class="string">"two"</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">9</span>]&gt; ZADD myzset <span class="number">3</span> <span class="string">"three"</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">9</span>]&gt; ZADD myzset <span class="number">4</span> <span class="string">"four"</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">9</span>]&gt; ZADD myzset <span class="number">5</span> <span class="string">"five"</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">9</span>]&gt; zrange myset <span class="number">0</span> <span class="number">-1</span></span><br><span class="line">(empty list <span class="keyword">or</span> set)</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">9</span>]&gt; zrange myzset <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"one"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"two"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"three"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"four"</span></span><br><span class="line"><span class="number">5</span>) <span class="string">"five"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">9</span>]&gt; ZREMRANGEBYSCORE myzset <span class="number">2</span> <span class="number">4</span></span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">9</span>]&gt; zrange myzset <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"one"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"five"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">9</span>]&gt; zrange myzset <span class="number">0</span> <span class="number">-1</span> withscores</span><br><span class="line"><span class="number">1</span>) <span class="string">"one"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"1"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"five"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"5"</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="（六）发布-x2F-订阅"><a href="#（六）发布-x2F-订阅" class="headerlink" title="（六）发布/订阅"></a>（六）发布/订阅</h3><h3 id="（七）布隆过滤器"><a href="#（七）布隆过滤器" class="headerlink" title="（七）布隆过滤器"></a>（七）布隆过滤器</h3><pre><code> <figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">9</span>]&gt; ZADD myzset <span class="number">1</span> <span class="string">"one"</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">9</span>]&gt; ZADD myzset <span class="number">2</span> <span class="string">"two"</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">9</span>]&gt; ZADD myzset <span class="number">3</span> <span class="string">"three"</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">9</span>]&gt; ZADD myzset <span class="number">4</span> <span class="string">"four"</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">9</span>]&gt; ZADD myzset <span class="number">5</span> <span class="string">"five"</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">9</span>]&gt; zrange myset <span class="number">0</span> <span class="number">-1</span></span><br><span class="line">(empty list <span class="keyword">or</span> set)</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">9</span>]&gt; zrange myzset <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"one"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"two"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"three"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"four"</span></span><br><span class="line"><span class="number">5</span>) <span class="string">"five"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">9</span>]&gt; ZREMRANGEBYSCORE myzset <span class="number">2</span> <span class="number">4</span></span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">9</span>]&gt; zrange myzset <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"one"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"five"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">9</span>]&gt; zrange myzset <span class="number">0</span> <span class="number">-1</span> withscores</span><br><span class="line"><span class="number">1</span>) <span class="string">"one"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"1"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"five"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"5"</span></span><br></pre></td></tr></tbody></table></figure></code></pre><h3 id="（六）发布-x2F-订阅-1"><a href="#（六）发布-x2F-订阅-1" class="headerlink" title="（六）发布/订阅"></a>（六）发布/订阅</h3><h3 id="（七）布隆过滤器-1"><a href="#（七）布隆过滤器-1" class="headerlink" title="（七）布隆过滤器"></a>（七）布隆过滤器</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>redis高阶</title>
      <link href="/2022/05/19/treasurebox/shu-ju-ku/redis/3.redis-gao-jie/"/>
      <url>/2022/05/19/treasurebox/shu-ju-ku/redis/3.redis-gao-jie/</url>
      
        <content type="html"><![CDATA[<img src="image/1589077011872.png">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>索引</title>
      <link href="/2022/05/19/treasurebox/shu-ju-ku/mysql/6.suo-yin/"/>
      <url>/2022/05/19/treasurebox/shu-ju-ku/mysql/6.suo-yin/</url>
      
        <content type="html"><![CDATA[<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h4 id="一、索引介绍"><a href="#一、索引介绍" class="headerlink" title="一、索引介绍"></a>一、索引介绍</h4><p>  1、索引是为了提升查询速度，会降低添加数据、更新数据、删除数据的速度。<br>  2、经常用于where查询条件的字段添加索引  如：id。<br>  3、字段重复数据较大的数据不适合添加索引，如：性别，保证数据的唯一性，唯一性越高查询速度越快。<br>  4、数量较少的表，不适合添加索引。<br>    索引介绍<br>        用处：  几乎所有的索引都是添加到字段中的<br>        作用：  使用索引，是为了加快查询速度，提高查询效率，约束数据的有效性<br>        原理：  系统根据某种算法或者未来添加的数据，单独建立一个文件，实现快速匹配查找<br>    索引的优点<br>        通过唯一索引可以创建出每一行数据的唯一性<br>        可大大提高数据库的检索速度，这是最主要的原因<br>        加强表与表之间的联系，实现多表查询<br>        在分组和排序中，同样可以少耗费很多时间<br>        可以提高表的性能</p><p>   索引的缺点<br>        运行速度：  添加索引会延缓插入数据和修改数据的速度<br>        耗费空间：  索引本身产生的文件就有可能比数据的文件还要大<br>        消耗时间：  创建索引和维护索引要耗费时间，这种时间是根据数据量的增加而增加</p><p>​索引的分类<br>​1.主键索引<br>​作用：  确定数据表中一条特定数据记录的位置<br>​关键字：  primary  key<br>​创建：  一般创建在建表时候  id  int  not  null  auto_increment  primary  key<br>​注意：  主键不能为空，一个表中只能有一个主键索引<br>​2.外键索引<br>​概念：  外面的键，不是在自己的表中，如果一张表中的一个字段（非主键）指向另一张表中的主键，那么可以称该字段为外键<br>​作用：  用来在多表查询的时候方便联系两表数据<br>​关键字：  foreign  key<br>​使用：  foreign  key（外键名）  references  主表（主键）<br>​约束<br>​对子表：  在对子表进行增和改的时候，如果外键对应在父表中找不到，那么就会失败<br>​对父表：  在对父表进行删和改的时候，如果在主表中已有数据被引用，那么也将失败<br>​外键的形成条件<br>​要求表类型必须是innodb<br>​如果不是innodb，那么即使创表成功，也没有了约束的效果<br>​外键的数据类型必须与主键的数据类型一致<br>​在一张表中外键名不能重复<br>​如果数据存在，那么必须保证外键中的数据和附表中的主键数据一致<br>​3.唯一索引<br>​作用：  唯一索引是为了避免出现重复的值，他的存在不是为了提高访问速度，而是避免出现重复数据<br>​关键字：  unique<br>​使用：  一般在创建列的时候使用   name  char（30）  not  null  default  ‘DB’  unique<br>​注意：  只有确认某一列不能出现重复的值得时候才能使用<br>​4.普通索引<br>​概念：  普通索引依附在某一列上，提高查询速度<br>​关键字：  index<br>​使用：  create  index  索引名  on  表名（列名）<br>​索引的操作<br>​查看索引：  show  index   from  表名<br>​删除索引：  drop  index  索引名  on  表名</p><h3 id="二、索引的创建"><a href="#二、索引的创建" class="headerlink" title="二、索引的创建"></a>二、索引的创建</h3><ol><li><h4 id="使用alter-table-语句创建索引"><a href="#使用alter-table-语句创建索引" class="headerlink" title="使用alter table 语句创建索引"></a>使用alter table 语句创建索引</h4><p> 普通索引：</p><h5 id="alter-table-table-name-add-index-index-name-字段"><a href="#alter-table-table-name-add-index-index-name-字段" class="headerlink" title="alter table table_name add index index_name(字段);"></a>alter table table_name add index index_name(字段);</h5><p> 唯一索引：</p><h5 id="alter-table-table-name-add-unique-字段"><a href="#alter-table-table-name-add-unique-字段" class="headerlink" title="alter table table_name add unique(字段);"></a><strong>alter table table_name add unique(字段);</strong></h5><p> 主键索引：</p><p> <strong>alter table table_name add primary key(字段);</strong></p></li><li><h4 id="使用create-index-语句对表增加索引"><a href="#使用create-index-语句对表增加索引" class="headerlink" title="使用create index 语句对表增加索引"></a>使用create index 语句对表增加索引</h4><p> <strong>create index index_name on table_name(username(length));</strong></p><p> 如果是char或varchar类型，length可以小于字段实际长度；如果是text类型，必定要指定length</p><p> create 只能创建两种索引：普通索引和唯一索引</p><p> create index index_name on table_name(字段);</p><p> create unique index index_name on table_name(字段);</p></li></ol><h3 id="三、删除索引"><a href="#三、删除索引" class="headerlink" title="三、删除索引"></a>三、删除索引</h3><p>​删除索引可以使用alter table 或drop index 语句来实现，drop index 可以在alter table 内部作为一条语句来处理</p><p>​格式：drop index index_name on table_name;</p><p>​alter table table_name drop index index_name;</p><p>​alter table table_name drop primary key;</p><p>​一个表只有一个primary key索引，如果没有primary  key，有多个unique索引时，则MySQL将删除掉第一个unique索引。</p><p>��unique索引时，则MySQL将删除掉第一个unique索引。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>视图</title>
      <link href="/2022/05/19/treasurebox/shu-ju-ku/mysql/7.shi-tu/"/>
      <url>/2022/05/19/treasurebox/shu-ju-ku/mysql/7.shi-tu/</url>
      
        <content type="html"><![CDATA[<h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><ol><li><h4 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h4><p> 视图是一张虚拟的表，不占用物理内存。</p><p> 视图不存放数据，数据只存在基表中，但是他们发生变化都会互相影响。</p><p> 视图会给我们带来更多方便。</p></li><li><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol><li>简单、方便，可以在查看数据的时候变得更清楚。</li><li>安全性：保护数据库中的重要数据，不让他展现在页面中</li><li>逻辑数据独立性：不占用物理空间，当去修改原表结构时，不会对视图造成影响（指添加字段）。</li></ol></li><li><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p> 性能差：查询效率偏低，每次查询时都要转换</p><p> 修改限制：对于复杂视图来说（多表查询）修改是非常麻烦的。</p></li><li><h4 id="视图的使用"><a href="#视图的使用" class="headerlink" title="视图的使用"></a>视图的使用</h4><p> 创建视图：create view 视图名 as select 语句;</p><p> 查询视图：</p><p> ​show create view 视图名;</p><p> 查看某个表有多少视图：</p><p> ​show table status where comment=”view”;</p><p> 删除视图：</p><p> ​drop view 视图名;</p><p> 在视图中对数据的增、删、改、查与在原表中都一样</p><p> 查询视图的内容：</p><p> ​select * from 视图;lect * from 视图;</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pymysql的使用</title>
      <link href="/2022/05/19/treasurebox/shu-ju-ku/mysql/8.pymysql-de-shi-yong/"/>
      <url>/2022/05/19/treasurebox/shu-ju-ku/mysql/8.pymysql-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="PyMySQL"><a href="#PyMySQL" class="headerlink" title="PyMySQL"></a>PyMySQL</h2><ol><li><h4 id="pymysql简介"><a href="#pymysql简介" class="headerlink" title="pymysql简介"></a>pymysql简介</h4><p> PyMySQL：是一个使python连接到MySQL的库，是一个纯python的库。</p><p> <strong>环境要求：</strong></p><ol><li><p>python2.7</p></li><li><p>python version&gt;=3.4</p></li><li><p>安装PyMYSQL</p><p> pip install PyMySQL</p></li></ol></li><li><h4 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h4><p> import pymysql</p></li><li><h4 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h4><p> 参数：host,user,password,database,port,</p><p> <strong>cursorclass=pymysql.cursor.DictCursor</strong>不加该参数时表现形式为元组。</p><p> 加参数时输出为字典格式。</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = pymysql.connect(host=<span class="string">"10.10.101.243"</span>,user=<span class="string">"root"</span>,password=<span class="string">"root"</span>,database=<span class="string">"test"</span>,port=<span class="number">3306</span>)</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="创建游标对象"><a href="#创建游标对象" class="headerlink" title="创建游标对象"></a>创建游标对象</h4><p> 游标：游标是处理数据的一种方法，为了查看或者处理结果集中的数据，在结果集中一次一行或者多行前进或向后浏览数据的能力。可以把游标当作一个指针，它可以指定结果中的任何位置，然后允许用户对指定位置的数据进行处理通俗来说，操作数据和获取数据库结果都要通过游标来操作。</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cursor = db.cursor()</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="定义sql语句"><a href="#定义sql语句" class="headerlink" title="定义sql语句"></a>定义sql语句</h4> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sql = <span class="string">"SELECT database()"</span></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="执行sql语句，获取返回值"><a href="#执行sql语句，获取返回值" class="headerlink" title="执行sql语句，获取返回值"></a>执行sql语句，获取返回值</h4> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cursor.execute(sql)</span><br></pre></td></tr></tbody></table></figure> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取返回值 fetchone()  获取一条数据</span></span><br><span class="line"><span class="built_in">print</span>(cursor.fetchone())</span><br><span class="line"><span class="comment">#获取返回值 fetchall()  获取所有数据</span></span><br><span class="line"><span class="built_in">print</span>(cursor.fetchall())</span><br><span class="line"><span class="comment">#获取返回值 fetchmany()  获取2条数据</span></span><br><span class="line"><span class="built_in">print</span>(cursor.fetchmany(<span class="number">2</span>))</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="关闭数据库连接"><a href="#关闭数据库连接" class="headerlink" title="关闭数据库连接"></a>关闭数据库连接</h4> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cursor.close()</span><br><span class="line">db.close()</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="封装MySql类"><a href="#封装MySql类" class="headerlink" title="封装MySql类"></a>封装MySql类</h4> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySql</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, host, user, password, database</span>):</span><br><span class="line">        self.host = host</span><br><span class="line">        self.user = user</span><br><span class="line">        self.password = password</span><br><span class="line">        self.database = database</span><br><span class="line">        self.cursorclass = pymysql.cursors.DictCursor</span><br><span class="line">        <span class="comment"># self.port=3306</span></span><br><span class="line">        self.connect()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">connect</span>(<span class="params">self</span>):</span><br><span class="line">        self.db = pymysql.connect(</span><br><span class="line">            self.host, self.user, self.password, self.database, cursorclass=self.cursorclass)</span><br><span class="line">        self.cursor = self.db.cursor()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, sql</span>):</span><br><span class="line">        self.db_edit(sql)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">drop</span>(<span class="params">self, sql</span>):</span><br><span class="line">        self.db_edit(sql)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">db_edit</span>(<span class="params">self,sql</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.cursor.execute(sql)</span><br><span class="line">        <span class="keyword">except</span> BaseException:</span><br><span class="line">            <span class="keyword">raise</span> traceback.format_stack()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_one</span>(<span class="params">self, sql</span>):</span><br><span class="line">        res = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.cursor.execute(sql)</span><br><span class="line">            res = self.cursor.fetchone()</span><br><span class="line">        <span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"get_one"</span>, e)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_all</span>(<span class="params">self, sql</span>):</span><br><span class="line">        res = ()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.cursor.execute(sql)</span><br><span class="line">            res = self.cursor.fetchall()</span><br><span class="line">        <span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"get_all:"</span>, e)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, sql</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__edit(sql)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, sql</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__edit(sql)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self, sql</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__edit(sql)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__edit</span>(<span class="params">self, sql</span>):</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            count = self.cursor.execute(sql)</span><br><span class="line">            self.db.commit()</span><br><span class="line">        <span class="keyword">except</span> BaseException:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'事务提交失败。'</span>)</span><br><span class="line">            self.db.rollback()</span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        self.cursor.close()</span><br><span class="line">        self.db.close()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ol><p> def <strong>del</strong>(self):<br>            self.cursor.close()<br>            self.db.close()</p><pre><code>```</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>orm操作数据库</title>
      <link href="/2022/05/19/treasurebox/shu-ju-ku/mysql/9.orm-cao-zuo-shu-ju-ku/"/>
      <url>/2022/05/19/treasurebox/shu-ju-ku/mysql/9.orm-cao-zuo-shu-ju-ku/</url>
      
        <content type="html"><![CDATA[<h2 id="ORM操作数据库"><a href="#ORM操作数据库" class="headerlink" title="ORM操作数据库"></a>ORM操作数据库</h2><ol><li><h3 id="orm介绍"><a href="#orm介绍" class="headerlink" title="orm介绍"></a>orm介绍</h3><p> 对象关系映射</p><p> 全称：Object Relational Mapping，对象关系映射</p><p> 将python中的类映射为数据库中的表，一个类就是一张表，类的属性映射为表中的字段将python代码翻译为对应的数据库sql语句。</p></li><li><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p> 1、降低耦合</p><p> 2、开发人员只需要关注业务逻辑，降低开发人员的工作强度</p></li><li><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p> 1、降低查询效率。</p><p> 2、受orm方法的限制，复杂查询不容易编写。</p></li><li><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p> python中的ORM,即sqlalchemy，仿照的是Django框架的ORM。flask中有ORM的插件即：flask-sqlalchemy</p><p> 安装：在命令行执行：pip install sqlalchemy</p></li><li><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p> 1、导包</p><p> 2、创建连接</p><p> 3、声明一个基类</p><p> 4、创建类-数据模型</p><p> 5、操作</p></li><li><h3 id="orm操作数据库"><a href="#orm操作数据库" class="headerlink" title="orm操作数据库"></a>orm操作数据库</h3></li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlalchemy</span><br><span class="line"><span class="comment">#1、导包</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="comment">#类似pymysql中的游标</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="comment">#2、创建连接</span></span><br><span class="line"><span class="comment">#数据库类型+数据库的操作包://用户名:密码@IP地址/数据库</span></span><br><span class="line"><span class="comment">#有mysqlclient包时，mysql+pymysql可改为mysql</span></span><br><span class="line"></span><br><span class="line">db = sqlalchemy.create_engine(<span class="string">"mysql://root:root@localhost/sqlorm"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、创建基类</span></span><br><span class="line">base = declarative_base(db)</span><br><span class="line"></span><br><span class="line"><span class="comment">#4、创建表--数据类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">base</span>):</span><br><span class="line">    <span class="comment">#表名</span></span><br><span class="line">    __tablename__=<span class="string">"user"</span></span><br><span class="line">    <span class="comment">#字段</span></span><br><span class="line">    <span class="built_in">id</span> = sqlalchemy.Column(sqlalchemy.Integer,primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = sqlalchemy.Column(sqlalchemy.String(<span class="number">32</span>))</span><br><span class="line">    age = sqlalchemy.Column(sqlalchemy.Integer)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserInfo</span>(<span class="title class_ inherited__">base</span>):</span><br><span class="line">    __tablename__=<span class="string">"userinfo"</span></span><br><span class="line">    <span class="built_in">id</span> = sqlalchemy.Column(sqlalchemy.Integer,primary_key=<span class="literal">True</span>)</span><br><span class="line">    phone = sqlalchemy.Column(sqlalchemy.String(<span class="number">20</span>))</span><br><span class="line">    user = sqlalchemy.Column(sqlalchemy.Integer,sqlalchemy.ForeignKey(<span class="string">"user.id"</span>),)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment">#执行数据库迁移（创建表）</span></span><br><span class="line">    base.metadata.create_all(db)</span><br><span class="line">    <span class="comment">#绑定一个session实例</span></span><br><span class="line">    s=sessionmaker(bind=db)</span><br><span class="line">    <span class="comment">#创建一个会话对象，类似于游标</span></span><br><span class="line">    session=s()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#数据库操作</span></span><br><span class="line">    <span class="comment">#添加</span></span><br><span class="line">    <span class="comment">#1.1 单条插入</span></span><br><span class="line">    <span class="comment"># user = User(name="hello",age=16)</span></span><br><span class="line">    <span class="comment"># session.add(user)</span></span><br><span class="line">    <span class="comment"># session.commit()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#1.2、多条插入</span></span><br><span class="line">    <span class="comment"># session.add_all([</span></span><br><span class="line">    <span class="comment">#     User(name="world",age=20),</span></span><br><span class="line">    <span class="comment">#     User(name="python",age=28),</span></span><br><span class="line">    <span class="comment">#     User(name="PHP",age=34)</span></span><br><span class="line">    <span class="comment"># ])</span></span><br><span class="line">    <span class="comment"># session.commit()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#2、查询</span></span><br><span class="line">    <span class="comment">#2.1、查询所有的数据，返回一个存放对象的列表</span></span><br><span class="line">    <span class="comment"># res = session.query(User).all()</span></span><br><span class="line">    <span class="comment"># for x in res:</span></span><br><span class="line">    <span class="comment">#     print(x.name,x.age)</span></span><br><span class="line">    <span class="comment">#2.2、通过主键值查询一条数据，返回一个对象</span></span><br><span class="line">    <span class="comment"># res = session.query(User).get(2)</span></span><br><span class="line">    <span class="comment"># print(res.name,res.age)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#条件查询，返回的 是一个存放对象的列表</span></span><br><span class="line">    <span class="comment"># res = session.query(User).filter_by(name="python").all()</span></span><br><span class="line">    <span class="comment"># for x in res:</span></span><br><span class="line">    <span class="comment">#     print(x.name,x.age)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#3、修改</span></span><br><span class="line">    res = session.query(User).get(<span class="number">1</span>)</span><br><span class="line">    res.name=<span class="string">'hh'</span></span><br><span class="line">    session.commit()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#4、删除</span></span><br><span class="line">    res =session.query(User).get(<span class="number">1</span>)</span><br><span class="line">    session.delete(res)</span><br><span class="line">    session.commit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># pymysql与orm的对比</span></span><br><span class="line"><span class="comment">#pymysql—sql—&gt;mysql</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python—python—&gt;ORM—sql—&gt;mysql</span></span><br></pre></td></tr></tbody></table></figure><p>与orm的对比<br>#pymysql—sql—&gt;mysql</p><p>#python—python—&gt;ORM—sql—&gt;mysql</p><pre><code></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>主从复制</title>
      <link href="/2022/05/19/treasurebox/shu-ju-ku/mysql/mysql-gao-jie-ying-yong/1.zhu-cong-fu-zhi/"/>
      <url>/2022/05/19/treasurebox/shu-ju-ku/mysql/mysql-gao-jie-ying-yong/1.zhu-cong-fu-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL主从复制"><a href="#MySQL主从复制" class="headerlink" title="MySQL主从复制"></a>MySQL主从复制</h2><p>最常见的集群方案：</p><p>Replication：速度快，弱一致性，低价值，日志，新闻，帖子</p><p>PXC：速度慢，强一致性，高价值，订单，账户，财务。</p><p>一、MySQL Replication</p><p>主从复制（也称AB复制）允许将来自一个MySQL数据库服务器（主服务器）的数据复制到一个或多个MySQL数据库服务器（从服务器）。</p><p>复制是异步的，从站不需要永久连接以接收来自主站的更新。</p><p>根据配置，可以复制数据库中所有的数据库，所选数据库甚至是选定的表。</p><p>MySQL中赋值的优点包括：</p><ul><li>横向扩展解决方案，再多个从站之间分配负载以提高性能。在此环境中，所有写入和更新都必须在主服务器上进行。但是，读取可以在一个或多个从设备上进行。该模型可以提高写入性能（因为主设备专用于更新），同时显著提高了越来越多的从设备的读取速度。</li><li>数据安全性，因为数据被复制到从站，并且从站可以暂停复制过程，所以可以在从站上运行备份服务而不会破坏相应的主数据。</li><li>分析，可以在主服务器上创建实时数据，而信息分析可以在从服务器上进行，而不会影响主服务器的性能。</li><li>远程数据分发，可以使用复制为远程站点创建数据的本地副本，而无需永久访问主服务器。</li></ul><p>Replication的原理：</p><img src="image/1592892518184.png"><ol><li>主服务器上面的任何修改都会通过自己的I/O thread(I/O线程)保存在二进制日志<code>Binary log</code>里面</li><li>从服务器上面也启动 一个I/O thread，通过配置好的用户名和密码，连接到主服务器上边请求读取二进制日志，然后把读取到的二进制日志写到本地的一个<code>Realy log</code>（中继日志）里面。</li><li>从服务器上面同时开启一个SQL thread定时检查<code>Realy log</code>（这个文件也是二进制的），如果发现有更新立即把更新的内容在本机数据库上执行一遍。</li></ol><p>每个从服务器都会收到主服务器二进制日志的全部内容的副本。</p><p>从服务器设备负责决定应该执行二进制日志中的哪些语句。</p><p>除非另行制定，否则主从二进制日志中的所有时间都在从站上执行。</p><p>如果需要，您将从服务器配置为仅处理一些特定数据库或表的事件。</p><p><strong>注意：无法将主服务器裴志伟仅记录特定时间</strong>。</p><p>每个从站（从服务器）都会记录二进制日志坐标：</p><ul><li>文件名</li><li>文件中它已经从主站读取和处理的位置。</li></ul><p>由于每个从服务器都分别记录了自己当前处理二进制日志中的位置，因此可以断开服务器的连接，重新连接然后恢复继续处理。</p><h4 id="一主多从"><a href="#一主多从" class="headerlink" title="一主多从"></a>一主多从</h4><p>如果一主多从的话，这时主库既要负责写又要负责为几个从库提供二进制日志。此时可以稍作调整，将二进制日志只给一从，这一从再开启二进制日志并将自己的二进制日志再发给其他从。或者干脆这个从不记录只负责将二进制日志转发给其他从，这样架构起来性能要好很多，而且数据之间的延时也会好一点。工作原理如下：</p><img src="image/1592892578841.png"><h4 id="关于二进制文件"><a href="#关于二进制文件" class="headerlink" title="关于二进制文件"></a>关于二进制文件</h4><p><a href="https://dev.mysql.com/doc/refman/5.7/en/mysqld.html">mysqld</a>将数字扩展名附加到二进制日志基本名称以生成人禁止日志文件名。每次服务器创建新日志文件时，该数字都会增加，从而创建一系列有序的文件。每次启动或刷新日志时，服务器都会在系列中创建一个新文件。服务器还会在当前日志大小达到<code>max_binlog_size</code>参数设置的的大小后自动创建新的二进制日志文件。二进制日志文件可能会比<code>max_binlog_size</code>使用大型事务时更大，因为事务是以一个部分写入文件，而不是在文件之间分割。</p><p>为了跟踪已使用的二进制日志文件，mysqld还创建了一个二进制日志索引文件，其中包含所有使用的二进制日志文件的名称。</p><p>默认情况下，它具有与二进制日志文件相同的基本名称，并带有扩展名”<code>.index</code>“。在mysqld运行时，不要手动编辑此文件。</p><p>术语<code>二进制日志文件</code>通常表示包含数据库事件的单个编号文件。</p><p>术语<code>二进制日志</code>表示含编号的二进制日志文件集加上索引文件。</p><p><code>SUPER</code>权限的用户可以试用<code>SET sql_log_bin=0</code>语句禁用其当前环境下自己的语句的二进制日志记录。</p><h4 id="配置Replication"><a href="#配置Replication" class="headerlink" title="配置Replication"></a>配置Replication</h4><h5 id="配置步骤："><a href="#配置步骤：" class="headerlink" title="配置步骤："></a>配置步骤：</h5><ol><li><p>在主服务器上，必须启用二进制日志记录并配置唯一的服务器ID。需要重启服务器。</p><p> 编辑主服务器上的配置文件<code>my.cnf</code>，添加如下内容：</p><blockquote><p>[mysqld]</p><p>log-bin=/var/log/mysql/mysql-bin</p><p>server-id=1</p></blockquote><p> 创建日志目录并赋予权限：</p><blockquote><p>shell&gt; mkdir  /var/log/mysql</p><p>shell&gt; chown mysql.mysql /var/log/mysql</p></blockquote><p> 重启服务</p><blockquote><p>shell&gt; systemctl restart mysqld</p></blockquote><p> <strong>注意：</strong><br> 如果省略server-id（或将其显式设置为默认值0），则主服务器拒绝来自从服务器的任何连接。</p><p> 为了在使用带有事务的InnoDB进行赋值设置时尽可能提高持久性和一致性。</p><p> 可以在master my.cnf文件中使用以下配置项：</p><blockquote><p>innodb_flush_log_at_trx_commit = 1</p><p>sync_binlog = 1</p></blockquote><p> 确保在主服务器上<code>skip_networking</code>选项处于OFF关闭状态，这是默认值。如果是启用的，则从站无法与主站通信，并且复制失败。</p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like '%skip_networking%';</span><br><span class="line">+-----------------+-------+</span><br><span class="line">| Variable_name   | Value |</span><br><span class="line">+-----------------+-------+</span><br><span class="line">| skip_networking | OFF   |</span><br><span class="line">+-----------------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></tbody></table></figure></li><li><p>应该创建一个专门用于复制数据的用户</p><p> 每个从服务器需要使用MySQL主服务器上的用户名和密码连接到主站。</p><p> 例如：计划使用用户<code>rep1</code>�务器上的用户名和密码连接到主站。</p><p> 例如：计划使用用户<code>rep1</code></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库基本操作</title>
      <link href="/2022/05/19/treasurebox/shu-ju-ku/mysql/1.shu-ju-ku-ji-ben-cao-zuo/"/>
      <url>/2022/05/19/treasurebox/shu-ju-ku/mysql/1.shu-ju-ku-ji-ben-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库基本语句"><a href="#数据库基本语句" class="headerlink" title="数据库基本语句"></a>数据库基本语句</h2><h3 id="一、基本命令"><a href="#一、基本命令" class="headerlink" title="一、基本命令"></a>一、基本命令</h3><ol><li><p>启动服务</p><p> 说明：以管理员身份运行cmd    </p><p> 格式：net start  服务名称    </p><p> 示例：net start  mysql</p></li><li><p>停止服务</p><p> 说明：以管理员身份运行cmd</p><p> 格式：net  stop   服务名称</p><p> 示例：net  stop   mysql</p></li><li><p>连接数据</p><p> 格式：mysql  -hlocalhost  -u用户名  -p  -P3306</p><p> 示例：mysql -u root -p</p><p> 输入密码</p></li><li><p>退出登录（断开连接）</p><p> 格式：quit  或  exit;</p></li><li><p>查看版本</p><p> 示例：select version();</p></li><li><p>显示当前时间（连接后可以执行）</p><p> 示例：select now();</p></li><li><p>远程连接</p><p> 格式：mysql -h ip地址 -u 用户名 -p -P3306</p><p> 输入密码</p></li><li><p>常见的字段约束</p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Unsigned       无符号  一般给数值型的字段添加，如果添加代表当前字段只能存正数</span><br><span class="line">Int(5)         5代表显示的宽度  如果是有符号默认是11 如果是无符号默认10</span><br><span class="line">Not null       不能为空 默认字段可以为空 如果添加了 那么此字段不能为空</span><br><span class="line">Default         默认值</span><br><span class="line">Primary key     主键约束(主键索引) 不能为空 且唯一 用于表示数据的唯一标识</span><br><span class="line">Unique          唯一约束(唯一索引) 可以为空 不能重复 具有唯一性Auto_increment  自动递增  一般配合主键去使用</span><br></pre></td></tr></tbody></table></figure></li><li><p>常见的字段类型</p><ol><li><p>整数类型</p><table><thead><tr><th>类型</th><th>大小</th><th>范围（有符号）</th><th>范围（无符号）</th><th>用途</th></tr></thead><tbody><tr><td>TINYINT</td><td>1 byte</td><td>(-128，127)</td><td>(0，255)</td><td>小整数值</td></tr><tr><td>SMALLINT</td><td>2 bytes</td><td>(-32 768，32 767)</td><td>(0，65 535)</td><td>大整数值</td></tr><tr><td>MEDIUMINT</td><td>3 bytes</td><td>(-8 388 608，8 388 607)</td><td>(0，16 777 215)</td><td>大整数值</td></tr><tr><td>INT或INTEGER</td><td>4 bytes</td><td>(-2 147 483 648，2 147 483 647)</td><td>(0，4 294 967 295)</td><td>大整数值</td></tr><tr><td>BIGINT</td><td>8 bytes</td><td>(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td><td>(0，18 446 744 073 709 551 615)</td><td>极大整数值</td></tr><tr><td>FLOAT</td><td>4 bytes</td><td>(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td><td>0，(1.175 494 351 E-38，3.402 823 466 E+38)</td><td>单精度 浮点数值</td></tr><tr><td>DOUBLE</td><td>8 bytes</td><td>(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td>0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td>双精度 浮点数值</td></tr><tr><td>DECIMAL</td><td>对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td><td>依赖于M和D的值</td><td>依赖于M和D的值</td><td>小数值</td></tr></tbody></table></li><li><p>日期和时间类型</p><p>表示时间值的日期和时间类型为DATETIME、DATE、TIMESTAMP、TIME和YEAR。</p><p>每个时间类型有一个有效值范围和一个”零”值，当指定不合法的MySQL不能表示的值时使用”零”值。</p><p>TIMESTAMP类型有专有的自动更新特性。</p><table><thead><tr><th>类型</th><th>大小 ( bytes)</th><th>范围</th><th>格式</th><th>用途</th></tr></thead><tbody><tr><td>DATE</td><td>3</td><td>1000-01-01/9999-12-31</td><td>YYYY-MM-DD</td><td>日期值</td></tr><tr><td>TIME</td><td>3</td><td>‘-838:59:59’/‘838:59:59’</td><td>HH:MM:SS</td><td>时间值或持续时间</td></tr><tr><td>YEAR</td><td>1</td><td>1901/2155</td><td>YYYY</td><td>年份值</td></tr><tr><td>DATETIME</td><td>8</td><td>1000-01-01 00:00:00/9999-12-31 23:59:59</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值</td></tr><tr><td>TIMESTAMP</td><td>4</td><td>1970-01-01 00:00:00/2038结束时间是第 <strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19 11:14:07</strong>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td><td>YYYYMMDD HHMMSS</td><td>混合日期和时间值，时间戳</td></tr></tbody></table></li><li><p>字符串类型</p><p>字符串类型指CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM和SET。</p><table><thead><tr><th>类型</th><th>大小</th><th>用途</th></tr></thead><tbody><tr><td>CHAR</td><td>0-255 bytes</td><td>定长字符串</td></tr><tr><td>VARCHAR</td><td>0-65535 bytes</td><td>变长字符串</td></tr><tr><td>TINYBLOB</td><td>0-255 bytes</td><td>不超过 255 个字符的二进制字符串</td></tr><tr><td>TINYTEXT</td><td>0-255 bytes</td><td>短文本字符串</td></tr><tr><td>BLOB</td><td>0-65 535 bytes</td><td>二进制形式的长文本数据</td></tr><tr><td>TEXT</td><td>0-65 535 bytes</td><td>长文本数据</td></tr><tr><td>MEDIUMBLOB</td><td>0-16 777 215 bytes</td><td>二进制形式的中等长度文本数据</td></tr><tr><td>MEDIUMTEXT</td><td>0-16 777 215 bytes</td><td>中等长度文本数据</td></tr><tr><td>LONGBLOB</td><td>0-4 294 967 295 bytes</td><td>二进制形式的极大文本数据</td></tr><tr><td>LONGTEXT</td><td>0-4 294 967 295 bytes</td><td>极大文本数据</td></tr></tbody></table><p><strong>注意</strong>：char(n) 和 varchar(n) 中括号中 n 代表字符的个数，并不代表字节个数，比如 CHAR(30) 就可以存储 30 个字符。</p><p>CHAR 和 VARCHAR 类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。</p><p>BINARY 和 VARBINARY 类似于 CHAR 和 VARCHAR，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。</p><p>BLOB 是一个二进制大对象，可以容纳可变数量的数据。有 4 种 BLOB 类型：TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB。它们区别在于可容纳存储范围不同。</p><p>有 4 种 TEXT 类型：TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT。对应的这 4 种 BLOB 类型，可存储的最大长度不同，可根据实际情况选择。</p></li></ol></li></ol><h3 id="二、库操作（数据库操作必须以英文分号（；）结束）"><a href="#二、库操作（数据库操作必须以英文分号（；）结束）" class="headerlink" title="二、库操作（数据库操作必须以英文分号（；）结束）"></a>二、库操作（数据库操作必须以英文分号（；）结束）</h3><ol><li>查看有哪些数据库：show databases;</li><li>创建数据库：create database 库名;</li><li>进入数据库：use 库名;</li><li>查看当前使用的数据库：select database()</li><li>删除数据库：drop database 库名;</li></ol><h3 id="三、表操作"><a href="#三、表操作" class="headerlink" title="三、表操作"></a>三、表操作</h3><ol><li><p>查看库中所有的表：show tables；</p></li><li><p>创建表：</p><p> 格式：create table 表名（字段及类型）;</p><p> 注意：表名如果是关键字如show需要加反引号``</p></li><li><p>删除表：drop table 表名;</p></li><li><p>查看表结构：desc 表名;</p></li><li><p>查看建表语句：show create table 表名;</p></li><li><p>重命名表名：</p><p> 1、rename table 表名1 to 表名2;</p><p> 2、alter table 表名1 rename as 表名2;</p></li><li><p>修改表</p><p> alter table 表名 add、drop、change、modify 字段名 类型;</p><p> 添加字段：alter table users add gender int after name;</p><p> ​(可以使用after，不能使用before，first代表插入在第一个)</p><p> 添加外键：alter table users add foreign key(c_id) references class(id);</p><p> 删除字段：alter table user drop gender;</p><p> 修改字段名称：alter table user change gender sex char(1);</p><p> 修改字段类型：alter table user modify sex int(1);</p></li><li><p>修改表的编码格式</p><p> alter table students CHARSET=GBK;</p></li><li><p>修改自增值</p><p> 修改自增值为20</p><p> alter table students AUTO_INCREMENT=20;</p></li></ol><h3 id="四、数据操作"><a href="#四、数据操作" class="headerlink" title="四、数据操作"></a>四、数据操作</h3><ol><li><p>增：</p><p> a、全列插入：insert into 表名 values();</p><p> b、缺省插入：insert into 表名(字段1,字段2) values (值1，值2);</p><p> c、同时插入多条数据：insert into 表名 values(……),(……),(……);</p><p> d、将一张表查询结果插入另一张表，此时不需要加values：</p><p> insert into shop(name,address) select name,address from sqlorm.shops;</p></li><li><p>删：</p><p> a、删除某条数据</p><p> delete from 表名 where 条件;(不写条件时会删掉所有数据，条件一般用主键)</p></li><li><p>改</p><p> a、修改数据</p><p> update 表名 set name=’zhangsan’ where id =1;</p><p> UPDATE 表名 SET text=REPLACE(text, ‘oldvalue’, ‘newValue’);</p></li><li><p>查</p><p> a、查询表中全部数据：</p><p> select * from 表名</p></li></ol><p>​</p><p>d =1;</p><pre><code>UPDATE 表名 SET text=REPLACE(text, 'oldvalue', 'newValue');</code></pre><ol start="4"><li><p>查</p><p> a、查询表中全部数据：</p><p> select * from 表名</p></li></ol><p>​</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>配置文件说明</title>
      <link href="/2022/05/19/treasurebox/shu-ju-ku/mysql/11.pei-zhi-wen-jian-shuo-ming/"/>
      <url>/2022/05/19/treasurebox/shu-ju-ku/mysql/11.pei-zhi-wen-jian-shuo-ming/</url>
      
        <content type="html"><![CDATA[<h2 id="mysql配置文件说明"><a href="#mysql配置文件说明" class="headerlink" title="mysql配置文件说明"></a>mysql配置文件说明</h2><p>ubuntu中配置文件默认路径：/etc/mysql/my.cnf</p><p>可以通过配置文件对mysql进行一些基础配置。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line"></span><br><span class="line">port = 3306</span><br><span class="line">socket = /tmp/mysql.sock</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line">#Mysql服务的唯一编号 每个mysql服务Id需唯一</span><br><span class="line">server-id = 1</span><br><span class="line"></span><br><span class="line">#服务端口号 默认3306</span><br><span class="line">port = 3306</span><br><span class="line"></span><br><span class="line">#mysql安装根目录</span><br><span class="line">basedir = /usr/local/mysql</span><br><span class="line"></span><br><span class="line">#mysql数据文件所在位置</span><br><span class="line">datadir = /usr/local/mysql/data</span><br><span class="line"></span><br><span class="line">#临时目录</span><br><span class="line">tmpdir  = /tmp</span><br><span class="line"></span><br><span class="line">#设置socke文件所在目录</span><br><span class="line">socket = /tmp/mysql.sock</span><br><span class="line"></span><br><span class="line">#主要用于MyISAM存储引擎,如果多台服务器连接一个数据库则建议注释下面内容</span><br><span class="line">skip-external-locking</span><br><span class="line"></span><br><span class="line">#只能用IP地址检查客户端的登录，不用主机名</span><br><span class="line">skip_name_resolve = 1</span><br><span class="line"></span><br><span class="line">#事务隔离级别，默认为可重复读，mysql默认可重复读级别（此级别下可能参数很多间隙锁，影响性能）</span><br><span class="line">transaction_isolation = READ-COMMITTED</span><br><span class="line"></span><br><span class="line">#数据库默认字符集,主流字符集支持一些特殊表情符号（特殊表情符占用4个字节）</span><br><span class="line">character-set-server = utf8mb4</span><br><span class="line"></span><br><span class="line">#数据库字符集对应一些排序等规则，注意要和character-set-server对应</span><br><span class="line">collation-server = utf8mb4_general_ci</span><br><span class="line"></span><br><span class="line">#设置client连接mysql时的字符集,防止乱码</span><br><span class="line">init_connect='SET NAMES utf8mb4'</span><br><span class="line"></span><br><span class="line">#是否对sql语句大小写敏感，1表示不敏感</span><br><span class="line">lower_case_table_names = 1</span><br><span class="line"></span><br><span class="line">#最大连接数</span><br><span class="line">max_connections = 400</span><br><span class="line"></span><br><span class="line">#最大错误连接数</span><br><span class="line">max_connect_errors = 1000</span><br><span class="line"></span><br><span class="line">#TIMESTAMP如果没有显示声明NOT NULL，允许NULL值</span><br><span class="line">explicit_defaults_for_timestamp = true</span><br><span class="line"></span><br><span class="line">#SQL数据包发送的大小，如果有BLOB对象建议修改成1G</span><br><span class="line">max_allowed_packet = 128M</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#MySQL连接闲置超过一定时间后(单位：秒)将会被强行关闭</span><br><span class="line">#MySQL默认的wait_timeout  值为8个小时, interactive_timeout参数需要同时配置才能生效</span><br><span class="line">interactive_timeout = 1800</span><br><span class="line">wait_timeout = 1800</span><br><span class="line"></span><br><span class="line">#内部内存临时表的最大值 ，设置成128M。</span><br><span class="line">#比如大数据量的group by ,order by时可能用到临时表，</span><br><span class="line">#超过了这个值将写入磁盘，系统IO压力增大</span><br><span class="line">tmp_table_size = 134217728</span><br><span class="line">max_heap_table_size = 134217728</span><br><span class="line"></span><br><span class="line">#禁用mysql的缓存查询结果集功能</span><br><span class="line">#后期根据业务情况测试决定是否开启</span><br><span class="line">#大部分情况下关闭下面两项</span><br><span class="line">query_cache_size = 0</span><br><span class="line">query_cache_type = 0</span><br><span class="line"></span><br><span class="line">#数据库错误日志文件</span><br><span class="line">log_error = error.log</span><br><span class="line"></span><br><span class="line">#慢查询sql日志设置</span><br><span class="line">slow_query_log = 1</span><br><span class="line">slow_query_log_file = slow.log</span><br><span class="line"></span><br><span class="line">#检查未使用到索引的sql</span><br><span class="line">log_queries_not_using_indexes = 1</span><br><span class="line"></span><br><span class="line">#针对log_queries_not_using_indexes开启后，记录慢sql的频次、每分钟记录的条数</span><br><span class="line">log_throttle_queries_not_using_indexes = 5</span><br><span class="line"></span><br><span class="line">#作为从库时生效,从库复制中如何有慢sql也将被记录</span><br><span class="line">log_slow_slave_statements = 1</span><br><span class="line"></span><br><span class="line">#慢查询执行的秒数，必须达到此值可被记录</span><br><span class="line">long_query_time = 8</span><br><span class="line"></span><br><span class="line">#检索的行数必须达到此值才可被记为慢查询</span><br><span class="line">min_examined_row_limit = 100</span><br><span class="line"></span><br><span class="line">#mysql binlog日志文件保存的过期时间，过期后自动删除</span><br><span class="line">expire_logs_days = 5</span><br><span class="line">```�保存的过期时间，过期后自动删除</span><br><span class="line">expire_logs_days = 5</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>查询</title>
      <link href="/2022/05/19/treasurebox/shu-ju-ku/mysql/2.cha-xun/"/>
      <url>/2022/05/19/treasurebox/shu-ju-ku/mysql/2.cha-xun/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库查询"><a href="#数据库查询" class="headerlink" title="数据库查询"></a>数据库查询</h2><ol><li><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><p> 格式：select * from 表名;</p><p> 说明：select 后跟要查询的内容(字段名)，*代表查询全部，from代表数据来源于哪张表</p><p> 示例：select name,id from student;</p></li><li><h4 id="消除重复行"><a href="#消除重复行" class="headerlink" title="消除重复行"></a>消除重复行</h4><p> 在select跟字段之间使用distinct可以消除重复的行。</p><p> 示例：select distinct name from student;</p></li><li><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><p> a、语法：select * from 表名 where 条件;</p><p> b、比较运算符：+，-，*，、，=，！=，&lt;,&gt;,%</p><p> ​示例：select * from 表名 where id&lt;18；</p><p> c、逻辑运算符</p><p> ​and  并且select * from student where id&gt;7 and gender=0;</p><p> ​or 或者select * from student where id&gt;7 or gender=0;</p><p> ​ 说明：只要满足任意条件都会匹配出来</p><p> ​not       不是select * from student where id&gt;7 not gender;</p><p> d、模糊查询</p><p> ​示例：select * from student where name llike ‘%a%’;(只要包含a就会匹配出来)</p><p> ​说明：%代表包括空白在内的任意字符，_代表一个字符</p><p> e、范围查询</p><p> ​in  在select * from student where id in (1,3,4);</p><p> ​not in   不在select * from student where id not in (1,3,4);</p><p> ​between  and select * from student where id between 6 and 8;</p><p> f、空判断</p><p> ​insert into student(name,age) values(‘小明’,70);</p><p> ​说明：null 与’’不同</p><p> ​select * from student where address is null;(或者is not)</p><p> g、优先级</p><p> ​小括号,not比较运算符，逻辑运算符</p><p> ​and 比 or 优先级高，如果同时出现并希望先选or，需要结合()使用</p></li><li><h4 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h4><p> a、count(*)表示计算总行数，括号中可以写**和字段</p><p> b、max(字段) 表示求此列的最大值</p><p> c、min(字段)   表示求此列的最小值</p><p> d、sum(字段)  表示求此列的和</p><p> e、avg(字段)表示求此列的和</p><p> select max(age) from student where gender=’0’;</p></li><li><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><p> 按照字段分组，表示此字段相同的数据会被放到一个集合中。</p><p> 分组后，只能查询相同的数据列，对于有差异的数据列无法显示在结果集中，可以对分组数据进行统计，做聚合运算。</p><p> 语法：select 列1,列2,聚合…… from 表  group by 列1,列2,……</p><p> 示例：查询男女生总数</p><p> select gender,count(*) from student group by gender;</p><p> 分组后的数据筛选：</p><p> select 列1,列2,聚合……  from 表 group by having 列1，列2，……,聚合…… having 条件</p><p> 示例：select gender,count(*) from student group by gender having gender=0;</p><p> <strong>where和having的区别：</strong></p><p> where是对from后面指定的表进行筛选，属于对原始表的筛选</p><p> having是对group by的结果进行筛选</p><p> 示例：select id,name from teachers where name in (select name from teachers group by names having count(name)&gt;1);</p></li><li><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p> 语法：select * from 表名 order by 列1 asc| desc,列2 asc|desc;</p><p> 说明：将数据按照列1进行排序，如果某些列1的值相同，那么按照列2排序</p><p> ​默认按照升序排列，asc降序，desc降序</p></li><li><h4 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h4><p> 语法：select * from 表名 limit x,y;</p><p> 说明：从第x+1行开始，查询y行内容</p></li></ol><p>lect * from 表名 limit x,y;</p><pre><code>说明：从第x+1行开始，查询y行内容</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关联查询</title>
      <link href="/2022/05/19/treasurebox/shu-ju-ku/mysql/3.guan-lian-cha-xun/"/>
      <url>/2022/05/19/treasurebox/shu-ju-ku/mysql/3.guan-lian-cha-xun/</url>
      
        <content type="html"><![CDATA[<h2 id="关联查询"><a href="#关联查询" class="headerlink" title="关联查询"></a>关联查询</h2><h4 id="一、外键："><a href="#一、外键：" class="headerlink" title="一、外键："></a>一、外键：</h4><p>外键主要用来描述表和表的一对多关系</p><p>全称：外键约束，添加完外键会给字段默认添加普通索引</p><p>作用：保证数据的完整性和准确性。</p><p>逻辑外键：逻辑上存在的关系，并没有真实的关系，在插入和删除数据时没有影响。</p><p>物理外键：在建表时设置约束关系，在插入和删除数据时会相互影响。</p><h4 id="二、建表语句："><a href="#二、建表语句：" class="headerlink" title="二、建表语句："></a>二、建表语句：</h4><ol><li>create table class(id int auto_increment primary key,name varchar(22) not null default ‘’,stuNum int not null);</li><li>create table students(id int auto_increment primary key,name varchar(22) not null default ‘’,gender bit default 1,pid int not null,foreign key(pid) references class(id));</li></ol><p>示例：select students.name,class.name,class.id from class inner join students on class.id=student.pid;</p><p>分类：</p><h5 id="1、表A-inner-join-表B：内连接交集查询"><a href="#1、表A-inner-join-表B：内连接交集查询" class="headerlink" title="1、表A inner join 表B：内连接交集查询"></a>1、表A inner join 表B：内连接交集查询</h5><p>​表A与表B匹配的行会出现在结果集中</p><p>​select * from 表1inner join 表2  on表1.外键字段=表2.</p><p>主键字段;</p><h5 id="2、表Aleftjoin表B，左连接"><a href="#2、表Aleftjoin表B，左连接" class="headerlink" title="2、表Aleftjoin表B，左连接"></a>2、表Aleftjoin表B，左连接</h5><p>​表A与表B匹配的行会出现在结果集中，外加表A独有的数据，未对应的数据使用null填充</p><h5 id="3、表Arightjoin表B："><a href="#3、表Arightjoin表B：" class="headerlink" title="3、表Arightjoin表B："></a>3、表Arightjoin表B：</h5><p>​表A与表B匹配的行会出现在结果集中，外加表B独有的数据，未对应的数据使用null填充</p><p>填充</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库备份</title>
      <link href="/2022/05/19/treasurebox/shu-ju-ku/mysql/4.shu-ju-ku-bei-fen/"/>
      <url>/2022/05/19/treasurebox/shu-ju-ku/mysql/4.shu-ju-ku-bei-fen/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库备份"><a href="#数据库备份" class="headerlink" title="数据库备份"></a>数据库备份</h2><p> 1、先退出mysql环境</p><h4 id="数据的导出："><a href="#数据的导出：" class="headerlink" title="数据的导出："></a>数据的导出：</h4><p>​备份表：默认导出在当前路径</p><p>​注意：使用mysql可以导表，但是导库时必须使用mysqldump</p><p>​示例：mysqldump -uroot -proot test major&gt;./Desktop/major.sql</p><p>​备份库：</p><p>​格式：mysqldump-uroot -p 库名&gt;路径/name.sql</p><p>​示例：mysqldump  -uroot  -p 库名&gt;备份文件名.sql</p><h4 id="数据的导入："><a href="#数据的导入：" class="headerlink" title="数据的导入："></a><strong>数据的导入：</strong></h4><p>​mysql  -uroot  -p 库名 &lt; 备份文件地址.sql </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>权限管理</title>
      <link href="/2022/05/19/treasurebox/shu-ju-ku/mysql/5.quan-xian-guan-li/"/>
      <url>/2022/05/19/treasurebox/shu-ju-ku/mysql/5.quan-xian-guan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><p><strong>用户</strong>：使用者</p><p><strong>权限</strong>：用户的操作范围</p><p><strong>组</strong>：权限集合</p><p>一个组里面有查询权限、删除权限等</p><h4 id="1、修改密码"><a href="#1、修改密码" class="headerlink" title="1、修改密码"></a>1、修改密码</h4><p>​首先进入数据库：<code>use mysql;</code></p><p>​修改密码：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update user set  authentication_string=password('root') where host='localhost' and user='root';</span><br></pre></td></tr></tbody></table></figure><p>​忘记密码时，在配置文件中加：skip-grant-tables，即可跳过密码验证，登陆之后修改密码重启mysql服务。</p><p>​修改完密码之后退出数据库环境，然后重启数据库服务即可更新密码。在5.n数据库版本的密码加密函数为password。8.0版本数据库加密方式有所改变。</p><h4 id="2、创建用户"><a href="#2、创建用户" class="headerlink" title="2、创建用户"></a>2、创建用户</h4><p>​格式：create user ‘用户名‘@’来源地’ identified by ‘密码’;</p><h5 id="1、创建只有本地能登录的用户"><a href="#1、创建只有本地能登录的用户" class="headerlink" title="1、创建只有本地能登录的用户"></a>1、创建只有本地能登录的用户</h5><p>​create user ‘zhangsan‘@’localhost’ identified by ‘123456’;</p><h5 id="2、创建只能指定ip登录的用户"><a href="#2、创建只能指定ip登录的用户" class="headerlink" title="2、创建只能指定ip登录的用户"></a>2、创建只能指定ip登录的用户</h5><p>​create user ‘lisi‘@’10.10.11.12’ identified by ‘123456’;</p><h5 id="3、给用户授权允许远程连接"><a href="#3、给用户授权允许远程连接" class="headerlink" title="3、给用户授权允许远程连接"></a>3、给用户授权允许远程连接</h5><p>格式：grant 权限 on 库名.表名 to 用户名@’地址’;</p><p>权限分类：</p><p>select,insert,update,delete,create</p><p>示例：给wangwu用户添加查询权限</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant select on test.major to wangwu@'localhost';</span><br></pre></td></tr></tbody></table></figure><p>创建不限ip访问的xiaoliu用户，添加所有权限</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user 'xiaoliu'@'%' identified by '123456' grant all on *.* to xiaoliu@'%';</span><br></pre></td></tr></tbody></table></figure><h5 id="4、删除用户"><a href="#4、删除用户" class="headerlink" title="4、删除用户"></a>4、删除用户</h5><p>​drop user “用户名”@”来源地”;</p><p>er “用户名”@”来源地”;</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>NoSQL和关系型数据库</title>
      <link href="/2022/05/19/treasurebox/shu-ju-ku/nosql-he-guan-xi-xing-shu-ju-ku/"/>
      <url>/2022/05/19/treasurebox/shu-ju-ku/nosql-he-guan-xi-xing-shu-ju-ku/</url>
      
        <content type="html"><![CDATA[<h2 id="NoSQL和关系型数据区别"><a href="#NoSQL和关系型数据区别" class="headerlink" title="NoSQL和关系型数据区别"></a>NoSQL和关系型数据区别</h2><p>[TOC]</p><p>NoSQL(NoSQL=Not Only SQL)，意为不仅仅是SQL。</p><p>在现在计算机系统上每天都会产生庞大数据量，这些数据很大一部分是由关系型数据库管理系统(RDMBSs)来处理。1970年E.F.Codd’s提出关系模型论文，通过应用实践证明，关系型是非常适合于客户服务器编程，远远超出预期的利益，今天它是结构化数据存储在网络和商务应用的主导技术。</p><p>NoSQL是一项全新的数据库革命性运动早期就有人提出，发展至</p><p>2009年趋势越发高涨。NoSQL维护者们提倡运用芬关系型的数据存储，相对于铺天盖地的关系型数据库运用，这一概念是一种全新的思维注入。</p><h3 id="一、关系型数据库遵循ACID规则"><a href="#一、关系型数据库遵循ACID规则" class="headerlink" title="一、关系型数据库遵循ACID规则"></a>一、关系型数据库遵循ACID规则</h3><p>事务在英文中是transaction，和现实世界中的交易类似，具有如下四个特性：</p><h5 id="1、A-Atomicty-原子性"><a href="#1、A-Atomicty-原子性" class="headerlink" title="1、A(Atomicty)原子性"></a>1、A(Atomicty)原子性</h5><p>原子性很容易理解，也就是说事务里的所有操作要么全部做完，要么都不做，事务成功的条件是事务里的所有操作都成功，只要有一个操作失败，整个事务就失败，需要回滚。</p><p>比如银行转账，从A账户转100元至B账户，分为两个步骤：1）从A账户取100元；2）存入100元至B账户。这两步要么一起完成，要么一起不完成，如果只完成第一步，第二步失败，钱会莫名其妙少了100元。</p><h4 id="2、C-Consistency-一致性"><a href="#2、C-Consistency-一致性" class="headerlink" title="2、C (Consistency) 一致性"></a>2、C (Consistency) 一致性</h4><p>一致性也比较容易理解，也就是说数据库要一直处于一致的状态，事务的运行不会改变数据库原本的一致性约束。</p><p>例如现有完整性约束a+b=10，如果一个事务改变了a，那么必须得改变b，使得事务结束后依然满足a+b=10，否则事务失败。</p><h4 id="3、I-Isolation-独立性"><a href="#3、I-Isolation-独立性" class="headerlink" title="3、I (Isolation) 独立性"></a>3、I (Isolation) 独立性</h4><p>所谓的独立性是指并发的事务之间不会互相影响，如果一个事务要访问的数据正在被另外一个事务修改，只要另外一个事务未提交，它所访问的数据就不受未提交事务的影响。<br>比如现有有个交易是从A账户转100元至B账户，在这个交易还未完成的情况下，如果此时B查询自己的账户，是看不到新增加的100元的。</p><h4 id="4、D-Durability-持久性"><a href="#4、D-Durability-持久性" class="headerlink" title="4、D (Durability) 持久性"></a>4、D (Durability) 持久性</h4><p>持久性是指一旦事务提交后，它所做的修改将会永久的保存在数据库上，即使出现宕机也不会丢失。</p><h3 id="二、分布式系统"><a href="#二、分布式系统" class="headerlink" title="二、分布式系统"></a>二、分布式系统</h3><p>分布式系统(distributed system)由多台计算机和通信的软件组件通过计算机网络连接(本地网络或广域网)组成。</p><p>分布式系统是建立在网络智商的软件系统。正是因为软件的特性，所以分布式系统具有高度的内聚性和透明性。</p><p>因此，网络和分布式系统之间的区别更多在于高层软件（特别是操作系统），而不是硬件。</p><p>分布式系统可以应用在不同的平台上如：PC、工作站，局域网和广域网等。</p><h3 id="三、分布式计算的优点"><a href="#三、分布式计算的优点" class="headerlink" title="三、分布式计算的优点"></a>三、分布式计算的优点</h3><h4 id="1、可靠性（容错）："><a href="#1、可靠性（容错）：" class="headerlink" title="1、可靠性（容错）："></a>1、可靠性（容错）：</h4><p>分布式计算系统中的一个重要的优点是可靠性，一台服务器的系统崩溃并不影响到其余服务器。</p><h4 id="2、可扩展性："><a href="#2、可扩展性：" class="headerlink" title="2、可扩展性："></a>2、可扩展性：</h4><p>在分布式计算系统可以根据需要增加更多的机器。</p><h4 id="3、资源共享："><a href="#3、资源共享：" class="headerlink" title="3、资源共享："></a>3、资源共享：</h4><p>共享数据是必不可少的应用，如银行，预订系统等。</p><h4 id="4、灵活性："><a href="#4、灵活性：" class="headerlink" title="4、灵活性："></a>4、灵活性：</h4><p>由于系统是非常灵活的，很容易安装、实施和调试新的服务。</p><h4 id="5、更快的速度："><a href="#5、更快的速度：" class="headerlink" title="5、更快的速度："></a>5、更快的速度：</h4><p>分布式计算系统可以有多个计算机的计算能力，使得它比其他系统有更快的处理速度。</p><h4 id="6、开放系统："><a href="#6、开放系统：" class="headerlink" title="6、开放系统："></a>6、开放系统：</h4><p>由于它是开放的系统，本地或者远程都可以访问到该服务。</p><h4 id="7、更高的性能："><a href="#7、更高的性能：" class="headerlink" title="7、更高的性能："></a>7、更高的性能：</h4><p>相较于集中式计算机网络集群可以提供更高的性能（及更好的性价比）。</p><h3 id="四、分布式计算的缺点"><a href="#四、分布式计算的缺点" class="headerlink" title="四、分布式计算的缺点"></a>四、分布式计算的缺点</h3><h4 id="1、故障排除"><a href="#1、故障排除" class="headerlink" title="1、故障排除"></a>1、故障排除</h4><p>故障排除和诊断比较困难</p><h4 id="2、软件"><a href="#2、软件" class="headerlink" title="2、软件"></a>2、软件</h4><p>更少的软件支持是分布式计算系统的主要缺点</p><h4 id="3、网络"><a href="#3、网络" class="headerlink" title="3、网络"></a>3、网络</h4><p>网路基础设施的问题，包括：传输问题，高负载，信息丢失等。</p><h4 id="4、安全性"><a href="#4、安全性" class="headerlink" title="4、安全性"></a>4、安全性</h4><p>开发系统的特性让分布式计算系统存在着数据的安全性和共享的风险等问题</p><h3 id="五、什么是NoSQL？"><a href="#五、什么是NoSQL？" class="headerlink" title="五、什么是NoSQL？"></a>五、什么是NoSQL？</h3><p>NoSQL值得是非关系型数据库。NoSQL有时也被称作Not Only SQL的缩写，是对不同于传统的关系数据库管理系统的统称。</p><p>NoSQL用于超大规模数据的存储。（例如谷歌或者Facebook每天为他们的用户手机万亿比特的数据）。这些类型的数据存储不需要固定的模式，无需多余操作就可以横向扩展。</p><h3 id="六、为什么使用NoSQL？"><a href="#六、为什么使用NoSQL？" class="headerlink" title="六、为什么使用NoSQL？"></a>六、为什么使用NoSQL？</h3><p>当今我们可以通过第三方平台（如google，facebook等）可以很容易的访问和抓取数据。用户的个人信息，社交网络，地理位置，用户生成的数据和用户操作日志已经成倍的增加。我们如果要对这些用户数据进行挖掘，那SQL数据库已经不适合这些应用了，NOSQL数据库的发展也能很好的处理这些大的数据。</p><h3 id="七、RDBMS-vs-NoSQL"><a href="#七、RDBMS-vs-NoSQL" class="headerlink" title="七、RDBMS vs NoSQL"></a>七、RDBMS vs NoSQL</h3><h4 id="RDBMS（Relational-Database-Management-System）"><a href="#RDBMS（Relational-Database-Management-System）" class="headerlink" title="RDBMS（Relational Database Management System）"></a>RDBMS（Relational Database Management System）</h4><p>指关系型数据库管理系统。</p><ul><li>高度组织化结构化数据</li><li>结构化查询语言（SQL）（SQL）</li><li>数据和关系都存储在单独的表中</li><li>数据操纵语言，数据定义语言</li><li>严格的一致性</li><li>基础事务</li></ul><h4 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h4><ul><li>代表着不仅仅是SQL</li><li>没有声明性查询语言</li><li>没有预定义的模式</li><li>键—值对存储，列存储，文档存储，图形数据库</li><li>最终一致性，而非ACID属性</li><li>非结构化和不可预知的数据</li><li>CAP定理</li><li>高性能，高可用性和可伸缩性</li></ul><h3 id="八、NoSQL简史"><a href="#八、NoSQL简史" class="headerlink" title="八、NoSQL简史"></a>八、NoSQL简史</h3><p>NoSQL一词最早出现于1998年，是Carlo Strozzi开发的一个轻量、开源、不提供SQL功能的关系数据库。</p><p>2009年，Last.fm的Johan Oskarsson发起了一次关于分布式开源数据库的讨论[2]，来自Rackspace的Eric Evans再次提出了NoSQL的概念，这时的NoSQL主要指非关系型、分布式、不提供ACID的数据库设计模式。</p><p>2009年在亚特兰大举行的”no:sql(east)”讨论会是一个里程碑，其口号是”select fun, profit from real_world where relational=false”。因此，对NoSQL最普遍的解释是“非关联型的”，强调Key-Value Stores和文档数据库的优点，而不是单纯的反对RDBMS。</p><h3 id="九、CAP定理-CAP-theorem"><a href="#九、CAP定理-CAP-theorem" class="headerlink" title="九、CAP定理(CAP theorem)"></a>九、CAP定理(CAP theorem)</h3><p>在计算机科学中，CAP定理（CAP theorem），又被称为布鲁尔定理（Brewer’stheorem），它支出对于一个分布式计算机系统来说，不可能同时满足以下三点：</p><ul><li>**一致性(Consistency)**：所有节点在相同时间具有相同的数据。</li><li>**可用性(Availability)**：保证每个轻取不管成功或者失败都有响应。</li><li>**分隔容忍(Partition tolerance)**：系统中任意信息的丢失或失败不会影响系统的继续运作。</li></ul><h3 id="十、NoSQL的优点-x2F-缺点"><a href="#十、NoSQL的优点-x2F-缺点" class="headerlink" title="十、NoSQL的优点/缺点"></a>十、NoSQL的优点/缺点</h3><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><ul><li>高可扩展性</li><li>分布式计算</li><li>低成本</li><li>架构的灵活性，半结构化数据</li><li>没有复杂的关系</li></ul><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><ul><li>没有标准化</li><li>有限的查询功能(到目前为止)</li><li>最终一致是不直观的程序</li></ul><h3 id="十一、BASE"><a href="#十一、BASE" class="headerlink" title="十一、BASE"></a>十一、BASE</h3><p>BASE：Basically Available, Soft-state, Eventually Consistent。 由 Eric Brewer 定义。</p><p>CAP理论的核心是：一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求，最多只能同时较好的满足两个。</p><p>BASE是NoSQL数据库通常对可用性及一致性的弱要求原则：</p><ul><li>Basically Avaible——基本可用</li><li>Soft-state——软状态/柔性事务。”Soft state”可以理解为无连接的。而”Hard state”是面向连接的</li><li>Eventual Consistency——最终一致性，也是ACID的最终目的。</li></ul><h3 id="十二、ACID-vs-BASE"><a href="#十二、ACID-vs-BASE" class="headerlink" title="十二、ACID vs BASE"></a>十二、ACID vs BASE</h3><table><thead><tr><th>ACID</th><th>BASE</th></tr></thead><tbody><tr><td>原子性(<strong>A</strong>tomicity)</td><td>基本可用(<strong>B</strong>asically <strong>A</strong>vailable)</td></tr><tr><td>一致性(<strong>C</strong>onsistency)</td><td>软状态/柔性事务(<strong>S</strong>oft state)</td></tr><tr><td>隔离性(<strong>I</strong>solation)</td><td>最终一致性(<strong>E</strong>ventual consistency)</td></tr><tr><td>持久性(<strong>D</strong>urable)</td><td></td></tr></tbody></table><h3 id="十三、NoSQL数据库分类"><a href="#十三、NoSQL数据库分类" class="headerlink" title="十三、NoSQL数据库分类"></a>十三、NoSQL数据库分类</h3><table><thead><tr><th>类型</th><th>部分代表</th><th>特点</th></tr></thead><tbody><tr><td>列存储</td><td>Hbase<br>Cassandra<br>Hypertable</td><td>按列存储数据。最大的特点是方便存储结构化和半结构化数据，方便做数据压缩，对针对某一列或者某几列的查询有非常大的IO优势。</td></tr><tr><td>文档存储</td><td>MongoDB<br>CouchDB</td><td>文档存储一般用类似json的格式存储，存储的内容是文档型的。这样也就有机会</td></tr><tr><td>key-value存储</td><td>Tokyo Cabinet/Tyrant<br>Berkeley DB<br>MemcacheDB<br>Redis</td><td>可以通过key快速查询到其value。一般来说，存储不管value格式，照单全收。（Redis包含了其他功能）</td></tr><tr><td>图存储</td><td>Neo4J<br>FlockDB</td><td>图形关系的最佳存储。使用传统关系数据库来解决的话性能低下，而且设计使用不方便。</td></tr><tr><td>对象存储</td><td>db4o<br>Versant</td><td>通过类似面向对象的语言的语法操作数据库，通过对象的方式存取数据。</td></tr><tr><td>xml数据库</td><td>Berkeley DB XML<br>BaseX</td><td>高效的存储XML数据，并支持XML的内部查询语法，比如XQuery，Xpath。</td></tr></tbody></table><pre><code>                              | 高效的存储XML数据，并支持XML的内部查询语法，比如XQuery，Xpath。 |</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL高阶</title>
      <link href="/2022/05/19/treasurebox/shu-ju-ku/mysql/10.mysql-gao-jie/"/>
      <url>/2022/05/19/treasurebox/shu-ju-ku/mysql/10.mysql-gao-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL高阶—事务、触发器、存储过程"><a href="#MySQL高阶—事务、触发器、存储过程" class="headerlink" title="MySQL高阶—事务、触发器、存储过程"></a>MySQL高阶—事务、触发器、存储过程</h2><h3 id="一、数据库事务"><a href="#一、数据库事务" class="headerlink" title="一、数据库事务"></a>一、数据库事务</h3><h4 id="（1）数据库中的事务有四大特性：ACID"><a href="#（1）数据库中的事务有四大特性：ACID" class="headerlink" title="（1）数据库中的事务有四大特性：ACID"></a>（1）<strong>数据库中的事务有四大特性：ACID</strong></h4><ul><li><strong>原子性</strong>：每个事务都是不可分割的执行，要么全部成功，要么全部失败。</li><li><strong>一致性</strong>：事务执行之前和执行之后的状态保持一致。比如A有1000元，B有1000元，A给B转账500元之后，A与B的钱数之和应该还是2000元。</li><li><strong>隔离性</strong>：多个事务同时操作，每个事务之间相互独立，互不影响。</li><li><strong>持久性</strong>：事务提交成功后对数据库的改变是永久的。</li></ul><h4 id="（2）数据库三范式"><a href="#（2）数据库三范式" class="headerlink" title="（2）数据库三范式"></a>（2）<strong>数据库三范式</strong></h4><p>​数据库的范式(规范的数据表示公式)：按照什么方式在数据库中表示（存储）是完全合理是做不到的，只能在数据库设计过程中尽量靠近三范式约束。</p><ul><li><p><strong>1NF</strong>：字段不可分割</p><p>  数据库中的每一列数据，是不能再拆分的。</p></li><li><p><strong>2NF</strong>：有主键，非主键字段依赖主键。</p><p>  数据库中的每一条数据都是唯一的，主键作为数据唯一的描述符。</p></li><li><p><strong>3NF</strong>：非关键字的任何字段属性，不能产生相互的依赖条件</p><p>  不是主键的任何其他字段，不能产生相互的依赖关系。</p></li></ul><h4 id="（3）事务的隔离级别"><a href="#（3）事务的隔离级别" class="headerlink" title="（3）事务的隔离级别"></a>（3）事务的隔离级别</h4><p>​事务的隔离级别，指多个事务同时操作数据库时，不同事务之间应该怎么定义他们的操作。</p><ul><li><p><strong>读未提交：read uncommitted</strong></p><p>  一个事务中，读取了另一个事务中没有提交的数据，两个事务之间造成了影响。</p></li><li><p><strong>读已提交：read committed</strong></p><p>  一个事务中，读取了另一个事务中提交的数据。</p></li><li><p><strong>可重复读：repeat read</strong></p><p>  在一次完整的事务中，每次读取的数据都是一致的，不会发生变化，所有提交的更新的数据都会在下一个事务中读取到。数据库默认的隔离级别</p></li><li><p><strong>串行化/序列化：serializerable</strong></p><p>  所有的事务操作全部排队，依次执行</p></li></ul><h3 id="二、触发器"><a href="#二、触发器" class="headerlink" title="二、触发器"></a>二、触发器</h3><p>数据库中提供了特殊的处理方法：自动化操作，本质上是当数据库中发生了一些行为之后，导致一些其他的行为自动触发，类似python开发中的事件驱动开发。</p><p>数据库中提供了一种数据库高级对象：触发器；描述的是数据表上一个条件被触发执行的后续行为操作。</p><h4 id="①-触发器语法："><a href="#①-触发器语法：" class="headerlink" title="① 触发器语法："></a>① 触发器语法：</h4><p>create trigger trigger_name trigger_time trigger_event on table_name for each row trigger_stmt end;</p><p>描述：在某张表上，发生了一个触发事件，在触发事件发生之前|之后(触发时机)，执行触发器中定义的要执行的程序。</p><p><strong>trigger_time：触发时机，before|after</strong></p><p><strong>trigger_event：触发事件,insert|update|delete</strong></p><h4 id="②触发器案例：自动下单功能"><a href="#②触发器案例：自动下单功能" class="headerlink" title="②触发器案例：自动下单功能"></a><strong>②触发器案例</strong>：自动下单功能</h4><ul><li><p>创建测试数据表</p>  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> goods(</span><br><span class="line">  gid <span class="type">int</span> auto_increment <span class="keyword">primary</span> key comment <span class="string">'商品主键'</span>,</span><br><span class="line">  gname <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">'商品名称'</span>,</span><br><span class="line">  gprice <span class="keyword">double</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">'商品单价'</span>,</span><br><span class="line">  gstock <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">'商品库存'</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> goods_order(</span><br><span class="line">goid <span class="type">int</span> auto_increment <span class="keyword">primary</span> key comment <span class="string">'订单编号'</span>,</span><br><span class="line">    goname <span class="type">varchar</span>(<span class="number">20</span>) comment <span class="string">'购买商品名称'</span>,</span><br><span class="line">    goprice <span class="keyword">double</span> comment <span class="string">'成交单价'</span>,</span><br><span class="line">    gocount <span class="type">int</span> comment <span class="string">'购买数量'</span>,</span><br><span class="line">    subtotal <span class="keyword">double</span> comment <span class="string">'小计金额'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p>创建触发器</p>  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line"><span class="comment">-- 创建一个触发器</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> goods_sale_auto</span><br><span class="line"><span class="comment">-- 在goods表格修改之后执行触发器</span></span><br><span class="line">after <span class="keyword">update</span> <span class="keyword">on</span> goods <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="comment">-- 要执行的程序开始操作</span></span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line"><span class="comment">-- 声明两个变量</span></span><br><span class="line"><span class="keyword">declare</span> buycount <span class="type">int</span>;</span><br><span class="line"><span class="keyword">declare</span> subtotal <span class="keyword">double</span>;</span><br><span class="line"><span class="comment">-- 判断库存是否更新：更新前old，更新后new</span></span><br><span class="line">if new.gstock<span class="operator">&lt;</span>old.gstock</span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line"><span class="comment">--获取购买的数量</span></span><br><span class="line"><span class="keyword">set</span> buycount <span class="operator">=</span> old.gstock <span class="operator">-</span> new.gstock;</span><br><span class="line"><span class="keyword">set</span> subtotal <span class="operator">=</span> buycount <span class="operator">*</span> <span class="keyword">old</span>,gprice;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> goods_order(gname,goprice,gcount,subtotal) <span class="keyword">values</span>(old.gname,<span class="keyword">old</span>,gprice,buycount,subtotal);</span><br><span class="line"><span class="keyword">end</span> if;</span><br><span class="line"><span class="comment">-- 要执行的程序完结操作</span></span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line">$$</span><br><span class="line">delimiter;  <span class="comment">--触发器创建完成后，修改结束符为默认的分号</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="三、存储过程"><a href="#三、存储过程" class="headerlink" title="三、存储过程"></a>三、存储过程</h3><p>​触发器是数据库中根据发生的条件(某张表上发生了INSERT/UPDATE/DELETE操作)自动执行的<strong>数据库程序</strong>，当我们需要自定义程序，并且手工调用时要怎么去做？</p><p>​数据库提供了另外一种高级对象：存储程序，一般称为存储过程，就是一个用户按照规范语法编写的程序代码，可以将项目中的业务逻辑封装在程序中，通过固定的语法方式直接调用执行，类似python中的函数。</p><h4 id="（1）基本语法结构"><a href="#（1）基本语法结构" class="headerlink" title="（1）基本语法结构"></a>（1）基本语法结构</h4><p>​创建存储过程</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc_name ([proc_parameters]) routing_body</span><br></pre></td></tr></tbody></table></figure><p>create procedure 固定语法：创建存储过程</p><p>proc_name：自定义存储过程名称</p><p>proc_parameters：存储过程执行需要的参数</p><p>routing_body：存储程序要执行的程序代码</p><h4 id="（2）案例"><a href="#（2）案例" class="headerlink" title="（2）案例"></a>（2）案例</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> employee_avg()</span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line"><span class="comment">-- 模拟一行或多行代码</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">AVG</span>(salary) <span class="keyword">from</span> ex01.employee</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line">$$</span><br><span class="line"><span class="comment">-- 调用存储过程</span></span><br><span class="line"><span class="keyword">call</span> employee_avg();</span><br></pre></td></tr></tbody></table></figure><h4 id="（3）带有返回值的存储过程"><a href="#（3）带有返回值的存储过程" class="headerlink" title="（3）带有返回值的存储过程"></a>（3）带有返回值的存储过程</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> my_employee2(<span class="keyword">out</span> res <span class="keyword">double</span>)</span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line"><span class="comment">-- 查询数据，并将数据保存到变量中</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">AVG</span>(salary) <span class="keyword">into</span> res <span class="keyword">from</span> ex01.employee</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line">$$</span><br><span class="line"><span class="comment">-- 调用存储过程</span></span><br><span class="line"><span class="keyword">call</span> my_employee2(<span class="variable">@res</span>);</span><br><span class="line"><span class="comment">--查看返回值的数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="variable">@res</span>;</span><br></pre></td></tr></tbody></table></figure><p>返回值声明在存储过程名称后面的括号：</p><p><strong>out：</strong>返回数据</p><p><strong>in：</strong>输入数据</p><p><strong>input：</strong>既是输入数据，同时也能返回数据</p><p>调用时，需要使用变量接受数据，为了跟其他变量区分，添加@符号：call mey_employee(@res);�，同时也能返回数据</p><p>调用时，需要使用变量接受数据，为了跟其他变量区分，添加@符号：call mey_employee(@res);</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>查询操作符</title>
      <link href="/2022/05/19/treasurebox/shu-ju-ku/mongodb/4.cha-xun-cao-zuo-fu/"/>
      <url>/2022/05/19/treasurebox/shu-ju-ku/mongodb/4.cha-xun-cao-zuo-fu/</url>
      
        <content type="html"><![CDATA[<h2 id="查询和计划操作符"><a href="#查询和计划操作符" class="headerlink" title="查询和计划操作符"></a>查询和计划操作符</h2><p>[TOC]</p><h3 id="一、评价查询操作符"><a href="#一、评价查询操作符" class="headerlink" title="一、评价查询操作符"></a>一、评价查询操作符</h3><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>$mod</td><td>取模计算</td></tr><tr><td>$regex</td><td>模糊查询，查询该字段包含某个字符串</td></tr><tr><td>$text</td><td>对有text索引的字段进行模糊查询</td></tr><tr><td>$where</td><td>使用js代码查询数据</td></tr></tbody></table><h5 id="1、使用-mod进行模运算查询"><a href="#1、使用-mod进行模运算查询" class="headerlink" title="1、使用$mod进行模运算查询"></a>1、使用<code>$mod</code>进行模运算查询</h5><p>c1的数据集如下：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c1.find()</span><br><span class="line">{ "_id" : ObjectId("5f97bb1a0436fe0f6dbb0526"), "age" : <span class="number">1</span>, "length" : <span class="number">30</span> }</span><br><span class="line">{ "_id" : ObjectId("5f97bb200436fe0f6dbb0527"), "age" : <span class="number">7</span>, "length" : <span class="number">30</span> }</span><br><span class="line">{ "_id" : ObjectId("5f97bb260436fe0f6dbb0528"), "age" : <span class="number">8</span>, "length" : <span class="number">30</span> }</span><br><span class="line">{ "_id" : ObjectId("5f97bb860436fe0f6dbb052a"), "age" : <span class="number">13</span>, "length" : <span class="number">30</span> }</span><br></pre></td></tr></tbody></table></figure><p>取年龄模6结果为1的数据</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c1.find({age:{$mod:[<span class="number">6</span>,<span class="number">1</span>]}})</span><br><span class="line">{ "_id" : ObjectId("5f97bb1a0436fe0f6dbb0526"), "age" : <span class="number">1</span>, "length" : <span class="number">30</span> }</span><br><span class="line">{ "_id" : ObjectId("5f97bb200436fe0f6dbb0527"), "age" : <span class="number">7</span>, "length" : <span class="number">30</span> }</span><br><span class="line">{ "_id" : ObjectId("5f97bb860436fe0f6dbb052a"), "age" : <span class="number">13</span>, "length" : <span class="number">30</span> }</span><br></pre></td></tr></tbody></table></figure><h5 id="2、使用-regex进行模糊查询"><a href="#2、使用-regex进行模糊查询" class="headerlink" title="2、使用$regex进行模糊查询"></a>2、使用<code>$regex</code>进行模糊查询</h5><p>c2的数据集如下：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c2.find() </span><br><span class="line">{ "_id" : ObjectId("5f97bc460436fe0f6dbb052b"), "name" : "小明", "age" : <span class="number">20</span> }</span><br><span class="line">{ "_id" : ObjectId("5f97bc4c0436fe0f6dbb052c"), "name" : "小刚", "age" : <span class="number">20</span> }</span><br><span class="line">{ "_id" : ObjectId("5f97bc570436fe0f6dbb052d"), "name" : "小明明", "age" : <span class="number">20</span> }</span><br><span class="line">{ "_id" : ObjectId("5f97bc5f0436fe0f6dbb052e"), "name" : "大明", "age" : <span class="number">20</span> }</span><br></pre></td></tr></tbody></table></figure><p>查name中包含“明”的数据：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c2.find({name:{"$regex":"明"}}))</span><br><span class="line">{ "_id" : ObjectId("5f97bc460436fe0f6dbb052b"), "name" : "小明", "age" : <span class="number">20</span> }</span><br><span class="line">{ "_id" : ObjectId("5f97bc570436fe0f6dbb052d"), "name" : "小明明", "age" : <span class="number">20</span> }</span><br><span class="line">{ "_id" : ObjectId("5f97bc5f0436fe0f6dbb052e"), "name" : "大明", "age" : <span class="number">20</span> }</span><br></pre></td></tr></tbody></table></figure><h5 id="3、使用-text对有text索引的字段进行模糊查询"><a href="#3、使用-text对有text索引的字段进行模糊查询" class="headerlink" title="3、使用$text对有text索引的字段进行模糊查询"></a>3、使用<code>$text</code>对有<code>text</code>索引的字段进行模糊查询</h5><p>先对c4添加索引：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c4.createIndex( { subject: "text" } )</span><br></pre></td></tr></tbody></table></figure><p>c4的数据集如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.c4.find( )</span><br><span class="line">{ "_id" : 1, "subject" : "hello world", "title" : "hello" }</span><br><span class="line">{ "_id" : 2, "subject" : "hello python", "title" : "python" }</span><br><span class="line">{ "_id" : 3, "subject" : "hello java", "title" : "java" }</span><br><span class="line">{ "_id" : 4, "subject" : "hello mongodb", "title" : "mongodb" }</span><br><span class="line">{ "_id" : 5, "subject" : "中文", "title" : "mongodb" }</span><br></pre></td></tr></tbody></table></figure><p>使用”<code>$text</code>“进行查询</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c4.find({"$text":{"$search":"world"}})</span><br><span class="line">{ "_id" : <span class="number">1</span>, "subject" : "hello world", "title" : "hello" }</span><br></pre></td></tr></tbody></table></figure><h5 id="4、使用-where进行查询"><a href="#4、使用-where进行查询" class="headerlink" title="4、使用$where进行查询"></a>4、使用<code>$where</code>进行查询</h5><p>c5的数据集如下：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c5.find()</span><br><span class="line">{ "_id" : ObjectId("5f98df8e4262ff84adb202d5"), "a" : { "a" : <span class="number">1</span> }, "b" : <span class="number">2</span>, "c" : <span class="number">3</span> }</span><br><span class="line">{ "_id" : ObjectId("5f98df9c4262ff84adb202d6"), "a" : { "a" : <span class="number">1</span>, "b" : "1" }, "b" : <span class="number">2</span>, "c" : <span class="number">3</span> }</span><br><span class="line">{ "_id" : ObjectId("5f98df9f4262ff84adb202d7"), "a" : { "a" : <span class="number">1</span>, "b" : "2" }, "b" : <span class="number">2</span>, "c" : <span class="number">3</span> }</span><br></pre></td></tr></tbody></table></figure><p>查询某条内嵌文档中<code>a</code>的值跟<code>b</code>的值相等的数据：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c5.find({$<span class="keyword">where</span>:"this.a.a==this.a.b"})</span><br><span class="line">{ "_id" : ObjectId("5f98df9c4262ff84adb202d6"), "a" : { "a" : <span class="number">1</span>, "b" : "1" }, "b" : <span class="number">2</span>, "c" : <span class="number">3</span> }</span><br></pre></td></tr></tbody></table></figure><h3 id="二、逻辑查询操作符"><a href="#二、逻辑查询操作符" class="headerlink" title="二、逻辑查询操作符"></a>二、逻辑查询操作符</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>$and</td><td>并且，两个条件同时成立</td></tr><tr><td>$nor</td><td>两个条件同时不成立</td></tr><tr><td>$not</td><td>不是某个值</td></tr><tr><td>$or</td><td>或者，两个条件只成立一个</td></tr></tbody></table><p>c6的数据集如下：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c6.find()</span><br><span class="line">{ "_id" : ObjectId("5f98e4217c6aa7043a43d2f8"), "subject" : "hello world", "title" : "hello" }</span><br><span class="line">{ "_id" : ObjectId("5f98e4297c6aa7043a43d2f9"), "subject" : "hello python", "title" : "hello" }</span><br><span class="line">{ "_id" : ObjectId("5f98e42e7c6aa7043a43d2fa"), "subject" : "hello java", "title" : "hello" }</span><br></pre></td></tr></tbody></table></figure><h5 id="1、使用-and进行查询"><a href="#1、使用-and进行查询" class="headerlink" title="1、使用$and进行查询"></a>1、使用<code>$and</code>进行查询</h5><p><strong>查询subject为hello java,title为hello的文档</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c6.find({$<span class="keyword">and</span>:[{"subject":"hello java"},{"title":"hello"}]})</span><br><span class="line">{ "_id" : ObjectId("5f98e42e7c6aa7043a43d2fa"), "subject" : "hello java", "title" : "hello" }</span><br></pre></td></tr></tbody></table></figure><h5 id="2、使用-nor进行查询"><a href="#2、使用-nor进行查询" class="headerlink" title="2、使用$nor进行查询"></a>2、使用<code>$nor</code>进行查询</h5><p><strong>查询subject不为hello java并且title不为hel的文档</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.c6.find({$nor:[{<span class="string">"subject"</span>:<span class="string">"hello java"</span>},{<span class="string">"title"</span>:<span class="string">"hel"</span>}]})</span><br><span class="line">{ <span class="string">"_id"</span> : ObjectId(<span class="string">"5f98e4217c6aa7043a43d2f8"</span>), <span class="string">"subject"</span> : <span class="string">"hello world"</span>, <span class="string">"title"</span> : <span class="string">"hello"</span> }</span><br><span class="line">{ <span class="string">"_id"</span> : ObjectId(<span class="string">"5f98e4297c6aa7043a43d2f9"</span>), <span class="string">"subject"</span> : <span class="string">"hello python"</span>, <span class="string">"title"</span> : <span class="string">"hello"</span> }</span><br></pre></td></tr></tbody></table></figure><h5 id="3、使用-not进行查询"><a href="#3、使用-not进行查询" class="headerlink" title="3、使用$not进行查询"></a>3、使用$not进行查询</h5><p><strong>查询b不小于2的值</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c5.find({b:{$<span class="keyword">not</span>:{$lt:<span class="number">2</span>}}})</span><br><span class="line">{ "_id" : ObjectId("5f98df8e4262ff84adb202d5"), "a" : { "a" : <span class="number">1</span> }, "b" : <span class="number">2</span>, "c" : <span class="number">3</span> }</span><br><span class="line">{ "_id" : ObjectId("5f98df9c4262ff84adb202d6"), "a" : { "a" : <span class="number">1</span>, "b" : "1" }, "b" : <span class="number">2</span>, "c" : <span class="number">3</span> }</span><br><span class="line">{ "_id" : ObjectId("5f98df9f4262ff84adb202d7"), "a" : { "a" : <span class="number">1</span>, "b" : "2" }, "b" : <span class="number">2</span>, "c" : <span class="number">3</span> }</span><br><span class="line">{ "_id" : ObjectId("5f98e0674262ff84adb202d8"), "a" : { "a" : <span class="number">1</span>, "b" : <span class="number">1</span> }, "b" : <span class="number">2</span>, "c" : <span class="number">3</span> }</span><br></pre></td></tr></tbody></table></figure><h5 id="4、使用-or进行查询"><a href="#4、使用-or进行查询" class="headerlink" title="4、使用$or进行查询"></a>4、使用$or进行查询</h5><p><strong>查询b为2或者c为4的值</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c5.find({$<span class="keyword">or</span>:[{b:<span class="number">2</span>},{c:<span class="number">4</span>}]})</span><br><span class="line">{ "_id" : ObjectId("5f98df8e4262ff84adb202d5"), "a" : { "a" : <span class="number">1</span> }, "b" : <span class="number">2</span>, "c" : <span class="number">3</span> }</span><br><span class="line">{ "_id" : ObjectId("5f98df9c4262ff84adb202d6"), "a" : { "a" : <span class="number">1</span>, "b" : "1" }, "b" : <span class="number">2</span>, "c" : <span class="number">3</span> }</span><br><span class="line">{ "_id" : ObjectId("5f98df9f4262ff84adb202d7"), "a" : { "a" : <span class="number">1</span>, "b" : "2" }, "b" : <span class="number">2</span>, "c" : <span class="number">3</span> }</span><br><span class="line">{ "_id" : ObjectId("5f98e0674262ff84adb202d8"), "a" : { "a" : <span class="number">1</span>, "b" : <span class="number">1</span> }, "b" : <span class="number">2</span>, "c" : <span class="number">3</span> }</span><br></pre></td></tr></tbody></table></figure><h3 id="三、比较查询操作符"><a href="#三、比较查询操作符" class="headerlink" title="三、比较查询操作符"></a>三、比较查询操作符</h3><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">$gt</td><td align="center">大于</td></tr><tr><td align="center">$gte</td><td align="center">大于等于</td></tr><tr><td align="center">$lt</td><td align="center">小于</td></tr><tr><td align="center">$lte</td><td align="center">小于等于</td></tr><tr><td align="center">$in</td><td align="center">在…之中</td></tr><tr><td align="center">$nin</td><td align="center">不在….之中</td></tr><tr><td align="center">$ne</td><td align="center">不等于</td></tr><tr><td align="center">$eq</td><td align="center">等于</td></tr></tbody></table><p>c7的数据集如下</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c7.find()</span><br><span class="line">{ "_id" : <span class="number">1</span>, "age" : <span class="number">20</span>, "length" : <span class="number">17</span> }</span><br><span class="line">{ "_id" : <span class="number">2</span>, "age" : <span class="number">23</span>, "length" : <span class="number">17</span> }</span><br><span class="line">{ "_id" : <span class="number">3</span>, "age" : <span class="number">24</span>, "length" : <span class="number">17</span> }</span><br><span class="line">{ "_id" : <span class="number">4</span>, "age" : <span class="number">19</span>, "length" : <span class="number">17</span> }</span><br></pre></td></tr></tbody></table></figure><h5 id="1、-gt查询年龄大于20的"><a href="#1、-gt查询年龄大于20的" class="headerlink" title="1、$gt查询年龄大于20的"></a>1、<code>$gt</code>查询年龄大于20的</h5><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c7.find({age:{$gt:<span class="number">20</span>}})</span><br><span class="line">{ "_id" : <span class="number">2</span>, "age" : <span class="number">23</span>, "length" : <span class="number">17</span> }</span><br><span class="line">{ "_id" : <span class="number">3</span>, "age" : <span class="number">24</span>, "length" : <span class="number">17</span> }</span><br></pre></td></tr></tbody></table></figure><h5 id="2、-gte查询年龄大于等于20的"><a href="#2、-gte查询年龄大于等于20的" class="headerlink" title="2、$gte查询年龄大于等于20的"></a>2、<code>$gte</code>查询年龄大于等于20的</h5><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c7.find({age:{$gte:<span class="number">20</span>}})</span><br><span class="line">{ "_id" : <span class="number">1</span>, "age" : <span class="number">20</span>, "length" : <span class="number">17</span> }</span><br><span class="line">{ "_id" : <span class="number">2</span>, "age" : <span class="number">23</span>, "length" : <span class="number">17</span> }</span><br><span class="line">{ "_id" : <span class="number">3</span>, "age" : <span class="number">24</span>, "length" : <span class="number">17</span> }</span><br></pre></td></tr></tbody></table></figure><h5 id="3、-lt查询年龄小于20的"><a href="#3、-lt查询年龄小于20的" class="headerlink" title="3、$lt查询年龄小于20的"></a>3、<code>$lt</code>查询年龄小于20的</h5><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c7.find({age:{$lt:<span class="number">20</span>}})</span><br><span class="line">{ "_id" : <span class="number">4</span>, "age" : <span class="number">19</span>, "length" : <span class="number">17</span> }</span><br></pre></td></tr></tbody></table></figure><h5 id="4、-lte查询年龄小于等于20的"><a href="#4、-lte查询年龄小于等于20的" class="headerlink" title="4、$lte查询年龄小于等于20的"></a>4、<code>$lte</code>查询年龄小于等于20的</h5><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c7.find({age:{$lte:<span class="number">20</span>}})</span><br><span class="line">{ "_id" : <span class="number">1</span>, "age" : <span class="number">20</span>, "length" : <span class="number">17</span> }</span><br><span class="line">{ "_id" : <span class="number">4</span>, "age" : <span class="number">19</span>, "length" : <span class="number">17</span> }</span><br></pre></td></tr></tbody></table></figure><h5 id="5、-in查询年龄在20-21-22之中的"><a href="#5、-in查询年龄在20-21-22之中的" class="headerlink" title="5、$in查询年龄在20,21,22之中的"></a>5、<code>$in</code>查询年龄在20,21,22之中的</h5><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c7.find({age:{$<span class="keyword">in</span>:[<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>]}})</span><br><span class="line">{ "_id" : <span class="number">1</span>, "age" : <span class="number">20</span>, "length" : <span class="number">17</span> }</span><br></pre></td></tr></tbody></table></figure><h5 id="6、-nin查询年龄不在20-21-22之中的"><a href="#6、-nin查询年龄不在20-21-22之中的" class="headerlink" title="6、$nin查询年龄不在20,21,22之中的"></a>6、<code>$nin</code>查询年龄不在20,21,22之中的</h5><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c7.find({age:{$nin:[<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>]}})</span><br><span class="line">{ "_id" : <span class="number">2</span>, "age" : <span class="number">23</span>, "length" : <span class="number">17</span> }</span><br><span class="line">{ "_id" : <span class="number">3</span>, "age" : <span class="number">24</span>, "length" : <span class="number">17</span> }</span><br><span class="line">{ "_id" : <span class="number">4</span>, "age" : <span class="number">19</span>, "length" : <span class="number">17</span> }</span><br></pre></td></tr></tbody></table></figure><h5 id="7、-ne查询年龄不等于20的"><a href="#7、-ne查询年龄不等于20的" class="headerlink" title="7、$ne查询年龄不等于20的"></a>7、<code>$ne</code>查询年龄不等于20的</h5><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c7.find({age:{$ne:<span class="number">20</span>}})</span><br><span class="line">{ "_id" : <span class="number">2</span>, "age" : <span class="number">23</span>, "length" : <span class="number">17</span> }</span><br><span class="line">{ "_id" : <span class="number">3</span>, "age" : <span class="number">24</span>, "length" : <span class="number">17</span> }</span><br><span class="line">{ "_id" : <span class="number">4</span>, "age" : <span class="number">19</span>, "length" : <span class="number">17</span> }</span><br></pre></td></tr></tbody></table></figure><h5 id="8、-eq查询年龄等于20的"><a href="#8、-eq查询年龄等于20的" class="headerlink" title="8、$eq查询年龄等于20的"></a>8、<code>$eq</code>查询年龄等于20的</h5><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c7.find({age:{$eq:<span class="number">20</span>}})</span><br><span class="line">{ "_id" : <span class="number">1</span>, "age" : <span class="number">20</span>, "length" : <span class="number">17</span> }</span><br></pre></td></tr></tbody></table></figure><h3 id="四、数组查询操作符"><a href="#四、数组查询操作符" class="headerlink" title="四、数组查询操作符"></a>四、数组查询操作符</h3><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>$all</code></td><td align="center">匹配数组中包含某个数组的所有数据</td></tr><tr><td align="center"><code>$size</code></td><td align="center">匹配数组长度为某个数的数据</td></tr><tr><td align="center"><code>$elemMatch</code></td><td align="center">查询数组中至少有一个元素满足所有指定条件的文档</td></tr><tr><td align="center">$slice</td><td align="center">对数组返回的值切片</td></tr></tbody></table><p>c8的数据集如下：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c8.find()</span><br><span class="line">{ "_id" : ObjectId("5f992b2b7c6aa7043a43d2fb"), "name" : "zs", "score" : [ <span class="number">10</span>, <span class="number">80</span>, <span class="number">90</span> ] }</span><br><span class="line">{ "_id" : ObjectId("5f992b347c6aa7043a43d2fc"), "name" : "yz", "score" : [ <span class="number">70</span>, <span class="number">80</span>, <span class="number">90</span> ] }</span><br><span class="line">{ "_id" : ObjectId("5f992b407c6aa7043a43d2fd"), "name" : "lh", "score" : [ <span class="number">70</span>, <span class="number">85</span>, <span class="number">92</span> ] }</span><br><span class="line">{ "_id" : ObjectId("5f992b497c6aa7043a43d2fe"), "name" : "llx", "score" : [ <span class="number">79</span>, <span class="number">85</span>, <span class="number">92</span> ] }</span><br><span class="line">{ "_id" : ObjectId("5f992e637c6aa7043a43d2ff"), "name" : "xm", "score" : [ <span class="number">79</span>, <span class="number">85</span> ] }</span><br></pre></td></tr></tbody></table></figure><h5 id="1、-all查询score包含-70-80-的数据"><a href="#1、-all查询score包含-70-80-的数据" class="headerlink" title="1、$all查询score包含[70,80]的数据"></a>1、<code>$all</code>查询score包含[70,80]的数据</h5><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c8.find({score:{$<span class="keyword">all</span>:[<span class="number">70</span>,<span class="number">80</span>]}})</span><br><span class="line">{ "_id" : ObjectId("5f992b347c6aa7043a43d2fc"), "name" : "yz", "score" : [ <span class="number">70</span>, <span class="number">80</span>, <span class="number">90</span> ] }</span><br></pre></td></tr></tbody></table></figure><h5 id="2、-size查询score长度为3数据"><a href="#2、-size查询score长度为3数据" class="headerlink" title="2、$size查询score长度为3数据"></a>2、<code>$size</code>查询score长度为3数据</h5><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c8.find({score:{$size:<span class="number">2</span>}})</span><br><span class="line">{ "_id" : ObjectId("5f992e637c6aa7043a43d2ff"), "name" : "xm", "score" : [ <span class="number">79</span>, <span class="number">85</span> ] }</span><br></pre></td></tr></tbody></table></figure><h5 id="3、-elemMatch查询数组中至少有一个元素满足所有指定条件的文档"><a href="#3、-elemMatch查询数组中至少有一个元素满足所有指定条件的文档" class="headerlink" title="3、$elemMatch查询数组中至少有一个元素满足所有指定条件的文档"></a>3、<code>$elemMatch</code>查询数组中至少有一个元素满足所有指定条件的文档</h5><p>查询score中至少有一个介于80和60之间</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c8.find({score:{$elemMatch:{$lt:<span class="number">80</span>,$gt:<span class="number">60</span>}}})</span><br><span class="line">{ "_id" : ObjectId("5f992b347c6aa7043a43d2fc"), "name" : "yz", "score" : [ <span class="number">70</span>, <span class="number">80</span>, <span class="number">90</span> ] }</span><br><span class="line">{ "_id" : ObjectId("5f992b407c6aa7043a43d2fd"), "name" : "lh", "score" : [ <span class="number">70</span>, <span class="number">85</span>, <span class="number">92</span> ] }</span><br><span class="line">{ "_id" : ObjectId("5f992b497c6aa7043a43d2fe"), "name" : "llx", "score" : [ <span class="number">79</span>, <span class="number">85</span>, <span class="number">92</span> ] }</span><br><span class="line">{ "_id" : ObjectId("5f992e637c6aa7043a43d2ff"), "name" : "xm", "score" : [ <span class="number">79</span>, <span class="number">85</span> ] }</span><br></pre></td></tr></tbody></table></figure><h5 id="4、查询数组第一个值为70的数据"><a href="#4、查询数组第一个值为70的数据" class="headerlink" title="4、查询数组第一个值为70的数据"></a>4、查询数组第一个值为70的数据</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.c8.find({"score.0":70})</span><br><span class="line">{ "_id" : ObjectId("5f992b347c6aa7043a43d2fc"), "name" : "yz", "score" : [ 70, 80, 90 ] }</span><br><span class="line">{ "_id" : ObjectId("5f992b407c6aa7043a43d2fd"), "name" : "lh", "score" : [ 70, 85, 92 ] }</span><br></pre></td></tr></tbody></table></figure><h3 id="五、元查询操作符"><a href="#五、元查询操作符" class="headerlink" title="五、元查询操作符"></a>五、元查询操作符</h3><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>$type</td><td>数据类型操作符</td></tr><tr><td>$exists</td><td>判断字段是否存在，1为存在，0为不存在</td></tr></tbody></table><h5 id="1、-type查询数据为某个类型的数据"><a href="#1、-type查询数据为某个类型的数据" class="headerlink" title="1、$type查询数据为某个类型的数据"></a>1、<code>$type</code>查询数据为某个类型的数据</h5><table><thead><tr><th align="center">类型</th><th align="center">数字</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">Double</td><td align="center">1</td><td align="center"></td></tr><tr><td align="center">String</td><td align="center">2</td><td align="center"></td></tr><tr><td align="center">Object</td><td align="center">3</td><td align="center"></td></tr><tr><td align="center">Array</td><td align="center">4</td><td align="center"></td></tr><tr><td align="center">Binary data</td><td align="center">5</td><td align="center"></td></tr><tr><td align="center">Undefined</td><td align="center">6</td><td align="center">已废弃。</td></tr><tr><td align="center">Object id</td><td align="center">7</td><td align="center"></td></tr><tr><td align="center">Boolean</td><td align="center">8</td><td align="center"></td></tr><tr><td align="center">Date</td><td align="center">9</td><td align="center"></td></tr><tr><td align="center">Null</td><td align="center">10</td><td align="center"></td></tr><tr><td align="center">Regular Expression</td><td align="center">11</td><td align="center"></td></tr><tr><td align="center">JavaScript</td><td align="center">13</td><td align="center"></td></tr><tr><td align="center">Symbol</td><td align="center">14</td><td align="center"></td></tr><tr><td align="center">JavaScript (with scope)</td><td align="center">15</td><td align="center"></td></tr><tr><td align="center">32-bit integer</td><td align="center">16</td><td align="center"></td></tr><tr><td align="center">Timestamp</td><td align="center">17</td><td align="center"></td></tr><tr><td align="center">64-bit integer</td><td align="center">18</td><td align="center"></td></tr><tr><td align="center">Min key</td><td align="center">255</td><td align="center">Query with <code>-1</code>。</td></tr><tr><td align="center">Max key</td><td align="center">127</td><td align="center"></td></tr></tbody></table><p>c9的数据集为：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c9.find()</span><br><span class="line">{ "_id" : ObjectId("5f993d7b7c6aa7043a43d300"), "name" : "zs", "age" : <span class="number">20</span> }</span><br><span class="line">{ "_id" : ObjectId("5f993d847c6aa7043a43d301"), "name" : "ls", "age" : "20" }</span><br><span class="line">{ "_id" : ObjectId("5f993e247c6aa7043a43d302"), "name" : "ww", "age" : <span class="number">20</span>, "score" : <span class="number">95</span> }</span><br></pre></td></tr></tbody></table></figure><p>查询age为字符串类型的数据</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c9.find({age:{"$type":<span class="number">2</span>}})</span><br><span class="line">{ "_id" : ObjectId("5f993d847c6aa7043a43d301"), "name" : "ls", "age" : "20" }</span><br></pre></td></tr></tbody></table></figure><h5 id="2、-exists查询某个字段存在的数据"><a href="#2、-exists查询某个字段存在的数据" class="headerlink" title="2、$exists查询某个字段存在的数据"></a>2、<code>$exists</code>查询某个字段存在的数据</h5><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c9.find({score:{$<span class="keyword">exists</span>:<span class="number">1</span>}})</span><br><span class="line">{ "_id" : ObjectId("5f993e247c6aa7043a43d302"), "name" : "ww", "age" : <span class="number">20</span>, "score" : <span class="number">95</span> }</span><br><span class="line"><span class="operator">&gt;</span> db.c9.find({score:{$<span class="keyword">exists</span>:<span class="number">0</span>}})</span><br><span class="line">{ "_id" : ObjectId("5f993d7b7c6aa7043a43d300"), "name" : "zs", "age" : <span class="number">20</span> }</span><br><span class="line">{ "_id" : ObjectId("5f993d847c6aa7043a43d301"), "name" : "ls", "age" : "20" }</span><br></pre></td></tr></tbody></table></figure><blockquote><p>db.c9.find({score:{$exists:1}})<br>{ “_id” : ObjectId(“5f993e247c6aa7043a43d302”), “name” : “ww”, “age” : 20, “score” : 95 }<br>db.c9.find({score:{$exists:0}})<br>{ “_id” : ObjectId(“5f993d7b7c6aa7043a43d300”), “name” : “zs”, “age” : 20 }<br>{ “_id” : ObjectId(“5f993d847c6aa7043a43d301”), “name” : “ls”, “age” : “20” }</p></blockquote><pre><code></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>更新操作符</title>
      <link href="/2022/05/19/treasurebox/shu-ju-ku/mongodb/5.geng-xin-cao-zuo-fu/"/>
      <url>/2022/05/19/treasurebox/shu-ju-ku/mongodb/5.geng-xin-cao-zuo-fu/</url>
      
        <content type="html"><![CDATA[<h2 id="更新操作符"><a href="#更新操作符" class="headerlink" title="更新操作符"></a>更新操作符</h2><p>[TOC]</p><h3 id="一、字段更新操作符"><a href="#一、字段更新操作符" class="headerlink" title="一、字段更新操作符"></a>一、字段更新操作符</h3><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">$mul   { $mul: { field: <number> } }</number></td><td align="center">把某个数字字段的值更新为n倍</td></tr><tr><td align="center">$max</td><td align="center">当要设置的值比原值大时才更新数据</td></tr><tr><td align="center">$min</td><td align="center">当要设置的值比原值小时才更新数据</td></tr><tr><td align="center">$set</td><td align="center">修改某几个字段的值</td></tr><tr><td align="center">$inc</td><td align="center">对一个数字字段的某个field增加value</td></tr><tr><td align="center">$rename</td><td align="center">字段重命名</td></tr><tr><td align="center">$unset</td><td align="center">删除字段</td></tr><tr><td align="center">$setOnInsert</td><td align="center">更新操作插入新的数据时setOnInsert的值才会插入</td></tr><tr><td align="center">$currentDate</td><td align="center">修改数据时，将时间字段的值赋值为当前时间</td></tr></tbody></table><p>c10的数据集为：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c10.find()</span><br><span class="line">{ "_id" : ObjectId("5f99425f7c6aa7043a43d303"), "name" : "zs", "age" : <span class="number">20</span> }</span><br><span class="line">{ "_id" : ObjectId("5f99431b7c6aa7043a43d304"), "name" : "lisi", "age" : <span class="number">20</span> }</span><br></pre></td></tr></tbody></table></figure><h5 id="1、-mul-将name为zs的年龄乘以2"><a href="#1、-mul-将name为zs的年龄乘以2" class="headerlink" title="1、$mul 将name为zs的年龄乘以2"></a>1、<code>$mul</code> 将name为zs的年龄乘以2</h5><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c10.update({name:"zs"},{$mul:{age:<span class="number">2</span>}})</span><br><span class="line">WriteResult({ "nMatched" : <span class="number">1</span>, "nUpserted" : <span class="number">0</span>, "nModified" : <span class="number">1</span> })</span><br><span class="line"><span class="operator">&gt;</span> db.c10.find()</span><br><span class="line">{ "_id" : ObjectId("5f99425f7c6aa7043a43d303"), "name" : "zs", "age" : <span class="number">20</span> }</span><br><span class="line"><span class="operator">&gt;</span> db.c10.insert({"name":"lisi",age:<span class="number">20</span>})</span><br></pre></td></tr></tbody></table></figure><h4 id="2、-max当要设置的值比原来数据大时才更新数据"><a href="#2、-max当要设置的值比原来数据大时才更新数据" class="headerlink" title="2、$max当要设置的值比原来数据大时才更新数据"></a>2、<code>$max</code>当要设置的值比原来数据大时才更新数据</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c10.update({name:"zs"},{$max:{age:<span class="number">30</span>}})</span><br><span class="line">WriteResult({ "nMatched" : <span class="number">1</span>, "nUpserted" : <span class="number">0</span>, "nModified" : <span class="number">1</span> })</span><br><span class="line"><span class="operator">&gt;</span> db.c10.find()</span><br><span class="line">{ "_id" : ObjectId("5f99425f7c6aa7043a43d303"), "name" : "zs", "age" : <span class="number">30</span> }</span><br><span class="line">{ "_id" : ObjectId("5f99431b7c6aa7043a43d304"), "name" : "lisi", "age" : <span class="number">20</span> }</span><br><span class="line"><span class="operator">&gt;</span> db.c10.update({name:"zs"},{$max:{age:<span class="number">10</span>}})</span><br><span class="line">WriteResult({ "nMatched" : <span class="number">1</span>, "nUpserted" : <span class="number">0</span>, "nModified" : <span class="number">0</span> })</span><br><span class="line"><span class="operator">&gt;</span> db.c10.find()</span><br><span class="line">{ "_id" : ObjectId("5f99425f7c6aa7043a43d303"), "name" : "zs", "age" : <span class="number">30</span> }</span><br><span class="line">{ "_id" : ObjectId("5f99431b7c6aa7043a43d304"), "name" : "lisi", "age" : <span class="number">20</span> }</span><br></pre></td></tr></tbody></table></figure><h4 id="3、-min当要设置的值比原来的数据小时才更新数据"><a href="#3、-min当要设置的值比原来的数据小时才更新数据" class="headerlink" title="3、$min当要设置的值比原来的数据小时才更新数据"></a>3、<code>$min</code>当要设置的值比原来的数据小时才更新数据</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c10.update({name:"lisi"},{$min:{age:<span class="number">10</span>}})</span><br><span class="line">WriteResult({ "nMatched" : <span class="number">1</span>, "nUpserted" : <span class="number">0</span>, "nModified" : <span class="number">1</span> })</span><br><span class="line"><span class="operator">&gt;</span> db.c10.find()</span><br><span class="line">{ "_id" : ObjectId("5f99425f7c6aa7043a43d303"), "name" : "zs", "age" : <span class="number">30</span> }</span><br><span class="line">{ "_id" : ObjectId("5f99431b7c6aa7043a43d304"), "name" : "lisi", "age" : <span class="number">10</span> }</span><br></pre></td></tr></tbody></table></figure><h4 id="4、-set设置某一个字段的值"><a href="#4、-set设置某一个字段的值" class="headerlink" title="4、$set设置某一个字段的值"></a>4、<code>$set</code>设置某一个字段的值</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c10.update({name:"lisi"},{$<span class="keyword">set</span>:{age:<span class="number">20</span>,gender:<span class="number">1</span>}})</span><br><span class="line">WriteResult({ "nMatched" : <span class="number">1</span>, "nUpserted" : <span class="number">0</span>, "nModified" : <span class="number">1</span> })</span><br><span class="line"><span class="operator">&gt;</span> db.c10.find()</span><br><span class="line">{ "_id" : ObjectId("5f99425f7c6aa7043a43d303"), "name" : "zs", "age" : <span class="number">30</span> }</span><br><span class="line">{ "_id" : ObjectId("5f99431b7c6aa7043a43d304"), "name" : "lisi", "age" : <span class="number">20</span>, "gender" : <span class="number">1</span> }</span><br></pre></td></tr></tbody></table></figure><h4 id="5、-inc将某个数字字段增加某个值"><a href="#5、-inc将某个数字字段增加某个值" class="headerlink" title="5、$inc将某个数字字段增加某个值"></a>5、<code>$inc</code>将某个数字字段增加某个值</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c10.update({name:"lisi"},{$inc:{age:<span class="number">1</span>}})</span><br><span class="line">WriteResult({ "nMatched" : <span class="number">1</span>, "nUpserted" : <span class="number">0</span>, "nModified" : <span class="number">1</span> })</span><br><span class="line"><span class="operator">&gt;</span> db.c10.find()</span><br><span class="line">{ "_id" : ObjectId("5f99425f7c6aa7043a43d303"), "name" : "zs", "age" : <span class="number">30</span> }</span><br><span class="line">{ "_id" : ObjectId("5f99431b7c6aa7043a43d304"), "name" : "lisi", "age" : <span class="number">21</span>, "gender" : <span class="number">1</span> }</span><br></pre></td></tr></tbody></table></figure><h4 id="6、-rename将字段重命名"><a href="#6、-rename将字段重命名" class="headerlink" title="6、$rename将字段重命名"></a>6、<code>$rename</code>将字段重命名</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c10.update({name:"lisi"},{$rename:{gender:"sex"}})</span><br><span class="line">WriteResult({ "nMatched" : <span class="number">1</span>, "nUpserted" : <span class="number">0</span>, "nModified" : <span class="number">1</span> })</span><br><span class="line"><span class="operator">&gt;</span> db.c10.find()</span><br><span class="line">{ "_id" : ObjectId("5f99425f7c6aa7043a43d303"), "name" : "zs", "age" : <span class="number">30</span> }</span><br><span class="line">{ "_id" : ObjectId("5f99431b7c6aa7043a43d304"), "name" : "lisi", "age" : <span class="number">21</span>, "sex" : <span class="number">1</span> }</span><br></pre></td></tr></tbody></table></figure><h4 id="7、-unset删除字段"><a href="#7、-unset删除字段" class="headerlink" title="7、$unset删除字段"></a>7、<code>$unset</code>删除字段</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c10.update({name:"lisi"},{$unset:{age:<span class="number">0</span>}})</span><br><span class="line">WriteResult({ "nMatched" : <span class="number">1</span>, "nUpserted" : <span class="number">0</span>, "nModified" : <span class="number">1</span> })</span><br><span class="line"><span class="operator">&gt;</span> db.c10.find()</span><br><span class="line">{ "_id" : ObjectId("5f99425f7c6aa7043a43d303"), "name" : "zs", "age" : <span class="number">30</span> }</span><br><span class="line">{ "_id" : ObjectId("5f99431b7c6aa7043a43d304"), "name" : "lisi"}</span><br></pre></td></tr></tbody></table></figure><h4 id="8、-setOnInsert当更新操作插入数据时才会插入-setOnInsert的值"><a href="#8、-setOnInsert当更新操作插入数据时才会插入-setOnInsert的值" class="headerlink" title="8、$setOnInsert当更新操作插入数据时才会插入$setOnInsert的值"></a>8、$setOnInsert当更新操作插入数据时才会插入$setOnInsert的值</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c10.update({name:"lisi"},{$<span class="keyword">set</span>:{item:<span class="number">0</span>},$setOnInsert:{<span class="keyword">default</span>:<span class="number">10</span>}},{upsert:<span class="literal">true</span>})</span><br><span class="line">WriteResult({ "nMatched" : <span class="number">1</span>, "nUpserted" : <span class="number">0</span>, "nModified" : <span class="number">1</span> })</span><br><span class="line"><span class="operator">&gt;</span> db.c10.find()</span><br><span class="line">{ "_id" : ObjectId("5f99425f7c6aa7043a43d303"), "name" : "zs", "age" : <span class="number">30</span> }</span><br><span class="line">{ "_id" : ObjectId("5f99431b7c6aa7043a43d304"), "name" : "lisi", "item" : <span class="number">0</span> }</span><br><span class="line"><span class="operator">&gt;</span> db.c10.update({name:"wangwu"},{$<span class="keyword">set</span>:{item:<span class="number">0</span>},$setOnInsert:{<span class="keyword">default</span>:<span class="number">10</span>}},{upsert:<span class="literal">true</span>})</span><br><span class="line">WriteResult({</span><br><span class="line">        "nMatched" : <span class="number">0</span>,</span><br><span class="line">        "nUpserted" : <span class="number">1</span>,</span><br><span class="line">        "nModified" : <span class="number">0</span>,</span><br><span class="line">        "_id" : ObjectId("5f9a2725a17f7147cf7941cd")</span><br><span class="line">})</span><br><span class="line"><span class="operator">&gt;</span> db.c10.find()</span><br><span class="line">{ "_id" : ObjectId("5f99425f7c6aa7043a43d303"), "name" : "zs", "age" : <span class="number">30</span> }</span><br><span class="line">{ "_id" : ObjectId("5f99431b7c6aa7043a43d304"), "name" : "lisi", "item" : <span class="number">0</span> }</span><br><span class="line">{ "_id" : ObjectId("5f9a2725a17f7147cf7941cd"), "name" : "wangwu", "item" : <span class="number">0</span>, "default" : <span class="number">10</span> }</span><br></pre></td></tr></tbody></table></figure><h4 id="9、-currentDate当更新数据时把某个时间字段赋值为当前时间"><a href="#9、-currentDate当更新数据时把某个时间字段赋值为当前时间" class="headerlink" title="9、$currentDate当更新数据时把某个时间字段赋值为当前时间"></a>9、<code>$currentDate</code>当更新数据时把某个时间字段赋值为当前时间</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.customers.insertOne(</span><br><span class="line">...    { _id: <span class="number">1</span>, status: "a", lastModified: ISODate("2013-10-02T01:11:18.965Z") }</span><br><span class="line">... )</span><br><span class="line">{ "acknowledged" : <span class="literal">true</span>, "insertedId" : <span class="number">1</span> }</span><br><span class="line"><span class="operator">&gt;</span> db.customers.find()</span><br><span class="line">{ "_id" : <span class="number">1</span>, "status" : "a", "lastModified" : ISODate("2013-10-02T01:11:18.965Z") }</span><br><span class="line"><span class="operator">&gt;</span> db.customers.updateOne(</span><br><span class="line">...    { _id: <span class="number">1</span> },</span><br><span class="line">...    {</span><br><span class="line">...      $currentDate: {</span><br><span class="line">...         lastModified: <span class="literal">true</span>,</span><br><span class="line">...         "cancellation.date": { $type: "timestamp" }</span><br><span class="line">...      },</span><br><span class="line">...      $<span class="keyword">set</span>: {</span><br><span class="line">...         "cancellation.reason": "user request",</span><br><span class="line">...         status: "D"</span><br><span class="line">...      }</span><br><span class="line">...    }</span><br><span class="line">... )</span><br><span class="line">{ "acknowledged" : <span class="literal">true</span>, "matchedCount" : <span class="number">1</span>, "modifiedCount" : <span class="number">1</span> }</span><br><span class="line"><span class="operator">&gt;</span> db.customers.find()</span><br><span class="line">{ "_id" : <span class="number">1</span>, "status" : "D", "lastModified" : ISODate("2020-10-29T02:28:09.052Z"), "cancellation" : { "date" : <span class="type">Timestamp</span>(<span class="number">1603938489</span>, <span class="number">1</span>), "reason" : "user request" } }</span><br></pre></td></tr></tbody></table></figure><h3 id="二、数组更新操作符"><a href="#二、数组更新操作符" class="headerlink" title="二、数组更新操作符"></a>二、数组更新操作符</h3><table><thead><tr><th align="center">方法名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">$each</td><td align="center"></td></tr><tr><td align="center">$sort</td><td align="center"></td></tr><tr><td align="center">$position</td><td align="center"></td></tr><tr><td align="center">$pull</td><td align="center">从数组中删除一个等于value的值</td></tr><tr><td align="center">$push</td><td align="center">把value追加到field里</td></tr><tr><td align="center">$pushAll</td><td align="center">用法同$push一样，只是一次可以追加多个值到同一个数组中</td></tr><tr><td align="center">$addToSet</td><td align="center">加一个值到数组中，而且只有当这个值不在数组内才增加</td></tr><tr><td align="center">$pullAll</td><td align="center">用法同$pull一样，可以一次删除多个值</td></tr><tr><td align="center">$pop</td><td align="center">删除数组中的一个值</td></tr></tbody></table><p>ll一样，可以一次删除多个值          |<br>|   $pop    |                  删除数组中的一个值                   |</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>集合方法</title>
      <link href="/2022/05/19/treasurebox/shu-ju-ku/mongodb/6.ji-he-fang-fa/"/>
      <url>/2022/05/19/treasurebox/shu-ju-ku/mongodb/6.ji-he-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="集合方法"><a href="#集合方法" class="headerlink" title="集合方法"></a>集合方法</h2><table><thead><tr><th align="left">方法名</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/5.html">db.collection.aggregate()</a></td><td align="left">聚合，主要用于处理数据(诸如统计平均值,求和等)，并返回计算后的数据结果</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/6.html">db.collection.bulkWrite()</a></td><td align="left">批量写入</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/24.html">db.collection.createIndex()</a></td><td align="left">创建一个集合索引</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/7.html">db.collection.count()</a></td><td align="left">返回集合总数或匹配查询的结果集总数</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/26.html">db.collection.deleteOne()</a></td><td align="left">删除集合中的一个文档</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/27.html">db.collection.deleteMany()</a></td><td align="left">删除集合中的多个文档</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/25.html">db.collection.dataSize()</a></td><td align="left">返回集合的大小</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/28.html">db.collection.distinct()</a></td><td align="left">返回具有指定字段不同值的文档（去除指定字段的重复数据）</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/30.html">db.collection.dropIndex()</a></td><td align="left">删除一个集合中的指定索引</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/31.html">db.collection.dropIndexes()</a></td><td align="left">删除一个集合中的所有索引</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/29.html">db.collection.drop()</a></td><td align="left">删除当前数据库中的collection集合</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/33.html">db.collection.explain()</a></td><td align="left">返回各种方法的查询执行信息</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/32.html"><del>db.collection.ensureIndex()</del></a></td><td align="left">已过时，现使用<code>db.collection.createIndex()</code></td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/36.html">db.collection.findOne()</a></td><td align="left">查询单条数据</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/38.html">db.collection.findOneAndReplace()</a></td><td align="left">查询单条数据并替换</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/37.html">db.collection.findOneAndDelete()</a></td><td align="left">查询单条数据并删除</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/39.html">db.collection.findOneAndUpdate()</a></td><td align="left">查询单条数据并更新</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/34.html">db.collection.find()</a></td><td align="left">查询集合，无参数则查询所有，并返回一个游标对象</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/35.html">db.collection.findAndModify()</a></td><td align="left">查询并修改</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/40.html">db.collection.getIndexes()</a></td><td align="left">返回当前集合的所有索引数组</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/41.html">db.collection.group()</a></td><td align="left">提供简单的数据聚合功能</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/45.html">db.collection.isCapped()</a></td><td align="left">判断集合是否为定容量</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/42.html">db.collection.insert()</a></td><td align="left">在当前集合插入一条或多条数据（或叫文档）</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/44.html">db.collection.insertMany()</a></td><td align="left">在当前集合插入多条数据</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/43.html">db.collection.insertOne()</a></td><td align="left">在当前集合插入一条数据</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/46.html">db.collection.reIndex()</a></td><td align="left">重建当前集合的所有索引</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/49.html">db.collection.renameCollection()</a></td><td align="left">重命名集合名称</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/47.html">db.collection.replaceOne()</a></td><td align="left">替换集合中的一个文档（一条数据）</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/48.html">db.collection.remove()</a></td><td align="left">从当前集合删除数据</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/50.html">db.collection.save()</a></td><td align="left">已插入数据更新</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/51.html">db.collection.stats()</a></td><td align="left">返回当前集合的状态</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/52.html">db.collection.storageSize()</a></td><td align="left">返回当前集合已使用的空间大小</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/53.html">db.collection.totalSize()</a></td><td align="left">返回当前集合的总占用空间，包括所有文件和所有索引</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/54.html">db.collection.totalIndexSize()</a></td><td align="left">返回当前集合所有的索引所占用的空间大小</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/23.html">db.collection.updateMany()</a></td><td align="left">修改集合中的多条数据</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/55.html">db.collection.update()</a></td><td align="left">修改集合中的数据</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/56.html">db.collection.updateOne()</a></td><td align="left">修改集合中的一条数据</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/22.html">db.collection.validate()</a></td><td align="left">执行对集合验证操作</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库方法</title>
      <link href="/2022/05/19/treasurebox/shu-ju-ku/mongodb/7.shu-ju-ku-fang-fa/"/>
      <url>/2022/05/19/treasurebox/shu-ju-ku/mongodb/7.shu-ju-ku-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库方法"><a href="#数据库方法" class="headerlink" title="数据库方法"></a>数据库方法</h2><table><thead><tr><th align="left">方法名</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/9.html">db.cloneDatabase(）</a></td><td align="left">从指定主机上克隆数据库</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/63.html">db.currentOp()</a></td><td align="left">显示当前正在进行的操作</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/62.html">db.commandHelp()</a></td><td align="left">返回数据库命令的帮助信息</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/16.html">db.createCollection()</a></td><td align="left">创建一个聚集集合（table）</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/61.html">db.cloneCollection()</a></td><td align="left">在MongoDB实例之间复制集合数据</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/10.html">db.copyDatabase(）</a></td><td align="left">从指定的机器上复制指定数据库数据到某个数据库</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/8.html">db.dropDatabase();</a></td><td align="left">删除当前使用数据库</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/64.html">db.fsyncLock()</a></td><td align="left">刷新写入磁盘并锁定该数据库，以防止写入操作，并协助备份操作</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/65.html">db.fsyncUnlock()</a></td><td align="left">允许继续进行写入锁住的数据库（解锁）</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/69.html">db.getLogComponents()</a></td><td align="left">返回日志消息详细级别</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/68.html">db.getLastErrorObj()</a></td><td align="left">查看完整的错误结果</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/15.html">db.getMongo()</a></td><td align="left">查看当前db的链接机器地址</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/17.html">db.getCollection(）</a></td><td align="left">得到指定名称的聚集集合（table）</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/12.html">db.getName()</a></td><td align="left">查看当前使用的数据库</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/70.html">db.getPrevError()</a></td><td align="left">返回包含自上次错误复位所有的错误状态文件</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/18.html">db.getCollectionNames()</a></td><td align="left">得到当前db的所有聚集集合</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/66.html">db.getCollectionInfos()</a></td><td align="left">返回当前数据库中的所有集合信息</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/67.html">db.getLastError()</a></td><td align="left">返回上一次错误，如果没有错误则为空</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/71.html">db.hostInfo()</a></td><td align="left">返回当前数据库主机系统的相关信息</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/72.html">db.killOp()</a></td><td align="left">终止指定的操作</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/73.html">db.listCommands()</a></td><td align="left">显示公共数据库的命令列表</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/74.html">db.logout()</a></td><td align="left">注销登录</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/19.html">db.printCollectionStats()</a></td><td align="left">显示当前db所有聚集索引的状态</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/76.html">db.resetError()</a></td><td align="left">重置db.getPrevError()和getPrevError返回的错误信息</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/11.html">db.repairDatabase()</a></td><td align="left">修复当前数据库</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/75.html">db.repairDatabase()</a></td><td align="left">修复当前数据库</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/77.html">db.runCommand()</a></td><td align="left">运行一个数据库命令</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/78.html">db.serverStatus()</a></td><td align="left">返回当前数据库状态的概要</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/80.html">db.setProfilingLevel()</a></td><td align="left">修改当前数据库的分析级别</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/13.html">db.stats()</a></td><td align="left">显示当前db状态</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/81.html">db.shutdownServer()</a></td><td align="left">关闭当前数据库运行实例或安全停止有关操作进程</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/79.html">db.setLogLevel()</a></td><td align="left">设置一个单独的日志信息级别</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/14.html">db.version()</a></td><td align="left">查看当前db版本</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>用户管理方法</title>
      <link href="/2022/05/19/treasurebox/shu-ju-ku/mongodb/8.yong-hu-guan-li-fang-fa/"/>
      <url>/2022/05/19/treasurebox/shu-ju-ku/mongodb/8.yong-hu-guan-li-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="用户管理方法"><a href="#用户管理方法" class="headerlink" title="用户管理方法"></a>用户管理方法</h2><table><thead><tr><th align="left">方法名</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/155.html">db.getUsers()</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/152.html">db.dropAllUsers()</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/150.html">db.updateUser()</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/149.html">db.createUser()</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/154.html">db.revokeRolesFromUser()</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/21.html">db.removeUser()</a></td><td align="left">删除用户</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/153.html">db.grantRolesToUser()</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/156.html">db.getUser()</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/151.html">db.changeUserPassword()</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/20.html">db.auth()</a></td><td align="left">数据库认证、安全模式</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>连接方法</title>
      <link href="/2022/05/19/treasurebox/shu-ju-ku/mongodb/9.lian-jie-fang-fa/"/>
      <url>/2022/05/19/treasurebox/shu-ju-ku/mongodb/9.lian-jie-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="连接方法"><a href="#连接方法" class="headerlink" title="连接方法"></a>连接方法</h2><table><thead><tr><th align="left"></th><th align="left"></th></tr></thead><tbody><tr><td align="left">方法名</td><td align="left">描述</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/256.html">Mongo.setSlaveOk()</a></td><td align="left">设置从库可以进行数据查询操作</td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/257.html">Mongo.setReadPref()</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/258.html">Mongo.getReadPrefTagSet()</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/259.html">Mongo.getReadPrefMode()</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://www.mongodb.org.cn/manual/260.html">Mongo.getDB()</a></td><td align="left"></td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mongoDB工具</title>
      <link href="/2022/05/19/treasurebox/shu-ju-ku/mongodb/0.mongodb-gong-ju/"/>
      <url>/2022/05/19/treasurebox/shu-ju-ku/mongodb/0.mongodb-gong-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="MongoDB工具"><a href="#MongoDB工具" class="headerlink" title="MongoDB工具"></a>MongoDB工具</h2><p>MongoDB在bin目录中提供了一系列有用的工具这些工具提供了MongoDB在运维管理上的方便。</p><table><thead><tr><th>工具</th><th>描述</th></tr></thead><tbody><tr><td>mongosniff</td><td>mongodb监测工具，作用等同于tcpdump</td></tr><tr><td>mongodump</td><td>mongo数据备份工具<br>mongodump -h dbhost -d dbname -o dbdirectory<br>-h：MongoDB所在的服务器地址<br>-d：需要备份的数据库实例<br>-o：备份的数据存放位置</td></tr><tr><td>mongoimport</td><td>mongodb数据导入工具</td></tr><tr><td>mongoexport</td><td>mongo数据导出工具</td></tr><tr><td>bsondump</td><td>将bson格式数据转出为json格式数据</td></tr><tr><td>mongoperf</td><td></td></tr><tr><td>mongorestore</td><td>mongodb数据恢复工具</td></tr><tr><td>mongod.exe</td><td>MongoDB服务启动工具</td></tr><tr><td>mongofiles</td><td>GridFS管理工具，可实现二进制文件的存取</td></tr><tr><td>mongooplog</td><td></td></tr><tr><td>mongotop</td><td>跟踪一个MongoDB实例，查看哪些大量的时间花费在读取和写入数据。</td></tr><tr><td>mongos</td><td>分片路由。如果使用了sharding功能，则应用程序连接的是mongos而不会mongod</td></tr><tr><td>mongo</td><td>客户端命令行工具，支持js语法</td></tr></tbody></table><p>配置数据库用户名和密码：</p><p>要为数据库创建用户，必须先切换到相应的数据库</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#先切换</span><br><span class="line">use 数据库名；</span><br><span class="line"></span><br><span class="line">#再创建</span><br><span class="line">db.createUser({})</span><br></pre></td></tr></tbody></table></figure><h3 id="设置-admin（给admin这个库在设置密码）"><a href="#设置-admin（给admin这个库在设置密码）" class="headerlink" title="设置 admin（给admin这个库在设置密码）"></a>设置 admin（给admin这个库在设置密码）</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">use.admin  </span><br><span class="line">db.createUser({</span><br><span class="line">  user: 'admin',  // 用户名</span><br><span class="line">  pwd: '123456',  // 密码</span><br><span class="line">  roles:[{</span><br><span class="line">    role: 'root',  // 角色</span><br><span class="line">    db: 'admin'  // 数据库</span><br><span class="line">  }]</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>查看用户是否设置成功：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; show users</span><br><span class="line">{</span><br><span class="line">        "_id" : "admin.admin",</span><br><span class="line">        "user" : "admin",</span><br><span class="line">        "db" : "admin",</span><br><span class="line">        "roles" : [</span><br><span class="line">                {</span><br><span class="line">                        "role" : "root",</span><br><span class="line">                        "db" : "admin"</span><br><span class="line">                }</span><br><span class="line">        ]</span><br><span class="line">}</span><br><span class="line">&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">show users  // 查看当前库下的用户</span><br><span class="line"></span><br><span class="line">db.dropUser('testadmin')  // 删除用户</span><br><span class="line"></span><br><span class="line">db.updateUser('admin', {pwd: '654321'})  // 修改用户密码</span><br><span class="line"></span><br><span class="line">db.auth('admin', '654321')  // 密码认证</span><br></pre></td></tr></tbody></table></figure><p>h(‘admin’, ‘654321’)  // 密码认证</p><pre><code></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基本命令</title>
      <link href="/2022/05/19/treasurebox/shu-ju-ku/mongodb/1.ji-ben-ming-ling/"/>
      <url>/2022/05/19/treasurebox/shu-ju-ku/mongodb/1.ji-ben-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="Mongo简介和基本使用"><a href="#Mongo简介和基本使用" class="headerlink" title="Mongo简介和基本使用"></a>Mongo简介和基本使用</h2><p>[TOC]</p><h3 id="一、MongoDB简介"><a href="#一、MongoDB简介" class="headerlink" title="一、MongoDB简介"></a>一、MongoDB简介</h3><h4 id="1、什么是MongoDB"><a href="#1、什么是MongoDB" class="headerlink" title="1、什么是MongoDB"></a>1、什么是MongoDB</h4><p>MongoDB是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。</p><p>在高负载的情况下，添加更多的节点，可以保证服务器性能。</p><p>MongoDB旨在为web应用提供可扩展的高性能数据存储解决方案。</p><p>MongoDB将数据存储为一个文档，数据结构由键值（key=&gt;value）对组成。MongoDB文档类似于JSON对象，字段值可以包含其他文档，数组及文档数组。</p><img src="image/image-20200708154929337.png"><h4 id="2、主要特点"><a href="#2、主要特点" class="headerlink" title="2、主要特点"></a>2、主要特点</h4><ul><li>MongoDB的提供了一个面向文档存储，操作起来比较简单和容易。</li><li>你可以在MongoDB记录中设置任何属性的索引 (如：FirstName=”Sameer”,Address=”8 Gandhi Road”)来实现更快的排序。</li><li>你可以通过本地或者网络创建数据镜像，这使得MongoDB有更强的扩展性。</li><li>如果负载的增加（需要更多的存储空间和更强的处理能力） ，它可以分布在计算机网络中的其他节点上这就是所谓的分片。</li><li>Mongo支持丰富的查询表达式。查询指令使用JSON形式的标记，可轻易查询文档中内嵌的对象及数组。</li><li>MongoDb 使用update()命令可以实现替换完成的文档（数据）或者一些指定的数据字段 。</li><li>Mongodb中的Map/reduce主要是用来对数据进行批量处理和聚合操作。</li><li>Map和Reduce。Map函数调用emit(key,value)遍历集合中所有的记录，将key与value传给Reduce函数进行处理。</li><li>Map函数和Reduce函数是使用Javascript编写的，并可以通过db.runCommand或mapreduce命令来执行MapReduce操作。</li><li>GridFS是MongoDB中的一个内置功能，可以用于存放大量小文件。</li><li>MongoDB允许在服务端执行脚本，可以用Javascript编写某个函数，直接在服务端执行，也可以把函数的定义存储在服务端，下次直接调用即可。</li><li>MongoDB支持各种编程语言:RUBY，PYTHON，JAVA，C++，PHP，C#等多种语言。</li><li>MongoDB安装简单。</li></ul><h4 id="3、非关系型数据库介绍"><a href="#3、非关系型数据库介绍" class="headerlink" title="3、非关系型数据库介绍"></a>3、非关系型数据库介绍</h4><img src="image/20191107083025450.png"><h3 id="二、基本操作"><a href="#二、基本操作" class="headerlink" title="二、基本操作"></a>二、基本操作</h3><h4 id="1、连接数据库-mongo"><a href="#1、连接数据库-mongo" class="headerlink" title="1、连接数据库: mongo"></a>1、连接数据库: mongo</h4><img src="image/1575445920617.png"><p>新建的默认有两个数据库：</p><blockquote><p>admin–配置权限<br>local–固定的重要数据</p></blockquote><h4 id="2、查看数据库"><a href="#2、查看数据库" class="headerlink" title="2、查看数据库"></a>2、查看数据库</h4><blockquote><p>show dbs</p><p>show databases</p></blockquote><h4 id="3、创建数据库"><a href="#3、创建数据库" class="headerlink" title="3、创建数据库"></a>3、创建数据库</h4><ol><li><p>直接进行数据库切换就可以创建：use school</p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; show databases</span><br><span class="line">admin  0.000GB</span><br><span class="line">local  0.000GB</span><br><span class="line">&gt; use school</span><br><span class="line">switched to db school</span><br><span class="line">&gt; show databases</span><br><span class="line">admin  0.000GB</span><br><span class="line">local  0.000GB</span><br></pre></td></tr></tbody></table></figure><p> ① 这个时候并没有显示，是因为数据库中没有集合，插入集合之后即可以显示：</p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.stu.insert({"name":"youzi","age":24})</span><br><span class="line">WriteResult({ "nInserted" : 1 })</span><br><span class="line">&gt; show dbs</span><br><span class="line">admin   0.000GB</span><br><span class="line">local   0.000GB</span><br><span class="line">school  0.000GB</span><br></pre></td></tr></tbody></table></figure><p> ② 还可以使用db.createCollection(‘colloection_name’)直接创建一个集合：</p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; show databases;</span><br><span class="line">admin   0.000GB</span><br><span class="line">local   0.000GB</span><br><span class="line">school  0.000GB</span><br><span class="line">&gt; use popple</span><br><span class="line">switched to db people</span><br><span class="line">&gt; show dbs</span><br><span class="line">admin   0.000GB</span><br><span class="line">local   0.000GB</span><br><span class="line">school  0.000GB</span><br><span class="line">&gt; db.createCollection('man')</span><br><span class="line">{ "ok" : 1 }</span><br><span class="line">&gt; show dbs</span><br><span class="line">admin   0.000GB</span><br><span class="line">local   0.000GB</span><br><span class="line">people  0.000GB</span><br><span class="line">school  0.000GB</span><br></pre></td></tr></tbody></table></figure></li></ol><h4 id="4、查看当前所在库"><a href="#4、查看当前所在库" class="headerlink" title="4、查看当前所在库"></a>4、查看当前所在库</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db</span><br><span class="line">student</span><br></pre></td></tr></tbody></table></figure><h4 id="5、查看集合"><a href="#5、查看集合" class="headerlink" title="5、查看集合"></a>5、查看集合</h4><p><code>show tables</code>或<code>show collections</code></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> <span class="keyword">show</span> tables;  </span><br><span class="line">people</span><br><span class="line">stu</span><br><span class="line"><span class="operator">&gt;</span> <span class="keyword">show</span> collections</span><br><span class="line">people</span><br><span class="line">stu</span><br></pre></td></tr></tbody></table></figure><h4 id="6、删除库和集合"><a href="#6、删除库和集合" class="headerlink" title="6、删除库和集合"></a>6、删除库和集合</h4><p>① 删除集合<code>db.collectionName.drop()</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; show collections</span><br><span class="line">people</span><br><span class="line">stu</span><br><span class="line">&gt; db.stu.drop()</span><br><span class="line">true</span><br><span class="line">&gt; show tables</span><br><span class="line">people</span><br></pre></td></tr></tbody></table></figure><p>② 删除数据库：切换到要删除的数据库，然后执行：<code>db.dropDatabase()</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.dropDatabase()</span><br><span class="line">{ "dropped" : "school", "ok" : 1 }</span><br><span class="line">&gt; db.dropDatabase()</span><br><span class="line">{ "ok" : 1 }</span><br><span class="line">&gt; show dbs</span><br><span class="line">admin   0.000GB</span><br><span class="line">local   0.000GB</span><br><span class="line">people  0.000GB</span><br></pre></td></tr></tbody></table></figure><p>当库中没有集合时，库也会自动删除。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.createCollection("man")</span><br><span class="line">{ "ok" : 1 }</span><br><span class="line">&gt; show tables;</span><br><span class="line">man</span><br><span class="line">&gt; show dbs</span><br><span class="line">admin   0.000GB</span><br><span class="line">local   0.000GB</span><br><span class="line">people  0.000GB</span><br><span class="line">&gt; db.man.drop()</span><br><span class="line">true</span><br><span class="line">&gt; show dbs</span><br><span class="line">admin   0.000GB</span><br><span class="line">local   0.000GB</span><br></pre></td></tr></tbody></table></figure><blockquote><p>show dbs<br>admin   0.000GB<br>local   0.000GB<br>people  0.000GB<br>db.man.drop()<br>true<br>show dbs<br>admin   0.000GB<br>local   0.000GB</p></blockquote><pre><code></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MONGO集群</title>
      <link href="/2022/05/19/treasurebox/shu-ju-ku/mongodb/10.mongo-ji-qun/"/>
      <url>/2022/05/19/treasurebox/shu-ju-ku/mongodb/10.mongo-ji-qun/</url>
      
        <content type="html"><![CDATA[<h3 id="MONGO集群"><a href="#MONGO集群" class="headerlink" title="MONGO集群"></a>MONGO集群</h3><p>MONGO的三种集群：Replica Set / Sharding / Master-Slaver，</p><p>Replica Set：</p><p><img src="https://img2020.cnblogs.com/blog/387171/202006/387171-20200623173909660-652087543.png" alt="img"></p><p>Mongodb(M)表示主节点，Mongodb(s)表示备节点，Mongodb(A)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>增删改查</title>
      <link href="/2022/05/19/treasurebox/shu-ju-ku/mongodb/2.zeng-shan-gai-cha/"/>
      <url>/2022/05/19/treasurebox/shu-ju-ku/mongodb/2.zeng-shan-gai-cha/</url>
      
        <content type="html"><![CDATA[<h2 id="CRUD操作"><a href="#CRUD操作" class="headerlink" title="CRUD操作"></a>CRUD操作</h2><p>[TOC]</p><h3 id="一、插入文档"><a href="#一、插入文档" class="headerlink" title="一、插入文档"></a>一、插入文档</h3><p>插入文档的方式共有三种，每一种的返回值不同：</p><ul><li><code>db.collection.insert()</code></li><li><code>db.collection.insertOne()</code>  3.2新增功能</li><li><code>db.collection.insertMany()</code>  3.2新增功能</li></ul><p>MongoDB存储的是文档，文档其实就是json对象。存储于集合中的每一个文档都需要一个唯一的_id字段作为primary_key。如果一个插入的文档操作遗漏了_id字段，MongoDB驱动会自动为_id字段生成一个ObjectId。</p><h4 id="1、insert增加单条数据"><a href="#1、insert增加单条数据" class="headerlink" title="1、insert增加单条数据"></a>1、insert增加单条数据</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.man.insert({name:'youzi'})</span><br><span class="line">WriteResult({ "nInserted" : 1 })</span><br></pre></td></tr></tbody></table></figure><h4 id="2、insert增加多条数据"><a href="#2、insert增加多条数据" class="headerlink" title="2、insert增加多条数据"></a>2、insert增加多条数据</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.man.insert([{name:'zhangsan'},{name:'dachang'}])</span><br><span class="line">BulkWriteResult({</span><br><span class="line">        "writeErrors" : [ ],</span><br><span class="line">        "writeConcernErrors" : [ ],</span><br><span class="line">        "nInserted" : 2,</span><br><span class="line">        "nUpserted" : 0,</span><br><span class="line">        "nMatched" : 0,</span><br><span class="line">        "nModified" : 0,</span><br><span class="line">        "nRemoved" : 0,</span><br><span class="line">        "upserted" : [ ]</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h4 id="3、insertOne插入一条数据"><a href="#3、insertOne插入一条数据" class="headerlink" title="3、insertOne插入一条数据"></a>3、insertOne插入一条数据</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.man.insertOne({name:'xiaxia'})</span><br><span class="line">{</span><br><span class="line">        "acknowledged" : true,</span><br><span class="line">        "insertedId" : ObjectId("5f0589da25bd42dbbb1469b4")</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="4、InsertMany插入多条数据"><a href="#4、InsertMany插入多条数据" class="headerlink" title="4、InsertMany插入多条数据"></a>4、InsertMany插入多条数据</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.man.insertMany([{name:'liuhuan'}])</span><br><span class="line">{</span><br><span class="line">        "acknowledged" : true,</span><br><span class="line">        "insertedIds" : [</span><br><span class="line">                ObjectId("5f0589fe25bd42dbbb1469b5")</span><br><span class="line">        ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="二、查询文档"><a href="#二、查询文档" class="headerlink" title="二、查询文档"></a>二、查询文档</h3><h4 id="1、判断符"><a href="#1、判断符" class="headerlink" title="1、判断符"></a>1、判断符</h4><p>MongoDB中提供了<code>db.collection.find()</code>方法从集合中读取文档。返回指向匹配文档的：doc:cursor&lt;/tutorial/iterate-a-cursor&gt;。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collection.find( &lt;query filter&gt; , &lt;projection&gt; )</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th align="center">判断符</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">name:‘zhangsan’</td><td align="center">相等</td></tr><tr><td align="center">$gt:10</td><td align="center">大于</td></tr><tr><td align="center">$lt:10</td><td align="center">小于</td></tr><tr><td align="center">$gte:10</td><td align="center">大于等于</td></tr><tr><td align="center">$lte:10</td><td align="center">小于等于</td></tr><tr><td align="center">$ne:10</td><td align="center">不等于</td></tr><tr><td align="center">$nin:[1,2]</td><td align="center">不在某个范围内</td></tr><tr><td align="center">$in:[1,2]</td><td align="center">在</td></tr><tr><td align="center">$and:[条件1,条件2]</td><td align="center">并且</td></tr><tr><td align="center">$or:[条件1,条件2]</td><td align="center">或</td></tr><tr><td align="center">$all:[20,30]</td><td align="center">指定的数据都要有<br>db.collection.find({age:{$all:[‘lisi’]}})</td></tr><tr><td align="center">$exists</td><td align="center">name:{$exists:1}，是否存在某一列，1代表存在，0代表不存在。&lt;br db.collection.find({name:{$exists:1}})</td></tr><tr><td align="center">count()</td><td align="center">统计数量<br>db.stu.find().count()</td></tr><tr><td align="center">limit()</td><td align="center">查看指定数量的结果<br>db.collection.find().limit(4)</td></tr><tr><td align="center">skip()</td><td align="center">db.collection.find().skip(4)</td></tr><tr><td align="center">$mod</td><td align="center">取模计算</td></tr><tr><td align="center">$regex</td><td align="center">模糊查询，查询该字段包含某个字符串</td></tr><tr><td align="center">$text</td><td align="center">对有text索引的字段进行模糊查询</td></tr><tr><td align="center">$where</td><td align="center">使用js代码查询数据</td></tr></tbody></table><p>在相同字段执行等于查询时，建议使用<code>$in</code>而不使用<code>$or</code>。</p><p>首先插入数据：</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">db.users.insertMany(</span><br><span class="line">  <span class="punctuation">[</span></span><br><span class="line">     <span class="punctuation">{</span></span><br><span class="line">       _id<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">       name<span class="punctuation">:</span> <span class="string">"sue"</span><span class="punctuation">,</span></span><br><span class="line">       age<span class="punctuation">:</span> <span class="number">19</span><span class="punctuation">,</span></span><br><span class="line">       type<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">       status<span class="punctuation">:</span> <span class="string">"P"</span><span class="punctuation">,</span></span><br><span class="line">       favorites<span class="punctuation">:</span> <span class="punctuation">{</span> artist<span class="punctuation">:</span> <span class="string">"Picasso"</span><span class="punctuation">,</span> food<span class="punctuation">:</span> <span class="string">"pizza"</span> <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">       finished<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">17</span><span class="punctuation">,</span> <span class="number">3</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">       badges<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"blue"</span><span class="punctuation">,</span> <span class="string">"black"</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">       points<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">{</span> points<span class="punctuation">:</span> <span class="number">85</span><span class="punctuation">,</span> bonus<span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">{</span> points<span class="punctuation">:</span> <span class="number">85</span><span class="punctuation">,</span> bonus<span class="punctuation">:</span> <span class="number">10</span> <span class="punctuation">}</span></span><br><span class="line">       <span class="punctuation">]</span></span><br><span class="line">     <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">     <span class="punctuation">{</span></span><br><span class="line">       _id<span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">       name<span class="punctuation">:</span> <span class="string">"bob"</span><span class="punctuation">,</span></span><br><span class="line">       age<span class="punctuation">:</span> <span class="number">42</span><span class="punctuation">,</span></span><br><span class="line">       type<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">       status<span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span></span><br><span class="line">       favorites<span class="punctuation">:</span> <span class="punctuation">{</span> artist<span class="punctuation">:</span> <span class="string">"Miro"</span><span class="punctuation">,</span> food<span class="punctuation">:</span> <span class="string">"meringue"</span> <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">       finished<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">11</span><span class="punctuation">,</span> <span class="number">25</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">       badges<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"green"</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">       points<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">{</span> points<span class="punctuation">:</span> <span class="number">85</span><span class="punctuation">,</span> bonus<span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">{</span> points<span class="punctuation">:</span> <span class="number">64</span><span class="punctuation">,</span> bonus<span class="punctuation">:</span> <span class="number">12</span> <span class="punctuation">}</span></span><br><span class="line">       <span class="punctuation">]</span></span><br><span class="line">     <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">     <span class="punctuation">{</span></span><br><span class="line">       _id<span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">       name<span class="punctuation">:</span> <span class="string">"ahn"</span><span class="punctuation">,</span></span><br><span class="line">       age<span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">       type<span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">       status<span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span></span><br><span class="line">       favorites<span class="punctuation">:</span> <span class="punctuation">{</span> artist<span class="punctuation">:</span> <span class="string">"Cassatt"</span><span class="punctuation">,</span> food<span class="punctuation">:</span> <span class="string">"cake"</span> <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">       finished<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">6</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">       badges<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"blue"</span><span class="punctuation">,</span> <span class="string">"red"</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">       points<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">{</span> points<span class="punctuation">:</span> <span class="number">81</span><span class="punctuation">,</span> bonus<span class="punctuation">:</span> <span class="number">8</span> <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">{</span> points<span class="punctuation">:</span> <span class="number">55</span><span class="punctuation">,</span> bonus<span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span></span><br><span class="line">       <span class="punctuation">]</span></span><br><span class="line">     <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">     <span class="punctuation">{</span></span><br><span class="line">       _id<span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">       name<span class="punctuation">:</span> <span class="string">"xi"</span><span class="punctuation">,</span></span><br><span class="line">       age<span class="punctuation">:</span> <span class="number">34</span><span class="punctuation">,</span></span><br><span class="line">       type<span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">       status<span class="punctuation">:</span> <span class="string">"D"</span><span class="punctuation">,</span></span><br><span class="line">       favorites<span class="punctuation">:</span> <span class="punctuation">{</span> artist<span class="punctuation">:</span> <span class="string">"Chagall"</span><span class="punctuation">,</span> food<span class="punctuation">:</span> <span class="string">"chocolate"</span> <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">       finished<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">11</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">       badges<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"red"</span><span class="punctuation">,</span> <span class="string">"black"</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">       points<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">{</span> points<span class="punctuation">:</span> <span class="number">53</span><span class="punctuation">,</span> bonus<span class="punctuation">:</span> <span class="number">15</span> <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">{</span> points<span class="punctuation">:</span> <span class="number">51</span><span class="punctuation">,</span> bonus<span class="punctuation">:</span> <span class="number">15</span> <span class="punctuation">}</span></span><br><span class="line">       <span class="punctuation">]</span></span><br><span class="line">     <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">     <span class="punctuation">{</span></span><br><span class="line">       _id<span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">       name<span class="punctuation">:</span> <span class="string">"xyz"</span><span class="punctuation">,</span></span><br><span class="line">       age<span class="punctuation">:</span> <span class="number">23</span><span class="punctuation">,</span></span><br><span class="line">       type<span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">       status<span class="punctuation">:</span> <span class="string">"D"</span><span class="punctuation">,</span></span><br><span class="line">       favorites<span class="punctuation">:</span> <span class="punctuation">{</span> artist<span class="punctuation">:</span> <span class="string">"Noguchi"</span><span class="punctuation">,</span> food<span class="punctuation">:</span> <span class="string">"nougat"</span> <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">       finished<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">14</span><span class="punctuation">,</span> <span class="number">6</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">       badges<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"orange"</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">       points<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">{</span> points<span class="punctuation">:</span> <span class="number">71</span><span class="punctuation">,</span> bonus<span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span></span><br><span class="line">       <span class="punctuation">]</span></span><br><span class="line">     <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">     <span class="punctuation">{</span></span><br><span class="line">       _id<span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">       name<span class="punctuation">:</span> <span class="string">"abc"</span><span class="punctuation">,</span></span><br><span class="line">       age<span class="punctuation">:</span> <span class="number">43</span><span class="punctuation">,</span></span><br><span class="line">       type<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">       status<span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span></span><br><span class="line">       favorites<span class="punctuation">:</span> <span class="punctuation">{</span> food<span class="punctuation">:</span> <span class="string">"pizza"</span><span class="punctuation">,</span> artist<span class="punctuation">:</span> <span class="string">"Picasso"</span> <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">       finished<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">18</span><span class="punctuation">,</span> <span class="number">12</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">       badges<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"black"</span><span class="punctuation">,</span> <span class="string">"blue"</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">       points<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">{</span> points<span class="punctuation">:</span> <span class="number">78</span><span class="punctuation">,</span> bonus<span class="punctuation">:</span> <span class="number">8</span> <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">{</span> points<span class="punctuation">:</span> <span class="number">57</span><span class="punctuation">,</span> bonus<span class="punctuation">:</span> <span class="number">7</span> <span class="punctuation">}</span></span><br><span class="line">       <span class="punctuation">]</span></span><br><span class="line">     <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><h4 id="2、练习"><a href="#2、练习" class="headerlink" title="2、练习"></a>2、练习</h4><h5 id="1、查询status为A的文档"><a href="#1、查询status为A的文档" class="headerlink" title="1、查询status为A的文档"></a>1、查询status为A的文档</h5><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.users.find(<span class="punctuation">{</span>status<span class="punctuation">:</span><span class="string">"A"</span><span class="punctuation">}</span>)</span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"bob"</span><span class="punctuation">,</span> <span class="attr">"age"</span> <span class="punctuation">:</span> <span class="number">42</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span> <span class="attr">"favorites"</span> <span class="punctuation">:</span> <span class="punctuation">{</span> <span class="attr">"artist"</span> <span class="punctuation">:</span> <span class="string">"Miro"</span><span class="punctuation">,</span> <span class="attr">"food"</span> <span class="punctuation">:</span> <span class="string">"meringue"</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="attr">"finished"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">11</span><span class="punctuation">,</span> <span class="number">25</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"badges"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"green"</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">85</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">64</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">12</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"ahn"</span><span class="punctuation">,</span> <span class="attr">"age"</span> <span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span> <span class="attr">"favorites"</span> <span class="punctuation">:</span> <span class="punctuation">{</span> <span class="attr">"artist"</span> <span class="punctuation">:</span> <span class="string">"Cassatt"</span><span class="punctuation">,</span> <span class="attr">"food"</span> <span class="punctuation">:</span> <span class="string">"cake"</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="attr">"finished"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">6</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"badges"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"blue"</span><span class="punctuation">,</span> <span class="string">"red"</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">81</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">8</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">55</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"abc"</span><span class="punctuation">,</span> <span class="attr">"age"</span> <span class="punctuation">:</span> <span class="number">43</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span> <span class="attr">"favorites"</span> <span class="punctuation">:</span> <span class="punctuation">{</span> <span class="attr">"food"</span> <span class="punctuation">:</span> <span class="string">"pizza"</span><span class="punctuation">,</span> <span class="attr">"artist"</span> <span class="punctuation">:</span> <span class="string">"Picasso"</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="attr">"finished"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">18</span><span class="punctuation">,</span> <span class="number">12</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"badges"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"black"</span><span class="punctuation">,</span> <span class="string">"blue"</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">78</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">8</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">57</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">7</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br><span class="line">&gt;</span><br></pre></td></tr></tbody></table></figure><h5 id="2、查询status为P或D的文档"><a href="#2、查询status为P或D的文档" class="headerlink" title="2、查询status为P或D的文档"></a>2、查询status为P或D的文档</h5><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.users.find(<span class="punctuation">{</span>status<span class="punctuation">:</span><span class="punctuation">{</span>$in<span class="punctuation">:</span><span class="punctuation">[</span><span class="string">"P"</span><span class="punctuation">,</span><span class="string">"D"</span><span class="punctuation">]</span><span class="punctuation">}</span><span class="punctuation">}</span>)</span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"sue"</span><span class="punctuation">,</span> <span class="attr">"age"</span> <span class="punctuation">:</span> <span class="number">19</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"P"</span><span class="punctuation">,</span> <span class="attr">"favorites"</span> <span class="punctuation">:</span> <span class="punctuation">{</span> <span class="attr">"artist"</span> <span class="punctuation">:</span> <span class="string">"Picasso"</span><span class="punctuation">,</span> <span class="attr">"food"</span> <span class="punctuation">:</span> <span class="string">"pizza"</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="attr">"finished"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">17</span><span class="punctuation">,</span> <span class="number">3</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"badges"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"blue"</span><span class="punctuation">,</span> <span class="string">"black"</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">85</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">85</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">10</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"xi"</span><span class="punctuation">,</span> <span class="attr">"age"</span> <span class="punctuation">:</span> <span class="number">34</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"D"</span><span class="punctuation">,</span> <span class="attr">"favorites"</span> <span class="punctuation">:</span> <span class="punctuation">{</span> <span class="attr">"artist"</span> <span class="punctuation">:</span> <span class="string">"Chagall"</span><span class="punctuation">,</span> <span class="attr">"food"</span> <span class="punctuation">:</span> <span class="string">"chocolate"</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="attr">"finished"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">11</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"badges"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"red"</span><span class="punctuation">,</span> <span class="string">"black"</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">53</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">15</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">51</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">15</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"xyz"</span><span class="punctuation">,</span> <span class="attr">"age"</span> <span class="punctuation">:</span> <span class="number">23</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"D"</span><span class="punctuation">,</span> <span class="attr">"favorites"</span> <span class="punctuation">:</span> <span class="punctuation">{</span> <span class="attr">"artist"</span> <span class="punctuation">:</span> <span class="string">"Noguchi"</span><span class="punctuation">,</span> <span class="attr">"food"</span> <span class="punctuation">:</span> <span class="string">"nougat"</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="attr">"finished"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">14</span><span class="punctuation">,</span> <span class="number">6</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"badges"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"orange"</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">71</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><h5 id="3、查询status为A并且age小于30的文档"><a href="#3、查询status为A并且age小于30的文档" class="headerlink" title="3、查询status为A并且age小于30的文档"></a>3、查询status为A并且age小于30的文档</h5><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.users.find(<span class="punctuation">{</span>status<span class="punctuation">:</span><span class="string">"A"</span><span class="punctuation">,</span>age<span class="punctuation">:</span><span class="punctuation">{</span>$lt<span class="punctuation">:</span><span class="number">30</span><span class="punctuation">}</span><span class="punctuation">}</span>)</span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"ahn"</span><span class="punctuation">,</span> <span class="attr">"age"</span> <span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span> <span class="attr">"favorites"</span> <span class="punctuation">:</span> <span class="punctuation">{</span> <span class="attr">"artist"</span> <span class="punctuation">:</span> <span class="string">"Cassatt"</span><span class="punctuation">,</span> <span class="attr">"food"</span> <span class="punctuation">:</span> <span class="string">"cake"</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="attr">"finished"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">6</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"badges"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"blue"</span><span class="punctuation">,</span> <span class="string">"red"</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">81</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">8</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">55</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><h5 id="4、查询status为A或者age小于30的文档"><a href="#4、查询status为A或者age小于30的文档" class="headerlink" title="4、查询status为A或者age小于30的文档"></a>4、查询status为A或者age小于30的文档</h5><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.users.find(<span class="punctuation">{</span>$or<span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">{</span>status<span class="punctuation">:</span><span class="string">"A"</span><span class="punctuation">}</span><span class="punctuation">,</span><span class="punctuation">{</span>age<span class="punctuation">:</span><span class="punctuation">{</span>$lt<span class="punctuation">:</span><span class="number">30</span><span class="punctuation">}</span><span class="punctuation">}</span><span class="punctuation">]</span><span class="punctuation">}</span>)</span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"sue"</span><span class="punctuation">,</span> <span class="attr">"age"</span> <span class="punctuation">:</span> <span class="number">19</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"P"</span><span class="punctuation">,</span> <span class="attr">"favorites"</span> <span class="punctuation">:</span> <span class="punctuation">{</span> <span class="attr">"artist"</span> <span class="punctuation">:</span> <span class="string">"Picasso"</span><span class="punctuation">,</span> <span class="attr">"food"</span> <span class="punctuation">:</span> <span class="string">"pizza"</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="attr">"finished"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">17</span><span class="punctuation">,</span> <span class="number">3</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"badges"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"blue"</span><span class="punctuation">,</span> <span class="string">"black"</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">85</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">85</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">10</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"bob"</span><span class="punctuation">,</span> <span class="attr">"age"</span> <span class="punctuation">:</span> <span class="number">42</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span> <span class="attr">"favorites"</span> <span class="punctuation">:</span> <span class="punctuation">{</span> <span class="attr">"artist"</span> <span class="punctuation">:</span> <span class="string">"Miro"</span><span class="punctuation">,</span> <span class="attr">"food"</span> <span class="punctuation">:</span> <span class="string">"meringue"</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="attr">"finished"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">11</span><span class="punctuation">,</span> <span class="number">25</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"badges"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"green"</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">85</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">64</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">12</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"ahn"</span><span class="punctuation">,</span> <span class="attr">"age"</span> <span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span> <span class="attr">"favorites"</span> <span class="punctuation">:</span> <span class="punctuation">{</span> <span class="attr">"artist"</span> <span class="punctuation">:</span> <span class="string">"Cassatt"</span><span class="punctuation">,</span> <span class="attr">"food"</span> <span class="punctuation">:</span> <span class="string">"cake"</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="attr">"finished"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">6</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"badges"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"blue"</span><span class="punctuation">,</span> <span class="string">"red"</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">81</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">8</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">55</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"xyz"</span><span class="punctuation">,</span> <span class="attr">"age"</span> <span class="punctuation">:</span> <span class="number">23</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"D"</span><span class="punctuation">,</span> <span class="attr">"favorites"</span> <span class="punctuation">:</span> <span class="punctuation">{</span> <span class="attr">"artist"</span> <span class="punctuation">:</span> <span class="string">"Noguchi"</span><span class="punctuation">,</span> <span class="attr">"food"</span> <span class="punctuation">:</span> <span class="string">"nougat"</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="attr">"finished"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">14</span><span class="punctuation">,</span> <span class="number">6</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"badges"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"orange"</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">71</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"abc"</span><span class="punctuation">,</span> <span class="attr">"age"</span> <span class="punctuation">:</span> <span class="number">43</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span> <span class="attr">"favorites"</span> <span class="punctuation">:</span> <span class="punctuation">{</span> <span class="attr">"food"</span> <span class="punctuation">:</span> <span class="string">"pizza"</span><span class="punctuation">,</span> <span class="attr">"artist"</span> <span class="punctuation">:</span> <span class="string">"Picasso"</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="attr">"finished"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">18</span><span class="punctuation">,</span> <span class="number">12</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"badges"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"black"</span><span class="punctuation">,</span> <span class="string">"blue"</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">78</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">8</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">57</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">7</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><h5 id="5、查询status为A并且要么age小于30要么type为1的文档"><a href="#5、查询status为A并且要么age小于30要么type为1的文档" class="headerlink" title="5、查询status为A并且要么age小于30要么type为1的文档"></a>5、查询status为A并且要么age小于30要么type为1的文档</h5><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.users.find(<span class="punctuation">{</span>status<span class="punctuation">:</span><span class="string">"A"</span><span class="punctuation">,</span>$or<span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">{</span>age<span class="punctuation">:</span><span class="punctuation">{</span>$lt<span class="punctuation">:</span><span class="number">30</span><span class="punctuation">}</span><span class="punctuation">}</span><span class="punctuation">,</span><span class="punctuation">{</span>type<span class="punctuation">:</span><span class="number">1</span><span class="punctuation">}</span><span class="punctuation">]</span><span class="punctuation">}</span>)</span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"bob"</span><span class="punctuation">,</span> <span class="attr">"age"</span> <span class="punctuation">:</span> <span class="number">42</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span> <span class="attr">"favorites"</span> <span class="punctuation">:</span> <span class="punctuation">{</span> <span class="attr">"artist"</span> <span class="punctuation">:</span> <span class="string">"Miro"</span><span class="punctuation">,</span> <span class="attr">"food"</span> <span class="punctuation">:</span> <span class="string">"meringue"</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="attr">"finished"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">11</span><span class="punctuation">,</span> <span class="number">25</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"badges"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"green"</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">85</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">64</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">12</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"ahn"</span><span class="punctuation">,</span> <span class="attr">"age"</span> <span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span> <span class="attr">"favorites"</span> <span class="punctuation">:</span> <span class="punctuation">{</span> <span class="attr">"artist"</span> <span class="punctuation">:</span> <span class="string">"Cassatt"</span><span class="punctuation">,</span> <span class="attr">"food"</span> <span class="punctuation">:</span> <span class="string">"cake"</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="attr">"finished"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">6</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"badges"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"blue"</span><span class="punctuation">,</span> <span class="string">"red"</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">81</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">8</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">55</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"abc"</span><span class="punctuation">,</span> <span class="attr">"age"</span> <span class="punctuation">:</span> <span class="number">43</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span> <span class="attr">"favorites"</span> <span class="punctuation">:</span> <span class="punctuation">{</span> <span class="attr">"food"</span> <span class="punctuation">:</span> <span class="string">"pizza"</span><span class="punctuation">,</span> <span class="attr">"artist"</span> <span class="punctuation">:</span> <span class="string">"Picasso"</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="attr">"finished"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">18</span><span class="punctuation">,</span> <span class="number">12</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"badges"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"black"</span><span class="punctuation">,</span> <span class="string">"blue"</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">78</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">8</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">57</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">7</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><h5 id="6、嵌套文档的精确查询"><a href="#6、嵌套文档的精确查询" class="headerlink" title="6、嵌套文档的精确查询"></a>6、嵌套文档的精确查询</h5><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.users.find( <span class="punctuation">{</span> favorites<span class="punctuation">:</span> <span class="punctuation">{</span> artist<span class="punctuation">:</span> <span class="string">"Picasso"</span><span class="punctuation">,</span> food<span class="punctuation">:</span> <span class="string">"pizza"</span> <span class="punctuation">}</span> <span class="punctuation">}</span> )</span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"sue"</span><span class="punctuation">,</span> <span class="attr">"age"</span> <span class="punctuation">:</span> <span class="number">19</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"P"</span><span class="punctuation">,</span> <span class="attr">"favorites"</span> <span class="punctuation">:</span> <span class="punctuation">{</span> <span class="attr">"artist"</span> <span class="punctuation">:</span> <span class="string">"Picasso"</span><span class="punctuation">,</span> <span class="attr">"food"</span> <span class="punctuation">:</span> <span class="string">"pizza"</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="attr">"finished"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">17</span><span class="punctuation">,</span> <span class="number">3</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"badges"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"blue"</span><span class="punctuation">,</span> <span class="string">"black"</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">85</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">85</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">10</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><h5 id="7、嵌套文档中字段的等于匹配"><a href="#7、嵌套文档中字段的等于匹配" class="headerlink" title="7、嵌套文档中字段的等于匹配"></a>7、嵌套文档中字段的等于匹配</h5><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.users.find( <span class="punctuation">{</span> <span class="attr">"favorites.artist"</span><span class="punctuation">:</span> <span class="string">"Picasso"</span> <span class="punctuation">}</span> )</span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"sue"</span><span class="punctuation">,</span> <span class="attr">"age"</span> <span class="punctuation">:</span> <span class="number">19</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"P"</span><span class="punctuation">,</span> <span class="attr">"favorites"</span> <span class="punctuation">:</span> <span class="punctuation">{</span> <span class="attr">"artist"</span> <span class="punctuation">:</span> <span class="string">"Picasso"</span><span class="punctuation">,</span> <span class="attr">"food"</span> <span class="punctuation">:</span> <span class="string">"pizza"</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="attr">"finished"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">17</span><span class="punctuation">,</span> <span class="number">3</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"badges"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"blue"</span><span class="punctuation">,</span> <span class="string">"black"</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">85</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">85</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">10</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"abc"</span><span class="punctuation">,</span> <span class="attr">"age"</span> <span class="punctuation">:</span> <span class="number">43</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span> <span class="attr">"favorites"</span> <span class="punctuation">:</span> <span class="punctuation">{</span> <span class="attr">"food"</span> <span class="punctuation">:</span> <span class="string">"pizza"</span><span class="punctuation">,</span> <span class="attr">"artist"</span> <span class="punctuation">:</span> <span class="string">"Picasso"</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="attr">"finished"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">18</span><span class="punctuation">,</span> <span class="number">12</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"badges"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"black"</span><span class="punctuation">,</span> <span class="string">"blue"</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">78</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">8</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">57</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">7</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><h5 id="8、数组中的精确匹配"><a href="#8、数组中的精确匹配" class="headerlink" title="8、数组中的精确匹配"></a>8、数组中的精确匹配</h5><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.users.find( <span class="punctuation">{</span> badges<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"blue"</span><span class="punctuation">,</span> <span class="string">"black"</span> <span class="punctuation">]</span> <span class="punctuation">}</span> )</span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"sue"</span><span class="punctuation">,</span> <span class="attr">"age"</span> <span class="punctuation">:</span> <span class="number">19</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"P"</span><span class="punctuation">,</span> <span class="attr">"favorites"</span> <span class="punctuation">:</span> <span class="punctuation">{</span> <span class="attr">"artist"</span> <span class="punctuation">:</span> <span class="string">"Picasso"</span><span class="punctuation">,</span> <span class="attr">"food"</span> <span class="punctuation">:</span> <span class="string">"pizza"</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="attr">"finished"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">17</span><span class="punctuation">,</span> <span class="number">3</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"badges"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"blue"</span><span class="punctuation">,</span> <span class="string">"black"</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">85</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">85</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">10</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><h5 id="9、匹配数组中包含某个元素的文档"><a href="#9、匹配数组中包含某个元素的文档" class="headerlink" title="9、匹配数组中包含某个元素的文档"></a>9、匹配数组中包含某个元素的文档</h5><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.users.find( <span class="punctuation">{</span> badges<span class="punctuation">:</span> <span class="string">"black"</span> <span class="punctuation">}</span> )</span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"sue"</span><span class="punctuation">,</span> <span class="attr">"age"</span> <span class="punctuation">:</span> <span class="number">19</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"P"</span><span class="punctuation">,</span> <span class="attr">"favorites"</span> <span class="punctuation">:</span> <span class="punctuation">{</span> <span class="attr">"artist"</span> <span class="punctuation">:</span> <span class="string">"Picasso"</span><span class="punctuation">,</span> <span class="attr">"food"</span> <span class="punctuation">:</span> <span class="string">"pizza"</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="attr">"finished"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">17</span><span class="punctuation">,</span> <span class="number">3</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"badges"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"blue"</span><span class="punctuation">,</span> <span class="string">"black"</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">85</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">85</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">10</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"xi"</span><span class="punctuation">,</span> <span class="attr">"age"</span> <span class="punctuation">:</span> <span class="number">34</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"D"</span><span class="punctuation">,</span> <span class="attr">"favorites"</span> <span class="punctuation">:</span> <span class="punctuation">{</span> <span class="attr">"artist"</span> <span class="punctuation">:</span> <span class="string">"Chagall"</span><span class="punctuation">,</span> <span class="attr">"food"</span> <span class="punctuation">:</span> <span class="string">"chocolate"</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="attr">"finished"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">11</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"badges"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"red"</span><span class="punctuation">,</span> <span class="string">"black"</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">53</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">15</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">51</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">15</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"abc"</span><span class="punctuation">,</span> <span class="attr">"age"</span> <span class="punctuation">:</span> <span class="number">43</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span> <span class="attr">"favorites"</span> <span class="punctuation">:</span> <span class="punctuation">{</span> <span class="attr">"food"</span> <span class="punctuation">:</span> <span class="string">"pizza"</span><span class="punctuation">,</span> <span class="attr">"artist"</span> <span class="punctuation">:</span> <span class="string">"Picasso"</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="attr">"finished"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">18</span><span class="punctuation">,</span> <span class="number">12</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"badges"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"black"</span><span class="punctuation">,</span> <span class="string">"blue"</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">78</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">8</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">57</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">7</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><h5 id="10、匹配数组指定位置为某个值的元素"><a href="#10、匹配数组指定位置为某个值的元素" class="headerlink" title="10、匹配数组指定位置为某个值的元素"></a>10、匹配数组指定位置为某个值的元素</h5><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.users.find( <span class="punctuation">{</span> <span class="attr">"badges.0"</span><span class="punctuation">:</span> <span class="string">"black"</span> <span class="punctuation">}</span> )</span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"abc"</span><span class="punctuation">,</span> <span class="attr">"age"</span> <span class="punctuation">:</span> <span class="number">43</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span> <span class="attr">"favorites"</span> <span class="punctuation">:</span> <span class="punctuation">{</span> <span class="attr">"food"</span> <span class="punctuation">:</span> <span class="string">"pizza"</span><span class="punctuation">,</span> <span class="attr">"artist"</span> <span class="punctuation">:</span> <span class="string">"Picasso"</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="attr">"finished"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">18</span><span class="punctuation">,</span> <span class="number">12</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"badges"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"black"</span><span class="punctuation">,</span> <span class="string">"blue"</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">78</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">8</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">57</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">7</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><h5 id="11、-elemMatch查询数组中至少有一个元素满足所有指定条件的文档"><a href="#11、-elemMatch查询数组中至少有一个元素满足所有指定条件的文档" class="headerlink" title="11、$elemMatch查询数组中至少有一个元素满足所有指定条件的文档"></a>11、<code>$elemMatch</code>查询数组中至少有一个元素满足所有指定条件的文档</h5><p>至少有一个元素满足小于20并且大于15。</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.users.find( <span class="punctuation">{</span> finished<span class="punctuation">:</span> <span class="punctuation">{</span> $elemMatch<span class="punctuation">:</span> <span class="punctuation">{</span> $gt<span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span> $lt<span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span> <span class="punctuation">}</span> <span class="punctuation">}</span> )</span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"sue"</span><span class="punctuation">,</span> <span class="attr">"age"</span> <span class="punctuation">:</span> <span class="number">19</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"P"</span><span class="punctuation">,</span> <span class="attr">"favorites"</span> <span class="punctuation">:</span> <span class="punctuation">{</span> <span class="attr">"artist"</span> <span class="punctuation">:</span> <span class="string">"Picasso"</span><span class="punctuation">,</span> <span class="attr">"food"</span> <span class="punctuation">:</span> <span class="string">"pizza"</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="attr">"finished"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">17</span><span class="punctuation">,</span> <span class="number">3</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"badges"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"blue"</span><span class="punctuation">,</span> <span class="string">"black"</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">85</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">85</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">10</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"abc"</span><span class="punctuation">,</span> <span class="attr">"age"</span> <span class="punctuation">:</span> <span class="number">43</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span> <span class="attr">"favorites"</span> <span class="punctuation">:</span> <span class="punctuation">{</span> <span class="attr">"food"</span> <span class="punctuation">:</span> <span class="string">"pizza"</span><span class="punctuation">,</span> <span class="attr">"artist"</span> <span class="punctuation">:</span> <span class="string">"Picasso"</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="attr">"finished"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">18</span><span class="punctuation">,</span> <span class="number">12</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"badges"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"black"</span><span class="punctuation">,</span> <span class="string">"blue"</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">78</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">8</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">57</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">7</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><h5 id="11、元素组合满足查询条件"><a href="#11、元素组合满足查询条件" class="headerlink" title="11、元素组合满足查询条件"></a>11、元素组合满足查询条件</h5><p>查询一个元素小于15另一个元素大于20或者某一个元素同时满足这两个条件</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.users.find( <span class="punctuation">{</span> finished<span class="punctuation">:</span> <span class="punctuation">{</span> $gt<span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span> $lt<span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span> <span class="punctuation">}</span> )</span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"sue"</span><span class="punctuation">,</span> <span class="attr">"age"</span> <span class="punctuation">:</span> <span class="number">19</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"P"</span><span class="punctuation">,</span> <span class="attr">"favorites"</span> <span class="punctuation">:</span> <span class="punctuation">{</span> <span class="attr">"artist"</span> <span class="punctuation">:</span> <span class="string">"Picasso"</span><span class="punctuation">,</span> <span class="attr">"food"</span> <span class="punctuation">:</span> <span class="string">"pizza"</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="attr">"finished"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">17</span><span class="punctuation">,</span> <span class="number">3</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"badges"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"blue"</span><span class="punctuation">,</span> <span class="string">"black"</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">85</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">85</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">10</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"bob"</span><span class="punctuation">,</span> <span class="attr">"age"</span> <span class="punctuation">:</span> <span class="number">42</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span> <span class="attr">"favorites"</span> <span class="punctuation">:</span> <span class="punctuation">{</span> <span class="attr">"artist"</span> <span class="punctuation">:</span> <span class="string">"Miro"</span><span class="punctuation">,</span> <span class="attr">"food"</span> <span class="punctuation">:</span> <span class="string">"meringue"</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="attr">"finished"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">11</span><span class="punctuation">,</span> <span class="number">25</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"badges"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"green"</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">85</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">64</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">12</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"abc"</span><span class="punctuation">,</span> <span class="attr">"age"</span> <span class="punctuation">:</span> <span class="number">43</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span> <span class="attr">"favorites"</span> <span class="punctuation">:</span> <span class="punctuation">{</span> <span class="attr">"food"</span> <span class="punctuation">:</span> <span class="string">"pizza"</span><span class="punctuation">,</span> <span class="attr">"artist"</span> <span class="punctuation">:</span> <span class="string">"Picasso"</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="attr">"finished"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">18</span><span class="punctuation">,</span> <span class="number">12</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"badges"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"black"</span><span class="punctuation">,</span> <span class="string">"blue"</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">78</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">8</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">57</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">7</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><h5 id="12、使用数组指定索引匹配嵌入文档中的字段"><a href="#12、使用数组指定索引匹配嵌入文档中的字段" class="headerlink" title="12、使用数组指定索引匹配嵌入文档中的字段"></a>12、使用数组指定索引匹配嵌入文档中的字段</h5><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.users.find( <span class="punctuation">{</span> 'points<span class="number">.0</span>.points'<span class="punctuation">:</span> <span class="punctuation">{</span> $lte<span class="punctuation">:</span> <span class="number">55</span> <span class="punctuation">}</span> <span class="punctuation">}</span> )</span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"xi"</span><span class="punctuation">,</span> <span class="attr">"age"</span> <span class="punctuation">:</span> <span class="number">34</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"D"</span><span class="punctuation">,</span> <span class="attr">"favorites"</span> <span class="punctuation">:</span> <span class="punctuation">{</span> <span class="attr">"artist"</span> <span class="punctuation">:</span> <span class="string">"Chagall"</span><span class="punctuation">,</span> <span class="attr">"food"</span> <span class="punctuation">:</span> <span class="string">"chocolate"</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="attr">"finished"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">11</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"badges"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"red"</span><span class="punctuation">,</span> <span class="string">"black"</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">53</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">15</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">51</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">15</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><h5 id="13、使用数组不指定索引匹配嵌入文档中的字段"><a href="#13、使用数组不指定索引匹配嵌入文档中的字段" class="headerlink" title="13、使用数组不指定索引匹配嵌入文档中的字段"></a>13、使用数组不指定索引匹配嵌入文档中的字段</h5><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.users.find( <span class="punctuation">{</span> 'points.points'<span class="punctuation">:</span> <span class="punctuation">{</span> $lte<span class="punctuation">:</span> <span class="number">55</span> <span class="punctuation">}</span> <span class="punctuation">}</span> )</span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"ahn"</span><span class="punctuation">,</span> <span class="attr">"age"</span> <span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span> <span class="attr">"favorites"</span> <span class="punctuation">:</span> <span class="punctuation">{</span> <span class="attr">"artist"</span> <span class="punctuation">:</span> <span class="string">"Cassatt"</span><span class="punctuation">,</span> <span class="attr">"food"</span> <span class="punctuation">:</span> <span class="string">"cake"</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="attr">"finished"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">6</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"badges"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"blue"</span><span class="punctuation">,</span> <span class="string">"red"</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">81</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">8</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">55</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"xi"</span><span class="punctuation">,</span> <span class="attr">"age"</span> <span class="punctuation">:</span> <span class="number">34</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"D"</span><span class="punctuation">,</span> <span class="attr">"favorites"</span> <span class="punctuation">:</span> <span class="punctuation">{</span> <span class="attr">"artist"</span> <span class="punctuation">:</span> <span class="string">"Chagall"</span><span class="punctuation">,</span> <span class="attr">"food"</span> <span class="punctuation">:</span> <span class="string">"chocolate"</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="attr">"finished"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">11</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"badges"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"red"</span><span class="punctuation">,</span> <span class="string">"black"</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">53</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">15</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">51</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">15</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><h5 id="14、单个元素满足条件"><a href="#14、单个元素满足条件" class="headerlink" title="14、单个元素满足条件"></a>14、单个元素满足条件</h5><p>使用 <code>$elemMatch</code>操作符为数组元素指定符合条件，以查询数组中至少一个元素满足所有指定条件的文档。</p><p>下面的例子查询 <code>points</code> 数组有至少一个包含 <code>points</code> 小于等于 <code>70</code> 并且字段 <code>bonus</code> 等于 <code>20</code> 的内嵌文档的文档。</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.users.find( <span class="punctuation">{</span> points<span class="punctuation">:</span> <span class="punctuation">{</span> $elemMatch<span class="punctuation">:</span> <span class="punctuation">{</span> points<span class="punctuation">:</span> <span class="punctuation">{</span> $lte<span class="punctuation">:</span> <span class="number">70</span> <span class="punctuation">}</span><span class="punctuation">,</span> bonus<span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span> <span class="punctuation">}</span> <span class="punctuation">}</span> )</span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"ahn"</span><span class="punctuation">,</span> <span class="attr">"age"</span> <span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span> <span class="attr">"favorites"</span> <span class="punctuation">:</span> <span class="punctuation">{</span> <span class="attr">"artist"</span> <span class="punctuation">:</span> <span class="string">"Cassatt"</span><span class="punctuation">,</span> <span class="attr">"food"</span> <span class="punctuation">:</span> <span class="string">"cake"</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="attr">"finished"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">6</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"badges"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"blue"</span><span class="punctuation">,</span> <span class="string">"red"</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">81</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">8</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">55</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><h5 id="15、元素组合满足某个条件"><a href="#15、元素组合满足某个条件" class="headerlink" title="15、元素组合满足某个条件"></a>15、元素组合满足某个条件</h5><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.users.find( <span class="punctuation">{</span> <span class="attr">"points.points"</span><span class="punctuation">:</span> <span class="punctuation">{</span> $lte<span class="punctuation">:</span> <span class="number">70</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="attr">"points.bonus"</span><span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span> )</span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"bob"</span><span class="punctuation">,</span> <span class="attr">"age"</span> <span class="punctuation">:</span> <span class="number">42</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span> <span class="attr">"favorites"</span> <span class="punctuation">:</span> <span class="punctuation">{</span> <span class="attr">"artist"</span> <span class="punctuation">:</span> <span class="string">"Miro"</span><span class="punctuation">,</span> <span class="attr">"food"</span> <span class="punctuation">:</span> <span class="string">"meringue"</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="attr">"finished"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">11</span><span class="punctuation">,</span> <span class="number">25</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"badges"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"green"</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">85</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">64</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">12</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"ahn"</span><span class="punctuation">,</span> <span class="attr">"age"</span> <span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span> <span class="attr">"favorites"</span> <span class="punctuation">:</span> <span class="punctuation">{</span> <span class="attr">"artist"</span> <span class="punctuation">:</span> <span class="string">"Cassatt"</span><span class="punctuation">,</span> <span class="attr">"food"</span> <span class="punctuation">:</span> <span class="string">"cake"</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="attr">"finished"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">6</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"badges"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"blue"</span><span class="punctuation">,</span> <span class="string">"red"</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">81</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">8</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">55</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><h5 id="16、使用-mod进行模运算查询"><a href="#16、使用-mod进行模运算查询" class="headerlink" title="16、使用$mod进行模运算查询"></a>16、使用<code>$mod</code>进行模运算查询</h5><p>c1的数据集如下：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c1.find()</span><br><span class="line">{ "_id" : ObjectId("5f97bb1a0436fe0f6dbb0526"), "age" : <span class="number">1</span>, "length" : <span class="number">30</span> }</span><br><span class="line">{ "_id" : ObjectId("5f97bb200436fe0f6dbb0527"), "age" : <span class="number">7</span>, "length" : <span class="number">30</span> }</span><br><span class="line">{ "_id" : ObjectId("5f97bb260436fe0f6dbb0528"), "age" : <span class="number">8</span>, "length" : <span class="number">30</span> }</span><br><span class="line">{ "_id" : ObjectId("5f97bb860436fe0f6dbb052a"), "age" : <span class="number">13</span>, "length" : <span class="number">30</span> }</span><br></pre></td></tr></tbody></table></figure><p>取年龄模6结果为1的数据</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c1.find({age:{$mod:[<span class="number">6</span>,<span class="number">1</span>]}})</span><br><span class="line">{ "_id" : ObjectId("5f97bb1a0436fe0f6dbb0526"), "age" : <span class="number">1</span>, "length" : <span class="number">30</span> }</span><br><span class="line">{ "_id" : ObjectId("5f97bb200436fe0f6dbb0527"), "age" : <span class="number">7</span>, "length" : <span class="number">30</span> }</span><br><span class="line">{ "_id" : ObjectId("5f97bb860436fe0f6dbb052a"), "age" : <span class="number">13</span>, "length" : <span class="number">30</span> }</span><br></pre></td></tr></tbody></table></figure><h5 id="17、使用-regex进行模糊查询"><a href="#17、使用-regex进行模糊查询" class="headerlink" title="17、使用$regex进行模糊查询"></a>17、使用<code>$regex</code>进行模糊查询</h5><p>c2的数据集如下：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c2.find() </span><br><span class="line">{ "_id" : ObjectId("5f97bc460436fe0f6dbb052b"), "name" : "小明", "age" : <span class="number">20</span> }</span><br><span class="line">{ "_id" : ObjectId("5f97bc4c0436fe0f6dbb052c"), "name" : "小刚", "age" : <span class="number">20</span> }</span><br><span class="line">{ "_id" : ObjectId("5f97bc570436fe0f6dbb052d"), "name" : "小明明", "age" : <span class="number">20</span> }</span><br><span class="line">{ "_id" : ObjectId("5f97bc5f0436fe0f6dbb052e"), "name" : "大明", "age" : <span class="number">20</span> }</span><br></pre></td></tr></tbody></table></figure><p>查name中包含“明”的数据：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c2.find({name:{"$regex":"明"}}))</span><br><span class="line">{ "_id" : ObjectId("5f97bc460436fe0f6dbb052b"), "name" : "小明", "age" : <span class="number">20</span> }</span><br><span class="line">{ "_id" : ObjectId("5f97bc570436fe0f6dbb052d"), "name" : "小明明", "age" : <span class="number">20</span> }</span><br><span class="line">{ "_id" : ObjectId("5f97bc5f0436fe0f6dbb052e"), "name" : "大明", "age" : <span class="number">20</span> }</span><br></pre></td></tr></tbody></table></figure><h5 id="18、使用-text对有text索引的字段进行模糊查询"><a href="#18、使用-text对有text索引的字段进行模糊查询" class="headerlink" title="18、使用$text对有text索引的字段进行模糊查询"></a>18、使用<code>$text</code>对有<code>text</code>索引的字段进行模糊查询</h5><p>先对c4添加索引：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c4.createIndex( { subject: "text" } )</span><br></pre></td></tr></tbody></table></figure><p>c4的数据集如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.c4.find( )</span><br><span class="line">{ "_id" : 1, "subject" : "hello world", "title" : "hello" }</span><br><span class="line">{ "_id" : 2, "subject" : "hello python", "title" : "python" }</span><br><span class="line">{ "_id" : 3, "subject" : "hello java", "title" : "java" }</span><br><span class="line">{ "_id" : 4, "subject" : "hello mongodb", "title" : "mongodb" }</span><br><span class="line">{ "_id" : 5, "subject" : "中文", "title" : "mongodb" }</span><br></pre></td></tr></tbody></table></figure><p>使用”$text”进行查询</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c4.find({"$text":{"$search":"world"}})</span><br><span class="line">{ "_id" : <span class="number">1</span>, "subject" : "hello world", "title" : "hello" }</span><br></pre></td></tr></tbody></table></figure><h5 id="19、使用-where进行查询"><a href="#19、使用-where进行查询" class="headerlink" title="19、使用$where进行查询"></a>19、使用<code>$where</code>进行查询</h5><p>c5的数据集如下：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c5.find()</span><br><span class="line">{ "_id" : ObjectId("5f98df8e4262ff84adb202d5"), "a" : { "a" : <span class="number">1</span> }, "b" : <span class="number">2</span>, "c" : <span class="number">3</span> }</span><br><span class="line">{ "_id" : ObjectId("5f98df9c4262ff84adb202d6"), "a" : { "a" : <span class="number">1</span>, "b" : "1" }, "b" : <span class="number">2</span>, "c" : <span class="number">3</span> }</span><br><span class="line">{ "_id" : ObjectId("5f98df9f4262ff84adb202d7"), "a" : { "a" : <span class="number">1</span>, "b" : "2" }, "b" : <span class="number">2</span>, "c" : <span class="number">3</span> }</span><br></pre></td></tr></tbody></table></figure><p>查询某条内嵌文档中a的值跟b的值相等的数据：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> db.c5.find({$<span class="keyword">where</span>:"this.a.a==this.a.b"})</span><br><span class="line">{ "_id" : ObjectId("5f98df9c4262ff84adb202d6"), "a" : { "a" : <span class="number">1</span>, "b" : "1" }, "b" : <span class="number">2</span>, "c" : <span class="number">3</span> }</span><br></pre></td></tr></tbody></table></figure><h4 id="3、返回查询的映射字段"><a href="#3、返回查询的映射字段" class="headerlink" title="3、返回查询的映射字段"></a>3、返回查询的映射字段</h4><p>插入数据：</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">db.users.insertMany(</span><br><span class="line">  <span class="punctuation">[</span></span><br><span class="line">     <span class="punctuation">{</span></span><br><span class="line">       _id<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">       name<span class="punctuation">:</span> <span class="string">"sue"</span><span class="punctuation">,</span></span><br><span class="line">       age<span class="punctuation">:</span> <span class="number">19</span><span class="punctuation">,</span></span><br><span class="line">       type<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">       status<span class="punctuation">:</span> <span class="string">"P"</span><span class="punctuation">,</span></span><br><span class="line">       favorites<span class="punctuation">:</span> <span class="punctuation">{</span> artist<span class="punctuation">:</span> <span class="string">"Picasso"</span><span class="punctuation">,</span> food<span class="punctuation">:</span> <span class="string">"pizza"</span> <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">       finished<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">17</span><span class="punctuation">,</span> <span class="number">3</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">       badges<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"blue"</span><span class="punctuation">,</span> <span class="string">"black"</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">       points<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">{</span> points<span class="punctuation">:</span> <span class="number">85</span><span class="punctuation">,</span> bonus<span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">{</span> points<span class="punctuation">:</span> <span class="number">85</span><span class="punctuation">,</span> bonus<span class="punctuation">:</span> <span class="number">10</span> <span class="punctuation">}</span></span><br><span class="line">       <span class="punctuation">]</span></span><br><span class="line">     <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">     <span class="punctuation">{</span></span><br><span class="line">       _id<span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">       name<span class="punctuation">:</span> <span class="string">"bob"</span><span class="punctuation">,</span></span><br><span class="line">       age<span class="punctuation">:</span> <span class="number">42</span><span class="punctuation">,</span></span><br><span class="line">       type<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">       status<span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span></span><br><span class="line">       favorites<span class="punctuation">:</span> <span class="punctuation">{</span> artist<span class="punctuation">:</span> <span class="string">"Miro"</span><span class="punctuation">,</span> food<span class="punctuation">:</span> <span class="string">"meringue"</span> <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">       finished<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">11</span><span class="punctuation">,</span> <span class="number">25</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">       badges<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"green"</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">       points<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">{</span> points<span class="punctuation">:</span> <span class="number">85</span><span class="punctuation">,</span> bonus<span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">{</span> points<span class="punctuation">:</span> <span class="number">64</span><span class="punctuation">,</span> bonus<span class="punctuation">:</span> <span class="number">12</span> <span class="punctuation">}</span></span><br><span class="line">       <span class="punctuation">]</span></span><br><span class="line">     <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">     <span class="punctuation">{</span></span><br><span class="line">       _id<span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">       name<span class="punctuation">:</span> <span class="string">"ahn"</span><span class="punctuation">,</span></span><br><span class="line">       age<span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">       type<span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">       status<span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span></span><br><span class="line">       favorites<span class="punctuation">:</span> <span class="punctuation">{</span> artist<span class="punctuation">:</span> <span class="string">"Cassatt"</span><span class="punctuation">,</span> food<span class="punctuation">:</span> <span class="string">"cake"</span> <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">       finished<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">6</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">       badges<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"blue"</span><span class="punctuation">,</span> <span class="string">"red"</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">       points<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">{</span> points<span class="punctuation">:</span> <span class="number">81</span><span class="punctuation">,</span> bonus<span class="punctuation">:</span> <span class="number">8</span> <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">{</span> points<span class="punctuation">:</span> <span class="number">55</span><span class="punctuation">,</span> bonus<span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span></span><br><span class="line">       <span class="punctuation">]</span></span><br><span class="line">     <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">     <span class="punctuation">{</span></span><br><span class="line">       _id<span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">       name<span class="punctuation">:</span> <span class="string">"xi"</span><span class="punctuation">,</span></span><br><span class="line">       age<span class="punctuation">:</span> <span class="number">34</span><span class="punctuation">,</span></span><br><span class="line">       type<span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">       status<span class="punctuation">:</span> <span class="string">"D"</span><span class="punctuation">,</span></span><br><span class="line">       favorites<span class="punctuation">:</span> <span class="punctuation">{</span> artist<span class="punctuation">:</span> <span class="string">"Chagall"</span><span class="punctuation">,</span> food<span class="punctuation">:</span> <span class="string">"chocolate"</span> <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">       finished<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">11</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">       badges<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"red"</span><span class="punctuation">,</span> <span class="string">"black"</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">       points<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">{</span> points<span class="punctuation">:</span> <span class="number">53</span><span class="punctuation">,</span> bonus<span class="punctuation">:</span> <span class="number">15</span> <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">{</span> points<span class="punctuation">:</span> <span class="number">51</span><span class="punctuation">,</span> bonus<span class="punctuation">:</span> <span class="number">15</span> <span class="punctuation">}</span></span><br><span class="line">       <span class="punctuation">]</span></span><br><span class="line">     <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">     <span class="punctuation">{</span></span><br><span class="line">       _id<span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">       name<span class="punctuation">:</span> <span class="string">"xyz"</span><span class="punctuation">,</span></span><br><span class="line">       age<span class="punctuation">:</span> <span class="number">23</span><span class="punctuation">,</span></span><br><span class="line">       type<span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">       status<span class="punctuation">:</span> <span class="string">"D"</span><span class="punctuation">,</span></span><br><span class="line">       favorites<span class="punctuation">:</span> <span class="punctuation">{</span> artist<span class="punctuation">:</span> <span class="string">"Noguchi"</span><span class="punctuation">,</span> food<span class="punctuation">:</span> <span class="string">"nougat"</span> <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">       finished<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">14</span><span class="punctuation">,</span> <span class="number">6</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">       badges<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"orange"</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">       points<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">{</span> points<span class="punctuation">:</span> <span class="number">71</span><span class="punctuation">,</span> bonus<span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span></span><br><span class="line">       <span class="punctuation">]</span></span><br><span class="line">     <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">     <span class="punctuation">{</span></span><br><span class="line">       _id<span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">       name<span class="punctuation">:</span> <span class="string">"abc"</span><span class="punctuation">,</span></span><br><span class="line">       age<span class="punctuation">:</span> <span class="number">43</span><span class="punctuation">,</span></span><br><span class="line">       type<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">       status<span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span></span><br><span class="line">       favorites<span class="punctuation">:</span> <span class="punctuation">{</span> food<span class="punctuation">:</span> <span class="string">"pizza"</span><span class="punctuation">,</span> artist<span class="punctuation">:</span> <span class="string">"Picasso"</span> <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">       finished<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">18</span><span class="punctuation">,</span> <span class="number">12</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">       badges<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"black"</span><span class="punctuation">,</span> <span class="string">"blue"</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">       points<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">{</span> points<span class="punctuation">:</span> <span class="number">78</span><span class="punctuation">,</span> bonus<span class="punctuation">:</span> <span class="number">8</span> <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">{</span> points<span class="punctuation">:</span> <span class="number">57</span><span class="punctuation">,</span> bonus<span class="punctuation">:</span> <span class="number">7</span> <span class="punctuation">}</span></span><br><span class="line">       <span class="punctuation">]</span></span><br><span class="line">     <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><h5 id="1、映射文档"><a href="#1、映射文档" class="headerlink" title="1、映射文档"></a>1、映射文档</h5><p>映射文档限制返回匹配文档的所有字段，映射文档可以指明包括哪些字段或者排除哪些字段，格式为：</p><blockquote><p>{ field1: <value>,  field2: <value> }</value></value></p></blockquote><ul><li>1或true在返回的文档中包含字段</li><li>0或者false排除该字段</li><li>使用Projection Operators表达式</li></ul><p>其中_id字段为默认显示的，当不想显示时必须设置为0。并且在指定时要么都设置为1，要么都设置为0，不能部分设置为1，部分设置为0.</p><ol><li><h5 id="返回匹配文档的所有字段"><a href="#返回匹配文档的所有字段" class="headerlink" title="返回匹配文档的所有字段"></a>返回匹配文档的所有字段</h5><p>如果没有指定映射，<code>db.collection.find()</code>方法将会返回满足查询的所有文档的所有字段。</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.users.find(<span class="punctuation">{</span>status<span class="punctuation">:</span><span class="string">"P"</span><span class="punctuation">}</span>)</span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"sue"</span><span class="punctuation">,</span> <span class="attr">"age"</span> <span class="punctuation">:</span> <span class="number">19</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"P"</span><span class="punctuation">,</span> <span class="attr">"favorites"</span> <span class="punctuation">:</span> <span class="punctuation">{</span> <span class="attr">"artist"</span> <span class="punctuation">:</span> <span class="string">"Picasso"</span><span class="punctuation">,</span> <span class="attr">"food"</span> <span class="punctuation">:</span> <span class="string">"pizza"</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="attr">"finished"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">17</span><span class="punctuation">,</span> <span class="number">3</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"badges"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"blue"</span><span class="punctuation">,</span> <span class="string">"black"</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">85</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">85</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">10</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="只返回指定字段和-id字段"><a href="#只返回指定字段和-id字段" class="headerlink" title="只返回指定字段和_id字段"></a>只返回指定字段和<code>_id</code>字段</h5><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.users.find(<span class="punctuation">{</span>status<span class="punctuation">:</span><span class="string">"A"</span><span class="punctuation">}</span><span class="punctuation">,</span><span class="punctuation">{</span>name<span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span>status<span class="punctuation">:</span><span class="number">1</span><span class="punctuation">}</span>)</span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"bob"</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"ahn"</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"abc"</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span> <span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="只返回指定字段"><a href="#只返回指定字段" class="headerlink" title="只返回指定字段"></a>只返回指定字段</h5><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.users.find(<span class="punctuation">{</span>status<span class="punctuation">:</span><span class="string">"A"</span><span class="punctuation">}</span><span class="punctuation">,</span><span class="punctuation">{</span>name<span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span>status<span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span>_id<span class="punctuation">:</span><span class="number">0</span><span class="punctuation">}</span>)</span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"bob"</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"ahn"</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"abc"</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span> <span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="返回排除字段之外的所有字段"><a href="#返回排除字段之外的所有字段" class="headerlink" title="返回排除字段之外的所有字段"></a>返回排除字段之外的所有字段</h5><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.users.find(<span class="punctuation">{</span>status<span class="punctuation">:</span><span class="string">"A"</span><span class="punctuation">}</span><span class="punctuation">,</span><span class="punctuation">{</span>favorites<span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span>points<span class="punctuation">:</span><span class="number">0</span><span class="punctuation">}</span>)</span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"bob"</span><span class="punctuation">,</span> <span class="attr">"age"</span> <span class="punctuation">:</span> <span class="number">42</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span> <span class="attr">"finished"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">11</span><span class="punctuation">,</span> <span class="number">25</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"badges"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"green"</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"ahn"</span><span class="punctuation">,</span> <span class="attr">"age"</span> <span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span> <span class="attr">"finished"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">6</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"badges"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"blue"</span><span class="punctuation">,</span> <span class="string">"red"</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"abc"</span><span class="punctuation">,</span> <span class="attr">"age"</span> <span class="punctuation">:</span> <span class="number">43</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span> <span class="attr">"finished"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">18</span><span class="punctuation">,</span> <span class="number">12</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">"badges"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"black"</span><span class="punctuation">,</span> <span class="string">"blue"</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="返回嵌入文档中的指定字段"><a href="#返回嵌入文档中的指定字段" class="headerlink" title="返回嵌入文档中的指定字段"></a>返回嵌入文档中的指定字段</h5><p>使用dot notation返回嵌入文档中的特定字段</p><ul><li><p>返回favorites文档中的food字段，food字段仍然保持嵌入在favorites文档中。</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.users.find(<span class="punctuation">{</span>status<span class="punctuation">:</span><span class="string">"A"</span><span class="punctuation">}</span><span class="punctuation">,</span><span class="punctuation">{</span>name<span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span>status<span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span>'favorites.food'<span class="punctuation">:</span><span class="number">1</span><span class="punctuation">}</span>)</span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"bob"</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span> <span class="attr">"favorites"</span> <span class="punctuation">:</span> <span class="punctuation">{</span> <span class="attr">"food"</span> <span class="punctuation">:</span> <span class="string">"meringue"</span> <span class="punctuation">}</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"ahn"</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span> <span class="attr">"favorites"</span> <span class="punctuation">:</span> <span class="punctuation">{</span> <span class="attr">"food"</span> <span class="punctuation">:</span> <span class="string">"cake"</span> <span class="punctuation">}</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"abc"</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span> <span class="attr">"favorites"</span> <span class="punctuation">:</span> <span class="punctuation">{</span> <span class="attr">"food"</span> <span class="punctuation">:</span> <span class="string">"pizza"</span> <span class="punctuation">}</span> <span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><h5 id="排除嵌入文档中的特定字段"><a href="#排除嵌入文档中的特定字段" class="headerlink" title="排除嵌入文档中的特定字段"></a>排除嵌入文档中的特定字段</h5><p>排除favorites中的food，其他的仍然嵌套显示。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.users.find({status:"A"},{'favorites.food':0})</span><br><span class="line">{ "_id" : 2, "name" : "bob", "age" : 42, "type" : 1, "status" : "A", "favorites" : { "artist" : "Miro" }, "finished" : [ 11, 25 ], "badges" : [ "green" ], "points" : [ { "points" : 85, "bonus" : 20 }, { "points" : 64, "bonus" : 12 } ] }</span><br><span class="line">{ "_id" : 3, "name" : "ahn", "age" : 22, "type" : 2, "status" : "A", "favorites" : { "artist" : "Cassatt" }, "finished" : [ 6 ], "badges" : [ "blue", "red" ], "points" : [ { "points" : 81, "bonus" : 8 }, { "points" : 55, "bonus" : 20 } ] }</span><br><span class="line">{ "_id" : 6, "name" : "abc", "age" : 43, "type" : 1, "status" : "A", "favorites" : { "artist" : "Picasso" }, "finished" : [ 18, 12 ], "badges" : [ "black", "blue" ], "points" : [ { "points" : 78, "bonus" : 8 }, { "points" : 57, "bonus" : 7 } ] }</span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="映射数组中的嵌入文档"><a href="#映射数组中的嵌入文档" class="headerlink" title="映射数组中的嵌入文档"></a>映射数组中的嵌入文档</h5><p>使用<code>dot notation</code>映射嵌入数组中文档的特定字段。dot notation映射代表<code>&lt;array&gt;.&lt;index&gt;</code>格式的数据。</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.users.find(<span class="punctuation">{</span>status<span class="punctuation">:</span><span class="string">"A"</span><span class="punctuation">}</span><span class="punctuation">,</span><span class="punctuation">{</span>name<span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span>status<span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">"points.bonus"</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">}</span>)</span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"bob"</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">12</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"ahn"</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">8</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"abc"</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">8</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">7</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="映射返回数组中特定的数组元素（切片）"><a href="#映射返回数组中特定的数组元素（切片）" class="headerlink" title="映射返回数组中特定的数组元素（切片）"></a>映射返回数组中特定的数组元素（切片）</h5><p>对于包含数组的字段，MongoDB提供了以下的映射操作符：<code>$elemMatch</code>,<code>$slice</code>,以及<code>$</code>。</p><p><strong>示例</strong>：<strong>返回数组中的最后一个元素</strong></p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.users.find(<span class="punctuation">{</span>status<span class="punctuation">:</span><span class="string">"A"</span><span class="punctuation">}</span><span class="punctuation">,</span><span class="punctuation">{</span>name<span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span>status<span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">"points"</span><span class="punctuation">:</span><span class="punctuation">{</span>$slice<span class="punctuation">:</span><span class="number">-1</span><span class="punctuation">}</span><span class="punctuation">}</span>)</span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"bob"</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">64</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">12</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"ahn"</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">55</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"abc"</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">57</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">7</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><p><strong>示例</strong>：<strong>返回数组中的第1,2个元素</strong></p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.users.find(<span class="punctuation">{</span>status<span class="punctuation">:</span><span class="string">"A"</span><span class="punctuation">}</span><span class="punctuation">,</span><span class="punctuation">{</span>name<span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span>status<span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">"points"</span><span class="punctuation">:</span><span class="punctuation">{</span>$slice<span class="punctuation">:</span><span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">]</span><span class="punctuation">}</span><span class="punctuation">}</span>)</span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"bob"</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">85</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">64</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">12</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"ahn"</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">81</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">8</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">55</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"abc"</span><span class="punctuation">,</span> <span class="attr">"status"</span> <span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">78</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">8</span> <span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span> <span class="attr">"points"</span> <span class="punctuation">:</span> <span class="number">57</span><span class="punctuation">,</span> <span class="attr">"bonus"</span> <span class="punctuation">:</span> <span class="number">7</span> <span class="punctuation">}</span> <span class="punctuation">]</span> <span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h4 id="4、查询值为Null或不存在的字段"><a href="#4、查询值为Null或不存在的字段" class="headerlink" title="4、查询值为Null或不存在的字段"></a>4、查询值为Null或不存在的字段</h4><p>首先插入数据：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.users.insert(</span><br><span class="line">   [</span><br><span class="line">      { <span class="string">"_id"</span> : <span class="number">900</span>, <span class="string">"name"</span> : null },</span><br><span class="line">      { <span class="string">"_id"</span> : <span class="number">901</span> }</span><br><span class="line">   ]</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><ol><li><h5 id="相等过滤器"><a href="#相等过滤器" class="headerlink" title="相等过滤器"></a>相等过滤器</h5><p>使用相等查询，会返回结果为null的或不存在该字段的数据。</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.users.find(<span class="punctuation">{</span>name<span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">}</span>)</span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">900</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">901</span> <span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意：</p><p>如果在查询中使用了<code>sparse</code>（稀疏索引），那么查询将仅仅匹配null值，而不匹配不存在的字段。</p><p>稀疏索引：</p><p>稀疏索引指存储那些有被索引键的文档的索引项，即使被索引键的值是null也会被索引(译者注：请注意，这里对null的处理和那些特殊索引的默认稀疏特性有细微差别，比如文本索引，2d索引等)。索引会跳过所有不包含被索引键的文档。这个索引之所以称为 “稀疏” 是因为它并不包括集合中的所有文档。与之相反，非稀疏的索引会索引每一篇文档，如果一篇文档不含被索引键则为它存储一个null值。</p></blockquote></li><li><h5 id="类型筛选"><a href="#类型筛选" class="headerlink" title="类型筛选"></a>类型筛选</h5><p>在BSON类型中null的值为10，所以可以使用以下方式查询Null：</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.users.find(<span class="punctuation">{</span>name<span class="punctuation">:</span><span class="punctuation">{</span>$type<span class="punctuation">:</span><span class="number">10</span><span class="punctuation">}</span><span class="punctuation">}</span>)</span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">900</span><span class="punctuation">,</span> <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span> <span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="存在性筛选"><a href="#存在性筛选" class="headerlink" title="存在性筛选"></a>存在性筛选</h5><p>存在性筛选可以筛选出那些不存在该字段的数据，1代表存在，0代表不存在。</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.users.find(<span class="punctuation">{</span>name<span class="punctuation">:</span><span class="punctuation">{</span>$exists<span class="punctuation">:</span><span class="number">0</span><span class="punctuation">}</span><span class="punctuation">}</span>)</span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">901</span> <span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h4 id="5、在mongo命令行中迭代游标"><a href="#5、在mongo命令行中迭代游标" class="headerlink" title="5、在mongo命令行中迭代游标"></a>5、在mongo命令行中迭代游标</h4><p>首先插入数据：</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.goods.insertMany(<span class="punctuation">[</span><span class="punctuation">{</span>_id<span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span>type<span class="punctuation">:</span><span class="number">1</span><span class="punctuation">}</span><span class="punctuation">,</span><span class="punctuation">{</span>_id<span class="punctuation">:</span><span class="number">2</span><span class="punctuation">,</span>type<span class="punctuation">:</span><span class="number">2</span><span class="punctuation">}</span><span class="punctuation">,</span><span class="punctuation">{</span>_id<span class="punctuation">:</span><span class="number">3</span><span class="punctuation">,</span>type<span class="punctuation">:</span><span class="number">3</span><span class="punctuation">}</span><span class="punctuation">]</span>)</span><br></pre></td></tr></tbody></table></figure><ol><li><h5 id="手动迭代游标"><a href="#手动迭代游标" class="headerlink" title="手动迭代游标"></a>手动迭代游标</h5><p>在mongo命令中，当使用<code>var</code>关键字把<code>find()</code>返回的游标赋值给一个变量时，它将不会自动迭代。</p><p>在命令行中，可以调用游标变量迭代最多20次并且打印匹配的文档。</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; var myCursor = db.goods.find(<span class="punctuation">{</span>type<span class="punctuation">:</span><span class="number">2</span><span class="punctuation">}</span>)</span><br><span class="line">&gt; myCursor</span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">2</span> <span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><ul><li>可以使用游标的<code>next()</code>方法来访问文档：</li></ul><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; var myCursor = db.goods.find( <span class="punctuation">{</span> type<span class="punctuation">:</span> <span class="number">2</span> <span class="punctuation">}</span> )</span><br><span class="line">&gt; while(myCursor.hasNext)<span class="punctuation">{</span>print(tojson(myCursor.next()))<span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">2</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">2</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">2</span> <span class="punctuation">}</span></span><br><span class="line"><span class="number">2020</span><span class="number">-07</span><span class="number">-09</span>T14<span class="punctuation">:</span><span class="number">52</span><span class="punctuation">:</span><span class="number">14.975</span>+<span class="number">0800</span> E QUERY    <span class="punctuation">[</span>thread1<span class="punctuation">]</span> Error<span class="punctuation">:</span> error hasNext<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span> <span class="punctuation">:</span></span><br><span class="line">DBQuery.prototype.next@src/mongo/shell/query.js<span class="punctuation">:</span><span class="number">305</span><span class="punctuation">:</span><span class="number">1</span></span><br><span class="line">@(shell)<span class="punctuation">:</span><span class="number">1</span><span class="punctuation">:</span><span class="number">38</span></span><br></pre></td></tr></tbody></table></figure><ul><li>也可以使用<code>printjson()</code>方法替代<code>print(tojson())</code>：</li></ul><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; var myCursor = db.goods.find( <span class="punctuation">{</span> type<span class="punctuation">:</span> <span class="number">2</span> <span class="punctuation">}</span> )</span><br><span class="line">&gt; while(myCursor.hasNext)<span class="punctuation">{</span>printjson(myCursor.next())<span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">2</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">2</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">2</span> <span class="punctuation">}</span></span><br><span class="line"><span class="number">2020</span><span class="number">-07</span><span class="number">-09</span>T14<span class="punctuation">:</span><span class="number">54</span><span class="punctuation">:</span><span class="number">01.521</span>+<span class="number">0800</span> E QUERY    <span class="punctuation">[</span>thread1<span class="punctuation">]</span> Error<span class="punctuation">:</span> error hasNext<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span> <span class="punctuation">:</span></span><br><span class="line">DBQuery.prototype.next@src/mongo/shell/query.js<span class="punctuation">:</span><span class="number">305</span><span class="punctuation">:</span><span class="number">1</span></span><br><span class="line">@(shell)<span class="punctuation">:</span><span class="number">1</span><span class="punctuation">:</span><span class="number">35</span></span><br></pre></td></tr></tbody></table></figure><ul><li>也可以使用游标方法<code>forEach()</code>来迭代游标并且访问文档。</li></ul><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; var myCursor = db.goods.find( <span class="punctuation">{</span> type<span class="punctuation">:</span> <span class="number">2</span> <span class="punctuation">}</span> )</span><br><span class="line">&gt; myCursor.forEach(printjson)</span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">2</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">2</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">2</span> <span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="迭代器索引"><a href="#迭代器索引" class="headerlink" title="迭代器索引"></a>迭代器索引</h5><p>在mongo命令行中，可以使用：method:’~cursor.toArray()’方法来迭代游标，并且以数组的形式来返回文档。</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; var myCursor = db.goods.find(<span class="punctuation">{</span>type<span class="punctuation">:</span><span class="number">2</span><span class="punctuation">}</span>)</span><br><span class="line">&gt; var documentArray = myCursor.toArray()</span><br><span class="line">&gt; var myDocument = documentArray<span class="punctuation">[</span><span class="number">0</span><span class="punctuation">]</span></span><br><span class="line">&gt; myDocument</span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">2</span> <span class="punctuation">}</span></span><br><span class="line">&gt; var myDocument = documentArray<span class="punctuation">[</span><span class="number">3</span><span class="punctuation">]</span></span><br><span class="line">&gt; myDocument</span><br><span class="line">&gt;</span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="Cursor-Behaviors（游标行为）"><a href="#Cursor-Behaviors（游标行为）" class="headerlink" title="Cursor Behaviors（游标行为）"></a>Cursor Behaviors（游标行为）</h5><ol><li><p><strong>关闭非活动游标</strong></p><p>默认情况下，服务器将在限制10分钟后或客户端用尽光标后自动关闭光标。要覆盖此行为时，可以使用<code>cursor.noCursorTimeout()</code>。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var myCursor = db.users.find().noCursorTimeout();</span><br></pre></td></tr></tbody></table></figure><blockquote><p>当设置了<code>noCursorTimeout</code>之后，必须要使用<code>cursor.close()</code>关闭游标或者耗尽游标的方式关闭游标。</p></blockquote></li><li><p><strong>光标隔离</strong></p><p>当光标返回文档时，其他操作可能会与查询交错。对于MMAPv1存储引擎来说，对文档进行干预的写操作可能会导致游标返回一个文档（如果该文档已更改）多次。</p><blockquote><p>MMAPv1是MongoDB基于内存映射文件的原始存储引擎。它在大量插入，读取和就地更新的工作负载方面表现出色</p><p>从3.2版本开始。MMAPv1不再是默认存储引擎；WiredTige成为默认的存储引擎。</p></blockquote></li><li><p><strong>光标批次</strong></p><p>MongoDB服务器批量返回查询结果。批处理中的数据量将不超过BSON文档的最大大小。可以使用batchSize()和limit()覆盖默认大小。</p><p>3.4新版功能：find(),aggregate(),listIndexes和listCollections类型的操作每批最多返回16兆字节。batchSize()可以强制执行一个较小的限制，但是不能执行较大的限制。</p><blockquote><p>BSON文档最大大小为16MB，嵌套深度级别不超过100</p></blockquote><p>当遍历游标并到达返回批处理的末尾时，如果有更多结果，<code>cursor.next()</code>将执行getMore操作以检索下一个批处理。要查看迭代游标时批处理中剩余多少文档，可以使用<code>objsLeftIntatch()</code>方法。</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; var myCursor = db.goods.find()</span><br><span class="line">&gt; var myFirstDocument =  myCursor.hasNext()?myCursor.next()<span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span></span><br><span class="line">&gt; myCursor.objsLeftInBatch()</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></tbody></table></figure></li></ol></li><li><h5 id="Cursor-Information（光标信息）"><a href="#Cursor-Information（光标信息）" class="headerlink" title="Cursor Information（光标信息）"></a>Cursor Information（光标信息）</h5><p><code>db.serverStatus()</code>方法返回的文档，其中包括度量字段，该指标字段包含metrics.cursor以下信息字段：</p><ul><li>自上次服务器重新启动以来超时的游标数</li><li>设置了选项<a href="https://mongoing.com/docs/reference/method/cursor.addOption.html#DBQuery.Option.noTimeout"><code>DBQuery.Option.noTimeout</code></a>的打开游标的数量， 以防止一段时间不活动后发生超时</li><li>“固定”打开游标的数量</li><li>打开的游标总数</li></ul><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.serverStatus().metrics.cursor</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"timedOut"</span> <span class="punctuation">:</span> NumberLong(<span class="number">0</span>)<span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"open"</span> <span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">                <span class="attr">"noTimeout"</span> <span class="punctuation">:</span> NumberLong(<span class="number">0</span>)<span class="punctuation">,</span></span><br><span class="line">                <span class="attr">"pinned"</span> <span class="punctuation">:</span> NumberLong(<span class="number">0</span>)<span class="punctuation">,</span></span><br><span class="line">                <span class="attr">"total"</span> <span class="punctuation">:</span> NumberLong(<span class="number">0</span>)</span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line">&gt;</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="三、更新文档"><a href="#三、更新文档" class="headerlink" title="三、更新文档"></a>三、更新文档</h3><h4 id="1、更新介绍"><a href="#1、更新介绍" class="headerlink" title="1、更新介绍"></a>1、更新介绍</h4><p>MongoDB中提供了如下的集合更新方式：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://mongoing.com/docs/reference/method/db.collection.updateOne.html#db.collection.updateOne"><code>db.collection.updateOne（）</code></a></td><td>即使可能有多个文档通过过滤条件匹配到，但是也最多也只更新一个文档。<em>3.2新版功能。</em></td></tr><tr><td><a href="https://mongoing.com/docs/reference/method/db.collection.updateMany.html#db.collection.updateMany"><code>db.collection.updateMany（）</code></a></td><td>更新所有通过过滤条件匹配到的文档。<em>3.2新版功能。</em></td></tr><tr><td><a href="https://mongoing.com/docs/reference/method/db.collection.replaceOne.html#db.collection.replaceOne"><code>db.collection.replaceOne（）</code></a></td><td>即使可能有多个文档通过过滤条件匹配到，但是也最多也只能替换一个文档。<em>3.2新版功能。</em></td></tr><tr><td><a href="https://mongoing.com/docs/reference/method/db.collection.update.html#db.collection.update"><code>db.collection.update（）</code></a></td><td>即使可能有多个文档通过过滤条件匹配到，但是也最多也只更新或替换一个文档。默认情况下，<a href="https://mongoing.com/docs/reference/method/db.collection.update.html#db.collection.update"><code>db.collection.update（）</code></a>只更新<strong>一个</strong>文档。要更新多个文档时，可以使用 <a href="https://mongoing.com/docs/reference/method/db.collection.update.html#multi-parameter"><em>multi</em></a>选项。</td></tr></tbody></table><p><strong>语法：</strong>db.collection.update(查询表达式，新值，选项)</p><p><strong>注意：</strong>使用下面语句时，不是更新数据，而是更新文档。更新就是用新文档替换旧文档。</p><p>更新方法需要接收以下参数：</p><ol><li>过滤条件：决定更新哪些文档。使用查询表达是过滤内容。</li><li>更新文档——指定要执行的修改或者替换文档——完全替换匹配文档（除了_id字段）</li><li>选项</li></ol><h4 id="2、行为表现"><a href="#2、行为表现" class="headerlink" title="2、行为表现"></a>2、行为表现</h4><h5 id="1、原子性"><a href="#1、原子性" class="headerlink" title="1、原子性"></a>1、原子性</h5><p>MongoDB中所有的写操作在单一文档层级上是原子的。</p><h5 id="2、-id字段"><a href="#2、-id字段" class="headerlink" title="2、_id字段"></a>2、_id字段</h5><p>一旦设定，不能更新<code>_id</code>字段的值，也不能用有不同<code>_id</code>字段值得替换文档来替换已经存在的文档。</p><h5 id="3、文档大小"><a href="#3、文档大小" class="headerlink" title="3、文档大小"></a>3、文档大小</h5><p>当执行更新操作增加的文档大小超过了为该文档分配的内存空间时，更新操作会在磁盘上重定位该文档。</p><h5 id="4、字段顺序"><a href="#4、字段顺序" class="headerlink" title="4、字段顺序"></a>4、字段顺序</h5><p>MongoDB按照文档写入的顺序整理文档字段，除了以下情况：</p><ul><li>_id字段始终是文档的第一个字段</li><li>包括字段名称的renaming操作可能导致文档中的字段重新排序。</li></ul><blockquote><p>在2.6版开始，MongoDB主动尝试保持字段在文档中的顺序。2.6版本之前，MongoDB不会主动保持文档中的字段的顺序。</p></blockquote><h5 id="5、upsert选项"><a href="#5、upsert选项" class="headerlink" title="5、upsert选项"></a>5、upsert选项</h5><p>如果 <code>db.collection.update()</code>，<code>db.collection.updateOne()</code>， <code>db.collection.updateMany()</code>或者 <code>db.collection.replaceOne()</code>包含 <code>upsert : true</code> <strong>并且</strong> 没有文档匹配指定的过滤器，那么此操作会创建一个新文档并插入它。如果有匹配的文档，那么此操作修改或替换匹配的单个或多个文档。</p><h4 id="3、更新操作"><a href="#3、更新操作" class="headerlink" title="3、更新操作"></a>3、更新操作</h4><p>首先插入数据：</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">db.users.insertMany(</span><br><span class="line">   <span class="punctuation">[</span></span><br><span class="line">     <span class="punctuation">{</span></span><br><span class="line">       _id<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">       name<span class="punctuation">:</span> <span class="string">"sue"</span><span class="punctuation">,</span></span><br><span class="line">       age<span class="punctuation">:</span> <span class="number">19</span><span class="punctuation">,</span></span><br><span class="line">       type<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">       status<span class="punctuation">:</span> <span class="string">"P"</span><span class="punctuation">,</span></span><br><span class="line">       favorites<span class="punctuation">:</span> <span class="punctuation">{</span> artist<span class="punctuation">:</span> <span class="string">"Picasso"</span><span class="punctuation">,</span> food<span class="punctuation">:</span> <span class="string">"pizza"</span> <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">       finished<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">17</span><span class="punctuation">,</span> <span class="number">3</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">       badges<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"blue"</span><span class="punctuation">,</span> <span class="string">"black"</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">       points<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">{</span> points<span class="punctuation">:</span> <span class="number">85</span><span class="punctuation">,</span> bonus<span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">{</span> points<span class="punctuation">:</span> <span class="number">85</span><span class="punctuation">,</span> bonus<span class="punctuation">:</span> <span class="number">10</span> <span class="punctuation">}</span></span><br><span class="line">       <span class="punctuation">]</span></span><br><span class="line">     <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">     <span class="punctuation">{</span></span><br><span class="line">       _id<span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">       name<span class="punctuation">:</span> <span class="string">"bob"</span><span class="punctuation">,</span></span><br><span class="line">       age<span class="punctuation">:</span> <span class="number">42</span><span class="punctuation">,</span></span><br><span class="line">       type<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">       status<span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span></span><br><span class="line">       favorites<span class="punctuation">:</span> <span class="punctuation">{</span> artist<span class="punctuation">:</span> <span class="string">"Miro"</span><span class="punctuation">,</span> food<span class="punctuation">:</span> <span class="string">"meringue"</span> <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">       finished<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">11</span><span class="punctuation">,</span> <span class="number">25</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">       badges<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"green"</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">       points<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">{</span> points<span class="punctuation">:</span> <span class="number">85</span><span class="punctuation">,</span> bonus<span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">{</span> points<span class="punctuation">:</span> <span class="number">64</span><span class="punctuation">,</span> bonus<span class="punctuation">:</span> <span class="number">12</span> <span class="punctuation">}</span></span><br><span class="line">       <span class="punctuation">]</span></span><br><span class="line">     <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">     <span class="punctuation">{</span></span><br><span class="line">       _id<span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">       name<span class="punctuation">:</span> <span class="string">"ahn"</span><span class="punctuation">,</span></span><br><span class="line">       age<span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">       type<span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">       status<span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span></span><br><span class="line">       favorites<span class="punctuation">:</span> <span class="punctuation">{</span> artist<span class="punctuation">:</span> <span class="string">"Cassatt"</span><span class="punctuation">,</span> food<span class="punctuation">:</span> <span class="string">"cake"</span> <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">       finished<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">6</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">       badges<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"blue"</span><span class="punctuation">,</span> <span class="string">"Picasso"</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">       points<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">{</span> points<span class="punctuation">:</span> <span class="number">81</span><span class="punctuation">,</span> bonus<span class="punctuation">:</span> <span class="number">8</span> <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">{</span> points<span class="punctuation">:</span> <span class="number">55</span><span class="punctuation">,</span> bonus<span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span></span><br><span class="line">       <span class="punctuation">]</span></span><br><span class="line">     <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">     <span class="punctuation">{</span></span><br><span class="line">       _id<span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">       name<span class="punctuation">:</span> <span class="string">"xi"</span><span class="punctuation">,</span></span><br><span class="line">       age<span class="punctuation">:</span> <span class="number">34</span><span class="punctuation">,</span></span><br><span class="line">       type<span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">       status<span class="punctuation">:</span> <span class="string">"D"</span><span class="punctuation">,</span></span><br><span class="line">       favorites<span class="punctuation">:</span> <span class="punctuation">{</span> artist<span class="punctuation">:</span> <span class="string">"Chagall"</span><span class="punctuation">,</span> food<span class="punctuation">:</span> <span class="string">"chocolate"</span> <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">       finished<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">11</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">       badges<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"Picasso"</span><span class="punctuation">,</span> <span class="string">"black"</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">       points<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">{</span> points<span class="punctuation">:</span> <span class="number">53</span><span class="punctuation">,</span> bonus<span class="punctuation">:</span> <span class="number">15</span> <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">{</span> points<span class="punctuation">:</span> <span class="number">51</span><span class="punctuation">,</span> bonus<span class="punctuation">:</span> <span class="number">15</span> <span class="punctuation">}</span></span><br><span class="line">       <span class="punctuation">]</span></span><br><span class="line">     <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">     <span class="punctuation">{</span></span><br><span class="line">       _id<span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">       name<span class="punctuation">:</span> <span class="string">"xyz"</span><span class="punctuation">,</span></span><br><span class="line">       age<span class="punctuation">:</span> <span class="number">23</span><span class="punctuation">,</span></span><br><span class="line">       type<span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">       status<span class="punctuation">:</span> <span class="string">"D"</span><span class="punctuation">,</span></span><br><span class="line">       favorites<span class="punctuation">:</span> <span class="punctuation">{</span> artist<span class="punctuation">:</span> <span class="string">"Noguchi"</span><span class="punctuation">,</span> food<span class="punctuation">:</span> <span class="string">"nougat"</span> <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">       finished<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">14</span><span class="punctuation">,</span> <span class="number">6</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">       badges<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"orange"</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">       points<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">{</span> points<span class="punctuation">:</span> <span class="number">71</span><span class="punctuation">,</span> bonus<span class="punctuation">:</span> <span class="number">20</span> <span class="punctuation">}</span></span><br><span class="line">       <span class="punctuation">]</span></span><br><span class="line">     <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">     <span class="punctuation">{</span></span><br><span class="line">       _id<span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">       name<span class="punctuation">:</span> <span class="string">"abc"</span><span class="punctuation">,</span></span><br><span class="line">       age<span class="punctuation">:</span> <span class="number">43</span><span class="punctuation">,</span></span><br><span class="line">       type<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">       status<span class="punctuation">:</span> <span class="string">"A"</span><span class="punctuation">,</span></span><br><span class="line">       favorites<span class="punctuation">:</span> <span class="punctuation">{</span> food<span class="punctuation">:</span> <span class="string">"pizza"</span><span class="punctuation">,</span> artist<span class="punctuation">:</span> <span class="string">"Picasso"</span> <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">       finished<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">18</span><span class="punctuation">,</span> <span class="number">12</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">       badges<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"black"</span><span class="punctuation">,</span> <span class="string">"blue"</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">       points<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">{</span> points<span class="punctuation">:</span> <span class="number">78</span><span class="punctuation">,</span> bonus<span class="punctuation">:</span> <span class="number">8</span> <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">{</span> points<span class="punctuation">:</span> <span class="number">57</span><span class="punctuation">,</span> bonus<span class="punctuation">:</span> <span class="number">7</span> <span class="punctuation">}</span></span><br><span class="line">       <span class="punctuation">]</span></span><br><span class="line">     <span class="punctuation">}</span></span><br><span class="line">   <span class="punctuation">]</span></span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><h5 id="1、-set——修改指定字段"><a href="#1、-set——修改指定字段" class="headerlink" title="1、$set——修改指定字段"></a>1、$set——修改指定字段</h5><p>update只能更新查询到的第一个数据。</p><ul><li><p>使用 <a href="https://mongoing.com/docs/reference/operator/update/set.html#up._S_set"><code>$set</code></a> 操作符更新 <code>favorites.food</code> 字段的值为 <code>"pie"</code> 并更新 <code>type</code> 字段的值为 <code>3</code>,</p></li><li><p>使用 <a href="https://mongoing.com/docs/reference/operator/update/currentDate.html#up._S_currentDate"><code>$currentDate</code></a> 操作符更新 <code>lastModified</code> 字段的值到当前日期。如果 <code>lastModified</code> 字段不存在， <a href="https://mongoing.com/docs/reference/operator/update/currentDate.html#up._S_currentDate"><code>$currentDate</code></a> 会创建该字段。</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.users.updateOne(<span class="punctuation">{</span><span class="attr">"favorates.artist"</span><span class="punctuation">:</span><span class="string">"Picasso"</span><span class="punctuation">}</span><span class="punctuation">,</span><span class="punctuation">{</span>$set<span class="punctuation">:</span><span class="punctuation">{</span><span class="attr">"favorites.food"</span><span class="punctuation">:</span><span class="string">"pie"</span><span class="punctuation">,</span>type<span class="punctuation">:</span><span class="number">3</span><span class="punctuation">}</span><span class="punctuation">,</span>$currentDate<span class="punctuation">:</span><span class="punctuation">{</span>lastModified<span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">}</span><span class="punctuation">}</span>)</span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"acknowledged"</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="attr">"matchedCount"</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="attr">"modifiedCount"</span> <span class="punctuation">:</span> <span class="number">0</span> <span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h5 id="2、-unset——删除某个列"><a href="#2、-unset——删除某个列" class="headerlink" title="2、$unset——删除某个列"></a>2、$unset——删除某个列</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collection.update({name:'lisi'},{$unset:{age:30}})</span><br></pre></td></tr></tbody></table></figure><h5 id="3、-rename——重命名某个列"><a href="#3、-rename——重命名某个列" class="headerlink" title="3、$rename——重命名某个列"></a>3、$rename——重命名某个列</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collection.update({name:'wangwu'},{$rename:{'age':'max-age'}})</span><br></pre></td></tr></tbody></table></figure><h5 id="4、-inc——增加某个列"><a href="#4、-inc——增加某个列" class="headerlink" title="4、$inc——增加某个列"></a>4、$inc——增加某个列</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collection.update({name:'hahaha'},{$inc:{age:20}})</span><br></pre></td></tr></tbody></table></figure><h5 id="5、选项-upsert-true-x2F-false-multi-true-x2F-false"><a href="#5、选项-upsert-true-x2F-false-multi-true-x2F-false" class="headerlink" title="5、选项:{upsert:true/false,multi:true/false}"></a>5、选项:{upsert:true/false,multi:true/false}</h5><p>upsert:true/false:默认为false，为true时，不存在则插入，如果存在就更新。</p><p>multi:true/false默认为false，为true时，会更新匹配到的所有数据。</p><h3 id="四、删除文档"><a href="#四、删除文档" class="headerlink" title="四、删除文档"></a>四、删除文档</h3><h4 id="1、删除的方法"><a href="#1、删除的方法" class="headerlink" title="1、删除的方法"></a>1、删除的方法</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://mongoing.com/docs/reference/method/db.collection.remove.html#db.collection.remove"><code>db.collection.remove()</code></a></td><td>删除所有符合条件的数据，不写条件时删除所有</td></tr><tr><td><a href="https://mongoing.com/docs/reference/method/db.collection.deleteOne.html#db.collection.deleteOne"><code>db.collection.deleteOne()</code></a></td><td>最多删除一个符合条件的文档。<em>3.2 新版功能.</em></td></tr><tr><td><a href="https://mongoing.com/docs/reference/method/db.collection.deleteMany.html#db.collection.deleteMany"><code>db.collection.deleteMany()</code></a></td><td>删除所有匹配指定过滤条件的文档.<em>3.2 新版功能.</em></td></tr></tbody></table><p><strong>注意：</strong></p><p>1.查询表达式依然是个json对象{age:20}</p><p>2.查询表达式匹配的行，将被删除。</p><p>3.如果不写查询表达式，collection中的所有文档将被删除。</p><h4 id="2、删除的行为表现"><a href="#2、删除的行为表现" class="headerlink" title="2、删除的行为表现"></a>2、删除的行为表现</h4><h5 id="1、索引"><a href="#1、索引" class="headerlink" title="1、索引"></a>1、索引</h5><p>即使把文档中的所有数据都删除了，索引也不会被删除。</p><h5 id="2、原子性"><a href="#2、原子性" class="headerlink" title="2、原子性"></a>2、原子性</h5><p>MongoDB所有写操作在单一文档层级上是原子的。如果想要删除集合中的所有数据，可以直接删除集合，然后重新集合和索引，这种方式更为高效。</p><h4 id="3、删除操作"><a href="#3、删除操作" class="headerlink" title="3、删除操作"></a>3、删除操作</h4><p>db.collection.remove(查询表达式)</p><p>{justOne:true/false},是否只删除一行，默认为false。</p><ol><li><p>删除stu表中sn属性值为’001’的文档</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.stu.remove({sn:'001'})</span><br></pre></td></tr></tbody></table></figure></li><li><p>删除stu表中gender属性为m的文档，只删除1行</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.stu.remove({gender:'m',true})</span><br></pre></td></tr></tbody></table></figure></li><li><p>删除第一个<code>status</code> 字段等于 <code>"A"</code> 的文档</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.remove( { status: "D" }, 1)</span><br></pre></td></tr></tbody></table></figure></li></ol><p>.查询表达式依然是个json对象{age:20}</p><p>2.查询表达式匹配的行，将被删除。</p><p>3.如果不写查询表达式，collection中的所有文档将被删除。</p><h4 id="2、删除的行为表现-1"><a href="#2、删除的行为表现-1" class="headerlink" title="2、删除的行为表现"></a>2、删除的行为表现</h4><h5 id="1、索引-1"><a href="#1、索引-1" class="headerlink" title="1、索引"></a>1、索引</h5><p>即使把文档中的所有数据都删除了，索引也不会被删除。</p><h5 id="2、原子性-1"><a href="#2、原子性-1" class="headerlink" title="2、原子性"></a>2、原子性</h5><p>MongoDB所有写操作在单一文档层级上是原子的。如果想要删除集合中的所有数据，可以直接删除集合，然后重新集合和索引，这种方式更为高效。</p><h4 id="3、删除操作-1"><a href="#3、删除操作-1" class="headerlink" title="3、删除操作"></a>3、删除操作</h4><p>db.collection.remove(查询表达式)</p><p>{justOne:true/false},是否只删除一行，默认为false。</p><ol><li><p>删除stu表中sn属性值为’001’的文档</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.stu.remove({sn:'001'})</span><br></pre></td></tr></tbody></table></figure></li><li><p>删除stu表中gender属性为m的文档，只删除1行</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.stu.remove({gender:'m',true})</span><br></pre></td></tr></tbody></table></figure></li><li><p>删除第一个<code>status</code> 字段等于 <code>"A"</code> 的文档</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.remove( { status: "D" }, 1)</span><br></pre></td></tr></tbody></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>聚合操作</title>
      <link href="/2022/05/19/treasurebox/shu-ju-ku/mongodb/3.ju-he-cao-zuo/"/>
      <url>/2022/05/19/treasurebox/shu-ju-ku/mongodb/3.ju-he-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="聚合操作"><a href="#聚合操作" class="headerlink" title="聚合操作"></a>聚合操作</h2><p>[TOC]</p><p>聚合操作处理数据记录并返回计算结果。聚合操作将来自多个文档的值分组在一起，并且可以对分组的数据执行各种操作以返回单个结果。MongoDB提供了三种执行聚合的方法：聚合管道，map-reduce函数和单一目的聚合方法。</p><h3 id="一、集合管道"><a href="#一、集合管道" class="headerlink" title="一、集合管道"></a>一、集合管道</h3><h4 id="1、管道介绍"><a href="#1、管道介绍" class="headerlink" title="1、管道介绍"></a>1、管道介绍</h4><p>聚合管道是一个基于数据处理管道概念建模的数据聚合框架。文档进入多阶段管道，一个管道处理完毕后交给下一个管道，该管道将文档转换为汇总结果。</p><p><strong>语法</strong>：db.collection_name.aggregate([{管道1},{管道2},{管道3},…])</p><table><thead><tr><th></th><th><strong>常用的管道操作</strong></th></tr></thead><tbody><tr><td>$project</td><td>修改输入文档的结构。可以用来重命名、增加或修改域，也可以用于创建计算结果以及嵌套文档。</td></tr><tr><td>$match</td><td>用于过滤数据，只输出符合条件的文档。使用MongoDB的标准查询操作。</td></tr><tr><td>$limit</td><td>用来限制MongoDB聚合管道返回的文档数</td></tr><tr><td>$skip</td><td>在聚合管道中跳过指定数量的文档，并返回余下的文档</td></tr><tr><td>$group</td><td>将集合中的文档分组，可用于统计结果</td></tr><tr><td>$sort</td><td>将输入文档排序后输出。</td></tr></tbody></table><h4 id="group中的操作表达式"><a href="#group中的操作表达式" class="headerlink" title="group中的操作表达式"></a>group中的操作表达式</h4><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>$sum</td><td>计算总和</td></tr><tr><td>$avg</td><td>计算平均值</td></tr><tr><td>$min</td><td>获取集合中所有文档对应值的最小值</td></tr><tr><td>$max</td><td>获取集合中所有文档对应值得最大值</td></tr><tr><td>$first</td><td>根据资源文档的排序获取第一个文档数据</td></tr><tr><td>$last</td><td>根据资源文档的排序获取最后一个文档数据</td></tr></tbody></table><p><strong>练习</strong>：</p><p>1.查询每个年龄段的人员数量：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.school.aggregate([{$group:{_id:"$age",total:{$sum:1}}}])</span><br></pre></td></tr></tbody></table></figure><p>2.查询总共有多少人</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.school.aggregate([{$group:{_id:null,total:{$sum:1}}}])</span><br></pre></td></tr></tbody></table></figure><p>3.分组查询并获取另外某个字段的值</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.c1.find()</span><br><span class="line">{ "_id" : ObjectId("6054963d74d2f8be32f5b168"), "f1" : 1, "f2" : "2" }</span><br><span class="line">{ "_id" : ObjectId("6054964174d2f8be32f5b169"), "f1" : 1, "f2" : "3" }</span><br><span class="line">{ "_id" : ObjectId("6054964674d2f8be32f5b16a"), "f1" : 1, "f2" : "4" }</span><br><span class="line">{ "_id" : ObjectId("6054964a74d2f8be32f5b16b"), "f1" : 2, "f2" : "3" }</span><br><span class="line">{ "_id" : ObjectId("6054965174d2f8be32f5b16c"), "f1" : 2, "f2" : "4" }</span><br><span class="line">&gt; db.c1.aggregate({$match:{"f1":{"$in":[1]}}},{$group:{"_id":"$f1","f2":{"$push":"$f2"}}})</span><br><span class="line">{ "_id" : 1, "f2" : [ "2", "3", "4" ] }</span><br></pre></td></tr></tbody></table></figure><h4 id="2、管道优化"><a href="#2、管道优化" class="headerlink" title="2、管道优化"></a>2、管道优化</h4><ul><li><p><code>$sort</code>+ <code>$match</code>顺序优化</p><p>如果管道中,sort后面跟着match，可以先使用match进行筛选，这样会减少之后排序的对象。</p></li><li><p><code>$skip</code>+<code>$match</code>顺序优化</p><p>如果你的管道中，skip后面跟着limit，优化器会把limit移到skip前面，这个时候limit的会值加上skip的个数。</p></li><li><p><code>$redact</code>+<code>$match</code>顺序优化</p></li><li><p><code>$ project</code> +<code> $ skip</code>或<code> $ limit</code>序列优化</p></li><li><p><code>$ sort</code> +<code> $ limit</code>合并</p></li><li><p><code>$ limit</code> +<code> $ limit</code>合并</p></li><li><p><code>$ skip</code> +<code> $ skip</code>合并</p></li><li><p><code>$ match</code> +<code> $ match</code>合并</p></li><li><p><code>$ lookup</code> +<code> $ unwind</code>合并</p></li><li><p><code>$ sort</code> +<code> $ skip</code> +<code> $ limit</code>顺序</p></li><li><p><code>$ limit</code> +<code> $ skip</code> +<code> $ limit</code> +<code> $ skip</code>顺序</p></li></ul><h3 id="二、映射化简"><a href="#二、映射化简" class="headerlink" title="二、映射化简"></a>二、映射化简</h3><h4 id="1、映射化简的JavaScript方法"><a href="#1、映射化简的JavaScript方法" class="headerlink" title="1、映射化简的JavaScript方法"></a>1、映射化简的JavaScript方法</h4><p>在MongoDB中，map-reduce操作使用自定义javaScript函数将值映射或关联到键。如果一个键具有映射到它的多个值，则该操作会将键的值<em>减少</em>到单个对象。</p><p>例如，当处理一个文档的时候，映射函数可以映射多个键值对或者一个也不映射。映射化简还可以在结束的时候使用JavaScript对聚合结果做最后的修改，例如附加的计算。</p><h4 id="2、映射化简的特点"><a href="#2、映射化简的特点" class="headerlink" title="2、映射化简的特点"></a>2、映射化简的特点</h4><p>在MongoDB中，map-reduce操作可以将结果写入集合或内联返回结果。如果将map-reduce输出写入集合，则可以在同一输入集合上执行随后的map-reduce操作，这些操作将替换结果，合并结果或归约结果与先前结果合并。</p><p>如果选择映射化简操作的即时返回结果，这些文档一定要在<code>BSON文档大小</code>限制以内，当前这个限制是16MB。</p><p>MongoDB支持对分片<a href="https://mongoing.com/docs/sharding.html"><em>集合进行</em></a> map-reduce操作。Map-reduce操作还可以将结果输出到分片集合。</p><h3 id="三、单一目的聚合方法"><a href="#三、单一目的聚合方法" class="headerlink" title="三、单一目的聚合方法"></a>三、单一目的聚合方法</h3><p>MongoDB还提供<a href="https://mongoing.com/docs/reference/method/db.collection.count.html#db.collection.count"><code>db.collection.count（）</code></a>和 <a href="https://mongoing.com/docs/reference/method/db.collection.distinct.html#db.collection.distinct"><code>db.collection.distinct（）</code></a>。</p><p>所有这些操作都汇总了单个集合中的文档。尽管这些操作提供了对常见聚合过程的简单访问，但是它们缺乏聚合管道和映射减少的灵活性和功能。</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.goods.find()</span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">1</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">2</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">3</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">2</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">2</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span> <span class="attr">"_id"</span> <span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span> <span class="attr">"type"</span> <span class="punctuation">:</span> <span class="number">3</span> <span class="punctuation">}</span></span><br><span class="line">&gt; db.goods.distinct(<span class="string">"type"</span>)</span><br><span class="line"><span class="punctuation">[</span> <span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span> <span class="punctuation">]</span></span><br><span class="line">&gt; db.goods.count()</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></tbody></table></figure><p> “_id” : 6, “type” : 3 }</p><blockquote><p>db.goods.distinct(“type”)<br>[ 1, 2, 3 ]<br>db.goods.count()<br>6</p></blockquote><pre><code></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>快捷键</title>
      <link href="/2022/05/19/treasurebox/kuai-jie-jian/"/>
      <url>/2022/05/19/treasurebox/kuai-jie-jian/</url>
      
        <content type="html"><![CDATA[<p>无序列表：输入-之后输入空格<br>有序列表：输入数字+“.”之后输入空格<br>任务列表：-[空格]空格 文字<br>标题：ctrl+数字<br>表格：ctrl+t<br>生成目录：[TOC]按回车<br>选中一整行：ctrl+l<br>选中单词：ctrl+d<br>选中相同格式的文字：ctrl+e<br>跳转到文章开头：ctrl+home<br>跳转到文章结尾：ctrl+end<br>搜索：ctrl+f<br>替换：ctrl+h<br>引用：输入&gt;之后输入空格<br>代码块：ctrl+alt+f<br>加粗：ctrl+b<br>倾斜：ctrl+i<br>下划线：ctrl+u<br>删除线：alt+shift+5<br>插入图片：直接拖动到指定位置即可或者ctrl+shift+i<br>插入链接：ctrl+k</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>插值</title>
      <link href="/2022/05/19/treasurebox/vue/2.mo-ban-yu-fa/1.cha-zhi/"/>
      <url>/2022/05/19/treasurebox/vue/2.mo-ban-yu-fa/1.cha-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><h3 id="一、插值"><a href="#一、插值" class="headerlink" title="一、插值"></a>一、插值</h3><ol><li><p>文本</p><p> 数据绑定的最基本形式是使用”Mustache”语法（双花括号）的文本插值，例：</p> <figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Message: {{ msg }}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p> 每当数据对象的msg属性更改时，该数据也会被更新，可以使用v-once指令执行一次性插值，该插值不会随着数据更改而更新，但是也会影响同一节点上其他的绑定。</p> <figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>Message:{{ msg }}<span class="tag">&lt;/<span class="name">span</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>{{ msg }}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure> <figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> vm =<span class="keyword">new</span> <span class="title class_">Vue</span>({</span><br><span class="line">        <span class="attr">el</span>:<span class="string">"#app"</span>,</span><br><span class="line">        <span class="attr">data</span>:{</span><br><span class="line">            <span class="attr">msg</span>:<span class="string">'hello world!'</span>,</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line">vm.<span class="property">msg</span>=<span class="string">'hello'</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure></li><li><p>原始HTML</p></li><li><p>属性</p></li><li><p>使用JavaScript使用JavaScript</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>索引效率测试</title>
      <link href="/2022/05/19/treasurebox/utils/2.suo-yin-xiao-lu-ce-shi/"/>
      <url>/2022/05/19/treasurebox/utils/2.suo-yin-xiao-lu-ce-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL索引效率测试"><a href="#MySQL索引效率测试" class="headerlink" title="MySQL索引效率测试"></a>MySQL索引效率测试</h2><h3 id="一、以mysql添加索引和不添加索引为例，测试数据的插入速度和查询速度。"><a href="#一、以mysql添加索引和不添加索引为例，测试数据的插入速度和查询速度。" class="headerlink" title="一、以mysql添加索引和不添加索引为例，测试数据的插入速度和查询速度。"></a>一、以mysql添加索引和不添加索引为例，测试数据的插入速度和查询速度。</h3><h4 id="1、首先创建数据表和数据库，在cmd命令行中执行："><a href="#1、首先创建数据表和数据库，在cmd命令行中执行：" class="headerlink" title="1、首先创建数据表和数据库，在cmd命令行中执行："></a>1、首先创建数据表和数据库，在cmd命令行中执行：</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create database TestDataSpeed charset=utf8;</span><br><span class="line">use testdataspeed;</span><br><span class="line">create table DataNoIndex(id int,name char(10),age int,address char(20),gender char(1)); #创建不带索引的数据表</span><br><span class="line">create table DataNoIndex(id int primary key autoincrement,name char(10),age int,address char(20),gender char(1));  # 创建带主键索引的数据表</span><br></pre></td></tr></tbody></table></figure><h4 id="2、创建完数据库之后，使用pymysql操作分别插入1000万条数据："><a href="#2、创建完数据库之后，使用pymysql操作分别插入1000万条数据：" class="headerlink" title="2、创建完数据库之后，使用pymysql操作分别插入1000万条数据："></a>2、创建完数据库之后，使用pymysql操作分别插入<code>1000万</code>条数据：</h4><p>首先分别向无索引和有索引的表中插入数据，在无索引的表中插入1000万条数据共耗时<code>1134</code>秒，在有索引的表中插入共耗时<code>1138</code>秒，插入数据时耗用时间相差不大。：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timer</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">*args</span>):</span><br><span class="line">        start_time = time.time()</span><br><span class="line">        func(*args)</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(end_time-start_time)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@timer</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">insert_no_index</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        db = pymysql.connect(user=user,password=password,database=<span class="string">"testdataspeed"</span>)</span><br><span class="line">        cursor = db.cursor()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>*<span class="number">1000</span>*<span class="number">1000</span>):</span><br><span class="line">            age = random.randint(<span class="number">10</span>,<span class="number">25</span>)</span><br><span class="line">            gender = random.choice([<span class="string">"男"</span>,<span class="string">"女"</span>])</span><br><span class="line">            address = random.choice([<span class="string">"北京"</span>,<span class="string">"上海"</span>,<span class="string">"广州"</span>,<span class="string">"杭州"</span>,<span class="string">"深圳"</span>,<span class="string">"成都"</span>,<span class="string">"重庆"</span>])</span><br><span class="line">            sql = <span class="string">"INSERT INTO DATANOINDEX VALUE('{}','{}','{}','{}','{}');"</span>.<span class="built_in">format</span>(i,<span class="string">"小明"</span>+<span class="built_in">str</span>(i),age,address,gender)</span><br><span class="line">            <span class="comment"># print(sql)</span></span><br><span class="line">            cursor.execute(sql)</span><br><span class="line">        db.commit()</span><br><span class="line">        db.close()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(traceback.format_exc())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    user = <span class="string">"root"</span></span><br><span class="line">    password = <span class="string">"root"</span></span><br><span class="line">    insert_no_index(user,password)</span><br></pre></td></tr></tbody></table></figure><h4 id="3、比较查询速度"><a href="#3、比较查询速度" class="headerlink" title="3、比较查询速度"></a>3、比较查询速度</h4><ol><li><h5 id="比较查询所有数据的速度"><a href="#比较查询所有数据的速度" class="headerlink" title="比较查询所有数据的速度"></a>比较查询所有数据的速度</h5><p>无索引情况：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select count(gender) from datanoindex;</span><br><span class="line">+---------------+</span><br><span class="line">| count(gender) |</span><br><span class="line">+---------------+</span><br><span class="line">|       9999999 |</span><br><span class="line">+---------------+</span><br><span class="line">1 row in set (7.67 sec)</span><br></pre></td></tr></tbody></table></figure><p>有索引情况：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select count(gender) from dataindex;</span><br><span class="line">+---------------+</span><br><span class="line">| count(gender) |</span><br><span class="line">+---------------+</span><br><span class="line">|       9999999 |</span><br><span class="line">+---------------+</span><br><span class="line">1 row in set (6.42 sec)</span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="比较使用where查询主键条件的速度"><a href="#比较使用where查询主键条件的速度" class="headerlink" title="比较使用where查询主键条件的速度"></a>比较使用where查询主键条件的速度</h5><p>无索引情况：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select *  from datanoindex where id=1000;</span><br><span class="line">+------+----------+------+---------+--------+</span><br><span class="line">| id   | name     | age  | address | gender |</span><br><span class="line">+------+----------+------+---------+--------+</span><br><span class="line">| 1000 | 小明1000 |   25 | 广州    | 男     |</span><br><span class="line">+------+----------+------+---------+--------+</span><br><span class="line">1 row in set (8.10 sec)</span><br></pre></td></tr></tbody></table></figure><p>有索引情况：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from dataindex where id=1000;</span><br><span class="line">+------+----------+------+---------+--------+</span><br><span class="line">| id   | name     | age  | address | gender |</span><br><span class="line">+------+----------+------+---------+--------+</span><br><span class="line">| 1000 | 小明1000 |   22 | 北京    | 男     |</span><br><span class="line">+------+----------+------+---------+--------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></tbody></table></figure><p>可以看到，在添加索引之后，使用主键进行查询时，速度得到了显著提升。</p></li><li><h5 id="比较使用非索引键查询的速度"><a href="#比较使用非索引键查询的速度" class="headerlink" title="比较使用非索引键查询的速度"></a>比较使用非索引键查询的速度</h5><p>无索引的情况：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select *  from datanoindex where name="小明1000";</span><br><span class="line">+------+----------+------+---------+--------+</span><br><span class="line">| id   | name     | age  | address | gender |</span><br><span class="line">+------+----------+------+---------+--------+</span><br><span class="line">| 1000 | 小明1000 |   25 | 广州    | 男     |</span><br><span class="line">+------+----------+------+---------+--------+</span><br><span class="line">1 row in set (8.95 sec)</span><br></pre></td></tr></tbody></table></figure><p>有索引情况：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from dataindex where name="小明1000";</span><br><span class="line">+------+----------+------+---------+--------+</span><br><span class="line">| id   | name     | age  | address | gender |</span><br><span class="line">+------+----------+------+---------+--------+</span><br><span class="line">| 1000 | 小明1000 |   22 | 北京    | 男     |</span><br><span class="line">+------+----------+------+---------+--------+</span><br><span class="line">1 row in set (7.15 sec)</span><br></pre></td></tr></tbody></table></figure><p>可以看到，在有索引的表中，即使不使用索引的字段进行查询，查询速度依然优于无索引的表，只是效率提升相对较少。</p></li><li><h5 id="向有1000万数据的表中添加主键索引"><a href="#向有1000万数据的表中添加主键索引" class="headerlink" title="向有1000万数据的表中添加主键索引"></a>向有1000万数据的表中添加主键索引</h5><p>向无索引的表中添加主键索引，测试需要花费的时间。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table datanoindex add primary key(id);</span><br><span class="line">Query OK, 0 rows affected (2 min 45.44 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></tbody></table></figure><p>大约两分钟45秒可以把索引建立完成。此时再使用主键进行查询：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from datanoindex where id=100000;</span><br><span class="line">+--------+------------+------+---------+--------+</span><br><span class="line">| id     | name       | age  | address | gender |</span><br><span class="line">+--------+------------+------+---------+--------+</span><br><span class="line">| 100000 | 小明100000 |   19 | 成都    | 女     |</span><br><span class="line">+--------+------------+------+---------+--------+</span><br><span class="line">1 row in set (0.10 sec)</span><br></pre></td></tr></tbody></table></figure><p>查询速度有了显著的提升，这就是索引的优点，当数据越大时，提升的效果越明显。</p><pre><code>查询速度有了显著的提升，这就是索引的优点，当数据越大时，提升的效果越明显。</code></pre></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>利用蒙特卡洛计算π</title>
      <link href="/2022/05/19/treasurebox/utils/3.li-yong-meng-te-qia-luo-ji-suan-p/"/>
      <url>/2022/05/19/treasurebox/utils/3.li-yong-meng-te-qia-luo-ji-suan-p/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> graphics <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#利用蒙特卡洛方法计算PI值</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">win = GraphWin(<span class="string">"Celsius Converter"</span>, <span class="number">400</span>, <span class="number">300</span>)<span class="comment">#载入界面，标题栏</span></span><br><span class="line">win.setCoords(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">3.0</span>, <span class="number">4.0</span>)<span class="comment">#按比例转换坐标</span></span><br><span class="line"><span class="comment"># 绘制接口</span></span><br><span class="line">Text(Point(<span class="number">1</span>,<span class="number">3</span>), <span class="string">" Celsius Temperature:"</span>).draw(win)<span class="comment">#输入文字</span></span><br><span class="line">Text(Point(<span class="number">1</span>,<span class="number">1</span>), <span class="string">"Fahrenheit Temperature:"</span>).draw(win)</span><br><span class="line"><span class="built_in">input</span>= Entry(Point(<span class="number">2</span>,<span class="number">3</span>),<span class="number">5</span>)<span class="comment">#前面是位置，后面是宽度,可以写数字</span></span><br><span class="line"><span class="built_in">input</span>.setText(<span class="string">"0.0"</span>)</span><br><span class="line"><span class="built_in">input</span>.draw(win)</span><br><span class="line">output = Text(Point(<span class="number">2</span>,<span class="number">1</span>),<span class="string">""</span>)<span class="comment">#确定输出位置</span></span><br><span class="line">output.draw(win)</span><br><span class="line">button = Text(Point(<span class="number">1.5</span>,<span class="number">2.0</span>),<span class="string">"Convert It"</span>)<span class="comment">#按钮字样</span></span><br><span class="line">button.draw(win)</span><br><span class="line">Rectangle(Point(<span class="number">1</span>,<span class="number">1.5</span>), Point(<span class="number">2</span>,<span class="number">2.5</span>)).draw(win)<span class="comment">#长方形</span></span><br><span class="line"><span class="comment"># 等待鼠标点击</span></span><br><span class="line">win.getMouse()</span><br><span class="line"><span class="comment"># 转换输入</span></span><br><span class="line">DARTS = <span class="built_in">eval</span>(<span class="built_in">input</span>.getText())<span class="comment">#得到你的输入值，getText()</span></span><br><span class="line"><span class="comment"># DARTS = 2**26  #这个时候已经比较精确了，耗时也将近1分钟了。修改DARTS可以进一步提高计算精度。</span></span><br><span class="line">hits=<span class="number">0</span></span><br><span class="line">start_time = time.time()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">int</span>(DARTS)):</span><br><span class="line">    x,y =random(),random()</span><br><span class="line">    dist = sqrt(x**<span class="number">2</span>+y**<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> dist &lt;=<span class="number">1.0</span>:</span><br><span class="line">        hits =hits+<span class="number">1</span></span><br><span class="line">pi = <span class="number">4</span>*(hits/DARTS)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"PI的值是%s"</span>%pi)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"程序运行的时间是%-5.5ss"</span>%(time.time()-start_time))</span><br><span class="line"><span class="comment"># 显示输出，改变按钮</span></span><br><span class="line">output.setText(pi)   <span class="comment">#输出pi</span></span><br><span class="line">button.setText(<span class="string">"Quit"</span>)</span><br><span class="line"><span class="comment"># 等待响应鼠标点击，退出程序</span></span><br><span class="line">win.getMouse()</span><br><span class="line">win.close()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>初识vue</title>
      <link href="/2022/05/19/treasurebox/vue/1.chu-shi-vue/1.chu-shi-vue/"/>
      <url>/2022/05/19/treasurebox/vue/1.chu-shi-vue/1.chu-shi-vue/</url>
      
        <content type="html"><![CDATA[<h2 id="初识Vue"><a href="#初识Vue" class="headerlink" title="初识Vue"></a>初识Vue</h2><h3 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h3><p>Vue是用于构建用户界面的渐进框架。是从头设计的，可以逐步采用，并且可以根据不同的用例轻松地在库和框架之间扩展。它包含一个仅着眼于视图层的可访问的核心库，以及一个支持库的生态系统，可帮助解决大型单页应用中的复杂性。</p><h4 id="浏览器兼容性："><a href="#浏览器兼容性：" class="headerlink" title="浏览器兼容性："></a>浏览器兼容性：</h4><p>vue.js支持所有符合ES5的浏览器（不支持IE8及以下版本）。</p><p>github链接：<a href="https://github.com/vuejs/vue">https://github.com/vuejs/vue</a></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在html文件中引入：</p><script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script><p>第一个vue示例：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue-Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span>    </span><br><span class="line">            {{ foo }}</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">var</span> vm  = <span class="keyword">new</span> <span class="title class_">Vue</span>({ </span></span><br><span class="line"><span class="language-javascript">              <span class="attr">el</span>:<span class="string">'#app'</span>,  <span class="comment">//绑定id</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>:{</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">foo</span>:<span class="string">'hello World'</span></span></span><br><span class="line"><span class="language-javascript">                }</span></span><br><span class="line"><span class="language-javascript">              });    </span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><p><img src="image/1574227453301.png">1574227453301.png”&gt;</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>创建vue实例</title>
      <link href="/2022/05/19/treasurebox/vue/1.chu-shi-vue/2.chuang-jian-vue-shi-li/"/>
      <url>/2022/05/19/treasurebox/vue/1.chu-shi-vue/2.chuang-jian-vue-shi-li/</url>
      
        <content type="html"><![CDATA[<h2 id="创建Vue实例"><a href="#创建Vue实例" class="headerlink" title="创建Vue实例"></a>创建Vue实例</h2><p>每个Vue应用程序都通过使用以下功能创建一个新的Vue实例：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>({</span><br><span class="line"><span class="comment">// options</span></span><br><span class="line">})</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p>j经常会使用vm（ViewModel）来引用Vue实例</p><h3 id="数据与方法"><a href="#数据与方法" class="headerlink" title="数据与方法"></a>数据与方法</h3><p>1、创建Vue实例后，它将在其data对象中找到所有属性添加到Vue的反应系统中。当这些属性的值更改时，视图中的数据也会发生改变。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;    </span><br><span class="line"><span class="keyword">var</span> data = { a : <span class="number">1</span> };    </span><br><span class="line"><span class="keyword">var</span> vm  = <span class="keyword">new</span> <span class="title class_">Vue</span>({</span><br><span class="line">        <span class="attr">data</span>:data    </span><br><span class="line">    });    </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">a</span> == data.<span class="property">a</span>);    </span><br><span class="line">vm.<span class="property">a</span> = <span class="number">2</span>;    </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">a</span>,data.<span class="property">a</span>);     <span class="comment">// 修改属性时原来的值会相应修改    </span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p>使用Object.freeze()时，可以防止更改现有的属性</p><p>html文件：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span>    </span><br><span class="line">{{ a }}    </span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"a=2"</span>&gt;</span>change it<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> obj = {    <span class="attr">foo</span>:<span class="string">"bar"</span>};</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(obj);   <span class="comment">//加上这个属性之后，vue绑定的数据不能做反向修改</span></span><br><span class="line"><span class="keyword">new</span>  <span class="title class_">Vue</span>({    </span><br><span class="line">    <span class="attr">el</span>:<span class="string">'#app'</span>,    </span><br><span class="line">    <span class="attr">data</span>:obj,</span><br><span class="line">});</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p>视图数据更新只针对已经存在的数据，如果添加新的属性时，不会触发视图更新如：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.b = 'hi'</span><br></pre></td></tr></tbody></table></figure><p>2、Vue实例还有许多其他有用的实例属性和方法。这些以$为前缀，以区别用户定义的属性。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = {a :<span class="number">1</span>};</span><br><span class="line"><span class="keyword">var</span> vm  = <span class="keyword">new</span>  <span class="title class_">Vue</span>({    </span><br><span class="line">    <span class="attr">el</span>:<span class="string">"#example"</span>,           </span><br><span class="line">    <span class="attr">data</span>:data</span><br><span class="line">});</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">$data</span> === data); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">$el</span> === <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'example'</span>));   <span class="comment">//true</span></span><br><span class="line">vm.$watch(<span class="string">'a'</span>,<span class="keyword">function</span> (<span class="params">newValue,oldValue</span>) {    </span><br><span class="line">    <span class="comment">//当vm.a发生改变时会触发该方法    </span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">a</span>,<span class="number">111111111</span>);    </span><br><span class="line">    <span class="comment">//打印新、旧数值    </span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue,oldValue)</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h3 id="实例生命周期挂钩"><a href="#实例生命周期挂钩" class="headerlink" title="实例生命周期挂钩"></a>实例生命周期挂钩</h3><p>每个Vue实例在创建时都会经历一系列初始化步骤-例如，它需要设置数据观察，编译模板，将实例安装到DOM以及在数据更改时更新DOM。在此过程中，它还运行称为<strong>生命周期挂钩的</strong>函数，使用户有机会在特定阶段添加自己的代码。</p><p>例如，created钩子可用于在创建实例后运行代码：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>({</span><br><span class="line"><span class="attr">data</span>: {</span><br><span class="line"><span class="attr">a</span>: <span class="number">1</span></span><br><span class="line">},</span><br><span class="line"><span class="attr">created</span>: <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line"><span class="comment">// this代表vm本身</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'a is: '</span> + <span class="variable language_">this</span>.<span class="property">a</span>)</span><br><span class="line">}</span><br><span class="line">})</span><br><span class="line"><span class="comment">// =&gt; "a is: 1"</span></span><br></pre></td></tr></tbody></table></figure><p>还有其他钩子，将在实例的生命周期的不同阶段被调用，如<a href="https://vuejs.org/v2/api/#mounted"><code>mounted</code></a>，<a href="https://vuejs.org/v2/api/#updated"><code>updated</code></a>和<a href="https://vuejs.org/v2/api/#destroyed"><code>destroyed</code></a>。调用的所有生命周期挂钩，其<code>this</code>上下文都指向调用它的Vue实例</p><h3 id="生命周期图"><a href="#生命周期图" class="headerlink" title="生命周期图"></a>生命周期图</h3><p><img src="image/lifecycle.png">�Vue实例</p><h3 id="生命周期图-1"><a href="#生命周期图-1" class="headerlink" title="生命周期图"></a>生命周期图</h3><img src="image/lifecycle.png">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python调用java的jar包</title>
      <link href="/2022/05/19/treasurebox/utils/1.python-diao-yong-java-de-jar-bao/"/>
      <url>/2022/05/19/treasurebox/utils/1.python-diao-yong-java-de-jar-bao/</url>
      
        <content type="html"><![CDATA[<h2 id="在python中调用jar包"><a href="#在python中调用jar包" class="headerlink" title="在python中调用jar包"></a>在python中调用jar包</h2><p>最近的项目功能需要调用客户的java接口，在调用接口的时候需要使用配套的jar包生成一些参数，但是公司的项目是用django搭建的，经过无数血与泪的尝试，最终终于找到了合适的方法去调用…..</p><p>jpype包是一个Python的包，可以在python项目中调用java的jar包，并获取最终的返回值。使用方法很简单，但是安装的过程比较复杂。本文在ubuntu18.0.4系统，以python2以及jdk8为基础，讲解jpype包的使用。</p><h3 id="1、安装java"><a href="#1、安装java" class="headerlink" title="1、安装java"></a>1、安装java</h3><p>首先去官网下载jdk1.8的tar包，放在<code>/opt</code>路径下，然后进行安装：</p><blockquote><p>tar -zxvf jdk-8u261-linux-x64.tar.gz</p></blockquote><p>安装完jdk之后，需要配置环境变量，在/etc/profile文件中添加以下内容：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">set java environment</span><br><span class="line">JAVA_HOME=/opt/java/jdk1.8.0_261        </span><br><span class="line">JRE_HOME=/opt/java/jdk1.8.0_261/jre     </span><br><span class="line">CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span><br><span class="line">export JAVA_HOME JRE_HOME CLASS_PATH PATH</span><br></pre></td></tr></tbody></table></figure><p>重启环境变量：<code>source /etc/profile</code></p><h3 id="2、安装python的jpype包"><a href="#2、安装python的jpype包" class="headerlink" title="2、安装python的jpype包"></a>2、安装python的jpype包</h3><p>找到项目依赖的python环境：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo find / -name site-packages</span><br></pre></td></tr></tbody></table></figure><p>将下载的jpype包放在<code>site-packages</code>路径下。</p><h3 id="3、使用示例"><a href="#3、使用示例" class="headerlink" title="3、使用示例"></a>3、使用示例</h3><p>jpype中主要包含以下方法：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jpype.getDefalutJVMPath()    # 获取jvm所在的路径</span><br><span class="line">jpype.startJVM()             # 开启虚拟机</span><br><span class="line">demo = jpype.JClass('hello.Demo')   # 加载jar包中的Demo文件</span><br><span class="line">demo.sayHello()     # 调用 sayHello 方法</span><br><span class="line">jpype.shutdownJVM()  # 关闭虚拟机</span><br></pre></td></tr></tbody></table></figure><p>代码示例：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">run_jar</span>():</span><br><span class="line">    jvm_path = <span class="string">"/opt/java/jdk1.8.0_261/jre/lib/amd64/server/libjvm.so"</span></span><br><span class="line">jar_path = os.path.join(os.path.abspath(<span class="string">"."</span>), <span class="string">"/home/youzi/ssojar/Hello.jar"</span>)</span><br><span class="line">    jpype.startJVM(jvm_path, <span class="string">"-Djava.class.path=%s"</span> % jar_path) <span class="comment"># 启动虚拟机</span></span><br><span class="line">    demo = jpype.JClass(<span class="string">'Demo'</span>)  <span class="comment"># 加载Demo类</span></span><br><span class="line">    demo.sayHello() <span class="comment"># 调用sayHello方法</span></span><br><span class="line">    jpype.shutdownJVM()  <span class="comment"># 关闭虚拟机</span></span><br></pre></td></tr></tbody></table></figure><p>��拟机</p><pre><code></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>4、pandas使用</title>
      <link href="/2022/05/19/treasurebox/python/shu-ju-fen-xi/week1/4-pandas-shi-yong/"/>
      <url>/2022/05/19/treasurebox/python/shu-ju-fen-xi/week1/4-pandas-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="pandas使用"><a href="#pandas使用" class="headerlink" title="pandas使用"></a>pandas使用</h2><h3 id="一、pandas简介"><a href="#一、pandas简介" class="headerlink" title="一、pandas简介"></a>一、pandas简介</h3><p>pandas是一种建立在python基础上的快速，强大，灵活并且易于使用的开源数据分析和处理工具。是基于numpy实现的，具有存储表格数据、统计分析、数据清洗功能。</p><p>主要有两种数据结构：<strong>DataFrame</strong>和<strong>Series</strong>。</p><h3 id="二、pandas使用"><a href="#二、pandas使用" class="headerlink" title="二、pandas使用"></a>二、pandas使用</h3><ol><li><h4 id="两种数据结构的使用"><a href="#两种数据结构的使用" class="headerlink" title="两种数据结构的使用"></a>两种数据结构的使用</h4> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用来存储数据 ---两种结构</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># DataFrame ---具有行索引、列索引的表格数据</span></span><br><span class="line"><span class="comment">#           ---可以存储不同的数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建df --列表嵌套</span></span><br><span class="line">data = [[<span class="string">'zs'</span>, <span class="number">19</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="string">'ls'</span>, <span class="number">18</span>, <span class="number">2</span>],</span><br><span class="line">        [<span class="string">'ww'</span>, <span class="number">20</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="string">'zl'</span>, <span class="number">19</span>, <span class="number">2</span>]]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'data:\n'</span>, data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'data的类型：\n'</span>, <span class="built_in">type</span>(data))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将data 转化df</span></span><br><span class="line">df = pd.DataFrame(data=data,  <span class="comment"># 数据，</span></span><br><span class="line">                  index=[<span class="string">'stu0'</span>, <span class="string">'stu1'</span>, <span class="string">'stu2'</span>, <span class="string">'stu3'</span>],  <span class="comment"># 行名称、行索引</span></span><br><span class="line">                  columns=[<span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'group'</span>],  <span class="comment"># 列索引、列名称</span></span><br><span class="line">                  )</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'df:\n'</span>, df)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'df的类型：\n'</span>, <span class="built_in">type</span>(df))  <span class="comment"># &lt;class 'pandas.core.frame.DataFrame'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建df ---使用大字典</span></span><br><span class="line">df = pd.DataFrame(</span><br><span class="line">    data={</span><br><span class="line">        <span class="string">'name'</span>: [<span class="string">'zs'</span>, <span class="string">'ls'</span>, <span class="string">'ww'</span>, <span class="string">'zl'</span>],</span><br><span class="line">        <span class="string">'age'</span>: [<span class="number">19</span>, <span class="number">18</span>, <span class="number">20</span>, <span class="number">19</span>],</span><br><span class="line">        <span class="string">'group'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">    },</span><br><span class="line">    index=[<span class="string">'stu0'</span>, <span class="string">'stu1'</span>, <span class="string">'stu2'</span>, <span class="string">'stu3'</span>]  <span class="comment"># 行索引</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'df:\n'</span>, df)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'df的类型：\n'</span>, <span class="built_in">type</span>(df))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将ndarray数组转化为df</span></span><br><span class="line"><span class="comment"># 先加载ndarray</span></span><br><span class="line">res = np.load(<span class="string">'./国民经济核算季度数据.npz'</span>)</span><br><span class="line"><span class="comment"># 获取数组</span></span><br><span class="line">columns = res[<span class="string">'columns'</span>]</span><br><span class="line">values = res[<span class="string">'values'</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'columns:\n'</span>, columns)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'values:\n'</span>, values)</span><br><span class="line"><span class="comment"># 构建行索引名称</span></span><br><span class="line">index = [<span class="string">'index_'</span> + <span class="built_in">str</span>(tmp) <span class="keyword">for</span> tmp <span class="keyword">in</span> <span class="built_in">range</span>(values.shape[<span class="number">0</span>])]</span><br><span class="line"><span class="comment"># 将columns 与 values 结合起来</span></span><br><span class="line">df = pd.DataFrame(data=values,</span><br><span class="line">                  columns=columns,</span><br><span class="line">                  index=index)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'df:\n'</span>,df)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'df的类型：\n'</span>,<span class="built_in">type</span>(df))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Series ----只有行索引、数据的表格结构</span></span><br><span class="line"><span class="comment">#        ----数据的类型都是一致</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建series --由简单列表、一维数组转化为series</span></span><br><span class="line">se = pd.Series(data=np.array([<span class="string">'zs'</span>, <span class="string">'ls'</span>, <span class="string">'ww'</span>, <span class="string">'zl'</span>]),  <span class="comment"># 数据</span></span><br><span class="line">               index=[<span class="string">'stu0'</span>, <span class="string">'stu1'</span>, <span class="string">'stu2'</span>, <span class="string">'stu3'</span>])  <span class="comment"># 行索引</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'se:\n'</span>, se)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'se的类型：\n'</span>, <span class="built_in">type</span>(se))  <span class="comment"># &lt;class 'pandas.core.series.Series'&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建series --通过映射关系来创建series，并按照index进行排序</span></span><br><span class="line"><span class="comment"># 基础班 ---字典是无序(仅限于Python3.7版本之前)</span></span><br><span class="line">scores = {<span class="string">'zs'</span>: <span class="number">90</span>, <span class="string">'ls'</span>: <span class="number">80</span>, <span class="string">'ww'</span>: <span class="number">60</span>, <span class="string">'zl'</span>: <span class="number">48</span>}</span><br><span class="line">index = [<span class="string">'zs'</span>, <span class="string">'zl'</span>, <span class="string">'ww'</span>, <span class="string">'ls'</span>, <span class="string">'kk'</span>]</span><br><span class="line">se = pd.Series(data=scores,</span><br><span class="line">               index=index  <span class="comment"># 行名称，指定排序规则</span></span><br><span class="line">               )</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'se:\n'</span>, se)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'se的类型：\n'</span>, <span class="built_in">type</span>(se))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从df中获取一列数据 ---series  ---特殊的df(一列的且无列名称的特殊的df)</span></span><br><span class="line">se = df[<span class="string">'name'</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'se:\n'</span>, se)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'se的类型：\n'</span>, <span class="built_in">type</span>(se))</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="dataframe和series属性"><a href="#dataframe和series属性" class="headerlink" title="dataframe和series属性"></a>dataframe和series属性</h4> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个dataframe</span></span><br><span class="line">df = pd.DataFrame(</span><br><span class="line">    data={</span><br><span class="line">        <span class="string">'name'</span>: [<span class="string">'zs'</span>, <span class="string">'ls'</span>, <span class="string">'ww'</span>, <span class="string">'zl'</span>],</span><br><span class="line">        <span class="string">'age'</span>: [<span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">18</span>],</span><br><span class="line">        <span class="string">'group'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">    },</span><br><span class="line">    index=[<span class="string">'stu0'</span>, <span class="string">'stu1'</span>, <span class="string">'stu2'</span>, <span class="string">'stu3'</span>]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'df:\n'</span>, df)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'df的类型：\n'</span>, <span class="built_in">type</span>(df))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'*'</span> * <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    dataframe属性</span></span><br><span class="line"><span class="string">    values index columns dtypes size ndim shape</span></span><br><span class="line"><span class="string">    df中的数据元素</span></span><br><span class="line"><span class="string">    可以将df 通过df.values转化为ndarray</span></span><br><span class="line"><span class="string">    pd.DataFrame将ndarray转化为df</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'df的values:\n'</span>, df.values)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'df的values的类型：\n'</span>, <span class="built_in">type</span>(df.values))  <span class="comment"># &lt;class 'numpy.ndarray'&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'df的index :\n'</span>, df.index)  <span class="comment"># 行索引</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'df的columns:\n'</span>, df.columns)  <span class="comment"># 列索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># df可以存储不同类型的数据</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'df的dtypes:\n'</span>, df.dtypes)  <span class="comment"># df中每一列的数据类型</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">df的dtypes:</span></span><br><span class="line"><span class="string"> age       int64</span></span><br><span class="line"><span class="string">group     int64</span></span><br><span class="line"><span class="string">name     object</span></span><br><span class="line"><span class="string">dtype: object</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'df的size：\n'</span>, df.size)  <span class="comment"># 元素个数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'df的ndim:\n'</span>, df.ndim)  <span class="comment"># 维数----&gt;2维</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'df的shape:\n'</span>, df.shape)  <span class="comment"># 形状  (行，列)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""series属性"""</span></span><br><span class="line">se = df[<span class="string">'age'</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'se：\n'</span>, se)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'se的类型：\n'</span>, <span class="built_in">type</span>(se))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'*'</span> * <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    相比于dataframe ---&gt;没有columns属性</span></span><br><span class="line"><span class="string">    values index dtypes/dtype ndim shape size itemsize</span></span><br><span class="line"><span class="string">    se中的数据元素</span></span><br><span class="line"><span class="string">    pd.Series可以将一维数组转化series</span></span><br><span class="line"><span class="string">    也可以通过se.values将Series转化为ndarray</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'se的values:\n'</span>, se.values)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'se的values的类型:\n'</span>, <span class="built_in">type</span>(se.values))  <span class="comment"># &lt;class 'numpy.ndarray'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'se的index:\n'</span>, se.index)  <span class="comment"># 行索引</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'se的dtypes:\n'</span>, se.dtypes)  <span class="comment"># 元素类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'se的dtype:\n'</span>, se.dtype)  <span class="comment"># 元素类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'se的ndim:\n'</span>, se.ndim)  <span class="comment"># 维度---&gt;1维</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'se的shape：\n'</span>, se.shape)  <span class="comment"># 形状  #  (4,)  ---&gt;只有一个维度---&gt;行维度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'se的size:\n'</span>, se.size)  <span class="comment"># 元素个数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'se的itemsize:\n'</span>, se.itemsize)  <span class="comment"># 每一个元素的占位大小</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h4> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    常用的文件excel文件、csv文件、html文件、json文件....</span></span><br><span class="line"><span class="string">    1、pandas读取文件</span></span><br><span class="line"><span class="string">        pandas里面读取文件格式：pd.read_xxx格式</span></span><br><span class="line"><span class="string">        pd.read_csv()</span></span><br><span class="line"><span class="string">        pd.read_table()</span></span><br><span class="line"><span class="string">        csv文件 ---特殊的以逗号分隔的、文本的序列文件</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 读取csv文件</span></span><br><span class="line">info = pd.read_csv(filepath_or_buffer=<span class="string">'./meal_order_info.csv'</span>,  <span class="comment"># 文件路径+名称</span></span><br><span class="line">                   encoding=<span class="string">'ansi'</span>,  <span class="comment"># 编码方式</span></span><br><span class="line">                   <span class="comment"># delimiter=',',  # 分隔符</span></span><br><span class="line">                   <span class="comment"># sep=','  # 分隔符</span></span><br><span class="line">                   <span class="comment"># header='infer',  # 读取的文件的时候，列索引自动识别，也可以显式指定</span></span><br><span class="line">                   <span class="comment"># header=0,  # 显式指定第n行为 列索引</span></span><br><span class="line">                   <span class="comment"># names=['列1', '列2'],  # 可以自定义列索引名称</span></span><br><span class="line">                   <span class="comment"># usecols=[0, 1]  # 可以指定读取的列下标</span></span><br><span class="line">                   <span class="comment"># index_col=0,  # 指定特定的列作为行索引名称</span></span><br><span class="line">                   <span class="comment"># nrows=10,  # 可以指定读取前n行</span></span><br><span class="line">                   )</span><br><span class="line"><span class="comment"># 参数参考read_csv理解,和read_csv的区别在于：没有默认的分隔符</span></span><br><span class="line"><span class="comment"># info = pd.read_table('./meal_order_info.csv', sep=',', encoding='ansi')</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'info:\n'</span>, info)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'info 的类型:\n'</span>, <span class="built_in">type</span>(info))  <span class="comment"># &lt;class 'pandas.core.frame.DataFrame'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># excel文件 ---以.xlsx .xls为结尾的表格数据文件</span></span><br><span class="line">detail = pd.read_excel(io=<span class="string">'./meal_order_detail.xlsx'</span>,  <span class="comment"># 文件路径 + 名称</span></span><br><span class="line">                       sheetname=<span class="literal">None</span>,  <span class="comment"># 读取表格下标</span></span><br><span class="line">                       <span class="comment"># header=0,  # 以表格的第0行为列索引</span></span><br><span class="line">                       <span class="comment"># # index_col=0 ,# 可以指定特定列为行索引</span></span><br><span class="line">                       <span class="comment"># parse_cols=[0, 1],  # 读取指定的列</span></span><br><span class="line">                       )</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'detail:\n'</span>, detail)  <span class="comment"># ---&gt;OrderedDict</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以通过</span></span><br><span class="line"><span class="built_in">print</span>(detail.keys())  <span class="comment"># odict_keys(['meal_order_detail1', 'meal_order_detail2', 'meal_order_detail3'])</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'*'</span> * <span class="number">100</span>)</span><br><span class="line"><span class="comment"># 获取不同的sheet</span></span><br><span class="line">detail_1 = detail[<span class="string">'meal_order_detail1'</span>]</span><br><span class="line">detail_2 = detail[<span class="string">'meal_order_detail2'</span>]</span><br><span class="line">detail_3 = detail[<span class="string">'meal_order_detail3'</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'detail_1:\n'</span>, detail_1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    2、pandas保存文件</span></span><br><span class="line"><span class="string">        pandas保存文件的格式：df.to_xxx格式</span></span><br><span class="line"><span class="string">        csv文件保存</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">info.to_csv(path_or_buf=<span class="string">'./aaa.csv'</span>,  <span class="comment"># 保存的路径+名称</span></span><br><span class="line">            sep=<span class="string">','</span>,  <span class="comment"># 分隔符</span></span><br><span class="line">            header=<span class="literal">True</span>,  <span class="comment"># 需要保存列索引,如果不需要保存列索引---&gt;header=False</span></span><br><span class="line">            index=<span class="literal">True</span>,  <span class="comment"># 需要保存行索引，如果不需要保存行索引----&gt;index=False</span></span><br><span class="line">            <span class="comment"># columns=['info_id','emp_id']  # 指定需要保存的列</span></span><br><span class="line">            mode=<span class="string">'a'</span>,  <span class="comment"># 没保存一次，之前的内容都会被覆盖掉，如果想要追加保存---&gt;mode='a'</span></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line"><span class="comment"># excel文件保存</span></span><br><span class="line"><span class="comment"># 一次只能保存一个sheet</span></span><br><span class="line">detail_1.to_excel(excel_writer=<span class="string">'./bbb.xlsx'</span>,  <span class="comment"># 具体的路径+ 名称 或者ExcelWriter对象</span></span><br><span class="line">                  sheet_name=<span class="string">'Sheet1'</span>,  <span class="comment"># 默认保存的表格的名称</span></span><br><span class="line">                  header=<span class="literal">True</span>,  <span class="comment"># 保存列索引，如果不保存--header=False</span></span><br><span class="line">                  index=<span class="literal">True</span>,  <span class="comment"># 保存行索引，如果不保存，---index=False</span></span><br><span class="line">                  <span class="comment"># startrow=20,  # 保存的文件里面跳过指定行继续保存</span></span><br><span class="line">                  <span class="comment"># startcol=5, # 保存的文件里面跳过指定列继续保存</span></span><br><span class="line">                  )</span><br><span class="line"></span><br><span class="line">detail_2.to_excel(excel_writer=<span class="string">'./bbb.xlsx'</span>,  <span class="comment"># 具体的路径+ 名称  或者ExcelWriter对象</span></span><br><span class="line">                  sheet_name=<span class="string">'Sheet2'</span>,  <span class="comment"># 默认保存的表格的名称</span></span><br><span class="line">                  header=<span class="literal">True</span>,  <span class="comment"># 保存列索引，如果不保存--header=False</span></span><br><span class="line">                  index=<span class="literal">True</span>,  <span class="comment"># 保存行索引，如果不保存，---index=False</span></span><br><span class="line">                  <span class="comment"># startrow=20,  # 保存的文件里面跳过指定行继续保存</span></span><br><span class="line">                  <span class="comment"># startcol=5, # 保存的文件里面跳过指定列继续保存</span></span><br><span class="line">                  )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果按照上面的方式进行保存----&gt;每保存一次，覆盖一次</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将多个df分别保存到相同文件的不同sheet中去</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以借助 ExcelWriter 来进行保存</span></span><br><span class="line"><span class="comment"># 创建ExcelWriter对象</span></span><br><span class="line">writer = pd.ExcelWriter(<span class="string">'./ccc.xlsx'</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    将不同df 保存到不同sheet中</span></span><br><span class="line"><span class="string">    写入数据</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">detail_1.to_excel(excel_writer=writer, sheet_name=<span class="string">'sheet1'</span>)</span><br><span class="line">detail_2.to_excel(excel_writer=writer, sheet_name=<span class="string">'sheet2'</span>)</span><br><span class="line">detail_3.to_excel(excel_writer=writer, sheet_name=<span class="string">'sheet3'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 保存修改</span></span><br><span class="line">writer.save()</span><br><span class="line"><span class="comment"># # 关闭ExcelWriter对象</span></span><br><span class="line">writer.close()</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="dataframe的查询操作"><a href="#dataframe的查询操作" class="headerlink" title="dataframe的查询操作"></a>dataframe的查询操作</h4><p> 查询操作主要根据列索引和切片获取数据。</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载detail数据</span></span><br><span class="line"><span class="comment"># 默认加载第0个sheet</span></span><br><span class="line">detail = pd.read_excel(<span class="string">'./meal_order_detail.xlsx'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改一下行索引</span></span><br><span class="line">index = [<span class="string">'index_'</span> + <span class="built_in">str</span>(tmp) <span class="keyword">for</span> tmp <span class="keyword">in</span> detail.index]</span><br><span class="line">detail.index = index</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'detail:\n'</span>, detail)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'detail的列索引：\n'</span>, detail.columns)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'*'</span> * <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># df索引方式---&gt;先列后行(直接索引方式)</span></span><br><span class="line"><span class="comment"># ndarray索引---arr[行,列] ---同时索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 dishes_name 这一列数据 --列名 --Series</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'获取单列数据：\n'</span>, detail[<span class="string">'dishes_name'</span>])</span><br><span class="line"><span class="comment"># 获取  dishes_name dishes_id amounts counts 这四列数据 --列名列表 --dataframe</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'获取多列数据：\n'</span>, detail[[<span class="string">'dishes_name'</span>, <span class="string">'dishes_id'</span>, <span class="string">'amounts'</span>, <span class="string">'counts'</span>]])</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">获取单列数据指定行----&gt;行下标列表、行名称列表、行下标切片、行名称切片</span></span><br><span class="line"><span class="string">                ----&gt;head(获取前n行)</span></span><br><span class="line"><span class="string">                ----&gt;tail(获取后n行)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 dishes_name 这一列 数据 的前n行  ---行下标切片</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'获取单列数据：\n'</span>, detail[<span class="string">'dishes_name'</span>][:<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 获取 dishes_name 这一列 数据 的前n行  ---行名称切片 ---包含结束位置</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'获取单列数据：\n'</span>, detail[<span class="string">'dishes_name'</span>][:<span class="string">'index_4'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 dishes_name 这一列 数据 的前n行  ---行下标列表</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'获取单列数据：\n'</span>, detail[<span class="string">'dishes_name'</span>][[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 dishes_name 这一列 数据 的前n行  ---行名称列表</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'获取单列数据：\n'</span>, detail[<span class="string">'dishes_name'</span>][[<span class="string">'index_0'</span>, <span class="string">'index_1'</span>, <span class="string">'index_2'</span>, <span class="string">'index_3'</span>, <span class="string">'index_4'</span>]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 获取 dishes_name 这一列 数据 的前n行  ---head()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'获取单列数据：\n'</span>, detail[<span class="string">'dishes_name'</span>].head(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 dishes_name 这一列 数据 的后n行  ---tail()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'获取单列数据：\n'</span>, detail[<span class="string">'dishes_name'</span>].tail(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">获取多列数据的前n行----&gt;行下标切片、行名称切片</span></span><br><span class="line"><span class="string">                 ----&gt;head(获取前n行)</span></span><br><span class="line"><span class="string">                 ----&gt;tail(获取后n行)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取  dishes_name dishes_id amounts counts 这四列数据 --列名列表 --dataframe ---&gt;前n行数据 --不能使用行下标列表</span></span><br><span class="line"><span class="comment"># print('获取多列数据：\n', detail[['dishes_name', 'dishes_id', 'amounts', 'counts']][[0, 1, 2, 3, 4, 5]])  # 此时是错误的，不能使用行下标列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取  dishes_name dishes_id amounts counts 这四列数据 --列名列表 --dataframe ---&gt;前n行数据 --不能使用行名称列表</span></span><br><span class="line"><span class="comment"># print('获取多列数据：\n',</span></span><br><span class="line"><span class="comment">#       detail[['dishes_name', 'dishes_id', 'amounts', 'counts']][['index_0', 'index_1', 'index_2']])  # 此时是错误的，不能使用行名称列表</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取  dishes_name dishes_id amounts counts 这四列数据 --列名列表 --dataframe ---&gt;前n行数据 --行下标切片 --可行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'获取多列数据：\n'</span>,detail[[<span class="string">'dishes_name'</span>, <span class="string">'dishes_id'</span>, <span class="string">'amounts'</span>, <span class="string">'counts'</span>]][<span class="number">0</span>:<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取  dishes_name dishes_id amounts counts 这四列数据 --列名列表 --dataframe ---&gt;前n行数据 --行名称切片 --可行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'获取多列数据：\n'</span>,detail[[<span class="string">'dishes_name'</span>, <span class="string">'dishes_id'</span>, <span class="string">'amounts'</span>, <span class="string">'counts'</span>]][<span class="string">'index_0'</span>:<span class="string">'index_5'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取  dishes_name dishes_id amounts counts 这四列数据 --列名列表 --dataframe ---&gt;前n行数据 --head --可行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'获取多列数据：\n'</span>, detail[[<span class="string">'dishes_name'</span>, <span class="string">'dishes_id'</span>, <span class="string">'amounts'</span>, <span class="string">'counts'</span>]].head(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取  dishes_name dishes_id amounts counts 这四列数据 --列名列表 --dataframe ---&gt;后n行数据 --tail--可行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'获取多列数据：\n'</span>, detail[[<span class="string">'dishes_name'</span>, <span class="string">'dishes_id'</span>, <span class="string">'amounts'</span>, <span class="string">'counts'</span>]].tail(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p> name’, ‘dishes_id’, ‘amounts’, ‘counts’]].head(10))</p><h1 id="获取-dishes-name-dishes-id-amounts-counts-这四列数据-–列名列表-–dataframe-—-gt-后n行数据-–tail–可行"><a href="#获取-dishes-name-dishes-id-amounts-counts-这四列数据-–列名列表-–dataframe-—-gt-后n行数据-–tail–可行" class="headerlink" title="获取  dishes_name dishes_id amounts counts 这四列数据 –列名列表 –dataframe —>后n行数据 –tail–可行"></a>获取  dishes_name dishes_id amounts counts 这四列数据 –列名列表 –dataframe —&gt;后n行数据 –tail–可行</h1><p> print(‘获取多列数据：\n’, detail[[‘dishes_name’, ‘dishes_id’, ‘amounts’, ‘counts’]].tail(10))</p><pre><code></code></pre></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>三大框架的对比</title>
      <link href="/2022/05/19/treasurebox/python/san-da-kuang-jia-de-dui-bi/"/>
      <url>/2022/05/19/treasurebox/python/san-da-kuang-jia-de-dui-bi/</url>
      
        <content type="html"><![CDATA[<h2 id="三大框架对比"><a href="#三大框架对比" class="headerlink" title="三大框架对比"></a>三大框架对比</h2><h3 id="一、Django框架"><a href="#一、Django框架" class="headerlink" title="一、Django框架"></a>一、Django框架</h3><p>Django走的是大而全的方向，开发效率高。采用MTV架构，自带ORM，admin后台，自带sqlite数据库和开发测试用的服务器，给开发者提供了很高的开发效率。是一个重量级web框架，功能齐全，提供一站式解决的思路，能让开发者不用在选择上花费大量的时间。</p><p>自带ORM和模板引擎，支持Jinjia等非官方模板引擎。</p><p>自带ORM使Django和关系型数据库耦合度高，如果要使用非关系型，需要使用第三方库</p><p>自带数据库管理app</p><p>成熟，稳定，开发效率高，相对于Flask，Django整体封闭性比较好，适用于做企业级开发，python web框架的先驱，第三方库丰富。</p><h3 id="二、Flask框架"><a href="#二、Flask框架" class="headerlink" title="二、Flask框架"></a>二、Flask框架</h3><p>Flask是轻量级的框架，自由，灵活，可扩展性强，核心基于Werkzeng WSGI工具和jinja2模板引擎</p><p>适用于做小网站以及web服务的API，开发大型网站无压力，但架构需要自己设计</p><p>与关系型数据库的结合不弱于Django，与非关系型数据的结合要比Django好。</p><h3 id="三、tornado框架"><a href="#三、tornado框架" class="headerlink" title="三、tornado框架"></a>三、tornado框架</h3><p>Tornado框架走的是少而精的方向，性能优越，他最出名的是异步阻塞的设计方式。</p><p>Tornado的两大核心：</p><p>iostraem：对非阻塞的socket进行简单的封装、</p><p>ioloop：对I/O多路复用的封装，它实现一个单例。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据处理</title>
      <link href="/2022/05/19/treasurebox/python/rest-framework/3.shu-ju-chu-li/"/>
      <url>/2022/05/19/treasurebox/python/rest-framework/3.shu-ju-chu-li/</url>
      
        <content type="html"><![CDATA[<h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><h3 id="一、解析器"><a href="#一、解析器" class="headerlink" title="一、解析器"></a>一、解析器</h3><h3 id="二、序列化"><a href="#二、序列化" class="headerlink" title="二、序列化"></a>二、序列化</h3><ol><li><h4 id="请求数据校验"><a href="#请求数据校验" class="headerlink" title="请求数据校验"></a>请求数据校验</h4></li><li><h4 id="QuerySet进行序列化"><a href="#QuerySet进行序列化" class="headerlink" title="QuerySet进行序列化"></a>QuerySet进行序列化</h4></li></ol><h3 id="三、分页"><a href="#三、分页" class="headerlink" title="三、分页"></a>三、分页</h3><h3 id="四、路由"><a href="#四、路由" class="headerlink" title="四、路由"></a>四、路由</h3><h3 id="五、视图"><a href="#五、视图" class="headerlink" title="五、视图"></a>五、视图</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1、numpy基本使用</title>
      <link href="/2022/05/19/treasurebox/python/shu-ju-fen-xi/week1/1-numpy-ji-ben-shi-yong/"/>
      <url>/2022/05/19/treasurebox/python/shu-ju-fen-xi/week1/1-numpy-ji-ben-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h2><h3 id="一、numpy使用"><a href="#一、numpy使用" class="headerlink" title="一、numpy使用"></a>一、numpy使用</h3><ol><li><h4 id="numpy介绍"><a href="#numpy介绍" class="headerlink" title="numpy介绍"></a>numpy介绍</h4><p> numpy是python的科学计算库，在存储数据时使用连续的内存空间存储，提高了查询效率。numpy内存图如下：</p> <img src="image/numpy%E5%86%85%E5%AD%98%E5%9B%BE.png"></li><li><h4 id="numpy基本属性"><a href="#numpy基本属性" class="headerlink" title="numpy基本属性"></a>numpy基本属性</h4> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入numpy</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">数组的基本属性：</span></span><br><span class="line"><span class="string">    ndim:       数组的秩(纬度)，一维为1，二维为2</span></span><br><span class="line"><span class="string">    shape:      数组的类型，为元组格式，示例:二行三列的数组为(2,3)</span></span><br><span class="line"><span class="string">    size:       数组中元素的个数</span></span><br><span class="line"><span class="string">    itemsize:   每个整数占用4</span></span><br><span class="line"><span class="string">    dtype:      数组中数据的类型</span></span><br><span class="line"><span class="string">    data:       占用的内存地址，也被称为缓冲区</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数组</span></span><br><span class="line">arrl=np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(arrl))   <span class="comment">#&lt;class 'numpy.ndarray'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#例1、一维数组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'arr1秩为：'</span>,arrl.ndim)            <span class="comment">#一维数组秩为1，二维数组秩为2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'arr1轴为：'</span>,arrl.shape)           <span class="comment">#(3,)  3列1行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'size为：'</span>,arrl.size)              <span class="comment"># 3*1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'数组中元素的站位大小:'</span>,arrl.itemsize)  <span class="comment"># 4</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'元素类型：'</span>,arrl.dtype)           <span class="comment"># int(32)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'每个元素大小：'</span>,arrl.itemsize)    <span class="comment"># (4)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'缓冲区：'</span>,arrl.data)              <span class="comment"># 内存地址</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"-------------------------------------------------------"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#例2：二维数组</span></span><br><span class="line">arr2=np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]])</span><br><span class="line"><span class="built_in">print</span>(arr2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'arr2秩为：'</span>,arr2.ndim)                  <span class="comment">#2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'arr2轴为：'</span>,arr2.shape)                 <span class="comment"># (3,4)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'size为：'</span>,arr2.size)                    <span class="comment"># 3*4</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'数组中元素的站位大小:'</span>,arr2.itemsize)   <span class="comment"># 4</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'元素类型：'</span>,arr2.dtype)                 <span class="comment"># (int(32))</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'每个元素大小：'</span>,arr2.itemsize)          <span class="comment"># (4)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'缓冲区：'</span>,arr2.data)                    <span class="comment"># 内存地址</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"-------------------------------------------------------"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#例3：三维数组</span></span><br><span class="line">arr3=np.array([</span><br><span class="line">    [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>]],</span><br><span class="line">    [[<span class="number">7</span>,<span class="number">8</span>],[<span class="number">9</span>,<span class="number">10</span>],[<span class="number">11</span>,<span class="number">12</span>]]</span><br><span class="line">])</span><br><span class="line"><span class="built_in">print</span>(arr3)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'arr3秩为：'</span>,arr3.ndim)              <span class="comment">#3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'arr3轴为：'</span>,arr3.shape)             <span class="comment"># (2, 3, 2)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'size为：'</span>,arr3.size)                <span class="comment"># 12</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'数组中元素的站位大小:'</span>,arr3.itemsize)  <span class="comment">#4</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'元素类型：'</span>,arr3.dtype)             <span class="comment"># (int(32))</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'每个元素大小：'</span>,arr3.itemsize)      <span class="comment"># (4)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'缓冲区：'</span>,arr3.data)                <span class="comment"># 内存地址</span></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="数组的dtype属性"><a href="#数组的dtype属性" class="headerlink" title="数组的dtype属性"></a>数组的dtype属性</h4> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># numpy 数据类型---封装了Python中的数据类型---进行细致划分 ---&gt;变为numpy.数据类型</span></span><br><span class="line"><span class="comment"># 可以创建数组的时候进行通过dtype参数指定</span></span><br><span class="line">arr = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], dtype=np.float64)</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"><span class="built_in">print</span>(arr.dtype)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以进行强制转化</span></span><br><span class="line"><span class="comment"># print(np.float(3))</span></span><br><span class="line"><span class="comment"># print(np.int32(3.0))</span></span><br><span class="line"><span class="comment"># 0代表False, 非0代表True</span></span><br><span class="line"><span class="comment"># print(np.bool(1))</span></span><br><span class="line"><span class="comment"># print(np.bool(0))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ndarray 用来存储单一数据类型的数据 ---运算的</span></span><br><span class="line"><span class="comment"># 也可以用来存储 复合类型 --不推荐使用</span></span><br><span class="line"><span class="comment"># 存储个人信息</span></span><br><span class="line"><span class="comment"># df = np.dtype([('name', np.str, 40), ('height', np.float64), ('weight', np.float64)])</span></span><br><span class="line"><span class="comment"># # 创建一个数组</span></span><br><span class="line"><span class="comment"># arr = np.array([('zs', 178.0, 55.5), ('ls', 180.5, 65.0), ('ww', 190.0, 80.5)], dtype=df)</span></span><br><span class="line"><span class="comment"># print(arr)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建bool数组---里面值全是bool类型的数组</span></span><br><span class="line"><span class="comment"># bool_mask = np.array([0, 1, 1, 0], dtype=np.bool)</span></span><br><span class="line"><span class="comment"># print(bool_mask)</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="数组的创建"><a href="#数组的创建" class="headerlink" title="数组的创建"></a>数组的创建</h4> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">1、使用array函数来创建</span></span><br><span class="line"><span class="string">格式： np.array(object,dtype=None,copy=True,oreder='K',subok=False,ndmin=0)</span></span><br><span class="line"><span class="string">objece：接受array。表示想要创建的数据，无默认值</span></span><br><span class="line"><span class="string">dtype: 接受data-type.表示数组所需的数据类型。如果未给定，则选择保存对象所需的最小类型。默认为None</span></span><br><span class="line"><span class="string">ndmin:接收int。指定生成数据应该具有的最小维数，默认为None</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">a1=np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(a1,a1.dtype)     <span class="comment">#[1 2 3 4] int32</span></span><br><span class="line">a2=np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3.14</span>,<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(a2,a2.dtype)    <span class="comment">#[1.   2.   3.14 4.  ] float64</span></span><br><span class="line">a2=np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3.14</span>,<span class="number">4</span>],dtype=<span class="built_in">int</span>)</span><br><span class="line"><span class="built_in">print</span>(a2,a2.dtype)    <span class="comment">#[1 2 3 4] int32</span></span><br><span class="line"></span><br><span class="line">a4=np.array([(<span class="number">1</span>,<span class="number">2</span>),(<span class="number">3</span>,<span class="number">4</span>)])</span><br><span class="line"><span class="built_in">print</span>(a4,a4.ndim)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[1 2]</span></span><br><span class="line"><span class="string"> [3 4]] 2</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">a5=np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line"><span class="built_in">print</span>(a5,a5.ndim)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[1 2]</span></span><br><span class="line"><span class="string"> [3 4]] 2</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、arange()</span></span><br><span class="line"><span class="comment">#格式：arange(开始值，终止值，步长)  [开始值，终止值]</span></span><br><span class="line">arr6=np.arange(<span class="number">1</span>,<span class="number">9</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(arr6)  <span class="comment"># [1 2 3 4 5 6 7 8]</span></span><br><span class="line"></span><br><span class="line">arr7=np.arange(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0.22</span>)</span><br><span class="line"><span class="built_in">print</span>(arr7)  <span class="comment">#缺点是元素个数预估有难度</span></span><br><span class="line"><span class="comment"># [0.   0.22 0.44 0.66 0.88]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3、linspace</span></span><br><span class="line"><span class="comment">#格式：linspace(开始值，终止值，元素个数)</span></span><br><span class="line">arr8=np.linspace(<span class="number">0.1</span>,<span class="number">1</span>,<span class="number">7</span>)   <span class="comment">#float型</span></span><br><span class="line"><span class="built_in">print</span>(arr8)    <span class="comment">#[ 0.1   0.25  0.4   0.55  0.7   0.85  1.  ]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、使用logspace()函数</span></span><br><span class="line"><span class="comment"># 生成10~1 到10~3之间的等比例数</span></span><br><span class="line"><span class="comment"># base参数默认为10，可选</span></span><br><span class="line">arr9=np.logspace(<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,base=<span class="number">10</span>)    <span class="comment">#float型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'arr9'</span>,arr9)  <span class="comment"># [  10.  100. 1000.]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他函数</span></span><br><span class="line">a12=np.zeros((<span class="number">2</span>,<span class="number">3</span>))  <span class="comment">#生成2行3列的0</span></span><br><span class="line"><span class="built_in">print</span>(a12)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[[0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0.]]</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#empty()函数</span></span><br><span class="line">a13=np.empty((<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(a13)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[[0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0.]]</span></span><br><span class="line"><span class="string">[[0. 0. 0.]</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#eye(N)函数</span></span><br><span class="line"><span class="comment">#生成N阶矩阵，并且对角线元素为1</span></span><br><span class="line">a14=np.eye(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a14)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[[1. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 1. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 1.]]</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用diag()函数</span></span><br><span class="line">a15=np.diag([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])   <span class="comment">#对角线为1,2,3,4.其他为0</span></span><br><span class="line"><span class="built_in">print</span>(a15)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[[1 0 0 0]</span></span><br><span class="line"><span class="string"> [0 2 0 0]</span></span><br><span class="line"><span class="string"> [0 0 3 0]</span></span><br><span class="line"><span class="string"> [0 0 0 4]]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="数组索引"><a href="#数组索引" class="headerlink" title="数组索引"></a>数组索引</h4> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 创建一个一维数组</span></span><br><span class="line"><span class="comment"># arr = np.arange(1, 13, 1)</span></span><br><span class="line"><span class="comment"># print(arr)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print('arr的维度：', arr.ndim)</span></span><br><span class="line"><span class="comment"># print('arr的形状：', arr.shape)</span></span><br><span class="line"><span class="comment"># print('*' * 100)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 使用下标--会降低维度</span></span><br><span class="line"><span class="comment"># # 获取 3 ---下标</span></span><br><span class="line"><span class="comment"># print('获取3元素:', arr[2])</span></span><br><span class="line"><span class="comment"># # 获取11 --下标</span></span><br><span class="line"><span class="comment"># print('获取11元素：', arr[-2])</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 使用切片不降低维度</span></span><br><span class="line"><span class="comment"># # 获取3 --切片 ---步长为1 可以省略</span></span><br><span class="line"><span class="comment"># print('获取3元素：', arr[2:3:1])</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 获取11 --切片</span></span><br><span class="line"><span class="comment"># print('获取11元素：', arr[-2:-1:1])</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 获取 3 和 11  --&gt;下标列表</span></span><br><span class="line"><span class="comment"># # ---先获取到具体的值，然后将获取多个值组合起来，就得到最终的结果</span></span><br><span class="line"><span class="comment"># print('获取3和11元素：', arr[[2, -2]])</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 获取3 和 11 ---按照规律</span></span><br><span class="line"><span class="comment"># print('获取3 和11元素：', arr[2:-1:8])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建二维数组</span></span><br><span class="line">arr = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], [<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>], [<span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>]])</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'arr的维度：'</span>, arr.ndim)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'arr的形状：'</span>, arr.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 获取 5元素 ---下标</span></span><br><span class="line"><span class="comment"># print('获取5元素：', arr[1, 0])</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 获取11 元素---下标</span></span><br><span class="line"><span class="comment"># print('获取11元素：', arr[2, 2])</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 获取 5元素 --切片</span></span><br><span class="line"><span class="comment"># print('获取 5元素：', arr[1:2, 0:1])</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 获取 11 元素---切片</span></span><br><span class="line"><span class="comment"># print('获取11元素：', arr[2:3, 2:3])</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 获取5 元素 --下标、切片配合</span></span><br><span class="line"><span class="comment"># print('获取5 元素：', arr[1, 0:1])</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 获取11元素 --下标、切片配合</span></span><br><span class="line"><span class="comment"># print('获取11元素：', arr[2:3, 2])</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 获取多个元素</span></span><br><span class="line"><span class="comment"># # 获取 6  7  10  11  -下标列表 ---将多个具体的值组合起来</span></span><br><span class="line"><span class="comment"># print('获取6 7 10 11：', arr[[1, 1, 2, 2], [1, 2, 1, 2]])</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 获取6 7 10 11 --切片</span></span><br><span class="line"><span class="comment"># #  [[ 6  7]</span></span><br><span class="line"><span class="comment"># #  [10 11]]</span></span><br><span class="line"><span class="comment"># print('获取6 7 10 11：\n', arr[1:3, 1:3])</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 获取 6  8 13  16  ---下标列表</span></span><br><span class="line"><span class="comment"># print('获取6 8 13 16：', arr[[1, 1, 3, 3], [1, 3, 0, 3]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 存在arr ---3维 ----&gt;arr[块索引,行索引,列索引]</span></span><br><span class="line"><span class="comment"># 存在arr ---n维 ----&gt;arr[n-1个逗号将各个维度分开] 在各个维度上单独索引</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 索引方式---思维方式</span></span><br><span class="line"><span class="comment"># 获取 7 元素</span></span><br><span class="line"><span class="comment"># print('获取7元素：', arr[1][2])  # 高维度是由多个低维度组成</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bool数组索引</span></span><br><span class="line"><span class="comment"># 利用bool数组的特性来进行索引</span></span><br><span class="line"><span class="comment"># 数组里面全部为 bool值的数组</span></span><br><span class="line">bool_mask = np.array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>], dtype=np.<span class="built_in">bool</span>)</span><br><span class="line"><span class="built_in">print</span>(bool_mask)</span><br><span class="line"><span class="comment"># 利用bool数组索引</span></span><br><span class="line"><span class="comment"># 保留True 干掉False</span></span><br><span class="line"><span class="comment"># print('bool数组索引：\n', arr[bool_mask, :])</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'bool数组索引：\n'</span>, arr[:, bool_mask])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参考都使用下标列表形式理解</span></span><br><span class="line"><span class="comment"># arr[[F,T,T,F],[F,T,T,F]]</span></span><br><span class="line"><span class="comment"># print('bool数组索引：\n', arr[bool_mask, bool_mask])</span></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="数组shape属性"><a href="#数组shape属性" class="headerlink" title="数组shape属性"></a>数组shape属性</h4> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数组</span></span><br><span class="line"><span class="comment"># arr = np.arange(16)</span></span><br><span class="line"><span class="comment"># print(arr)</span></span><br><span class="line"><span class="comment"># print('arr的维度：', arr.ndim)</span></span><br><span class="line"><span class="comment"># print('arr的形状：', arr.shape)</span></span><br><span class="line"><span class="comment"># print('*' * 100)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 元素个数不能变化</span></span><br><span class="line"><span class="comment"># 形状更改 ---shape属性重新赋值</span></span><br><span class="line"><span class="comment"># arr.shape = (4, 4)</span></span><br><span class="line"><span class="comment"># print(arr)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># reshape --更改形状 --返回新的数组</span></span><br><span class="line"><span class="comment"># arr = arr.reshape((4,4))</span></span><br><span class="line"><span class="comment"># print(arr)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 同时使用np.arange 和 reshape</span></span><br><span class="line">arr = np.arange(<span class="number">16</span>).reshape((<span class="number">4</span>, <span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将高维度 展开为一维数组</span></span><br><span class="line"><span class="comment"># new_arr = arr.flatten()  # 返回的是一个拷贝</span></span><br><span class="line"><span class="comment"># 参数 C --行优先展开</span></span><br><span class="line"><span class="comment"># F---列优先展开</span></span><br><span class="line"><span class="comment"># new_arr = arr.ravel()  # 返回自身的视图</span></span><br><span class="line"><span class="comment"># print(new_arr)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -1 只是占位作用</span></span><br><span class="line"><span class="comment"># new_arr = arr.reshape((-1,))</span></span><br><span class="line"><span class="comment"># new_arr = arr.reshape((-1, 1))</span></span><br><span class="line"><span class="comment"># print(new_arr)</span></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="组合数组"><a href="#组合数组" class="headerlink" title="组合数组"></a>组合数组</h4> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数组</span></span><br><span class="line">arr1 = np.arange(<span class="number">4</span>).reshape((<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line">arr2 = np.array([[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>]])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'arr1:\n'</span>, arr1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'arr2:\n'</span>, arr2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'*'</span> * <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并</span></span><br><span class="line"><span class="comment"># 向下拼接 ----垂直拼接</span></span><br><span class="line"><span class="comment"># res = np.vstack((arr1,arr2))</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 向右拼接 ----水平拼接</span></span><br><span class="line"><span class="comment"># res = np.hstack((arr1, arr2))</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 行的方向进行拼接---垂直拼接</span></span><br><span class="line"><span class="comment"># res = np.concatenate((arr1, arr2), axis=0)</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 列的方向进行拼接---水平拼接</span></span><br><span class="line"><span class="comment"># res = np.concatenate((arr1, arr2), axis=1)</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="数组拆分"><a href="#数组拆分" class="headerlink" title="数组拆分"></a>数组拆分</h4> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数组</span></span><br><span class="line">arr = np.arange(<span class="number">16</span>).reshape((<span class="number">4</span>, <span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'*'</span> * <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二个必须是能够被整除的，均匀拆分</span></span><br><span class="line"><span class="comment"># 水平拆分  ---将水平的行 打断</span></span><br><span class="line"><span class="comment"># res = np.hsplit(arr, 2)</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 垂直拆分 ---将垂直的列 打断</span></span><br><span class="line"><span class="comment"># res = np.vsplit(arr, 2)</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把行的方向拆成 2部分 ---垂直拆分</span></span><br><span class="line"><span class="comment"># res = np.split(arr, 2, axis=0)</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把列的方向拆成2部分---水平拆分</span></span><br><span class="line"><span class="comment"># res = np.split(arr, 2, axis=1)</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以不均匀拆分</span></span><br><span class="line"><span class="comment"># 把行的方向进行拆分</span></span><br><span class="line"><span class="comment"># ---这么拆：[:1] [1:3],[3:]</span></span><br><span class="line"><span class="comment"># ---[:开始值]</span></span><br><span class="line"><span class="comment"># ---[开始值：结束值]</span></span><br><span class="line"><span class="comment"># ---[结束值：]</span></span><br><span class="line"><span class="comment"># res = np.split(arr, [1, 3], axis=0)[0]</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"><span class="comment"># print('*' * 100)</span></span><br><span class="line"><span class="comment"># res = np.split(arr, [1, 3], axis=0)[1]</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 前n列为一部分，最后一列为一部分</span></span><br><span class="line"><span class="comment"># 使用索引</span></span><br><span class="line"><span class="comment"># part_1 = arr[:, :-1]</span></span><br><span class="line"><span class="comment"># part_2 = arr[:, -1:]</span></span><br><span class="line"><span class="comment"># print('part_1:\n',part_1)</span></span><br><span class="line"><span class="comment"># print('part_2:\n',part_2)</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="生成矩阵"><a href="#生成矩阵" class="headerlink" title="生成矩阵"></a>生成矩阵</h4> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成矩阵</span></span><br><span class="line"><span class="comment"># 可以使用np.mat  np.asmatrix来创建矩阵</span></span><br><span class="line"><span class="comment"># np.mat = np.asmatrix 一样的</span></span><br><span class="line"><span class="comment"># np.mat 将特殊字符串转化为矩阵</span></span><br><span class="line"><span class="comment"># m1 = np.mat('1 2 3;4 5 6;7 8 9')</span></span><br><span class="line"><span class="comment"># print(m1)</span></span><br><span class="line"><span class="comment"># print(type(m1))  # &lt;class 'numpy.matrixlib.defmatrix.matrix'&gt;</span></span><br><span class="line"><span class="comment"># print(m1.ndim)  # 2维 ---只能是2维</span></span><br><span class="line"><span class="comment"># print(m1.shape)  # (3,3)</span></span><br><span class="line"><span class="comment"># print(m1.itemsize)</span></span><br><span class="line"><span class="comment"># print(m1.dtype)</span></span><br><span class="line"><span class="comment"># print(m1.size)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 也可以将列表嵌套转化为矩阵</span></span><br><span class="line"><span class="comment"># m1 = np.asmatrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])</span></span><br><span class="line"><span class="comment"># print(m1)</span></span><br><span class="line"><span class="comment"># print(type(m1))  # &lt;class 'numpy.matrixlib.defmatrix.matrix'&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 也可以将二维数组转化为矩阵</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 创建一个二维数组</span></span><br><span class="line"><span class="comment"># arr = np.arange(9).reshape((3, 3))</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># m1 = np.mat(arr)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print(m1)</span></span><br><span class="line"><span class="comment"># print(type(m1))  # &lt;class 'numpy.matrixlib.defmatrix.matrix'&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以使用np.bmat来组合矩阵</span></span><br><span class="line">arr1 = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">2</span>]])</span><br><span class="line">arr2 = np.arange(<span class="number">4</span>).reshape((<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'arr1:\n'</span>, arr1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'arr2:\n'</span>, arr2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'*'</span> * <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用np.bmat将数组组合成矩阵</span></span><br><span class="line"><span class="comment"># res = np.bmat('arr1 arr2;arr2 arr1')</span></span><br><span class="line"><span class="comment"># res = np.bmat([[arr1, arr2], [arr2, arr1]])  # 列表对象</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"><span class="comment"># print(type(res))  # &lt;class 'numpy.matrixlib.defmatrix.matrix'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以使用np.bmat 可以将 二维数组转化为矩阵</span></span><br><span class="line">res = np.bmat(arr1)</span><br><span class="line"><span class="comment"># res = np.bmat('1 2 3;4 5 6;7 8 9')  # 错误的</span></span><br><span class="line"><span class="comment"># res = np.bmat([[1, 2, 3], [4, 5, 6], [7, 8, 9]])  # 错误的</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(res))  <span class="comment"># &lt;class 'numpy.matrixlib.defmatrix.matrix'&gt;</span></span><br></pre></td></tr></tbody></table></figure><p> ��表对象</p><h1 id="print-res"><a href="#print-res" class="headerlink" title="print(res)"></a>print(res)</h1><h1 id="print-type-res-lt-class-‘numpy-matrixlib-defmatrix-matrix’-gt"><a href="#print-type-res-lt-class-‘numpy-matrixlib-defmatrix-matrix’-gt" class="headerlink" title="print(type(res))  # <class ‘numpy.matrixlib.defmatrix.matrix’>"></a>print(type(res))  # &lt;class ‘numpy.matrixlib.defmatrix.matrix’&gt;</h1><h1 id="可以使用np-bmat-可以将-二维数组转化为矩阵"><a href="#可以使用np-bmat-可以将-二维数组转化为矩阵" class="headerlink" title="可以使用np.bmat 可以将 二维数组转化为矩阵"></a>可以使用np.bmat 可以将 二维数组转化为矩阵</h1><p> res = np.bmat(arr1)</p><h1 id="res-x3D-np-bmat-‘1-2-3-4-5-6-7-8-9’-错误的"><a href="#res-x3D-np-bmat-‘1-2-3-4-5-6-7-8-9’-错误的" class="headerlink" title="res = np.bmat(‘1 2 3;4 5 6;7 8 9’)  # 错误的"></a>res = np.bmat(‘1 2 3;4 5 6;7 8 9’)  # 错误的</h1><h1 id="res-x3D-np-bmat-1-2-3-4-5-6-7-8-9-错误的"><a href="#res-x3D-np-bmat-1-2-3-4-5-6-7-8-9-错误的" class="headerlink" title="res = np.bmat([[1, 2, 3], [4, 5, 6], [7, 8, 9]])  # 错误的"></a>res = np.bmat([[1, 2, 3], [4, 5, 6], [7, 8, 9]])  # 错误的</h1><p> print(res)<br> print(type(res))  # &lt;class ‘numpy.matrixlib.defmatrix.matrix’&gt;</p><pre><code></code></pre></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2、数组操作</title>
      <link href="/2022/05/19/treasurebox/python/shu-ju-fen-xi/week1/2-shu-zu-cao-zuo/"/>
      <url>/2022/05/19/treasurebox/python/shu-ju-fen-xi/week1/2-shu-zu-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h2><ol><li><h3 id="矩阵运算"><a href="#矩阵运算" class="headerlink" title="矩阵运算"></a>矩阵运算</h3> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建矩阵进行运算</span></span><br><span class="line">m1 = np.mat(<span class="string">'1 2;3 4'</span>)  <span class="comment"># ---(2,2)</span></span><br><span class="line">m2 = np.asmatrix([[<span class="number">2</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">2</span>]])  <span class="comment"># ----(2,2)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'m1:\n'</span>, m1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'m2:\n'</span>, m2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'*'</span> * <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 矩阵相加 ---同型矩阵 ---对应位置相加</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'m1 + m2 :\n'</span>, m1 + m2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 矩阵相减---矩阵加上后面的矩阵的负矩阵 ---对应位置相减</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'m1 - m2 :\n'</span>, m1 - m2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 矩阵与 数的相乘 ----每一个元素都与数进行相乘</span></span><br><span class="line"><span class="comment"># 3 和 m1 进行相乘</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'3 * m1 :\n'</span>, <span class="number">3</span> * m1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 矩阵 与矩阵 相乘</span></span><br><span class="line"><span class="comment"># # 规则：如果两个矩阵进行相乘，左矩阵的列 必须等于右矩阵的行，才能相乘</span></span><br><span class="line"><span class="comment"># # 生成一个左矩阵行、右矩阵列的矩阵</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'m1 * m2:\n'</span>, m1 * m2)</span><br><span class="line"><span class="comment"># np.matmul</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'m1 * m2 :\n'</span>, np.matmul(m1, m2))</span><br><span class="line"><span class="comment"># np.dot</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'m1 * m2 :\n'</span>, np.dot(m1, m2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 矩阵对应位置元素相乘 ---同型矩阵</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'m1、m2对应位置元素相乘：\n'</span>, np.multiply(m1, m2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 矩阵性质</span></span><br><span class="line"><span class="comment"># 矩阵转置</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'m1 的转置：\n'</span>,m1.T)</span><br><span class="line"><span class="comment"># 矩阵的逆</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'m1 的逆矩阵：\n'</span>, m1.I)</span><br><span class="line"><span class="comment"># 逆矩阵性质---A*A的逆 = E   ----&gt; |A| = 0 ---&gt;直接报错，或者出现inf</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'m1 * m1 的逆矩阵：\n'</span>, m1 * m1.I)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 矩阵的视图</span></span><br><span class="line"><span class="comment"># 可以通过np.mat np.asmatrix将ndarray转化为矩阵</span></span><br><span class="line"><span class="comment"># 可以通过矩阵.A 来获取 ndarray</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'m1 的视图：\n'</span>, m1.A)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'m1 视图的类型：\n'</span>, <span class="built_in">type</span>(m1.A))  <span class="comment"># &lt;class 'numpy.ndarray'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 索引---对于ndarray,使用下标会降低维度</span></span><br><span class="line"><span class="comment"># 对于矩阵 --使用下标 不降低维度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'获取m1的/元素'</span>, m1[<span class="number">0</span>, :])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 矩阵的共轭转置</span></span><br><span class="line"><span class="comment"># 先共轭，再转置  ---复数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'m1的共轭转置：\n'</span>,m1.H)</span><br></pre></td></tr></tbody></table></figure></li><li><h3 id="数组计算"><a href="#数组计算" class="headerlink" title="数组计算"></a>数组计算</h3><p> 数组的全通用函数 —是一种能够对数组中所有元素进行操作的函数–以整个数组为输出。</p><p> 要求：运算的数组 —必须是同型</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建两个数组</span></span><br><span class="line"><span class="comment"># arr1 = np.array([[1, 2], [2, 1]])  # (2,2)</span></span><br><span class="line"><span class="comment"># arr2 = np.arange(1, 5).reshape((2, 2))  # (2,2)</span></span><br><span class="line"><span class="comment"># print('arr1:\n', arr1)</span></span><br><span class="line"><span class="comment"># print('arr2:\n', arr2)</span></span><br><span class="line"><span class="comment"># print('*' * 100)</span></span><br><span class="line"><span class="comment"># (1) 四则运算 --- + - * / ** ----&gt;对应位置运算进行对应的四则元素--以整个数组为一个运算单位</span></span><br><span class="line"><span class="comment"># print('arr1 + arr2:\n', arr1 + arr2)  # 对应位置元素相加</span></span><br><span class="line"><span class="comment"># print('arr1 - arr2 :\n', arr1 - arr2)  # 对应位置元素相减</span></span><br><span class="line"><span class="comment"># print('arr1 * arr2 :\n', arr1 * arr2)  # 对应位置元素相乘</span></span><br><span class="line"><span class="comment"># print('arr1 / arr2 :\n', arr1 / arr2)  # 对应位置元素相除---注意：除数不能为0</span></span><br><span class="line"><span class="comment"># print('arr1 ** arr2:\n', arr1 ** arr2)  # 对应位置元素求幂</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># (2) 比较运算 --- &gt; &lt; &gt;= &lt;= == !=  ----&gt;返回bool数组</span></span><br><span class="line"><span class="comment"># 对应位置元素进行比较，如果满足比较的条件，返回True 否则为False ---&gt;返回bool数组</span></span><br><span class="line"><span class="comment"># print('arr1 == arr2 :\n', arr1 == arr2)</span></span><br><span class="line"><span class="comment"># print('arr1 &lt;= arr2:\n', arr1 &lt;= arr2)</span></span><br><span class="line"><span class="comment"># print('arr1 &gt; arr2 :\n', arr1 &gt; arr2)</span></span><br><span class="line"><span class="comment"># print('*' * 100)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># (3) 逻辑运算 ---返回bool值</span></span><br><span class="line"><span class="comment"># np.all  相当于and --只有都满足的条件的时候，才返回True，只要有一个不满足，结果即为False</span></span><br><span class="line"><span class="comment"># np.any  相当于or --只要有一个满足条件，就返回True,全部都不满足条件，则结果为False</span></span><br><span class="line"><span class="comment"># print('all:\n', np.all(arr1 == arr2))</span></span><br><span class="line"><span class="comment"># print('all:\n', np.all(arr1 &lt;= arr2))</span></span><br><span class="line"><span class="comment"># print('any:\n', np.any(arr1 == arr2))</span></span><br><span class="line"><span class="comment"># print('any:\n', np.any(arr1 &gt; arr2))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先比较---然后利用比较运算返回的bool数组进行索引操作</span></span><br><span class="line"><span class="comment"># 创建一个数组---身高的数组</span></span><br><span class="line">height = np.array([<span class="number">170</span>, <span class="number">175</span>, <span class="number">178</span>, <span class="number">180</span>, <span class="number">172</span>])</span><br><span class="line"><span class="comment"># 找到偶数的身高 ---bool数组</span></span><br><span class="line">bool_mask = height % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(bool_mask)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 筛选出具体的偶数的身高</span></span><br><span class="line">new_height = height[bool_mask]</span><br><span class="line"><span class="built_in">print</span>(new_height)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建两个数组</span></span><br><span class="line">arr1 = np.arange(<span class="number">6</span>).reshape((<span class="number">2</span>, <span class="number">3</span>))  <span class="comment"># (2,3)--&gt;shape的长度为2</span></span><br><span class="line">arr2 = np.array([<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>])  <span class="comment"># (3,) ---&gt;shape的长度为1 ---&gt; arr2向arr1看齐 ---&gt;(1,3)</span></span><br><span class="line">arr3 = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">1</span>]])  <span class="comment"># (2,2)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'arr1:\n'</span>, arr1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'arr2:\n'</span>, arr2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'arr3:\n'</span>, arr3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组的广播机制 --- 不同型的数组的算术运算规则</span></span><br><span class="line"><span class="comment"># print('arr1 + arr2 :\n', arr1 + arr2)</span></span><br><span class="line"><span class="comment"># print('arr1 + arr3 :\n', arr1 + arr3)  # 不能运算</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># arr1</span></span><br><span class="line"><span class="comment">#  [[0 1 2]</span></span><br><span class="line"><span class="comment">#  [3 4 5]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># arr2</span></span><br><span class="line"><span class="comment">#  [2 1 3] ---&gt;(1,3)  ---&gt;[[2 1 3]] --&gt;行维度为1 ---沿着行维度的计算，---都使用第0行数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># (4) ---两个数组进行运算--如果有维度为1，沿着此轴上的运算都用第一组值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据(4) ---&gt;arr2</span></span><br><span class="line"><span class="comment"># [[2 1 3]</span></span><br><span class="line"><span class="comment"># [2 1 3]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  [[0 1 2]  +  [[2 1 3]</span></span><br><span class="line"><span class="comment">#  [3 4 5]]     [2 1 3]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---&gt;[[2 2 5]</span></span><br><span class="line"><span class="comment">#      5 5 8 ]]</span></span><br><span class="line"><span class="comment">#      ----&gt;输出(2,3)</span></span><br><span class="line"><span class="comment"># 输入(2,3)  (3,)--&gt;(1,3) ---&gt;可以运算</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># arr1  arr3 为什么不能运算？</span></span><br><span class="line"><span class="comment"># arr1 (2,3)  arr3(2,2)</span></span><br><span class="line"><span class="comment"># (2)规则---&gt; 输出(2,3) ---&gt;(3)规则</span></span><br><span class="line"><span class="comment"># ---输出数组形状的列维度 与 arr3输入数组形状在列维度不相等且并没有一个为1的，所以不能运算</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 假设存在arr1 shape为(1,2,3,4,4,5,6)数组</span></span><br><span class="line"><span class="comment"># 存在arr2 shape为(1,2,4,4,1,1)数组---&gt;(1,1,2,4,4,1,1)</span></span><br><span class="line"><span class="comment"># 这两个数组不能相加</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h3 id="数组保存与读取"><a href="#数组保存与读取" class="headerlink" title="数组保存与读取"></a>数组保存与读取</h3> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组可以以二进制形式、文本形式进行保存</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二进制形式---以0101的这种进行保存</span></span><br><span class="line"><span class="comment"># 创建一个数组进行保存</span></span><br><span class="line">arr = np.arange(<span class="number">16</span>).reshape((<span class="number">4</span>, <span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"><span class="comment"># 将单个数组以二进制形式进行保存</span></span><br><span class="line"><span class="comment"># 参数1 路径+ 名称，此时，文件后缀名可以省略，默认保存成以.npy为结尾二进制文件</span></span><br><span class="line"><span class="comment"># 参数2 需要保存的数组</span></span><br><span class="line">np.save(<span class="string">'./arr'</span>,arr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'保存成功'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载.npy文件</span></span><br><span class="line"><span class="comment"># 参数 文件路径+名称，此时后缀名不能省略</span></span><br><span class="line">data = np.load(<span class="string">'./arr.npy'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'加载的数据为：\n'</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文本形式---以人可以识别的有序的序列内容进行保存</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h3 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h3> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个一维的数组</span></span><br><span class="line">arr = np.array([<span class="number">5</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">9</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'arr:\n'</span>, arr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对数组进行排序 ---快排--对列的方向的进行排序--对原数组直接产生影响</span></span><br><span class="line">arr.sort()</span><br><span class="line"><span class="comment"># 升序排序</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'排序之后的数组：\n'</span>, arr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建二维的数组</span></span><br><span class="line"><span class="comment"># arr = np.array([[7, 5, 8], [9, 6, 4], [3, 4, 9]])</span></span><br><span class="line"><span class="comment"># print(arr)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对二维数组进行排序</span></span><br><span class="line"><span class="comment"># 列的方向进行升序排序</span></span><br><span class="line"><span class="comment"># 如：此时排序，各行之间毫无关系，只是在各行内部，对不同的列进行升序排序</span></span><br><span class="line"><span class="comment"># arr.sort()</span></span><br><span class="line"><span class="comment"># 行的方向上升序排序</span></span><br><span class="line"><span class="comment"># 如：此时排序，各列之间毫无关系，只是在各列内部，对不同的行进行升序排序</span></span><br><span class="line"><span class="comment"># arr.sort(axis=0)</span></span><br><span class="line"><span class="comment"># print('排序之后的数组：\n', arr)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 间接排序</span></span><br><span class="line"><span class="comment"># 不对数组排序，只是返回数组排序之后的下标</span></span><br><span class="line">arr = np.array([<span class="number">5</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">9</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'arr:\n'</span>, arr)</span><br><span class="line"><span class="comment"># 使用np.argsort进行排序</span></span><br><span class="line">res = np.argsort(arr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'排序之后的结果：\n'</span>,res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二维数组</span></span><br><span class="line"><span class="comment"># arr = np.array([[7, 5, 8], [9, 6, 4], [3, 4, 9]])</span></span><br><span class="line"><span class="comment"># print(arr)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 列的方向 ---返回的是对应的下标</span></span><br><span class="line">res = np.argsort(arr, axis=-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组去重功能</span></span><br><span class="line"><span class="comment"># 创建数组</span></span><br><span class="line">arr = np.array([<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"></span><br><span class="line">arr = np.array([<span class="string">'zs'</span>, <span class="string">'ls'</span>, <span class="string">'ww'</span>, <span class="string">'zl'</span>, <span class="string">'kk'</span>, <span class="string">'zz'</span>, <span class="string">'zs'</span>, <span class="string">'ls'</span>, <span class="string">'ww'</span>, <span class="string">'zl'</span>, <span class="string">'kk'</span>])</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line">arr = np.array([<span class="string">'小明'</span>,<span class="string">'小名'</span>,<span class="string">'小名'</span>,<span class="string">'小名'</span>,<span class="string">'小花'</span>,<span class="string">'小华'</span>,<span class="string">'小花'</span>])</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'*'</span> * <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看该数组中具有哪些数据</span></span><br><span class="line"><span class="comment"># 可以使用unique进行去重，---兼并排序</span></span><br><span class="line"><span class="comment"># 英文数组 也适用</span></span><br><span class="line"><span class="comment"># 中文数组 也适用  ---- 中文数组排序 ----编码---unicode---之后在进行ansii排序</span></span><br><span class="line">res = np.unique(arr)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></tbody></table></figure></li><li><h3 id="重复数组"><a href="#重复数组" class="headerlink" title="重复数组"></a>重复数组</h3> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个二维数组</span></span><br><span class="line">arr = np.arange(<span class="number">9</span>).reshape((<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'arr:\n'</span>, arr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'*'</span> * <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重复 -# np.tile --以数组的整体为单位进行重复</span></span><br><span class="line"><span class="comment"># 参数1 需要重复的数组</span></span><br><span class="line"><span class="comment"># 参数2 重复次数 ---可以指定按照对应的维度重复的次数</span></span><br><span class="line">res = np.tile(arr, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment"># 现在列的方向重复2次之后，以整体再在行的方向重复2次，再在以整体在块的方向重复2次</span></span><br><span class="line">res = np.tile(arr, [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># np.repeat</span></span><br><span class="line"><span class="comment"># 重复</span></span><br><span class="line"><span class="comment"># 参数1 需要重复的数组</span></span><br><span class="line"><span class="comment"># 参数2 重复的次数</span></span><br><span class="line"><span class="comment"># axis 指定重复方向、轴</span></span><br><span class="line"><span class="comment"># 若指定轴，沿着轴的方向以整行、整列为一个重复单位来重复指定的次数</span></span><br><span class="line">res = np.repeat(arr, <span class="number">2</span>, axis=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 如果不指定轴，默认会将数组展开，然后按照列的方向 以每一个元素为一个重复单位来重复指定次数</span></span><br><span class="line"><span class="comment"># res = np.repeat(arr, 2)</span></span><br><span class="line"><span class="comment"># # 不能省略重复次数</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></tbody></table></figure></li><li><h3 id="统计指标计算"><a href="#统计指标计算" class="headerlink" title="统计指标计算"></a>统计指标计算</h3><p> 主要有求和，均值，标准差，方差，最小值，最大值等。</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个二维数组</span></span><br><span class="line">arr = np.arange(<span class="number">1</span>, <span class="number">17</span>).reshape((<span class="number">4</span>, <span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'arr:\n'</span>, arr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'*'</span> * <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># np.统计指标  --numpy里面的方法</span></span><br><span class="line"><span class="comment"># arr.统计指标 --ndarray里面的方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 沿着行的方向 ---向下统计的</span></span><br><span class="line"><span class="comment"># sum(和)  -----相加</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'对arr 进行求和：'</span>, np.<span class="built_in">sum</span>(arr, axis=<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># mean(均值) -----和/个数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'对arr 进行求均值：'</span>, np.mean(arr, axis=<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># std(标准差) ---反应的数据的离散程度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'对arr 进行求标准差：'</span>, np.std(arr, axis=<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># var(方差) ---标准差的平方---反应的数据的离散程度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'对arr 进行求方差：'</span>, np.var(arr, axis=<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># min(最小值)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'对arr 进行求最小值：'</span>, np.<span class="built_in">min</span>(arr, axis=<span class="number">0</span>))</span><br><span class="line"><span class="comment"># max(最大值)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'对arr 进行求最大值：'</span>, np.<span class="built_in">max</span>(arr, axis=<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># argmin(最小值的下标)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'对arr 进行求最小值下标：'</span>, np.argmin(arr, axis=<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># argmax(最大值的下标)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'对arr 进行求最大值下标：'</span>, np.argmax(arr, axis=<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># cumsum(累计和)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'对arr 进行求累计和：\n'</span>, np.cumsum(arr, axis=<span class="number">0</span>))</span><br><span class="line"><span class="comment"># cumprod(累计积)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'对arr 进行求取累计积：\n'</span>, np.cumprod(arr, axis=<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不指定轴 ---展开进行成一维进行统计指标</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'对arr 进行求取累计和：\n'</span>,np.cumsum(arr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ndarray里面的方法</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'对arr 进行求取累计和：\n'</span>,arr.cumsum(axis=<span class="number">0</span>))</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p> ��\n’, np.cumprod(arr, axis=0))</p><h1 id="如果不指定轴-—展开进行成一维进行统计指标"><a href="#如果不指定轴-—展开进行成一维进行统计指标" class="headerlink" title="如果不指定轴 —展开进行成一维进行统计指标"></a>如果不指定轴 —展开进行成一维进行统计指标</h1><p> print(‘对arr 进行求取累计和：\n’,np.cumsum(arr))</p><h1 id="ndarray里面的方法"><a href="#ndarray里面的方法" class="headerlink" title="ndarray里面的方法"></a>ndarray里面的方法</h1><p> print(‘对arr 进行求取累计和：\n’,arr.cumsum(axis=0))</p><pre><code></code></pre></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>3、matplotlib使用</title>
      <link href="/2022/05/19/treasurebox/python/shu-ju-fen-xi/week1/3-matplotlib-shi-yong/"/>
      <url>/2022/05/19/treasurebox/python/shu-ju-fen-xi/week1/3-matplotlib-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="matplotlib使用"><a href="#matplotlib使用" class="headerlink" title="matplotlib使用"></a>matplotlib使用</h2><p>matplotlib是一个可视化库，用于在python中创建静态，动画和交互式可视化。绘图流程主要包含以下三步：</p><ul><li>创建画布</li><li>绘制图形</li><li>图形展示</li></ul><ol><li><h4 id="简单图形示例"><a href="#简单图形示例" class="headerlink" title="简单图形示例"></a>简单图形示例</h4> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图三部曲</span></span><br><span class="line"><span class="comment"># (1)创建画布</span></span><br><span class="line"><span class="comment"># 参数： figsize ---画布大小</span></span><br><span class="line"><span class="comment"># 参数： dpi ---像素</span></span><br><span class="line"><span class="comment"># 返回值： 返回画布对象</span></span><br><span class="line">plt.figure()</span><br><span class="line"><span class="comment"># (2)绘制图形</span></span><br><span class="line"><span class="comment"># 绘制下一周天气走势---折线图</span></span><br><span class="line"><span class="comment"># 折线图---要素：点 ---坐标轴：x,y坐标 ---(x,y)</span></span><br><span class="line"><span class="comment"># 绘制折线图的时候---准备 (x1,y1) (x2,y2) (x3,y3) ....</span></span><br><span class="line"><span class="comment"># 绘制折线图的时候，不需要配对xy---只需要准备好一个x数组，一个y的数组</span></span><br><span class="line"><span class="comment"># 横轴---周一、周二、 ...、周日</span></span><br><span class="line"><span class="comment"># 纵轴---不同的温度</span></span><br><span class="line"><span class="comment"># 如果横轴是中文，一般先用序号代替，后续再进行将序号替换为中文</span></span><br><span class="line">x = np.arange(<span class="number">1</span>, <span class="number">8</span>)</span><br><span class="line">y = np.array([<span class="number">15</span>, <span class="number">20</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">20</span>, <span class="number">18</span>, <span class="number">16</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'x:\n'</span>, x)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'y:\n'</span>, y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制</span></span><br><span class="line">plt.plot(x,y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># (3)图形展示</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="图形修饰"><a href="#图形修饰" class="headerlink" title="图形修饰"></a>图形修饰</h4> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图三部曲</span></span><br><span class="line"><span class="comment"># (1)创建画布</span></span><br><span class="line"><span class="comment"># 参数： figsize ---画布大小</span></span><br><span class="line"><span class="comment"># 参数： dpi ---像素</span></span><br><span class="line"><span class="comment"># 返回值： 返回画布对象</span></span><br><span class="line">plt.figure()</span><br><span class="line"><span class="comment"># 默认不支持中文</span></span><br><span class="line"><span class="comment"># 修改参数，让其支持中文</span></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = <span class="string">'SimHei'</span></span><br><span class="line"><span class="comment"># 修改参数让其重新支持负号</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span></span><br><span class="line"><span class="comment"># (2)绘制图形</span></span><br><span class="line"><span class="comment"># 绘制下一周天气走势---折线图</span></span><br><span class="line"><span class="comment"># 折线图---要素：点 ---坐标轴：x,y坐标 ---(x,y)</span></span><br><span class="line"><span class="comment"># 绘制折线图的时候---准备 (x1,y1) (x2,y2) (x3,y3) ....</span></span><br><span class="line"><span class="comment"># 绘制折线图的时候，不需要配对xy---只需要准备好一个x数组，一个y的数组</span></span><br><span class="line"><span class="comment"># 横轴---周一、周二、 ...、周日</span></span><br><span class="line"><span class="comment"># 纵轴---不同的温度</span></span><br><span class="line"><span class="comment"># 如果横轴是中文，一般先用序号代替，后续再进行将序号替换为中文</span></span><br><span class="line">x = np.arange(<span class="number">1</span>, <span class="number">8</span>)</span><br><span class="line">y_bj = np.array([<span class="number">15</span>, <span class="number">20</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">20</span>, <span class="number">18</span>, <span class="number">16</span>])</span><br><span class="line">y_heb = np.array([-<span class="number">10</span>, -<span class="number">8</span>, -<span class="number">12</span>, -<span class="number">10</span>, -<span class="number">8</span>, -<span class="number">6</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'x:\n'</span>, x)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'y_bj:\n'</span>, y_bj)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'y_heb:\n'</span>, y_heb)</span><br><span class="line"></span><br><span class="line"><span class="comment"># color --线的颜色</span></span><br><span class="line"><span class="comment"># linestyle --线的样式</span></span><br><span class="line"><span class="comment"># linewidth --线的宽度</span></span><br><span class="line"><span class="comment"># marker --点的样式</span></span><br><span class="line"><span class="comment"># markersize --点的大小</span></span><br><span class="line"><span class="comment"># markerfacecolor --点的填充颜色</span></span><br><span class="line"><span class="comment"># markeredgecolor --点的边缘颜色</span></span><br><span class="line"><span class="comment"># 绘制</span></span><br><span class="line">plt.plot(x, y_bj, color=<span class="string">'r'</span>, linestyle=<span class="string">':'</span>, linewidth=<span class="number">1.2</span>, marker=<span class="string">"*"</span>, markersize=<span class="number">7</span>, markerfacecolor=<span class="string">'b'</span>,</span><br><span class="line">         markeredgecolor=<span class="string">'g'</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(x, y_heb, color=<span class="string">'#2F4F4F'</span>, linestyle=<span class="string">'-.'</span>, linewidth=<span class="number">1.2</span>, marker=<span class="string">"d"</span>, markersize=<span class="number">7</span>, markerfacecolor=<span class="string">'r'</span>,</span><br><span class="line">         markeredgecolor=<span class="string">'r'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加标题</span></span><br><span class="line">plt.title(<span class="string">'北京、哈尔滨下一周天气温度走势图'</span>)</span><br><span class="line"><span class="comment"># 修改横轴名称</span></span><br><span class="line">plt.xlabel(<span class="string">'日期'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改纵轴名称</span></span><br><span class="line">plt.ylabel(<span class="string">'温度/℃'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将横轴的序号 替换为中文 --修改横轴刻度</span></span><br><span class="line"><span class="comment"># 注意：如果修改的时候，是将序号替换为中</span></span><br><span class="line"><span class="comment"># 参数1 ：需要被替换的序号</span></span><br><span class="line"><span class="comment"># 参数2 ：替换之后的中文</span></span><br><span class="line"><span class="comment"># 构建中文日期列表</span></span><br><span class="line">xticks = [<span class="string">'周一'</span>, <span class="string">'周二'</span>, <span class="string">'周三'</span>, <span class="string">'周四'</span>, <span class="string">'周五'</span>, <span class="string">'周六'</span>, <span class="string">'周日'</span>]</span><br><span class="line"><span class="comment">#  rotation=45  旋转角度</span></span><br><span class="line">plt.xticks(x, xticks, rotation=<span class="number">45</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改纵轴刻度</span></span><br><span class="line"><span class="comment"># 重新设置新的显示的刻度范围</span></span><br><span class="line"><span class="comment"># 注意：只需要将新的刻度范围传递进去</span></span><br><span class="line"><span class="comment"># 并不改变真实点的纵坐标，只是修改其显示位置</span></span><br><span class="line">yticks = np.arange(-<span class="number">15</span>, <span class="number">31</span>, <span class="number">3</span>)</span><br><span class="line">plt.yticks(yticks)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加图例</span></span><br><span class="line"><span class="comment"># loc 图例的位置</span></span><br><span class="line">plt.legend([<span class="string">'北京'</span>, <span class="string">'哈尔滨'</span>], loc=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标注</span></span><br><span class="line"><span class="comment"># plt.text ---一次标注一个点</span></span><br><span class="line"><span class="comment"># 循环标注</span></span><br><span class="line"><span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">zip</span>(x, y_bj):  <span class="comment"># zip打包函数</span></span><br><span class="line">    <span class="comment"># i 点的横坐标</span></span><br><span class="line">    <span class="comment"># j 点的纵坐标</span></span><br><span class="line">    <span class="comment"># 参数1 标注的横坐标</span></span><br><span class="line">    <span class="comment"># 参数2 标注的纵坐标</span></span><br><span class="line">    <span class="comment"># 参数3 标注的内容---str</span></span><br><span class="line">    plt.text(i, j + <span class="number">1</span>, <span class="string">'%d℃'</span> % j,</span><br><span class="line">             horizontalalignment=<span class="string">'center'</span>,  <span class="comment"># 水平居中</span></span><br><span class="line">             <span class="comment"># verticalalignment='bottom'  # 点的底部</span></span><br><span class="line">             )</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">zip</span>(x, y_heb):  <span class="comment"># zip打包函数</span></span><br><span class="line">    <span class="comment"># i 点的横坐标</span></span><br><span class="line">    <span class="comment"># j 点的纵坐标</span></span><br><span class="line">    <span class="comment"># 参数1 标注的横坐标</span></span><br><span class="line">    <span class="comment"># 参数2 标注的纵坐标</span></span><br><span class="line">    <span class="comment"># 参数3 标注的内容---str</span></span><br><span class="line">    plt.text(i, j + <span class="number">1</span>, <span class="string">'%d℃'</span> % j,</span><br><span class="line">             horizontalalignment=<span class="string">'center'</span>,  <span class="comment"># 水平居中</span></span><br><span class="line">             <span class="comment"># verticalalignment='bottom'  # 点的底部</span></span><br><span class="line">             )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将图片进行保存</span></span><br><span class="line">plt.savefig(<span class="string">'./北京、哈尔滨下一周天气温度走势图.png'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># (3)图形展示</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h4> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">labels = [<span class="string">'G1'</span>, <span class="string">'G2'</span>, <span class="string">'G3'</span>, <span class="string">'G4'</span>, <span class="string">'G5'</span>]</span><br><span class="line">men_means = [<span class="number">20</span>, <span class="number">35</span>, <span class="number">30</span>, <span class="number">35</span>, <span class="number">27</span>]</span><br><span class="line">women_means = [<span class="number">25</span>, <span class="number">32</span>, <span class="number">34</span>, <span class="number">20</span>, <span class="number">25</span>]</span><br><span class="line">men_std = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">women_std = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>]</span><br><span class="line">width = <span class="number">0.35</span>       </span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line"></span><br><span class="line">ax.bar(labels, men_means, width, yerr=men_std, label=<span class="string">'Men'</span>)</span><br><span class="line">ax.bar(labels, women_means, width, yerr=women_std, bottom=men_means,</span><br><span class="line">       label=<span class="string">'Women'</span>)</span><br><span class="line"></span><br><span class="line">ax.set_ylabel(<span class="string">'Scores'</span>)</span><br><span class="line">ax.set_title(<span class="string">'Scores by group and gender'</span>)</span><br><span class="line">ax.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure></li></ol><p>更多示例参见官网案例：<a href="https://matplotlib.org/gallery/index.html">https://matplotlib.org/gallery/index.html</a>ow()<br>    ```</p><p>更多示例参见官网案例：<a href="https://matplotlib.org/gallery/index.html">https://matplotlib.org/gallery/index.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>os</title>
      <link href="/2022/05/19/treasurebox/python/python-chang-yong-biao-zhun-ku/1.os/"/>
      <url>/2022/05/19/treasurebox/python/python-chang-yong-biao-zhun-ku/1.os/</url>
      
        <content type="html"><![CDATA[<h2 id="OS模块"><a href="#OS模块" class="headerlink" title="OS模块"></a>OS模块</h2><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>os.getcwd()</td><td>获取当前工作路径</td></tr><tr><td>os.chdir(path)</td><td>切换到path路径</td></tr><tr><td>os.listdir(path)</td><td>获取path路径的所有文件或文件夹列表，文件夹为空时为空列表</td></tr><tr><td>os.mkdir(path,permission)</td><td>创建空文件夹，可以指定权限</td></tr><tr><td>os.makedirs(“/home/vc/ss”)</td><td>循环创建文件夹</td></tr><tr><td>os.removedirs(“/home/vc/ss”)</td><td>循环删除空文件夹，文件夹不为空时会报错</td></tr><tr><td>os.rename(“home”,”HOME”)</td><td>文件夹重命名</td></tr><tr><td>os.stat(path)</td><td>获取文件或文件夹信息</td></tr><tr><td>os.system(“ls -al”)</td><td>执行系统命令</td></tr><tr><td>result=os.popen(“ls -al”)</td><td>执行系统命令并能获取执行结果</td></tr><tr><td>os.getenv(‘PATH’)</td><td>获取系统环境变量</td></tr><tr><td>os.putenv(‘PATH’,’/home/sy/</td><td>将一个目录添加到环境变量中</td></tr><tr><td>os.curdir</td><td>表示当前文件夹，类似(.)</td></tr><tr><td>os.pardir</td><td>表示上一层文件夹，类似(..)</td></tr><tr><td>os.name</td><td>获取操作系统的名字，nt代表windows，posix代表linux或者unix</td></tr><tr><td>os.sep</td><td>获取系统路径间隔符号，windows\</td></tr><tr><td>os.extsep</td><td>获取文件名称和后缀的间隔符号</td></tr><tr><td>os.linesep</td><td>获取操作系统的幻狼福，windows是“\r\n”，linux是”\n”</td></tr></tbody></table><h3 id="os-path子模块的内容"><a href="#os-path子模块的内容" class="headerlink" title="os.path子模块的内容"></a>os.path子模块的内容</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>os.path.abspath(“/boys”)</td><td>将相对路径转换为绝对路径</td></tr><tr><td>os.path.dirname(path)</td><td>获取完整目录除最后文件夹的其他部分</td></tr><tr><td>os.path.basename(path)</td><td>获取最后的目录部分</td></tr><tr><td>os.path.split(“/home/sy/boys”)</td><td>(‘/home/sy’, ‘boys’) 将一个完整路径切割成目录部分和主体部分</td></tr><tr><td>os.path.join(path1,path2)</td><td>将两个路径合并成1个</td></tr><tr><td>os.path.splitext(filepath)</td><td>将一个文件路径切成文件后缀和其他两部分，用于获取文件后缀名</td></tr><tr><td>os.path.getsize(filepath)</td><td>获取文件的字节数</td></tr><tr><td>os.path.isfile(path)</td><td>检测是否是文件</td></tr><tr><td>os.path.isdir(path)</td><td>检测是否是文件夹</td></tr><tr><td>os.path.islink(path)</td><td>检测是否是链接</td></tr><tr><td>os.path.getctime(filepath)</td><td>获取文件的创建时间</td></tr><tr><td>os.path.getmtime(filepath)</td><td>获取文件的修改时间</td></tr><tr><td>os.path.getatime(filepath)</td><td>获取文件的访问时间</td></tr><tr><td>os.path.exists(filepath)</td><td>检测某个路径是否真实存在</td></tr><tr><td>os.path.isabs(path)</td><td>检测一个路径是否绝对路径</td></tr><tr><td>os.path.samefile(path1,path2)</td><td>检测两个路径是否是同一个文件</td></tr></tbody></table><pre><code>                |</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>random</title>
      <link href="/2022/05/19/treasurebox/python/python-chang-yong-biao-zhun-ku/2.random/"/>
      <url>/2022/05/19/treasurebox/python/python-chang-yong-biao-zhun-ku/2.random/</url>
      
        <content type="html"><![CDATA[<h2 id="random模块的使用"><a href="#random模块的使用" class="headerlink" title="random模块的使用"></a>random模块的使用</h2><p>random主要用于生成随机数使用：</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>random.seed(a=None, version=2)</td><td>初始化伪随机数生成器。如果未提供a或者a=None，则使用系统时间为种子。如果a是一个整数，则作为种子。</td></tr><tr><td>random.getstate()</td><td>返回一个当前生成器的内部状态对象</td></tr><tr><td>random.setstate(state)</td><td>传入一个先前利用getstate方法获得的状态对象，使得生成器恢复到这个状态。</td></tr><tr><td>random.getrandbits(k)</td><td>返回range(0,2***k)之间的一个整数，相当于randrange(0,2***k)</td></tr><tr><td>random.randrange(start, stop[, step])</td><td>返回range[start,stop)之间的一个整数，可加step，跟range(0,10,2)类似</td></tr><tr><td>random.randint(a, b)</td><td>返回range[a,b]之间的一个整数，等价于range(a,b+1)</td></tr><tr><td>random.choice(seq)</td><td>非空序列seq中随机选取一个元素。如果seq为空则弹出 IndexError异常。</td></tr><tr><td>random.choices(population, weights=None, *, cum_weights=None,k=1)</td><td>3.6版本新增。从population集群中随机抽取K个元素（可重复），以列表形式存在。weights是相对权重列表，cum_weights是累计权重，两个参数不能同时存在。</td></tr><tr><td>lst = [1,2,3]random.shuffle(lst)print(lst)</td><td>随机打乱序列x内元素的排列顺序。只能针对可变的序列。</td></tr><tr><td>random.sample(population,k)</td><td>从population样本或集合中随机抽取K个不重复的元素形成新的序列。常用于不重复的随机抽样。返回的是一个新的序列，不会破坏原有序列。要从一个整数区间随机抽取一定数量的整数，请使用sample(range(10000000), k=60)类似的方法，这非常有效和节省空间。如果k大于population的长度，则弹出ValueError异常。</td></tr><tr><td>random.random()</td><td>返回一个介于左闭右开[0.0, 1.0)区间的浮点数</td></tr><tr><td>random.uniform(a, b)</td><td>返回一个介于a和b之间的浮点数。如果a&gt;b，则是b到a之间的浮点数。这里的a和b都有可能出现在结果中。</td></tr><tr><td>random.triangular(low, high, mode)</td><td>返回一个low &lt;= N &lt;=high的三角形分布的随机数。参数mode指明众数出现位置。</td></tr><tr><td>random.betavariate(alpha, beta)</td><td>β分布。返回的结果在0~1之间，alpha和beta都要大于0</td></tr><tr><td>random.expovariate(lambd)</td><td>指数分布</td></tr><tr><td>random.gammavariate(alpha, beta)</td><td>伽玛分布，alpha和beta都要大于0</td></tr><tr><td>random.gauss(mu, sigma)</td><td>高斯分布</td></tr><tr><td>random.lognormvariate(mu, sigma)</td><td>对数正态分布</td></tr><tr><td>random.normalvariate(mu, sigma)</td><td>正态分布</td></tr><tr><td>random.vonmisesvariate(mu, kappa)</td><td>卡帕分布</td></tr><tr><td>random.paretovariate(alpha)</td><td>帕累托分布</td></tr><tr><td>random.weibullvariate(alpha, beta)</td><td>威布尔分布</td></tr></tbody></table><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">'betavariate', 'choice', 'expovariate', 'gammavariate', 'gauss', 'getrandbits', </span></span><br><span class="line"><span class="string">'getstate', 'lognormvariate', 'normalvariate', 'paretovariat</span></span><br><span class="line"><span class="string">e', 'randint', 'random', 'randrange', 'sample', 'seed', 'setstate', </span></span><br><span class="line"><span class="string">'shuffle', 'triangular', 'uniform', 'vonmisesvariate', 'weibullvariate'</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># random.seed(a=None, version=2)  # 初始化伪随机数生成器。如果未提供a或者a=None，则使用系统时间为种子。如果a是一个整数，则作为种子。</span></span><br><span class="line"><span class="comment"># print(random.seed( version=2))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># random.getstate()  # 返回一个当前生成器的内部状态的对象</span></span><br><span class="line"><span class="comment"># state = random.getstate()</span></span><br><span class="line"><span class="comment"># print(state, type(state))</span></span><br><span class="line"><span class="comment"># random.setstate(state)  # 传入一个先前利用getstate方法获得的状态对象，使得生成器恢复到这个状态。</span></span><br><span class="line"><span class="comment"># state = random.getstate()</span></span><br><span class="line"><span class="comment"># print(state, type(state))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># random.getrandbits(k)  # 返回range(0,2**k)之间的一个整数，相当于randrange(0,2**k)</span></span><br><span class="line"><span class="comment"># print(random.getrandbits(3))</span></span><br><span class="line"><span class="comment"># print(random.randrange(0,2**3))</span></span><br><span class="line"><span class="comment"># random.randrange(stop)  # 返回range(0,stop)之间的一个整数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># random.randrange(start, stop[, step])  # 返回range[start,stop)之间的一个整数，可加step，跟range(0,10,2)类似</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># random.randint(a, b)  # 返回range[a,b]之间的一个整数，等价于range(a,b+1)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># random.choice(seq)  # 从非空序列seq中随机选取一个元素。如果seq为空则弹出 IndexError异常。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># random.choices(population, weights=None, *, cum_weights=None,k=1)  # 3.6版本新增。从population集群中随机抽取K个元素（可重复）。weights是相对权重列表，cum_weights是累计权重，两个参数不能同时存在。</span></span><br><span class="line"><span class="comment"># print(random.choices((1,2,3,4), weights=None, cum_weights=None,k=2))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># random.shuffle(x[, random])  # 随机打乱序列x内元素的排列顺序。只能针对可变的序列，对于不可变序列，请使用下面的sample()方法。</span></span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">random.shuffle(lst)</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># random.sample(population,k)  # 从population样本或集合中随机抽取K个不重复的元素形成新的序列。常用于不重复的随机抽样。返回的是一个新的序列，不会破坏原有序列。要从一个整数区间随机抽取一定数量的整数，请使用sample(range(10000000), k=60)类似的方法，这非常有效和节省空间。如果k大于population的长度，则弹出ValueError异常。</span></span><br><span class="line"><span class="built_in">print</span>(random.sample((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),<span class="number">2</span>))</span><br><span class="line"><span class="comment"># random.random()  # 返回一个介于左闭右开[0.0, 1.0)区间的浮点数</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># random.uniform(a, b)  # 返回一个介于a和b之间的浮点数。如果a&gt;b，则是b到a之间的浮点数。这里的a和b都有可能出现在结果中。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># random.triangular(low, high, mode)  # 返回一个low &lt;= N &lt;=high的三角形分布的随机数。参数mode指明众数出现位置。</span></span><br><span class="line"><span class="built_in">print</span>(random.triangular(<span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>))</span><br><span class="line"><span class="comment"># random.betavariate(alpha, beta)  # β分布。返回的结果在0~1之间</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># random.expovariate(lambd)  # 指数分布</span></span><br><span class="line"><span class="built_in">print</span>(random.expovariate(<span class="number">2</span>))</span><br><span class="line"><span class="comment"># random.gammavariate(alpha, beta)  # 伽玛分布</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># random.gauss(mu, sigma)  # 高斯分布</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># random.lognormvariate(mu, sigma)  # 对数正态分布</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># random.normalvariate(mu, sigma)  # 正态分布</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># random.vonmisesvariate(mu, kappa)  # 卡帕分布</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># random.paretovariate(alpha)  # 帕累托分布</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># random.weibullvariate(alpha, beta)  # 威布尔分布</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>布<br>#</p><h1 id="random-weibullvariate-alpha-beta-威布尔分布"><a href="#random-weibullvariate-alpha-beta-威布尔分布" class="headerlink" title="random.weibullvariate(alpha, beta)  # 威布尔分布"></a>random.weibullvariate(alpha, beta)  # 威布尔分布</h1><pre><code></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>rest_framework初识</title>
      <link href="/2022/05/19/treasurebox/python/rest-framework/1.rest-framework-chu-shi/"/>
      <url>/2022/05/19/treasurebox/python/rest-framework/1.rest-framework-chu-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="rest-framework初识"><a href="#rest-framework初识" class="headerlink" title="rest_framework初识"></a>rest_framework初识</h2><p>在开发过程中，通常会进行前后端分离设计，这样不仅有助于加快前后端的开发速度，降低前后端代码的耦合度，还有利于提高后端代码的适用性，比如一个API接口可以同时供web端和app端进行使用。首先了解python中API开发，python中的API主要有两种视图的处理：</p><ul><li><p><strong>FBV</strong>：Function base view（基于函数的视图）</p></li><li><p><strong>CBV</strong>：Function base view（基于类的视图）</p><p>  CBV：基于反射实现，根据请求方式的不同，执行不同的方法：get,post,put,delete等</p></li></ul><h3 id="一、restful-规范"><a href="#一、restful-规范" class="headerlink" title="一、restful 规范"></a>一、restful 规范</h3><p>随着代码编写，逐渐形成了一种大家公认的，比较合理的接口开发和命名规范，这种规范就被称为restful风格。是建议在开发的过程中遵守restful接口规范，但并不是强制要求。restful接口规范主要有以下10种。</p><ol><li><h5 id="普通接口，用用户管理示例，需要四个接口："><a href="#普通接口，用用户管理示例，需要四个接口：" class="headerlink" title="普通接口，用用户管理示例，需要四个接口："></a>普通接口，用用户管理示例，需要四个接口：</h5> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_user</span>(<span class="params">request</span>):</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_user</span>(<span class="params">request</span>):</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">put_user</span>(<span class="params">request</span>):</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_user</span>(<span class="params">request</span>):</span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></tbody></table></figure><h5 id="使用restful风格，一个接口处理一条数据："><a href="#使用restful风格，一个接口处理一条数据：" class="headerlink" title="使用restful风格，一个接口处理一条数据："></a>使用restful风格，一个接口处理一条数据：</h5> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">users</span>(<span class="params">request</span>):</span><br><span class="line">    uses_list = [<span class="string">"柚子"</span>, <span class="string">"西瓜"</span>]</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"GET"</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">"PUT"</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">"DELETE"</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(json.dumps(uses_list))</span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="url中带上api进行区分"><a href="#url中带上api进行区分" class="headerlink" title="url中带上api进行区分"></a>url中带上api进行区分</h5><p> <code>www.youzi.com/api/</code></p></li><li><h5 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h5><p> <code>www.youzi.com/api/v1</code></p></li><li><h5 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h5><p> url尽量使用名词：<code>www.youzi.com/api/v1/user</code></p></li><li><h5 id="method"><a href="#method" class="headerlink" title="method"></a>method</h5><ul><li><strong>GET</strong>:从服务器获取资源</li><li><strong>POST</strong>:在服务器新建一个资源</li><li><strong>PUT</strong>：更新全部资源</li><li><strong>PATCH</strong>:更新部分资源</li><li><strong>DELETE</strong>：删除资源</li></ul></li><li><h5 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h5><ul><li><code>www.youzi.com/api/v1/user/limit=10</code></li><li><code>www.youzi.com/api/v1/user/offsey=10</code></li><li><code>www.youzi.com/api/v1/user/type=1</code></li></ul></li><li><h5 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h5><table><thead><tr><th>状态码</th><th>说明</th></tr></thead><tbody><tr><td>200</td><td>成功</td></tr><tr><td>201</td><td>用户新建或修改数据成功(POST/PUT/PATCH)</td></tr><tr><td>202</td><td>Accepted，表示异步任务已经进入后台排队</td></tr><tr><td>204</td><td>用户删除数据成功(DELETE)</td></tr><tr><td>301</td><td>一次重定向</td></tr><tr><td>302</td><td>永久重定向</td></tr><tr><td>401</td><td>没有权限</td></tr><tr><td>403</td><td>有权限，但是访问禁止了，可能是没通过其他的校验，比如django的csrf</td></tr><tr><td>404</td><td>数据不存在</td></tr><tr><td>406</td><td>数据请求格式不正确，比如请求json，但是只有xml</td></tr><tr><td>410</td><td>用户请求的数据被永久删除，且不会再得到了</td></tr><tr><td>422</td><td>当创建对象时，发生校验码错误</td></tr><tr><td>500</td><td>服务器错误</td></tr></tbody></table></li><li><h5 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h5> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">error:"password error"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h5><p>对不同的请求方式返回不同的结果，例如查看列表或者查看详情。</p></li><li><h5 id="在列表页返回详情页的链接"><a href="#在列表页返回详情页的链接" class="headerlink" title="在列表页返回详情页的链接"></a>在列表页返回详情页的链接</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">{</span><br><span class="line">"id":"1",</span><br><span class="line">"name":"youzi",</span><br><span class="line">"url":www.youzi.com/api/v1/fruit/1</span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">"id":"2",</span><br><span class="line">"name":"xigua",</span><br><span class="line">"url":www.youzi.com/api/v1/fruit/2</span><br><span class="line">},</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="二、Django-rest-framework框架"><a href="#二、Django-rest-framework框架" class="headerlink" title="二、Django rest_framework框架"></a>二、Django rest_framework框架</h3><p>RestFramework是一个能快速为我们提供API接口，方便我们编程的框架。依赖于django框架。自带很多实用的功能，并且提供了丰富的扩展性，我们可以通过重写一些方法进行二次开发。</p><ol><li><h4 id="普通的基于类的视图"><a href="#普通的基于类的视图" class="headerlink" title="普通的基于类的视图"></a>普通的基于类的视图</h4><p> 基于类的视图需要继承django.views中的View类，在<strong>urls</strong>中调用类视图的<code>as_view()</code>方法，请求时首先会执行<code>dispatch()</code>方法，在<code>dispatch()</code>方法中通过<code>getattr()</code>进行反向映射找到要请求的方法如：<code>get</code>，<code>post</code>，<code>put</code>，<code>patch</code>等。</p><h5 id="以下是使用类视图的示例："><a href="#以下是使用类视图的示例：" class="headerlink" title="以下是使用类视图的示例："></a>以下是使用类视图的示例：</h5><ul><li><p><strong>views代码：</strong></p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TeachersView</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line">    <span class="string">"""teacher view"""</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="string">"""重写dispatch方法"""</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"before"</span>)</span><br><span class="line">        ret = <span class="built_in">super</span>().dispatch(request, *args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"after"</span>)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request,*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"get"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self,request,*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"post"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self,request,*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"put"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self,request,*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"delete"</span>)</span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>urls代码</strong></p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'teachers/'</span>, csrf_exempt(views.TeachersView.as_view()), name=<span class="string">"teachers"</span>)</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p>  <strong>django.view.View中的部分源码：</strong></p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">View</span>:</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Intentionally simple parent class for all views. Only implements</span></span><br><span class="line"><span class="string">    dispatch-by-method and simple sanity checking.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    http_method_names = [<span class="string">'get'</span>, <span class="string">'post'</span>, <span class="string">'put'</span>, <span class="string">'patch'</span>, <span class="string">'delete'</span>, <span class="string">'head'</span>, <span class="string">'options'</span>, <span class="string">'trace'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, **kwargs</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Constructor. Called in the URLconf; can contain helpful extra</span></span><br><span class="line"><span class="string">        keyword arguments, and other things.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># Go through keyword arguments, and either save their values to our</span></span><br><span class="line">        <span class="comment"># instance, or raise an error.</span></span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> kwargs.items():</span><br><span class="line">            <span class="built_in">setattr</span>(self, key, value)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classonlymethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">as_view</span>(<span class="params">cls, **initkwargs</span>):</span><br><span class="line">        <span class="string">"""Main entry point for a request-response process."""</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">view</span>(<span class="params">request, *args, **kwargs</span>):</span><br><span class="line">            self = cls(**initkwargs)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">hasattr</span>(self, <span class="string">'get'</span>) <span class="keyword">and</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(self, <span class="string">'head'</span>):</span><br><span class="line">                self.head = self.get</span><br><span class="line">            self.request = request</span><br><span class="line">            self.args = args</span><br><span class="line">            self.kwargs = kwargs</span><br><span class="line">            <span class="string">"""执行dispatch方法"""</span></span><br><span class="line">            <span class="keyword">return</span> self.dispatch(request, *args, **kwargs)</span><br><span class="line">     <span class="string">''''''</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># Try to dispatch to the right method; if a method doesn't exist,</span></span><br><span class="line">        <span class="comment"># defer to the error handler. Also defer to the error handler if the</span></span><br><span class="line">        <span class="comment"># request method isn't on the approved list.</span></span><br><span class="line">        <span class="keyword">if</span> request.method.lower() <span class="keyword">in</span> self.http_method_names:</span><br><span class="line">            handler = <span class="built_in">getattr</span>(self, request.method.lower(), self.http_method_not_allowed)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            handler = self.http_method_not_allowed</span><br><span class="line">        <span class="keyword">return</span> handler(request, *args, **kwargs)</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><h4 id="rest-framework的使用"><a href="#rest-framework的使用" class="headerlink" title="rest_framework的使用"></a>rest_framework的使用</h4><p> 安装：pip install reset_framework</p><p> 简单示例：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="comment"># APIView继承的是django.views中的View，只是对request进行了再封装。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestPage</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="string">"""试卷"""</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request,*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"get"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self,request,*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"post"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self,request,*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"put"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self,request,*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"delete"</span>)</span><br></pre></td></tr></tbody></table></figure><h5 id="APIView源码讲解："><a href="#APIView源码讲解：" class="headerlink" title="APIView源码讲解："></a>APIView源码讲解：</h5><p> APIView继承的也是django.view中的View，只是重写了<code>dispatch()</code>方法，对request进行了再封装。主要有四部分的操作</p><ol><li><strong>版本控制</strong></li><li><strong>验证用户是否登录</strong></li><li><strong>校验权限</strong></li><li><strong>访问频率限制</strong></li></ol><p> 在以后逐渐讲解各部分的用法，感兴趣的可以先阅读源码。</p><h5 id="部分源码："><a href="#部分源码：" class="headerlink" title="部分源码："></a>部分源码：</h5> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">APIView</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        `.dispatch()` is pretty much the same as Django's regular dispatch,</span></span><br><span class="line"><span class="string">        but with extra hooks for startup, finalize, and exception handling.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.args = args</span><br><span class="line">        self.kwargs = kwargs</span><br><span class="line">        <span class="comment"># 对原生的request进行再封装</span></span><br><span class="line">        <span class="comment"># Request(request)</span></span><br><span class="line">        <span class="comment"># 原生的request = request._request</span></span><br><span class="line">        request = self.initialize_request(request, *args, **kwargs)</span><br><span class="line">        self.request = request</span><br><span class="line">        self.headers = self.default_response_headers  <span class="comment"># deprecate?</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 序列化request</span></span><br><span class="line">            self.initial(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Get the appropriate handler method</span></span><br><span class="line">            <span class="keyword">if</span> request.method.lower() <span class="keyword">in</span> self.http_method_names:</span><br><span class="line">                handler = <span class="built_in">getattr</span>(self, request.method.lower(),</span><br><span class="line">                                  self.http_method_not_allowed)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                handler = self.http_method_not_allowed</span><br><span class="line"></span><br><span class="line">            response = handler(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">            response = self.handle_exception(exc)</span><br><span class="line"></span><br><span class="line">        self.response = self.finalize_response(request, response, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> self.response</span><br><span class="line">    </span><br><span class="line">    <span class="string">''''''</span></span><br><span class="line">    <span class="comment"># 序列化数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initial</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Runs anything that needs to occur prior to calling the method handler.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.format_kwarg = self.get_format_suffix(**kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Perform content negotiation and store the accepted info on the request</span></span><br><span class="line">        neg = self.perform_content_negotiation(request)</span><br><span class="line">        request.accepted_renderer, request.accepted_media_type = neg</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Determine the API version, if versioning is in use.</span></span><br><span class="line">        <span class="comment"># 1、版本处理</span></span><br><span class="line">        version, scheme = self.determine_version(request, *args, **kwargs)</span><br><span class="line">        request.version, request.versioning_scheme = version, scheme</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Ensure that the incoming request is permitted</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2、验证是否登录</span></span><br><span class="line">        self.perform_authentication(request)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3、校验权限</span></span><br><span class="line">        self.check_permissions(request)</span><br><span class="line">        <span class="comment"># 4、限制访问频率</span></span><br><span class="line">        self.check_throttles(request)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initialize_request</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns the initial request object.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        parser_context = self.get_parser_context(request)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 对request进行再封装</span></span><br><span class="line">        <span class="keyword">return</span> Request(</span><br><span class="line">            request,</span><br><span class="line">            parsers=self.get_parsers(),</span><br><span class="line">            authenticators=self.get_authenticators(),</span><br><span class="line">            negotiator=self.get_content_negotiator(),</span><br><span class="line">            parser_context=parser_context</span><br><span class="line">        )</span><br></pre></td></tr></tbody></table></figure></li></ol><p>return Request(<br>                request,<br>                parsers=self.get_parsers(),<br>                authenticators=self.get_authenticators(),<br>                negotiator=self.get_content_negotiator(),<br>                parser_context=parser_context<br>            )<br>    ```</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>rest_framework四个封装详解</title>
      <link href="/2022/05/19/treasurebox/python/rest-framework/2.rest-framework-si-ge-feng-zhuang-xiang-jie/"/>
      <url>/2022/05/19/treasurebox/python/rest-framework/2.rest-framework-si-ge-feng-zhuang-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="REST-framework的四个处理"><a href="#REST-framework的四个处理" class="headerlink" title="REST framework的四个处理"></a>REST framework的四个处理</h2><p>上篇文章中我们说到rest framework的APIView中对request进行了<a href="https://blog.csdn.net/qq_42486675/article/details/106610104">再封装以及校验</a>，本篇文章主要从源码的角度分析这些方法，通过重写实现自己的功能模块快速开发。</p><p>我们接着看向下的流程。首先先看<code>APIView</code>中的关键源码，本篇主要讲解self.initial(request, *args, **kwargs)之后进行的操作：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">APIView</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        self.args = args</span><br><span class="line">        self.kwargs = kwargs</span><br><span class="line">        <span class="comment"># 对原生的request进行再封装</span></span><br><span class="line">        <span class="comment"># Request(request)</span></span><br><span class="line">        <span class="comment"># 原生的request = request._request</span></span><br><span class="line">        request = self.initialize_request(request, *args, **kwargs)</span><br><span class="line">        self.request = request</span><br><span class="line">        self.headers = self.default_response_headers  <span class="comment"># deprecate?</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 序列化request</span></span><br><span class="line">            self.initial(request, *args, **kwargs)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># Get the appropriate handler method</span></span><br><span class="line">            <span class="keyword">if</span> request.method.lower() <span class="keyword">in</span> self.http_method_names:</span><br><span class="line">                handler = <span class="built_in">getattr</span>(self, request.method.lower(),</span><br><span class="line">                                  self.http_method_not_allowed)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                handler = self.http_method_not_allowed</span><br><span class="line"></span><br><span class="line">            response = handler(request, *args, **kwargs)</span><br><span class="line">       <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">            response = self.handle_exception(exc)</span><br><span class="line"></span><br><span class="line">        self.response = self.finalize_response(request, response, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> self.response</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initial</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        self.format_kwarg = self.get_format_suffix(**kwargs)</span><br><span class="line">        neg = self.perform_content_negotiation(request)</span><br><span class="line">        request.accepted_renderer, request.accepted_media_type = neg</span><br><span class="line">        <span class="comment"># 1、版本处理</span></span><br><span class="line">        version, scheme = self.determine_version(request, *args, **kwargs)</span><br><span class="line">        request.version, request.versioning_scheme = version, scheme</span><br><span class="line">        <span class="comment"># 2、验证是否登录</span></span><br><span class="line">        self.perform_authentication(request)</span><br><span class="line">        <span class="comment"># 3、校验权限</span></span><br><span class="line">        self.check_permissions(request)</span><br><span class="line">        <span class="comment"># 4、限制访问频率</span></span><br><span class="line">        self.check_throttles(request)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initialize_request</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns the initial request object.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        parser_context = self.get_parser_context(request)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Request(</span><br><span class="line">            request,</span><br><span class="line">            parsers=self.get_parsers(),</span><br><span class="line">            authenticators=self.get_authenticators(),</span><br><span class="line">            negotiator=self.get_content_negotiator(),</span><br><span class="line">            parser_context=parser_context</span><br><span class="line">        )</span><br></pre></td></tr></tbody></table></figure><h3 id="一、用户登录认证"><a href="#一、用户登录认证" class="headerlink" title="一、用户登录认证"></a>一、用户登录认证</h3><p>在网站访问过程中，有些页面比如网站首页一般不需要用户进行登录，有些页面比如个人中心，用户必须登录之后才能访问，如果不使用统一的登录校验，就需要在每个视图中对用户是否登录加以校验，这样会出现很多重复的代码，所以我们可以实现一个用户登录校验装置进行身份校验，在需要的时候调用即可。</p><p>在常规方法中我们可以使用<code>装饰器</code>等实现，本篇主要介绍关于<code>rest framework</code>中自定义的用户登录验证，就是上边源码的<code>2</code>部分，通过重写这些登录认证，达到快速开发登录认证功能。</p><p>首先新建一个django项目，在model.py文件中建立数据库：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserInfo</span>(models.Model):</span><br><span class="line">    user_type_choices = (</span><br><span class="line">        (<span class="number">1</span>, <span class="string">"普通用户"</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">"VIP"</span>),</span><br><span class="line">        (<span class="number">3</span>, <span class="string">"SVIP"</span>),</span><br><span class="line">    )</span><br><span class="line">    username = models.CharField(null=<span class="literal">True</span>,max_length=<span class="number">32</span>, verbose_name=<span class="string">"用户名"</span>,unique=<span class="literal">True</span>)</span><br><span class="line">    password = models.CharField(null=<span class="literal">True</span>,max_length=<span class="number">32</span>, verbose_name=<span class="string">"密码"</span>)</span><br><span class="line">    user_type = models.IntegerField(choices=user_type_choices,verbose_name=<span class="string">"用户类别"</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>): <span class="keyword">return</span> self.username</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserToken</span>(models.Model):</span><br><span class="line">    user = models.OneToOneField(<span class="string">"UserInfo"</span>,on_delete=models.CASCADE)</span><br><span class="line">    token = models.CharField(max_length=<span class="number">32</span>,verbose_name=<span class="string">"token"</span>)</span><br></pre></td></tr></tbody></table></figure><p>该模型是我们用户登录和权限校验的基础，目前不进行密码加密。建立完数据库之后，首先在数据库中插入几条用户。</p><ol><li><h4 id="rest-framework中登录类介绍"><a href="#rest-framework中登录类介绍" class="headerlink" title="rest framework中登录类介绍"></a>rest framework中登录类介绍</h4><p> rest ramework中自定义了用户登录认证类，我们可以通过继承和方法重写这些认证类，实现用户的登录校验。</p><ul><li><p>在上边代码中我们已经知道会执行<code>perform_authentication()</code>判断用户是否登录，接着向下看</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">perform_authentication</span>(<span class="params">self, request</span>):</span><br><span class="line">     request.user</span><br></pre></td></tr></tbody></table></figure></li><li><p>在<code>perform_authentication</code>中返回了request.user，我们已经知道这个request是封装之后的Request，接着看Request中的源代码，我们可以找到这部分代码：</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user</span>(<span class="params">self</span>):</span><br><span class="line">   <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(self, <span class="string">'_user'</span>):</span><br><span class="line">        <span class="keyword">with</span> wrap_attributeerrors():</span><br><span class="line">            self._authenticate()</span><br><span class="line">   <span class="keyword">return</span> self._user</span><br></pre></td></tr></tbody></table></figure></li><li><p>可以发现，通过执行<code>self._authenticate()</code>进行接下来的校验</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_authenticate</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="comment"># 循环每一个对象</span></span><br><span class="line">    <span class="keyword">for</span> authenticator <span class="keyword">in</span> self.authenticators:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 执行认证类的authenticate方法</span></span><br><span class="line">            <span class="comment"># 1、如果出现异常，执行self._not_authenticated()</span></span><br><span class="line">            <span class="comment"># 2、如果没报错，接着向下执行</span></span><br><span class="line">            <span class="comment"># 3、返回None代表没有进行赋值</span></span><br><span class="line">            user_auth_tuple = authenticator.authenticate(self)</span><br><span class="line">            <span class="keyword">except</span> exceptions.APIException:</span><br><span class="line">                self._not_authenticated()</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> user_auth_tuple <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    self._authenticator = authenticator</span><br><span class="line">                    <span class="comment"># 把元组的数据赋值给request</span></span><br><span class="line">                    <span class="comment"># 第一个元组赋值给user</span></span><br><span class="line">                    <span class="comment"># 第二个赋值给auth</span></span><br><span class="line">                    self.user, self.auth = user_auth_tuple</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">                self._not_authenticated()</span><br></pre></td></tr></tbody></table></figure></li><li><p>可以看到，通过循环<code>self.authenticators</code>，执行每一个的<code>authenticate</code>方法，接着我们去找<code>self.authenticators</code>的来源，来源于APIView对request进行第一次封装时候：</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">initialize_request</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Returns the initial request object.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    parser_context = self.get_parser_context(request)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Request(</span><br><span class="line">        request,</span><br><span class="line">        parsers=self.get_parsers(),</span><br><span class="line">        authenticators=self.get_authenticators(),</span><br><span class="line">        negotiator=self.get_content_negotiator(),</span><br><span class="line">        parser_context=parser_context</span><br><span class="line">    )</span><br></pre></td></tr></tbody></table></figure></li><li><p>在上边代码中可以看到有<code>authenticators</code>，接着找<code>self.get_authenticators()</code></p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_authenticators</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        Instantiates and returns the list of authenticators that this view can use.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">    <span class="keyword">return</span> [auth() <span class="keyword">for</span> auth <span class="keyword">in</span> self.authentication_classes]</span><br></pre></td></tr></tbody></table></figure></li><li><p>可以看到最终的来源于一个列表推导式，我们接着看<code>self.authentication_classes</code>，在APIView的类变量中可以看到：</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">authentication_classes = api_settings.DEFAULT_AUTHENTICATION_CLASSES</span><br></pre></td></tr></tbody></table></figure><p>  最终的来源是默认的配置文件中，最终源码中所有需要的组件已经全部拿到，这时我们就可以重写这些方法实现自己的登录校验。</p></li></ul></li><li><h4 id="重写登录认证类"><a href="#重写登录认证类" class="headerlink" title="重写登录认证类"></a>重写登录认证类</h4><p> 知道了源代码的组件之后，我们就可以开始复写了。</p><ol><li><h5 id="先开发一个登录接口，下发token，作为是否登录的判定条件"><a href="#先开发一个登录接口，下发token，作为是否登录的判定条件" class="headerlink" title="先开发一个登录接口，下发token，作为是否登录的判定条件"></a>先开发一个登录接口，下发token，作为是否登录的判定条件</h5> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span>  .models <span class="keyword">import</span> UserInfo,UserToken</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5</span>(<span class="params">user</span>):</span><br><span class="line">    <span class="keyword">import</span> hashlib</span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    ctime = <span class="built_in">str</span>(time.time())</span><br><span class="line">    m = hashlib.md5(<span class="built_in">bytes</span>(user,encoding=<span class="string">"utf-8"</span>))</span><br><span class="line">    m.update(<span class="built_in">bytes</span>(ctime,encoding=<span class="string">"utf-8"</span>))</span><br><span class="line">    <span class="keyword">return</span> m.hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuthView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line"><span class="comment">#此时虽然没有使用登录认证，其实已经在默认使用了rest framework的的登录认证</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,**kwargs</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(**kwargs)</span><br><span class="line">        self.ret = {</span><br><span class="line">            <span class="string">"code"</span>:<span class="number">10000</span>,</span><br><span class="line">            <span class="string">"msg"</span>:<span class="literal">None</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="string">"""用户登录"""</span></span><br><span class="line">        user = request._request.POST.get(<span class="string">"username"</span>)</span><br><span class="line">        pwd = request._request.POST.get(<span class="string">"password"</span>)</span><br><span class="line">        obj = UserInfo.objects.<span class="built_in">filter</span>(username=user,password=pwd)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> obj:</span><br><span class="line">            self.ret[<span class="string">"code"</span>] = <span class="number">10001</span></span><br><span class="line">            self.ret[<span class="string">"msg"</span>] = <span class="string">"用户名或者密码有误"</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 为登录的用户创建token</span></span><br><span class="line">            token = md5(user)</span><br><span class="line">            <span class="built_in">print</span>(token)</span><br><span class="line">            UserToken.objects.update_or_create(</span><br><span class="line">                user = obj[<span class="number">0</span>],</span><br><span class="line">                defaults={<span class="string">"token"</span>:token}</span><br><span class="line">            )</span><br><span class="line">            self.ret[<span class="string">"code"</span>] = <span class="number">10000</span></span><br><span class="line">            self.ret[<span class="string">"msg"</span>] = <span class="string">"login success"</span></span><br><span class="line">            self.ret[<span class="string">"token"</span>] = token</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(self.ret)</span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="在登录校验类中进行判断"><a href="#在登录校验类中进行判断" class="headerlink" title="在登录校验类中进行判断"></a>在登录校验类中进行判断</h5><p> 重写校验时，必须有这两个方法，详情参见上面源码流程。</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Authtication</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">"""重写用户登录校验必须有这两个方法"""</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">authenticate</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="string">"""authenticate"""</span></span><br><span class="line">        token = request._request.GET.get(<span class="string">"token"</span>)</span><br><span class="line">        token_obj = UserToken.objects.<span class="built_in">filter</span>(token=token).first()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> token_obj:</span><br><span class="line">            <span class="keyword">raise</span> exceptions.AuthenticationFailed(<span class="string">"用户认证失败"</span>)</span><br><span class="line">        <span class="comment"># 在rest_framework内部会将元组内容赋值给request以供后续使用</span></span><br><span class="line">        <span class="comment"># 赋值在其他的类中就可以使用request.user,request.auth进行调用</span></span><br><span class="line">        <span class="keyword">return</span> (token_obj.user, token_obj)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 认证失败时给浏览器返回的响应头</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">authenticate_header</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="comment"># print(request._request)</span></span><br><span class="line">        <span class="comment"># return 'Basic realm="%s"'% "api"</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></tbody></table></figure></li></ol></li><li><h4 id="局部使用认证类"><a href="#局部使用认证类" class="headerlink" title="局部使用认证类"></a>局部使用认证类</h4><p> 认证类开发完成之后，就可以使用了，此时我们写一个新的接口，查看用户的个人中心，用户必须登录之后才能查看，这种校验方式是局部校验，只在某个类中添加<code>authentication_classes</code>属性，该属性必须为列表格式。</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Userinfo</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="string">"""用户详情"""</span></span><br><span class="line">    <span class="comment"># 加上用户登录校验</span></span><br><span class="line"> authentication_classes = [Authtication]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request,*args,**kwargs</span>):</span><br><span class="line">        ret = {<span class="string">"code"</span>: <span class="number">1000</span>, <span class="string">"msg"</span>: <span class="literal">None</span>, <span class="string">"date"</span>: <span class="literal">None</span>}</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(ret)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self,request,*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"post"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self,request,*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"put"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self,request,*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"delete"</span>)</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="在全局配置认证类"><a href="#在全局配置认证类" class="headerlink" title="在全局配置认证类"></a>在全局配置认证类</h4><p> 全局校验时，需要添加在<code>settings.py</code>配置中，默认作用于全局，影响范围比较广。</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置全局用户认证</span></span><br><span class="line">REST_FRAMEWORK = {</span><br><span class="line">    <span class="string">"DEFAULT_AUTHENTICATION_CLASSES"</span>:[<span class="string">"rest_source.utils.auth.Authtication"</span>],  <span class="comment"># 全局应用登录校验</span></span><br><span class="line">    <span class="string">"UNAUTHENTICATED_USER"</span>:<span class="literal">None</span>,       <span class="comment"># request.user = None</span></span><br><span class="line">    <span class="string">"UNAUTHENTICATED_TOKEN"</span>:<span class="literal">None</span>,        <span class="comment"># request.auth = None</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="rest-framework中自带的认证"><a href="#rest-framework中自带的认证" class="headerlink" title="rest framework中自带的认证"></a>rest framework中自带的认证</h4><p> <code>BaseAuthentication</code>是所有认证的基类，所以我们以后可以直接继承<code>BaseAuthentication</code>。</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> BaseAuthentication</span><br></pre></td></tr></tbody></table></figure><p> 对<code>Authtication</code>继承<code>BaseAuthentication</code></p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Authtication</span>(<span class="title class_ inherited__">BaseAuthentication</span>):</span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="二、权限"><a href="#二、权限" class="headerlink" title="二、权限"></a>二、权限</h3><p>权限是系统开发不可缺少的部分，有些视图需要权限才能访问，有些不要权限。权限部分流程与登录认证类似，所以我们直接从重写权限认证开始。</p><ol><li><h4 id="重写权限类"><a href="#重写权限类" class="headerlink" title="重写权限类"></a>重写权限类</h4> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> BasePermission</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPermission</span>(<span class="title class_ inherited__">BasePermission</span>):</span><br><span class="line">    message = <span class="string">"您无权限查看！"</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_permission</span>(<span class="params">self,request,view</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"view"</span>,view)</span><br><span class="line">        <span class="keyword">if</span> request.user.user_type != <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="局部使用权限"><a href="#局部使用权限" class="headerlink" title="局部使用权限"></a>局部使用权限</h4> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">ORDER_DICT = {</span><br><span class="line">    <span class="number">1</span>:{</span><br><span class="line">        <span class="string">"name"</span>:<span class="string">"柚子"</span>,</span><br><span class="line">        <span class="string">"price"</span>:<span class="number">18</span>,</span><br><span class="line">        <span class="string">"number"</span>:<span class="number">10</span>,</span><br><span class="line">        <span class="string">"address"</span>:<span class="string">"北京"</span>,</span><br><span class="line">    },</span><br><span class="line">    <span class="number">2</span>: {</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"苹果"</span>,</span><br><span class="line">        <span class="string">"price"</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="string">"number"</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="string">"address"</span>: <span class="string">"北京"</span>,</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OrderView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="string">"""订单"""</span></span><br><span class="line">    <span class="string">"""只有svip才能看"""</span></span><br><span class="line">    permission_classes= [MyPermission]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request,*args,**kwargs</span>):</span><br><span class="line">        ret = {<span class="string">"code"</span>:<span class="number">1000</span>,<span class="string">"msg"</span>:<span class="literal">None</span>,<span class="string">"data"</span>:<span class="literal">None</span>}</span><br><span class="line">        ret[<span class="string">"data"</span>] = ORDER_DICT</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(ret)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self,request,*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"post"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self,request,*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"put"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self,request,*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"delete"</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="全局配置权限"><a href="#全局配置权限" class="headerlink" title="全局配置权限"></a>全局配置权限</h4><p> 全局配置也是一样，需要在settings中添加配置：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置全局用户认证</span></span><br><span class="line">REST_FRAMEWORK = {</span><br><span class="line">    <span class="string">"DEFAULT_AUTHENTICATION_CLASSES"</span>:[<span class="string">"rest_source.utils.auth.Authtication"</span>],  <span class="comment"># 全局应用登录校验</span></span><br><span class="line">    <span class="string">"UNAUTHENTICATED_USER"</span>:<span class="literal">None</span>,       <span class="comment"># request.user = None</span></span><br><span class="line">    <span class="string">"UNAUTHENTICATED_TOKEN"</span>:<span class="literal">None</span>,        <span class="comment"># request.auth = None</span></span><br><span class="line">    <span class="string">"DEFAULT_PERMISSION_CLASSES"</span>:[<span class="string">"rest_source.utils.permission.MyPermission"</span>],<span class="comment"># 全局应用权限校验</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="三、访问频率限制-节流"><a href="#三、访问频率限制-节流" class="headerlink" title="三、访问频率限制(节流)"></a>三、访问频率限制(节流)</h3><p>访问频率限制一般用于网站反爬中，通过判断用户ip在某个时间段的访问频率，当超过某个频率时就先让用户等待一段时间，防止网站被恶意爬虫爬崩。</p><ol><li><h4 id="重写访问限制类"><a href="#重写访问限制类" class="headerlink" title="重写访问限制类"></a>重写访问限制类</h4> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> BaseThrottle</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义全局变量存放访问频率</span></span><br><span class="line">VISIT_CODE = {}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VisitThrottle</span>(<span class="title class_ inherited__">BaseThrottle</span>):</span><br><span class="line">    <span class="string">"""60s只能访问3次"""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.history = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">allow_request</span>(<span class="params">self, request, view</span>):</span><br><span class="line">        ip = request._request.META.get(<span class="string">"REMOTE_ADDR"</span>)</span><br><span class="line">        ctime = time.time()</span><br><span class="line">        <span class="comment"># 第一次访问，记录数据</span></span><br><span class="line">        <span class="keyword">if</span> ip <span class="keyword">not</span> <span class="keyword">in</span> VISIT_CODE:</span><br><span class="line">            VISIT_CODE[ip] = [ctime]</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 判断第一次访问和最后一次访问的关系</span></span><br><span class="line">        history = VISIT_CODE[ip]</span><br><span class="line">        self.history = history</span><br><span class="line">        <span class="keyword">while</span> history <span class="keyword">and</span> ctime - <span class="number">60</span> &gt; history[-<span class="number">1</span>]:</span><br><span class="line">            history.pop()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(history) &lt; <span class="number">3</span>:</span><br><span class="line">            history.insert(<span class="number">0</span>, ctime)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wait</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">"""访问拒绝时返回需要等待的时间"""</span></span><br><span class="line">        ctime = time.time()</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(<span class="number">60</span>-(ctime-self.history[-<span class="number">1</span>]))</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="局部使用"><a href="#局部使用" class="headerlink" title="局部使用"></a>局部使用</h4> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AuthView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置局部不需要认证登录</span></span><br><span class="line">    authentication_classes = []</span><br><span class="line">    <span class="comment"># 设置局部不需要鉴权</span></span><br><span class="line">    permission_classes= []</span><br><span class="line">    <span class="comment"># 设置局部访问频率控制</span></span><br><span class="line">    throttle_classes = [VisitThrottle]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,**kwargs</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(**kwargs)</span><br><span class="line">        self.ret = {</span><br><span class="line">            <span class="string">"code"</span>:<span class="number">10000</span>,</span><br><span class="line">            <span class="string">"msg"</span>:<span class="literal">None</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="string">"""用户登录"""</span></span><br><span class="line">        user = request._request.POST.get(<span class="string">"username"</span>)</span><br><span class="line">        pwd = request._request.POST.get(<span class="string">"password"</span>)</span><br><span class="line">        obj = UserInfo.objects.<span class="built_in">filter</span>(username=user,password=pwd)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> obj:</span><br><span class="line">            self.ret[<span class="string">"code"</span>] = <span class="number">10001</span></span><br><span class="line">            self.ret[<span class="string">"msg"</span>] = <span class="string">"用户名或者密码有误"</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 为登录的用户创建token</span></span><br><span class="line">            token = md5(user)</span><br><span class="line">            <span class="built_in">print</span>(token)</span><br><span class="line">            UserToken.objects.update_or_create(</span><br><span class="line">                user = obj[<span class="number">0</span>],</span><br><span class="line">                defaults={<span class="string">"token"</span>:token}</span><br><span class="line">            )</span><br><span class="line">            self.ret[<span class="string">"code"</span>] = <span class="number">10000</span></span><br><span class="line">            self.ret[<span class="string">"msg"</span>] = <span class="string">"login success"</span></span><br><span class="line">            self.ret[<span class="string">"token"</span>] = token</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(self.ret)</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="全局使用"><a href="#全局使用" class="headerlink" title="全局使用"></a>全局使用</h4><p> 全局使用时跟以上两个相同，加入到<code>settings.py</code>中：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置全局用户认证</span></span><br><span class="line">REST_FRAMEWORK = {</span><br><span class="line">    <span class="string">"DEFAULT_AUTHENTICATION_CLASSES"</span>:[<span class="string">"rest_source.utils.auth.Authtication"</span>],   <span class="comment"># 全局应用登录校验</span></span><br><span class="line">    <span class="string">"UNAUTHENTICATED_USER"</span>:<span class="literal">None</span>,       <span class="comment"># request.user = None</span></span><br><span class="line">    <span class="string">"UNAUTHENTICATED_TOKEN"</span>:<span class="literal">None</span>,        <span class="comment"># request.auth = None</span></span><br><span class="line">    <span class="string">"DEFAULT_PERMISSION_CLASSES"</span>:[<span class="string">"rest_source.utils.permission.MyPermission"</span>],  <span class="comment"># 全局应用权限校验</span></span><br><span class="line">    <span class="string">"DEFAULT_THROTTLE_CLASSES"</span>:[<span class="string">"rest_source.utils.visitthrottle.VisitThrottle"</span>] <span class="comment"># 全局应用ip限制</span></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="系统自带的访问限制"><a href="#系统自带的访问限制" class="headerlink" title="系统自带的访问限制"></a>系统自带的访问限制</h4><p> 系统源码位置：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> BaseThrottle,SimpleRateThrottle</span><br></pre></td></tr></tbody></table></figure><p> 系统源码：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleRateThrottle</span>(<span class="title class_ inherited__">BaseThrottle</span>):</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    A simple cache implementation, that only requires `.get_cache_key()`</span></span><br><span class="line"><span class="string">    to be overridden.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The rate (requests / seconds) is set by a `rate` attribute on the View</span></span><br><span class="line"><span class="string">    class.  The attribute is a string of the form 'number_of_requests/period'.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Period should be one of: ('s', 'sec', 'm', 'min', 'h', 'hour', 'd', 'day')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Previous request information used for throttling is stored in the cache.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    cache = default_cache</span><br><span class="line">    timer = time.time</span><br><span class="line">    cache_format = <span class="string">'throttle_%(scope)s_%(ident)s'</span></span><br><span class="line">    scope = <span class="literal">None</span></span><br><span class="line">    THROTTLE_RATES = api_settings.DEFAULT_THROTTLE_RATES</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">getattr</span>(self, <span class="string">'rate'</span>, <span class="literal">None</span>):</span><br><span class="line">            self.rate = self.get_rate()</span><br><span class="line">        self.num_requests, self.duration = self.parse_rate(self.rate)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_cache_key</span>(<span class="params">self, request, view</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Should return a unique cache-key which can be used for throttling.</span></span><br><span class="line"><span class="string">        Must be overridden.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        May return `None` if the request should not be throttled.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">'.get_cache_key() must be overridden'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_rate</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Determine the string representation of the allowed request rate.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">getattr</span>(self, <span class="string">'scope'</span>, <span class="literal">None</span>):</span><br><span class="line">            msg = (<span class="string">"You must set either `.scope` or `.rate` for '%s' throttle"</span> %</span><br><span class="line">                   self.__class__.__name__)</span><br><span class="line">            <span class="keyword">raise</span> ImproperlyConfigured(msg)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self.THROTTLE_RATES[self.scope]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            msg = <span class="string">"No default throttle rate set for '%s' scope"</span> % self.scope</span><br><span class="line">            <span class="keyword">raise</span> ImproperlyConfigured(msg)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_rate</span>(<span class="params">self, rate</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Given the request rate string, return a two tuple of:</span></span><br><span class="line"><span class="string">        &lt;allowed number of requests&gt;, &lt;period of time in seconds&gt;</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> rate <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> (<span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line">        num, period = rate.split(<span class="string">'/'</span>)</span><br><span class="line">        num_requests = <span class="built_in">int</span>(num)</span><br><span class="line">        duration = {<span class="string">'s'</span>: <span class="number">1</span>, <span class="string">'m'</span>: <span class="number">60</span>, <span class="string">'h'</span>: <span class="number">3600</span>, <span class="string">'d'</span>: <span class="number">86400</span>}[period[<span class="number">0</span>]]</span><br><span class="line">        <span class="keyword">return</span> (num_requests, duration)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">allow_request</span>(<span class="params">self, request, view</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Implement the check to see if the request should be throttled.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        On success calls `throttle_success`.</span></span><br><span class="line"><span class="string">        On failure calls `throttle_failure`.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> self.rate <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        self.key = self.get_cache_key(request, view)</span><br><span class="line">        <span class="keyword">if</span> self.key <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        self.history = self.cache.get(self.key, [])</span><br><span class="line">        self.now = self.timer()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Drop any requests from the history which have now passed the</span></span><br><span class="line">        <span class="comment"># throttle duration</span></span><br><span class="line">        <span class="keyword">while</span> self.history <span class="keyword">and</span> self.history[-<span class="number">1</span>] &lt;= self.now - self.duration:</span><br><span class="line">            self.history.pop()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.history) &gt;= self.num_requests:</span><br><span class="line">            <span class="keyword">return</span> self.throttle_failure()</span><br><span class="line">        <span class="keyword">return</span> self.throttle_success()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">throttle_success</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Inserts the current request's timestamp along with the key</span></span><br><span class="line"><span class="string">        into the cache.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.history.insert(<span class="number">0</span>, self.now)</span><br><span class="line">        self.cache.<span class="built_in">set</span>(self.key, self.history, self.duration)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">throttle_failure</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Called when a request to the API has failed due to throttling.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wait</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns the recommended next request time in seconds.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> self.history:</span><br><span class="line">            remaining_duration = self.duration - (self.now - self.history[-<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            remaining_duration = self.duration</span><br><span class="line"></span><br><span class="line">        available_requests = self.num_requests - <span class="built_in">len</span>(self.history) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> available_requests &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> remaining_duration / <span class="built_in">float</span>(available_requests)</span><br></pre></td></tr></tbody></table></figure><p> 通过查看源码可以知道关键的属性有<code>scope</code>，和关键方法<code>get_cache_key</code>，这是rest framework预留给开发人员的参数和方法，我们可以通过重写这两个方法快速实现节流功能。</p></li><li><h4 id="重写系统方法"><a href="#重写系统方法" class="headerlink" title="重写系统方法"></a>重写系统方法</h4> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> SimpleRateThrottle</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VisitThrottle1</span>(<span class="title class_ inherited__">SimpleRateThrottle</span>):</span><br><span class="line">    <span class="string">"""仿写系统自带的节流：未登录用户的访问限制"""</span></span><br><span class="line">    scope = <span class="string">"Youzi"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_cache_key</span>(<span class="params">self, request, view</span>):</span><br><span class="line">        <span class="keyword">return</span> self.get_ident(request)</span><br></pre></td></tr></tbody></table></figure><p> 全局应用配置：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置全局用户认证</span></span><br><span class="line">REST_FRAMEWORK = {</span><br><span class="line">    <span class="string">"DEFAULT_AUTHENTICATION_CLASSES"</span>:[<span class="string">"rest_source.utils.auth.Authtication"</span>],   <span class="comment"># 全局应用登录校验</span></span><br><span class="line">    <span class="string">"UNAUTHENTICATED_USER"</span>:<span class="literal">None</span>,       <span class="comment"># request.user = None</span></span><br><span class="line">    <span class="string">"UNAUTHENTICATED_TOKEN"</span>:<span class="literal">None</span>,        <span class="comment"># request.auth = None</span></span><br><span class="line">    <span class="string">"DEFAULT_PERMISSION_CLASSES"</span>:[<span class="string">"rest_source.utils.permission.MyPermission"</span>],  <span class="comment"># 全局应用权限校验</span></span><br><span class="line">    <span class="comment"># "DEFAULT_THROTTLE_CLASSES":["rest_source.utils.visitthrottle.VisitThrottle"] # 全局应用ip限制</span></span><br><span class="line">    <span class="string">"DEFAULT_THROTTLE_CLASSES"</span>:[<span class="string">"rest_source.utils.visitthrottle.VisitThrottle1"</span>], <span class="comment"># 全局应用ip限制</span></span><br><span class="line">    <span class="string">"DEFAULT_THROTTLE_RATES"</span>:{<span class="string">"youzi"</span>:<span class="string">"3/m"</span>}, <span class="comment"># 参数固定格式</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="重写已经登录的用户限制"><a href="#重写已经登录的用户限制" class="headerlink" title="重写已经登录的用户限制"></a>重写已经登录的用户限制</h4> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserThrottle1</span>(<span class="title class_ inherited__">SimpleRateThrottle</span>):</span><br><span class="line">    <span class="string">"""仿写系统自带的节流：已经登录的用户访问限制"""</span></span><br><span class="line">    scope = <span class="string">"YouziUser"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_cache_key</span>(<span class="params">self, request, view</span>):</span><br><span class="line">        <span class="keyword">return</span> self.get_ident(request)</span><br></pre></td></tr></tbody></table></figure><p> 全局应用多个，已经登录的每分钟可以访问10次，没有登陆的使用局部，每分钟可以访问三次：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置全局用户认证</span></span><br><span class="line">REST_FRAMEWORK = {</span><br><span class="line">    <span class="string">"DEFAULT_AUTHENTICATION_CLASSES"</span>:[<span class="string">"rest_source.utils.auth.Authtication"</span>],   <span class="comment"># 全局应用登录校验</span></span><br><span class="line">    <span class="string">"UNAUTHENTICATED_USER"</span>:<span class="literal">None</span>,       <span class="comment"># request.user = None</span></span><br><span class="line">    <span class="string">"UNAUTHENTICATED_TOKEN"</span>:<span class="literal">None</span>,        <span class="comment"># request.auth = None</span></span><br><span class="line">    <span class="string">"DEFAULT_PERMISSION_CLASSES"</span>:[<span class="string">"rest_source.utils.permission.MyPermission"</span>],  <span class="comment"># 全局应用权限校验</span></span><br><span class="line">    <span class="comment"># "DEFAULT_THROTTLE_CLASSES":["rest_source.utils.visitthrottle.VisitThrottle"] # 全局应用ip限制</span></span><br><span class="line">    <span class="string">"DEFAULT_THROTTLE_CLASSES"</span>:[<span class="string">"rest_source.utils.visitthrottle.UserThrottle1"</span>], <span class="comment"># 全局应用ip限制</span></span><br><span class="line">    <span class="string">"DEFAULT_THROTTLE_RATES"</span>:{</span><br><span class="line">        <span class="string">"Youzi"</span>:<span class="string">"3/m"</span>,</span><br><span class="line">        <span class="string">"YouziUser"</span>:<span class="string">"10/m"</span></span><br><span class="line">    },</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p> 局部应用每分钟可以访问3次：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AuthView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="comment"># 设置局部不需要认证登录</span></span><br><span class="line">    authentication_classes = []</span><br><span class="line">    <span class="comment"># 设置局部不需要鉴权</span></span><br><span class="line">    permission_classes = []</span><br><span class="line"></span><br><span class="line">    throttle_classes = [VisitThrottle1]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, **kwargs</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(**kwargs)</span><br><span class="line">        self.ret = {</span><br><span class="line">            <span class="string">"code"</span>: <span class="number">10000</span>,</span><br><span class="line">            <span class="string">"msg"</span>: <span class="literal">None</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="string">"""用户登录"""</span></span><br><span class="line">       <span class="keyword">pass</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="四、版本控制"><a href="#四、版本控制" class="headerlink" title="四、版本控制"></a>四、版本控制</h3><p>在代码开发的过程中，往往会有版本的迭代功能，</p><p>在代码开发过程中，阅读源码是不可缺少的部分，希望通过本篇文章可以帮助您提高阅读源码的兴趣和能力。最后把一句话送给读者：Either outstanding or out. （要么出众，要么出局）。    def <strong>init</strong>(self, **kwargs):<br>            super().<strong>init</strong>(**kwargs)<br>            self.ret = {<br>                “code”: 10000,<br>                “msg”: None<br>            }</p><pre><code>    def post(self, request, *args, **kwargs):        """用户登录"""       pass```</code></pre><h3 id="四、版本控制-1"><a href="#四、版本控制-1" class="headerlink" title="四、版本控制"></a>四、版本控制</h3><p>在代码开发的过程中，往往会有版本的迭代功能，</p><p>在代码开发过程中，阅读源码是不可缺少的部分，希望通过本篇文章可以帮助您提高阅读源码的兴趣和能力。最后把一句话送给读者：Either outstanding or out. （要么出众，要么出局）。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据类型和运算符</title>
      <link href="/2022/05/19/treasurebox/python/python-ji-chu/1.ji-chu/2.shu-ju-lei-xing-he-yun-suan-fu/"/>
      <url>/2022/05/19/treasurebox/python/python-ji-chu/1.ji-chu/2.shu-ju-lei-xing-he-yun-suan-fu/</url>
      
        <content type="html"><![CDATA[<h2 id="数据类型和运算符"><a href="#数据类型和运算符" class="headerlink" title="数据类型和运算符"></a>数据类型和运算符</h2><h3 id="一、变量和类型"><a href="#一、变量和类型" class="headerlink" title="一、变量和类型"></a>一、变量和类型</h3><p>在程序设计中，变量是一种存储数据的载体。计算机中的变量是实际存在的数据或者说是存储器中存储数据的一块内存空间，变量的值可以被读取和修改，这是所有计算和控制的基础。首先介绍几种基础的数据类型：</p><ul><li><p>整型：Python中可以处理任意大小的整数（Python 2.x中有<code>int</code>和<code>long</code>两种类型的整数，但这种区分对Python来说意义不大，因此在Python 3.x中整数只有int这一种了），而且支持二进制（如<code>0b100</code>，换算成十进制是4）、八进制（如<code>0o100</code>，换算成十进制是64）、十进制（<code>100</code>）和十六进制（<code>0x100</code>，换算成十进制是256）的表示法。</p></li><li><p>浮点型：浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，浮点数除了数学写法（如<code>123.456</code>）之外还支持科学计数法（如<code>1.23456e2</code>）。</p></li><li><p>字符串型：字符串是以单引号或双引号括起来的任意文本，比如<code>'hello'</code>和<code>"hello"</code>,字符串还有原始字符串表示法、字节字符串表示法、Unicode字符串表示法，而且可以书写成多行的形式（用三个单引号或三个双引号开头，三个单引号或三个双引号结尾）。</p></li><li><p>布尔型：布尔值只有<code>True</code>、<code>False</code>两种值，要么是<code>True</code>，要么是<code>False</code>，在Python中，可以直接用<code>True</code>、<code>False</code>表示布尔值（请注意大小写），也可以通过布尔运算计算出来（例如<code>3 &lt; 5</code>会产生布尔值<code>True</code>，而<code>2 == 1</code>会产生布尔值<code>False</code>）。</p></li><li><p>复数型：形如<code>3+5j</code>，跟数学上的复数表示一样，唯一不同的是虚部的<code>i</code>换成了<code>j</code>。实际上，这个类型并不常用。</p><ol><li><h4 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h4><p> 对于每个变量我们需要给它取一个名字，就如同我们每个人都有属于自己的响亮的名字一样。在Python中，变量命名需要遵循以下这些必须遵守硬性规则和强烈建议遵守的非硬性规则。</p><ul><li><strong>硬性规则</strong>：<ul><li>变量名由字母（广义的Unicode字符，不包括特殊字符）、数字和下划线构成，数字不能开头。</li><li>大小写敏感（大写的<code>a</code>和小写的<code>A</code>是两个不同的变量）。</li><li>不要跟关键字（有特殊含义的单词，后面会讲到）和系统保留字（如函数、模块等的名字）冲突。</li></ul></li><li><strong>PEP 8要求</strong>：<ul><li>用小写字母拼写，多个单词用下划线连接。</li><li>受保护的实例属性用单个下划线开头。</li><li>私有的实例属性用两个下划线开头。</li></ul></li></ul></li><li><h4 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h4><p> python的变量不需要声明数据类型，使用时直接使用**=**进行赋值。使用变量保存数据：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">version:0.1</span></span><br><span class="line"><span class="string">Author:youzi</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line">b = <span class="number">200</span></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="查看变量的数据类型"><a href="#查看变量的数据类型" class="headerlink" title="查看变量的数据类型"></a>查看变量的数据类型</h4><p> python中提供了<code>type()</code>函数用于查看变量的数据类型，<code>id()</code>函数查看变量的内存地址。示例：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">version:0.1</span></span><br><span class="line"><span class="string">Author:youzi</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">number1 = <span class="number">100</span></span><br><span class="line">number2 = <span class="number">200.01</span></span><br><span class="line">bool1 = <span class="literal">True</span></span><br><span class="line">str1 = <span class="string">"hello"</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(number1))    <span class="comment"># int</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(number2))<span class="comment"># float</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(bool1))    <span class="comment"># bool</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(str1))    <span class="comment"># str</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(str1))</span><br></pre></td></tr></tbody></table></figure></li></ol><p>  python中内置了很多<strong>函数</strong>可以帮助我们对类型进行转换，常用的有：</p><pre><code>  - `int()`：将一个数值或字符串(字符串必须为数字)转换成整数，可以指定进制。  - `float()`：将一个字符串(字符串中必须为数字)转换成浮点数。  - `str()`：将指定的对象转换成字符串形式，可以指定编码。  - `chr()`：将整数转换成该编码对应的字符串（一个字符）。</code></pre><ul><li><code>ord()</code>：将字符串（一个字符）转换成对应的编码（整数）。</li></ul></li></ul><ol start="4"><li><h4 id="保存键盘中输入的数据"><a href="#保存键盘中输入的数据" class="headerlink" title="保存键盘中输入的数据"></a>保存键盘中输入的数据</h4><p> python中内置了<code>input</code>函数用来让用户输入，输入的内容都默认为<strong>str</strong>类型，使用时对类型进行转化：</p><pre><code> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">使用input()函数获取键盘输入(字符串)</span></span><br><span class="line"><span class="string">使用int()函数将输入的字符串转换成整数</span></span><br><span class="line"><span class="string">使用print()函数输出变量中保存的内容</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: youzi</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">'a = '</span>))</span><br><span class="line">b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">'b = '</span>))</span><br><span class="line">c = <span class="built_in">input</span>(<span class="string">"c = "</span>)</span><br><span class="line"><span class="built_in">print</span>(a,<span class="built_in">type</span>(a))</span><br><span class="line"><span class="built_in">print</span>(b,<span class="built_in">type</span>(b))</span><br><span class="line"><span class="built_in">print</span>(c,<span class="built_in">type</span>(c))</span><br></pre></td></tr></tbody></table></figure></code></pre></li></ol><h3 id="二、运算符"><a href="#二、运算符" class="headerlink" title="二、运算符"></a>二、运算符</h3><p>Python支持多种运算符，下表大致按照优先级从高到低的顺序列出了所有的运算符，运算符的优先级指的是多个运算符同时出现时，先做什么运算然后再做什么运算。如果不确定运算符的优先级，可以使用<strong>小括号</strong>，小括号的优先级最高。</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>[]</code> <code>[:]</code></td><td>下标，切片</td></tr><tr><td><code>**</code></td><td>指数</td></tr><tr><td><code>~</code> <code>+</code> <code>-</code></td><td>按位取反, 正负号</td></tr><tr><td><code>*</code> <code>/</code> <code>%</code> <code>//</code></td><td>乘，除，模，整除</td></tr><tr><td><code>+</code> <code>-</code></td><td>加，减</td></tr><tr><td><code>&gt;&gt;</code> <code>&lt;&lt;</code></td><td>右移，左移</td></tr><tr><td><code>&amp;</code></td><td>按位与</td></tr><tr><td><code>^</code> `</td><td>`</td></tr><tr><td><code>&lt;=</code> <code>&lt;</code> <code>&gt;</code> <code>&gt;=</code></td><td>小于等于，小于，大于，大于等于</td></tr><tr><td><code>==</code> <code>!=</code></td><td>等于，不等于</td></tr><tr><td><code>is</code> <code>is not</code></td><td>身份运算符</td></tr><tr><td><code>in</code> <code>not in</code></td><td>成员运算符</td></tr><tr><td><code>not</code> <code>or</code> <code>and</code></td><td>逻辑运算符</td></tr><tr><td><code>=</code> <code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code> <code>//=</code> <code>**=</code> <code>&amp;=</code> `</td><td>=<code> </code>^=<code> </code>&gt;&gt;=<code> </code>&lt;&lt;=`</td></tr></tbody></table><ol><li><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><p> 赋值运算符应该是最为常见的运算符，它的作用是将右边的值赋给左边的变量。</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">赋值运算符和复合赋值运算符</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: youzi</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line">a += b        <span class="comment"># 相当于：a = a + b</span></span><br><span class="line">a *= a + <span class="number">2</span>    <span class="comment"># 相当于：a = a * (a + 2)</span></span><br><span class="line"><span class="built_in">print</span>(a)      <span class="comment"># 算一下这里会输出什么</span></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="比较运算符和逻辑运算符"><a href="#比较运算符和逻辑运算符" class="headerlink" title="比较运算符和逻辑运算符"></a>比较运算符和逻辑运算符</h4><p> 比较运算符有的地方也称为关系运算符，包括<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>、<code>&gt;=</code>。唯一需要提醒的是比较相等用的是<code>==</code>，请注意这个地方是两个等号，因为<code>=</code>是赋值运算符，<code>==</code>才是比较相等的比较运算符。比较运算符会产生布尔值，要么是<code>True</code>要么是<code>False</code>。</p><p> 逻辑运算符有三个，分别是<code>and</code>、<code>or</code>和<code>not</code>。<code>and</code>的优先级高于<code>or</code>。<code>and</code>字面意思是“而且”，所以<code>and</code>运算符会连接两个布尔值，如果两个布尔值都是<code>True</code>，那么运算的结果就是<code>True</code>；左右两边的布尔值有一个是<code>False</code>，最终的运算结果就是<code>False</code>。如果<code>and</code>左边的布尔值是<code>False</code>，不管右边的布尔值是什么，最终的结果都是<code>False</code>，所以在做运算的时候右边的值会被跳过（短路处理），这也就意味着在<code>and</code>运算符左边为<code>False</code>的情况下，右边的表达式根本不会执行。<code>or</code>字面意思是“或者”，所以<code>or</code>运算符也会连接两个布尔值，如果两个布尔值有任意一个是<code>True</code>，那么最终的结果就是<code>True</code>。当然，<code>or</code>运算符也是有短路功能的，在它左边的布尔值为<code>True</code>的情况下，右边的表达式根本不会执行。<code>not</code>运算符的后面会跟上一个布尔值，它的作用是得到与该布尔值相反的值，也就是说，后面的布尔值如果是<code>True</code>运算结果就是<code>False</code>，而后面的布尔值如果是<code>False</code>则运算结果就是<code>True</code>。</p> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">比较运算符和逻辑运算符的使用</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 柚子</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">flag0 = <span class="number">1</span> == <span class="number">1</span></span><br><span class="line">flag1 = <span class="number">3</span> &gt; <span class="number">2</span></span><br><span class="line">flag2 = <span class="number">2</span> &lt; <span class="number">1</span></span><br><span class="line">flag3 = flag1 and <span class="type">flag2</span></span><br><span class="line"><span class="variable">flag4</span> <span class="operator">=</span> flag1 or <span class="type">flag2</span></span><br><span class="line"><span class="variable">flag5</span> <span class="operator">=</span> not (<span class="number">1</span> != <span class="number">2</span>)</span><br><span class="line">print(<span class="string">'flag0 ='</span>, flag0)    # flag0 = True</span><br><span class="line"><span class="title function_">print</span><span class="params">(<span class="string">'flag1 ='</span>, flag1)</span>    # flag1 = True</span><br><span class="line"><span class="title function_">print</span><span class="params">(<span class="string">'flag2 ='</span>, flag2)</span>    # flag2 = False</span><br><span class="line"><span class="title function_">print</span><span class="params">(<span class="string">'flag3 ='</span>, flag3)</span>    # flag3 = False</span><br><span class="line"><span class="title function_">print</span><span class="params">(<span class="string">'flag4 ='</span>, flag4)</span>    # flag4 = True</span><br><span class="line"><span class="title function_">print</span><span class="params">(<span class="string">'flag5 ='</span>, flag5)</span>    # flag5 = False</span><br></pre></td></tr></tbody></table></figure> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">比较运算符和逻辑运算符的使用</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 骆昊</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">flag0 = <span class="number">1</span> == <span class="number">1</span></span><br><span class="line">flag1 = <span class="number">3</span> &gt; <span class="number">2</span></span><br><span class="line">flag2 = <span class="number">2</span> &lt; <span class="number">1</span></span><br><span class="line">flag3 = flag1 <span class="keyword">and</span> flag2</span><br><span class="line">flag4 = flag1 <span class="keyword">or</span> flag2</span><br><span class="line">flag5 = <span class="keyword">not</span> (<span class="number">1</span> != <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'flag0 ='</span>, flag0)    <span class="comment"># flag0 = True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'flag1 ='</span>, flag1)    <span class="comment"># flag1 = True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'flag2 ='</span>, flag2)    <span class="comment"># flag2 = False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'flag3 ='</span>, flag3)    <span class="comment"># flag3 = False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'flag4 ='</span>, flag4)    <span class="comment"># flag4 = True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'flag5 ='</span>, flag5)    <span class="comment"># flag5 = False</span></span><br></pre></td></tr></tbody></table></figure><p> <strong>说明：</strong></p><p> ​比较运算符的优先级高于赋值运算符，所以在：f<code>lag0 = 1 == 1</code>时候，flag0的值为<code>True</code>。<code>print</code>函数想输出多个值时，多个值使用<strong>英文逗号</strong>隔开。</p></li><li><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><ol><li><p><strong>看程序写结果，总结用法：</strong></p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">使用input()函数获取键盘输入(字符串)</span></span><br><span class="line"><span class="string">使用int()函数将输入的字符串转换成整数</span></span><br><span class="line"><span class="string">使用print()函数输出带占位符的字符串</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: youzi</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">a =  <span class="built_in">int</span>(<span class="number">3.4</span>)</span><br><span class="line">b = <span class="built_in">int</span>(<span class="number">3.5</span>)</span><br><span class="line">c = <span class="built_in">int</span>(<span class="string">"12"</span>)</span><br><span class="line"><span class="built_in">print</span>(a,b,c)</span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="输入圆的半径计算计算周长和面积。"><a href="#输入圆的半径计算计算周长和面积。" class="headerlink" title="输入圆的半径计算计算周长和面积。"></a><strong>输入圆的半径计算计算周长和面积。</strong></h5> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输入半径计算圆的周长和面积</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 柚子</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">radius = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">'请输入圆的半径: '</span>))</span><br><span class="line">perimeter = <span class="number">2</span> * <span class="number">3.14</span> * radius</span><br><span class="line">area = <span class="number">3.14</span> * radius * radius</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'周长: %.2f'</span> % perimeter)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'面积: %.2f'</span> % area)</span><br></pre></td></tr></tbody></table></figure><p> 说明：<code>%.2f</code>是python小数类型的占位符，以后会有详细用法。</p></li><li><p><strong>判断年份是不是闰年</strong></p><p> 闰年：能被4整除且不能被100整除，或者能被400整除的。</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输入年份 如果是闰年输出True 否则输出False</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 柚子</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">year = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">'请输入年份: '</span>))</span><br><span class="line"><span class="comment"># 如果代码太长写成一行不便于阅读 可以使用\对代码进行折行</span></span><br><span class="line">is_leap = year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> year % <span class="number">100</span> != <span class="number">0</span> <span class="keyword">or</span> \</span><br><span class="line">          year % <span class="number">400</span> == <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(is_leap)</span><br></pre></td></tr></tbody></table></figure><p> 说明：之前提到过<code>and</code>的优先级比<code>or</code>高。<br> is_leap = year % 4 == 0 and year % 100 != 0 or <br>       year % 400 == 0<br> print(is_leap)</p><pre><code>说明：之前提到过`and`的优先级比`or`高。</code></pre></li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>顺序结构和分支结构</title>
      <link href="/2022/05/19/treasurebox/python/python-ji-chu/1.ji-chu/3.shun-xu-jie-gou-he-fen-zhi-jie-gou/"/>
      <url>/2022/05/19/treasurebox/python/python-ji-chu/1.ji-chu/3.shun-xu-jie-gou-he-fen-zhi-jie-gou/</url>
      
        <content type="html"><![CDATA[<h2 id="顺序结构和分支结构"><a href="#顺序结构和分支结构" class="headerlink" title="顺序结构和分支结构"></a>顺序结构和分支结构</h2><p>代码中的结构共分为三种，本篇主要讲解顺序结构和分支结构。：</p><ul><li><strong>顺序结构</strong></li><li><strong>分支结构</strong></li><li><strong>循环结构</strong></li></ul><h3 id="一、顺序结构"><a href="#一、顺序结构" class="headerlink" title="一、顺序结构"></a>一、顺序结构</h3><ol><li><h4 id="顺序结构介绍"><a href="#顺序结构介绍" class="headerlink" title="顺序结构介绍"></a>顺序结构介绍</h4><p> 顺序结构是代码执行的基础，在同一个代码块中，代码自上而下按顺序执行，这种顺序就被称为顺序结构。</p></li><li><h4 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h4><p> 运行代码时会发现先输出<code>hello world</code>，然后等待用户输入，最后输出用户输入的内容。这个就是顺序结构。</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">使用input()函数获取键盘输入(字符串)</span></span><br><span class="line"><span class="string">使用int()函数将输入的字符串转换成整数</span></span><br><span class="line"><span class="string">使用print()函数输出带占位符的字符串</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 柚子</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"hello world"</span>)</span><br><span class="line">a = inout(<span class="string">"请输入："</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="二、分支结构"><a href="#二、分支结构" class="headerlink" title="二、分支结构"></a>二、分支结构</h3><p>当顺序结构不能满足需求时，比如当玩家在闯关时，积累到一定分数时就进入下一关，如果玩家积分太低，就终止游戏，这时候就要使用分支结构。在<code>python</code>中的分支结构主要有<code>if</code>、<code>elif</code>、<code>else</code>关键字。像<code>if</code>和<code>else</code>就是专门构造分支结构的关键字，不能用于当作变量名。</p><ol><li><h4 id="单分支结构"><a href="#单分支结构" class="headerlink" title="单分支结构"></a>单分支结构</h4> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">用户身份验证</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 柚子</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">username = input(<span class="string">'请输入用户名: '</span>)</span><br><span class="line">password = input(<span class="string">'请输入密码: '</span>)</span><br><span class="line"># 用户名是admin且密码是<span class="number">123456</span>则身份验证成功否则身份验证失败</span><br><span class="line"><span class="keyword">if</span> username == <span class="string">'admin'</span> and password == <span class="string">'123456'</span>:</span><br><span class="line">    print(<span class="string">'身份验证成功!'</span>)</span><br></pre></td></tr></tbody></table></figure><p> 练习：输入工资判断可以买的车型</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">salary=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">"请输入你的工资："</span>))</span><br><span class="line"><span class="keyword">if</span> salary&gt;=<span class="number">10000</span> <span class="keyword">and</span> salary&lt;<span class="number">20000</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'买辆迈腾'</span>)</span><br><span class="line"><span class="keyword">if</span> salary&gt;=<span class="number">20000</span> <span class="keyword">and</span> salary&lt;<span class="number">30000</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'速腾'</span>)</span><br><span class="line"><span class="keyword">if</span> salary&gt;=<span class="number">30000</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'买辆A6'</span>)</span><br><span class="line"><span class="keyword">if</span> salary&lt;=<span class="number">3000</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'电动72 35v 50迈，续航：90'</span>)</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="双分支结构"><a href="#双分支结构" class="headerlink" title="双分支结构"></a>双分支结构</h4> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">用户身份验证</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 柚子</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">username = input(<span class="string">'请输入用户名: '</span>)</span><br><span class="line">password = input(<span class="string">'请输入密码: '</span>)</span><br><span class="line"># 用户名是admin且密码是<span class="number">123456</span>则身份验证成功否则身份验证失败</span><br><span class="line"><span class="keyword">if</span> username == <span class="string">'admin'</span> and password == <span class="string">'123456'</span>:</span><br><span class="line">    print(<span class="string">'身份验证成功!'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">"校验失败"</span>)</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="多分支介绍"><a href="#多分支介绍" class="headerlink" title="多分支介绍"></a>多分支介绍</h4><p> 使用if…else…elif。</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">score=<span class="number">95</span></span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"优秀"</span>)</span><br><span class="line"><span class="keyword">elif</span> score&gt;<span class="number">80</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"良好"</span>)</span><br><span class="line"><span class="keyword">elif</span> score&gt;<span class="number">60</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"一般"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"不及格"</span>)</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="嵌套分支"><a href="#嵌套分支" class="headerlink" title="嵌套分支"></a>嵌套分支</h4><p> 案例：用户输入购买的西红柿单价和数量，计算总价后，用户输入vip等级，根据vip等级返回对应的结果。</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">price=<span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">'请输入西红柿单价：'</span>))</span><br><span class="line">num=<span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">'请输入购买数量：'</span>))</span><br><span class="line">total=price*num</span><br><span class="line"><span class="keyword">if</span> total&gt;=<span class="number">50</span>:</span><br><span class="line">    level=<span class="built_in">input</span>(<span class="string">'请输入vip级别：'</span>)</span><br><span class="line">    <span class="keyword">if</span> level == <span class="string">'1'</span>:</span><br><span class="line">        total *= <span class="number">0.8</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'享受总金额打八折优惠，金额为：%.2f'</span> % total)</span><br><span class="line">    <span class="keyword">elif</span> level == <span class="string">'2'</span>:</span><br><span class="line">        total=<span class="built_in">int</span>(total)</span><br><span class="line">        total=total-total%<span class="number">10</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'享受抹零优惠，金额为：%d'</span> % total)</span><br><span class="line">    <span class="keyword">elif</span> level == <span class="string">'3'</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'享受去小数优惠，金额为：%d'</span> % total)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    sex=<span class="built_in">input</span>(<span class="string">'请输入性别:'</span>)</span><br><span class="line">    <span class="keyword">if</span> sex == <span class="string">'男'</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'赠送玩具劳斯莱斯一个'</span>)</span><br><span class="line">    <span class="keyword">elif</span> sex == <span class="string">'女'</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'赠送小猫一只'</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>    elif sex == '女':     print('赠送小猫一只')</code></pre><pre><code></code></pre></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>循环结构</title>
      <link href="/2022/05/19/treasurebox/python/python-ji-chu/1.ji-chu/4.xun-huan-jie-gou/"/>
      <url>/2022/05/19/treasurebox/python/python-ji-chu/1.ji-chu/4.xun-huan-jie-gou/</url>
      
        <content type="html"><![CDATA[<h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><p>应用场景：当我们在编写代码时，如果有一个需求是输出10次”<code>hello world</code>“，这时候我们可以直接写十次<code>print("hello world")</code>。但是当我们需要些十万次”hello world”呢？肯定不会直接写十万行<code>print("hello world")</code>。这时候我们就需要用到循环语句了。</p><p>python中的循环语句分为两种语法：</p><ul><li><strong>for…in</strong></li><li><strong>while…</strong></li></ul><p>循环的条件：</p><ol><li>初始值</li><li>控制条件(循环结束的条件)</li><li>步长</li></ol><h3 id="一、for…in循环"><a href="#一、for…in循环" class="headerlink" title="一、for…in循环"></a>一、for…in循环</h3><p>如果知道要迭代的次数或者要对某一个<strong>迭代器</strong>对象进行循环，这时候就可以使用for循环。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">用for循环实现1~10求和</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 柚子</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">sum</span> += x</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></tbody></table></figure><p>说明：<code>range(1, 101)</code>可以用来构造一个从1到100的范围数据，通过x对所有的数据进行循环取出，依次进行叠加。</p><p>附录：range()函数的使用</p><ul><li><code>range(101)</code>：可以用来产生0到100范围的整数，需要注意的是取不到101。</li><li><code>range(1, 101)</code>：可以用来产生1到100范围的整数，相当于前面是闭区间后面是开区间。</li><li><code>range(1, 101, 2)</code>：可以用来产生1到100的奇数，其中2是步长，即每次数值递增的值。</li><li><code>range(100, 0, -2)</code>：可以用来产生100到1的偶数，其中-2是步长，即每次数字递减的值。</li></ul><h5 id="练习1：1-100之间的偶数求和"><a href="#练习1：1-100之间的偶数求和" class="headerlink" title="练习1：1~100之间的偶数求和"></a>练习1：1~100之间的偶数求和</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">用for循环实现1~100之间的偶数求和</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 柚子</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">101</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">sum</span> += x</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></tbody></table></figure><h5 id="练习2：使用for循环判断1000以内的水仙花数"><a href="#练习2：使用for循环判断1000以内的水仙花数" class="headerlink" title="练习2：使用for循环判断1000以内的水仙花数"></a>练习2：使用for循环判断1000以内的水仙花数</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">水仙花数：个位数的3次方加十位数的3次方加百位数的3次方等于该数本身。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 柚子</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>,<span class="number">1000</span>):</span><br><span class="line">    gewei = <span class="built_in">str</span>(i)[<span class="number">2</span>]</span><br><span class="line">    shiwei = <span class="built_in">str</span>(i)[<span class="number">1</span>]</span><br><span class="line">    baiwei = <span class="built_in">str</span>(i)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(gewei)**<span class="number">3</span>+<span class="built_in">int</span>(shiwei)**<span class="number">3</span>+<span class="built_in">int</span>(baiwei)**<span class="number">3</span>==i:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></tbody></table></figure><h4 id="二、while循环"><a href="#二、while循环" class="headerlink" title="二、while循环"></a>二、while循环</h4><p>如果要构造的循环不知道具体要循环的次数，这时候可以使用<code>while</code>循环进行控制。无限循环一般使用<code>while True</code>或<code>while 1</code>。</p><p>语法格式：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">由初始值，结束条件，步长三部分组成</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> num&lt;<span class="number">10</span>:</span><br><span class="line">num+=<span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><p><strong>练习1：根据用户输入的金额输出可以买的西瓜的个数</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">每个西瓜10元钱，每买一个西瓜，减去10元钱</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 柚子</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">money = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">'请输入金额：'</span>))</span><br><span class="line"><span class="keyword">while</span> money &gt;= <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'买一个西瓜'</span>)</span><br><span class="line">    money -= <span class="number">10</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'剩余'</span>, money, <span class="string">'元'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="三、break和continue"><a href="#三、break和continue" class="headerlink" title="三、break和continue"></a>三、break和continue</h3><p>break用于终止循环，continue用于终止本次循环，继续进行下次循环，终止的都是最近的循环。</p><p>看代码分析区别</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line"><span class="keyword">if</span> i==<span class="number">2</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line"><span class="keyword">if</span> i==<span class="number">2</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="built_in">print</span>(i)</span><br></pre></td></tr></tbody></table></figure><h5 id="练习1：猜数字游戏"><a href="#练习1：猜数字游戏" class="headerlink" title="练习1：猜数字游戏"></a>练习1：猜数字游戏</h5><p>random模块用于生成随机数，使用请参考<a href="https://blog.csdn.net/qq_42486675/article/details/106303861">random模块详解</a>。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">猜数字游戏：</span></span><br><span class="line"><span class="string">先随机生成一个数字，然后用户开始猜，每次给用户一个提示大或者小了。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 柚子</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">answer = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">counter = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    counter += <span class="number">1</span></span><br><span class="line">    number = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">'请输入: '</span>))</span><br><span class="line">    <span class="keyword">if</span> number &lt; answer:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'大一点'</span>)</span><br><span class="line">    <span class="keyword">elif</span> number &gt; answer:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'小一点'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'恭喜你猜对了!'</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'你总共猜了%d次'</span> % counter)</span><br><span class="line"><span class="keyword">if</span> counter &gt; <span class="number">7</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'你的智商余额明显不足'</span>)</span><br></pre></td></tr></tbody></table></figure><h5 id="练习2：猜拳游戏"><a href="#练习2：猜拳游戏" class="headerlink" title="练习2：猜拳游戏"></a>练习2：猜拳游戏</h5><p>在案例中使用了列表的语法，可以试用下标对列表取值。format是python的字符串格式化输出语法，字符串中用{}站位，后边跟上<code>.format()</code>。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">猜拳游戏：</span></span><br><span class="line"><span class="string">系统随机生成0,1,2分别代表拳，剪刀，布。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 柚子</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">num = <span class="number">1</span></span><br><span class="line">ying_num = <span class="number">0</span></span><br><span class="line">shu_num = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> num &lt;= <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">if</span> shu_num == <span class="number">2</span> <span class="keyword">or</span> ying_num == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    user = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">'请出拳 0（石头） 1（剪刀） 2（布）'</span>))</span><br><span class="line">    <span class="keyword">if</span> user &gt; <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'不能出大于2的值'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data = [<span class="string">'石头'</span>, <span class="string">'剪刀'</span>, <span class="string">'布'</span>]</span><br><span class="line">        com = random.randint(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"您出的是{}，电脑出的是{}"</span>.<span class="built_in">format</span>(data[user], data[com]))</span><br><span class="line">        <span class="keyword">if</span> user == com:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'平局'</span>)</span><br><span class="line">        <span class="keyword">elif</span> (user == <span class="number">0</span> <span class="keyword">and</span> com == <span class="number">1</span>) <span class="keyword">or</span> (user == <span class="number">1</span> <span class="keyword">and</span> com == <span class="number">2</span>) <span class="keyword">or</span> (user == <span class="number">2</span> <span class="keyword">and</span> com == <span class="number">0</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'你赢了'</span>)</span><br><span class="line">            ying_num += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'你输了'</span>)</span><br><span class="line">            shu_num += <span class="number">1</span>       </span><br><span class="line">    num += <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><h4 id="和分支结构一样，循环结构也可以进行嵌套使用："><a href="#和分支结构一样，循环结构也可以进行嵌套使用：" class="headerlink" title="和分支结构一样，循环结构也可以进行嵌套使用："></a>和分支结构一样，循环结构也可以进行嵌套使用：</h4><h5 id="练习3：输出乘法口诀表"><a href="#练习3：输出乘法口诀表" class="headerlink" title="练习3：输出乘法口诀表"></a>练习3：输出乘法口诀表</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">使用双重循环生成99乘法表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 柚子</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,i+<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(j,<span class="string">"*"</span>,i,<span class="string">"="</span>,i*j,end=<span class="string">"  "</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></tbody></table></figure><h3 id="四、for…else和while…-else-的用法"><a href="#四、for…else和while…-else-的用法" class="headerlink" title="四、for…else和while….else..的用法"></a>四、for…else和while….else..的用法</h3><p>当for和else连用或者while和else连用时。如果循环遇到break结束时，就会执行else中的语句。</p><h5 id="示-例1："><a href="#示-例1：" class="headerlink" title="示 例1："></a>示 例1：</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">此时没有break，else就会执行</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 柚子</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"else"</span>)</span><br></pre></td></tr></tbody></table></figure><h5 id="示-例2："><a href="#示-例2：" class="headerlink" title="示 例2："></a>示 例2：</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">此时执行了break，else就会执行</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 柚子</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"else"</span>)</span><br></pre></td></tr></tbody></table></figure><h5 id="练习1：判断2-100的质数"><a href="#练习1：判断2-100的质数" class="headerlink" title="练习1：判断2-100的质数"></a>练习1：判断2-100的质数</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">只能被1和它本身整除的数为质数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 柚子</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,i):</span><br><span class="line">        <span class="keyword">if</span> i%j==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></tbody></table></figure><h5 id="练习2：打印三角形图案"><a href="#练习2：打印三角形图案" class="headerlink" title="练习2：打印三角形图案"></a>练习2：打印三角形图案</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*</span><br><span class="line">**</span><br><span class="line">***</span><br><span class="line">****</span><br><span class="line">*****</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   *</span><br><span class="line">   **</span><br><span class="line">  ***</span><br><span class="line"> ****</span><br><span class="line">*****</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    *</span><br><span class="line">   ***</span><br><span class="line">  *****</span><br><span class="line"> *******</span><br><span class="line">*********</span><br></pre></td></tr></tbody></table></figure><h5 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">打印三角形图案</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 柚子</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">row = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">'请输入行数: '</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row):</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'*'</span>, end=<span class="string">''</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(row):</span><br><span class="line">        <span class="keyword">if</span> j &lt; row - i - <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">' '</span>, end=<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'*'</span>, end=<span class="string">''</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row):</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(row - i - <span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">' '</span>, end=<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span> * i + <span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'*'</span>, end=<span class="string">''</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></tbody></table></figure><p>ow):<br>        if j &lt; row - i - 1:<br>            print(‘ ‘, end=’’)<br>        else:<br>            print(‘*’, end=’’)<br>    print()</p><p>for i in range(row):<br>    for _ in range(row - i - 1):<br>        print(‘ ‘, end=’’)<br>    for _ in range(2 * i + 1):<br>        print(‘*’, end=’’)<br>    print()</p><pre><code></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>组合数据类型</title>
      <link href="/2022/05/19/treasurebox/python/python-ji-chu/1.ji-chu/5.zu-he-shu-ju-lei-xing/"/>
      <url>/2022/05/19/treasurebox/python/python-ji-chu/1.ji-chu/5.zu-he-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="组合数据类型"><a href="#组合数据类型" class="headerlink" title="组合数据类型"></a>组合数据类型</h2><p>当基本的数据类型不能完全表示所有的数据时，这时候就会用到组合数据类型。学习组合数据类型之前，需要知道python的两个内置<strong>神级函数</strong><code>dir()</code>和<code>help()</code>。</p><ul><li><h5 id="dir-：查看某个对象支持的操作方法，示例：dir-list"><a href="#dir-：查看某个对象支持的操作方法，示例：dir-list" class="headerlink" title="dir()：查看某个对象支持的操作方法，示例：dir(list)"></a>dir()：查看某个对象支持的操作方法，示例：dir(list)</h5></li><li><h5 id="help-：查看某个方法的使用方式，示例：help-print"><a href="#help-：查看某个方法的使用方式，示例：help-print" class="headerlink" title="help()：查看某个方法的使用方式，示例：help(print)"></a>help()：查看某个方法的使用方式，示例：help(print)</h5></li></ul><h3 id="一、列表list"><a href="#一、列表list" class="headerlink" title="一、列表list"></a>一、列表list</h3><p>列表是组合数据类型中的一种，可以按照有位置顺序的方式、存储不同数据类型、重复的多个数据。列表和变量的使用方式一样，都需要先声明，再使用。</p><ol><li><h4 id="列表的声明"><a href="#列表的声明" class="headerlink" title="列表的声明"></a>列表的声明</h4><ul><li><h5 id="声明空列表"><a href="#声明空列表" class="headerlink" title="声明空列表"></a>声明空列表</h5>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">声明一个空列表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 柚子</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 1、使用python中的关键字声明【推荐方式】</span></span><br><span class="line">names = <span class="built_in">list</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、直接使用[]声明</span></span><br><span class="line">ages = []</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="声明非空列表"><a href="#声明非空列表" class="headerlink" title="声明非空列表"></a>声明非空列表</h5>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">声明一个非空列表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 柚子</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 1、直接声明【推荐方式】</span></span><br><span class="line">names = [<span class="string">"柚子"</span>,<span class="string">"西瓜"</span>,<span class="string">"香蕉"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、使用list()转换</span></span><br><span class="line">s = <span class="string">"hello"</span></span><br><span class="line">s2 = <span class="built_in">list</span>(s) <span class="comment"># 类型转换~将其他类型转换成列表数据</span></span><br><span class="line"><span class="built_in">print</span>(s2); <span class="comment">#["h", "e", "l", "l","o"]</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><h4 id="列表的操作"><a href="#列表的操作" class="headerlink" title="列表的操作"></a>列表的操作</h4><p> 列表的操作主要分为四种：增加、修改、查询、删除。除此之外还有一些其他的操作需要了解。</p><ul><li><h5 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h5>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">列表增加操作主要有：</span></span><br><span class="line"><span class="string">    append(object)：         在列表末尾添加数据</span></span><br><span class="line"><span class="string">    insert(index,object)     在列表某个位置插入数据，超出列表长度不报错    </span></span><br><span class="line"><span class="string">    extend(iterable)         添加一个可迭代对象</span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: youzi</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">names = [<span class="string">"柚子"</span>, <span class="string">"西瓜"</span>]</span><br><span class="line">names.append(<span class="string">"榴莲"</span>)</span><br><span class="line"><span class="built_in">print</span>(names)    <span class="comment">#['柚子', '西瓜', '榴莲']</span></span><br><span class="line"></span><br><span class="line">names.insert(<span class="number">10</span>, <span class="string">"桃子"</span>)</span><br><span class="line"><span class="built_in">print</span>(names)    <span class="comment">#['柚子', '西瓜', '榴莲', '桃子']</span></span><br><span class="line">names.extend(<span class="string">"苹果"</span>)</span><br><span class="line"><span class="built_in">print</span>(names)    <span class="comment">#['柚子', '西瓜', '榴莲', '桃子', '苹', '果']</span></span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h5><p>  修改列表中的数据直接使用L[下标]的方式进行修改，下标从0开始。</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">"柚子"</span>, <span class="string">"西瓜"</span>]</span><br><span class="line">names[<span class="number">0</span>] = <span class="string">"哈密瓜"</span></span><br><span class="line"><span class="built_in">print</span>(names)    <span class="comment">#['哈密瓜', '西瓜',]</span></span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h5><p>  查询数据有：查看所有数据，查看某个数据的位置，查看某个数据的次数三种。</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">index和count的用法</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">names = [<span class="string">"柚子"</span>, <span class="string">"西瓜"</span>]</span><br><span class="line"><span class="comment"># 通过循环查看列表中的每一个数据</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某个位置的数据</span></span><br><span class="line"><span class="built_in">print</span>(names[<span class="number">0</span>])  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某个数据的第一次出现的位置，找不到会报错</span></span><br><span class="line"><span class="built_in">print</span>(names.index(<span class="string">"西瓜"</span>))  <span class="comment">#1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某个数据出现的次数</span></span><br><span class="line"><span class="built_in">print</span>(names.count(<span class="string">"西瓜"</span>))  <span class="comment">#1</span></span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><p>  删除操作也有两种，remove,pop,</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">remove(object)删除某个数据，数据不在时会报错</span></span><br><span class="line"><span class="string">pop(index)按下标删除，不写时默认删除最后一个，超出列表下表会报错</span></span><br><span class="line"><span class="string">del L[index]使用python的del删除</span></span><br><span class="line"><span class="string">clear()清空列表</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">names = [<span class="string">'哈密瓜'</span>, <span class="string">'西瓜'</span>, <span class="string">'榴莲'</span>, <span class="string">'桃子'</span>,<span class="string">"柚子"</span>, <span class="string">"核桃"</span>]</span><br><span class="line">names.remove(<span class="string">"西瓜"</span>)</span><br><span class="line"><span class="built_in">print</span>(names)</span><br><span class="line"></span><br><span class="line">names.pop()</span><br><span class="line"><span class="built_in">print</span>(names)</span><br><span class="line">names.pop(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(names)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> names[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(names)</span><br><span class="line"></span><br><span class="line">names.clear()</span><br><span class="line"><span class="built_in">print</span>(names)</span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="其它操作"><a href="#其它操作" class="headerlink" title="其它操作"></a>其它操作</h5><table><thead><tr><th>操作</th><th>描述</th></tr></thead><tbody><tr><td><code>L.sort()</code></td><td>在原列表的基础上进行排序</td></tr><tr><td><code>L.reverse()</code></td><td>对列表进行反转</td></tr><tr><td><code>L.copy()</code></td><td>生成一个浅拷贝对象</td></tr><tr><td><code>len(L)</code></td><td>获取列表中数据的个数</td></tr><tr><td><code>max(L)</code></td><td>获取列表中的最大值</td></tr><tr><td><code>min(L)</code></td><td>获取列表中的最小值</td></tr><tr><td><code>L[m:n:x]</code></td><td>列表的切片<br>从m位置开始，切到n，间隔为x<br>示例：<br>L[:]：切取整个列表数据<br>L[1:]:从1开始切到最后一位<br>L[1:3:2]:从1开始切到3，间隔为2<br>切片时支持负索引，最后一位为-1</td></tr></tbody></table></li></ul><p> <strong>案例：蜃楼用户管理系统</strong></p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">用户信息录入系统</span></span><br><span class="line"><span class="string">    开发步骤</span></span><br><span class="line"><span class="string">    1、定义一个首页界面[告诉我们要做什么] </span></span><br><span class="line"><span class="string">    2、通过列表保存数据</span></span><br><span class="line"><span class="string">    3、通过用户输入的选项，执行判断</span></span><br><span class="line"><span class="string">    4、实现各项的功能</span></span><br><span class="line"><span class="string">    5、测试功能运行是否正确</span></span><br><span class="line"><span class="string">    6、BUG 完善</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存所有伙伴的列表</span></span><br><span class="line">sheng_lou = <span class="built_in">list</span>()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>: <span class="comment"># 首页</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"欢迎来到蜃楼用户管理系统"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">" 1、查看所有小伙伴"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">" 2、录入个人信息"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">" 3、查看个人信息"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">" 4、退出系统"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~"</span>) <span class="comment"># 用户输入选项</span></span><br><span class="line">    c = <span class="built_in">input</span>(<span class="string">"请输入您的选项:"</span>)</span><br><span class="line">    <span class="keyword">if</span> c == <span class="string">"1"</span>:  <span class="comment"># 遍历所有小伙伴</span></span><br><span class="line">        <span class="keyword">for</span> stu <span class="keyword">in</span> sheng_lou:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"小伙伴："</span>, stu)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"~~~~~~~~~~~~~~~~~~~~~~~~~"</span>)</span><br><span class="line">        <span class="built_in">input</span>(<span class="string">"查看完成按任意键返回首页."</span>)</span><br><span class="line">    <span class="keyword">elif</span> c == <span class="string">"2"</span>:  <span class="comment"># 提示用户输入姓名</span></span><br><span class="line">        name = <span class="built_in">input</span>(<span class="string">"请输入昵称："</span>)</span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">in</span> sheng_lou:</span><br><span class="line">            <span class="built_in">input</span>(<span class="string">"该昵称已经存在，请使用其他昵称录入"</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># 保存昵称:列表的末尾追加</span></span><br><span class="line">        sheng_lou.append(name)</span><br><span class="line">        <span class="built_in">input</span>(<span class="string">"录入完成，按任意键返回首页..."</span>)</span><br><span class="line">    <span class="keyword">elif</span> c == <span class="string">"3"</span>:  <span class="comment"># 提示用户输入要查看的昵称</span></span><br><span class="line">        nickname = <span class="built_in">input</span>(<span class="string">"请输入要查看的昵称："</span>)  </span><br><span class="line">        <span class="keyword">if</span> nickname <span class="keyword">in</span> sheng_lou: <span class="comment"># 成员成员运算符，判断昵称是否包含在列表中[True/False]</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"该成员已经在大厅中."</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"该昵称代表的成员没有在大厅中."</span>)</span><br><span class="line">            <span class="built_in">input</span>(<span class="string">"查看个人信息，正在升级中..."</span>)</span><br><span class="line">    <span class="keyword">elif</span> c == <span class="string">"4"</span>:</span><br><span class="line">        <span class="built_in">input</span>(<span class="string">"退出系统，保存好个人数据，按任意键退出"</span>)</span><br><span class="line">        exit(<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="二、元组tuple"><a href="#二、元组tuple" class="headerlink" title="二、元组tuple"></a>二、元组tuple</h3><p>元组也是组合数据类型中的一种，可以有顺序的存放可重复的数据、可以是不同类型的多个数据，数据一旦保存之后，不允许改动,可以使用for循环遍历，跟列表相同。</p><ol><li><h4 id="元组的声明"><a href="#元组的声明" class="headerlink" title="元组的声明"></a>元组的声明</h4><ul><li><h5 id="声明空元组"><a href="#声明空元组" class="headerlink" title="声明空元组"></a>声明空元组</h5><p>  因为元组不能修改，声明空元组没有任何意义。</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = <span class="built_in">tuple</span>() <span class="comment"># 声明了一个元组[空] - 推荐</span></span><br><span class="line">t2 = () <span class="comment"># 声明了一个元组[空] - 很容易和四则运算的小括号混淆</span></span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="声明一个元素的元组"><a href="#声明一个元素的元组" class="headerlink" title="声明一个元素的元组"></a>声明一个元素的元组</h5>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">t = <span class="built_in">tuple</span>([“a”]) <span class="comment"># 这是包含一个数据的元素，不推荐的语法~ 类型转换</span></span><br><span class="line">t2 = (“a”, ) <span class="comment"># 声明了只包含一个元素的元组~一定要那个逗号</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t2))<span class="comment"># tuple</span></span><br><span class="line">t3 = (“a”) <span class="comment"># 这不是元组，括号~就是四则运算的括号~t3=”a”</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t3))<span class="comment"># str</span></span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="声明多个元素的元组"><a href="#声明多个元素的元组" class="headerlink" title="声明多个元素的元组"></a>声明多个元素的元组</h5>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = (“春”, “夏”, “秋”, “冬”) <span class="comment"># 声明了一个包含四个数据的元组，推荐</span></span><br><span class="line">t2 = <span class="built_in">tuple</span>([“春”, “夏”, “秋”, “冬”]) <span class="comment"># 使用tuple()转换-不推荐，繁琐</span></span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><h4 id="元组的操作"><a href="#元组的操作" class="headerlink" title="元组的操作"></a>元组的操作</h4> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">count(object):某个数据出现的次数</span></span><br><span class="line"><span class="string">index(object):某个数据第一次出现的下标</span></span><br><span class="line"><span class="string">len(T):元组的长度</span></span><br><span class="line"><span class="string">T[下标]:查看某个下标的数据</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">t = (<span class="string">"春"</span>, <span class="string">"夏"</span>, <span class="string">"秋"</span>, <span class="string">"冬"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(t.count(<span class="string">"春"</span>))</span><br><span class="line"><span class="built_in">print</span>(t.index(<span class="string">"春"</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(t))</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p> 元组因为不能修改，经常存储固定不变的数据，比如一年的四季，一年的12个月份等。</p></li></ol><h3 id="三、集合set"><a href="#三、集合set" class="headerlink" title="三、集合set"></a>三、集合set</h3><p>集合set是组合类型中的一种，集合中可以存放没有顺序的、不能重复的、任意数据类型的数据，多个数据之间用逗号隔开，不能使用for循环遍历。</p><ol><li><h4 id="集合的声明"><a href="#集合的声明" class="headerlink" title="集合的声明"></a>集合的声明</h4><ul><li><p>声明空集合</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">只能使用set()声明</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">s1 = <span class="built_in">set</span>()</span><br></pre></td></tr></tbody></table></figure></li><li><p>声明非空集合</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 推荐的非空集合的声明方式</span></span><br><span class="line">s1 = {“A”, “b”, “C”, “d<span class="string">"}</span></span><br><span class="line"><span class="string"># 另一种声明方式~繁琐~ 列表做了数据类型转换，得到了一个集合！ </span></span><br><span class="line"><span class="string">s2 = set([“a”, “b”, “c”, “d”])</span></span><br></pre></td></tr></tbody></table></figure><p>  <strong>说明：</strong>集合具有自动去重功能，如果其中的数据有重复的，集合会自动去重。</p></li></ul></li><li><h4 id="集合的操作"><a href="#集合的操作" class="headerlink" title="集合的操作"></a>集合的操作</h4><p> 集合中已经存放了一些数据，那么对于集合的操作都有哪些处理方式呢？ </p><p> 集合的特点~没有顺序的，不可以重复，不同数据类型(可以)，多个数据 。</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">单个集合操作：</span></span><br><span class="line"><span class="string">    'add'    增加,</span></span><br><span class="line"><span class="string">    'clear  '清空集合, </span></span><br><span class="line"><span class="string">    'copy'   复制一个集合,</span></span><br><span class="line"><span class="string">    'pop',   随机删除一个集合中的数据[集合中的数据没有顺序]</span></span><br><span class="line"><span class="string">    'remove', 删除一个指定的数据，如果数据不存在就会报错</span></span><br><span class="line"><span class="string">    'discard', 删除一个指定的数据，如果数据不存在什么都不做</span></span><br><span class="line"><span class="string">两个集合操作</span></span><br><span class="line"><span class="string">    'isdisjoint', 检验两个集合是否有交集，如果没有就返回True</span></span><br><span class="line"><span class="string">    'issubset', s1 集合中的数据是不是包含在 s2 集合中，等价于 s1 &lt; s2</span></span><br><span class="line"><span class="string">    'issuperset', s1 集合是不是包含了 s2 集合中的数据，等价于 s1 &gt; s2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    'difference', 获取 s1 集合和 s2 集合的差集</span></span><br><span class="line"><span class="string">    'difference_update', 获取 s1 和 s2 的差集并将结果数据更新到 s1 中</span></span><br><span class="line"><span class="string">    'intersection', 获取 s1 集合和 s2 集合的交集</span></span><br><span class="line"><span class="string">    'intersection_update', 获取 s1 和 s2 的交集并将结果更新到 s1 中</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    'symmetric_difference', 获取 s1 和 s2 共同的差集</span></span><br><span class="line"><span class="string">    'symmetric_difference_update', 获取共同的差集并更新到 s1 中</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    'union', 获取 s1 和 s2 的并集</span></span><br><span class="line"><span class="string">    'update' 获取 s1 和 s2 的并集，并将数据更新给 s1</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">s1 = {<span class="number">1</span>}</span><br><span class="line">s1.add(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h4><p> 集合主要用户去重操作和求两组数据的交集或者并集之类的操作。</p></li></ol><h3 id="四、字典dict"><a href="#四、字典dict" class="headerlink" title="四、字典dict"></a>四、字典dict</h3><p>字典的概念类似日常使用的《中华字典》，通过前边的页码找到后边对应的数据。前边的页码在python中对应字典的<code>key</code>，后边的页码对应python中的<code>value</code>。字典中的数据都是以键值对的形式存在。</p><ol><li><h4 id="字典的特点"><a href="#字典的特点" class="headerlink" title="字典的特点"></a>字典的特点</h4><p> 字典的格式为{key1:value1,key2:value2}，其中key不能重复，且不能是可以修改的数据类型，value可以重复，数据类型没有限制。</p></li><li><h4 id="字典的声明"><a href="#字典的声明" class="headerlink" title="字典的声明"></a>字典的声明</h4><p> python中使用dict表示字典。</p><ul><li><h5 id="空字典"><a href="#空字典" class="headerlink" title="空字典"></a>空字典</h5>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、使用dict(),推荐使用</span></span><br><span class="line">dict1 = <span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、使用{}声明</span></span><br><span class="line">dict2 = {}</span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="非空字典"><a href="#非空字典" class="headerlink" title="非空字典"></a>非空字典</h5>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user = {“username”: “admin”, “password”: “<span class="number">123456</span>”} <span class="comment">#推荐使用 可读性强</span></span><br><span class="line">user2 = <span class="built_in">dict</span>([(“username”, “admin”), (“password”, “<span class="number">123456</span>”)])</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><h4 id="字典的使用"><a href="#字典的使用" class="headerlink" title="字典的使用"></a>字典的使用</h4> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">'clear', 清空字典</span><br><span class="line">'copy', 复制字典</span><br><span class="line">'fromkeys', 根据给定的 数据作为 key 初始化一个字典</span><br><span class="line">'get', 根据一个 key 获取对应的 value 数据,key不存在时得到None</span><br><span class="line">'items', 获取字典中的所有键值对数据</span><br><span class="line">'keys', 获取字典中的所有 key 数据</span><br><span class="line">'pop', 根据 key 删除指定的一个键值对</span><br><span class="line">'popitem', 随机删除一个键值对</span><br><span class="line">'setdefault', 如果 key 不存在增加一个数据，如果 key 存在什么都不做</span><br><span class="line">'update', 如果 key 不存在增加一个数据，如果 key 存在更新这个数据</span><br><span class="line">'values' 获取字典中的所有的 value 数据</span><br></pre></td></tr></tbody></table></figure><ul><li><h5 id="查看数据"><a href="#查看数据" class="headerlink" title="查看数据"></a>查看数据</h5>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dct={<span class="string">'username'</span>: <span class="string">'waltz'</span>, <span class="string">'nickname'</span>: <span class="string">'柚子'</span>}</span><br><span class="line"><span class="built_in">print</span>(dct.items())  <span class="comment"># dict_items([('username', 'waltz'), ('nickname', '柚子')])</span></span><br><span class="line"><span class="built_in">print</span>(dct.keys())  <span class="comment"># dict_keys(['username', 'nickname'])</span></span><br><span class="line"><span class="built_in">print</span>(dct.values()) <span class="comment">#dict_values(['waltz', '柚子'])</span></span><br><span class="line"><span class="built_in">print</span>(dct.get(<span class="string">"nickname"</span>)) <span class="comment">#'柚子'</span></span><br><span class="line"><span class="built_in">print</span>(dct.get(<span class="string">"age"</span>))   <span class="comment"># None</span></span><br><span class="line"><span class="built_in">print</span>(dct.get(<span class="string">"age"</span>,<span class="string">"西瓜"</span>)) <span class="comment"># 西瓜</span></span><br><span class="line"><span class="built_in">print</span>(dct[<span class="string">"nickname"</span>])<span class="comment">#'柚子'</span></span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h5>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dct={<span class="string">'username'</span>: <span class="string">'waltz'</span>, <span class="string">'nickname'</span>: <span class="string">'柚子'</span>}</span><br><span class="line"><span class="comment"># 修改数据</span></span><br><span class="line">dct[<span class="string">"nickname"</span>] = <span class="string">"桃子"</span></span><br><span class="line">dct.update({<span class="string">"username"</span>:<span class="string">"youzi"</span>})</span><br><span class="line"><span class="built_in">print</span>(dct)</span><br><span class="line">dct.setdefault(<span class="string">"username"</span>, <span class="string">"xigua"</span>)</span><br><span class="line">dct.setdefault(<span class="string">"age"</span>, <span class="number">24</span>)</span><br><span class="line"><span class="built_in">print</span>(dct)</span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据"></a>增加数据</h5>  <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">D.setdefault(key, value)</span><br><span class="line">只有 key 在字典中不存在的情况下，新增一个键值对数据</span><br><span class="line">D.update({key:value})</span><br><span class="line">只有 key 在字典中不存在的情况下，新增一个/多个键值对数据</span><br><span class="line">D[key] = value</span><br><span class="line"> 只有 key 在字典中不存在的情况下，新增一个键值对数据</span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h5>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">pop()      通过key删除值，可以接收返回值，，key不存在时会报错</span></span><br><span class="line"><span class="string">popitem()  随机删除一个键值对，可以接收元组形式的返回值</span></span><br><span class="line"><span class="string">clear()   清空字典</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除数据</span></span><br><span class="line">dct={<span class="string">'username'</span>: <span class="string">'waltz'</span>, <span class="string">'nickname'</span>: <span class="string">'柚子'</span>, <span class="string">"age"</span>:<span class="number">24</span>}</span><br><span class="line">value = dct.pop(<span class="string">"username"</span>)</span><br><span class="line"><span class="built_in">print</span>(value)  <span class="comment"># waltz</span></span><br><span class="line"><span class="built_in">print</span>(dct)</span><br><span class="line">result = dct.popitem()</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment">#('age', 24)</span></span><br><span class="line"></span><br><span class="line">r = dct.clear()</span><br><span class="line"><span class="built_in">print</span>(r)</span><br><span class="line"><span class="built_in">print</span>(dct)</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><h4 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h4><p> 字典在使用循环遍历时，默认遍历字典中的key。</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dct={<span class="string">'username'</span>: <span class="string">'waltz'</span>, <span class="string">'nickname'</span>: <span class="string">'柚子'</span>, <span class="string">"age"</span>:<span class="number">24</span>}</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dct:</span><br><span class="line">    <span class="built_in">print</span>(key,dct[key])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> dct.values():</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> dct.items():</span><br><span class="line">    <span class="built_in">print</span>(key,value)</span><br></pre></td></tr></tbody></table></figure></li></ol><p>t(r)<br>        print(dct)<br>        </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">4. #### 遍历字典</span><br><span class="line"></span><br><span class="line">    字典在使用循环遍历时，默认遍历字典中的key。</span><br><span class="line"></span><br><span class="line">    ```python</span><br><span class="line">    dct={'username': 'waltz', 'nickname': '柚子', "age":24}</span><br><span class="line">    for key in dct:</span><br><span class="line">        print(key,dct[key])</span><br><span class="line">    </span><br><span class="line">    for value in dct.values():</span><br><span class="line">        print(value)</span><br><span class="line">    </span><br><span class="line">    for key,value in dct.items():</span><br><span class="line">        print(key,value)</span><br></pre></td></tr></tbody></table></figure><p></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>字符串和案例练习</title>
      <link href="/2022/05/19/treasurebox/python/python-ji-chu/1.ji-chu/6.zi-fu-chuan-he-an-li-lian-xi/"/>
      <url>/2022/05/19/treasurebox/python/python-ji-chu/1.ji-chu/6.zi-fu-chuan-he-an-li-lian-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="字符串和案例练习"><a href="#字符串和案例练习" class="headerlink" title="字符串和案例练习"></a>字符串和案例练习</h2><h3 id="一、字符串的使用"><a href="#一、字符串的使用" class="headerlink" title="一、字符串的使用"></a>一、字符串的使用</h3><h3 id="二、案例练习"><a href="#二、案例练习" class="headerlink" title="二、案例练习"></a>二、案例练习</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>异常结构</title>
      <link href="/2022/05/19/treasurebox/python/python-ji-chu/2.yi-chang-chu-li/1.yi-chang-jie-gou/"/>
      <url>/2022/05/19/treasurebox/python/python-ji-chu/2.yi-chang-chu-li/1.yi-chang-jie-gou/</url>
      
        <content type="html"><![CDATA[<h2 id="异常结构"><a href="#异常结构" class="headerlink" title="异常结构"></a>异常结构</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pip不能使用</title>
      <link href="/2022/05/19/treasurebox/python/pip-bu-neng-shi-yong/"/>
      <url>/2022/05/19/treasurebox/python/pip-bu-neng-shi-yong/</url>
      
        <content type="html"><![CDATA[<p><a href="https://bootstrap.pypa.io/get-pip.py">https://bootstrap.pypa.io/get-pip.py</a></p><p>下载这个文件，然后在本地双击运行。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>flask请求钩子</title>
      <link href="/2022/05/19/treasurebox/python/flask/flask-qing-qiu-gou-zi/"/>
      <url>/2022/05/19/treasurebox/python/flask/flask-qing-qiu-gou-zi/</url>
      
        <content type="html"><![CDATA[<h2 id="Flask的请求钩子"><a href="#Flask的请求钩子" class="headerlink" title="Flask的请求钩子"></a>Flask的请求钩子</h2><p>有时在处理请求之前或之后执行代码会很有用。例如，在请求开始时，我们可能需要创建数据库连接或者认证发起请求的用户。为了避免在每个视图函数中都使用重复的代码，Flask 提供了注册通用函数的功能，注册的函数可在请求被分发到视图函数之前或之后调用。</p><p>在请求的钩子函数和视图函数之间共享数据一般使用上下文全局变量g。例如，before_request处理程序时可以从数据库中加载已经登录的用户，并将其保存在g.user中，随后调用视图函数时，视图函数再使用g.user获取用户。</p><h3 id="一、before-first-request"><a href="#一、before-first-request" class="headerlink" title="一、before_first_request"></a>一、before_first_request</h3><p>注册一个函数，在处理第一个请求之前运行。</p><h3 id="二、before-request"><a href="#二、before-request" class="headerlink" title="二、before_request"></a>二、before_request</h3><p>注册一个函数，在每次请求之前执行</p><h3 id="三、after-request"><a href="#三、after-request" class="headerlink" title="三、after_request"></a>三、after_request</h3><p>注册一个函数，如果没有未处理的异常抛出，在每次请求之后运行</p><h3 id="四、teardown-request"><a href="#四、teardown-request" class="headerlink" title="四、teardown_request"></a>四、teardown_request</h3><p>注册一个函数，即使有未处理的异常抛出，也在每次请求之后运行。</p><p>app.url_map查看都有哪些url映射。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1、介绍</title>
      <link href="/2022/05/19/treasurebox/python/tornado/1-yong-hu-zhi-nan/1-jie-shao/"/>
      <url>/2022/05/19/treasurebox/python/tornado/1-yong-hu-zhi-nan/1-jie-shao/</url>
      
        <content type="html"><![CDATA[<h1 id="用户指南"><a href="#用户指南" class="headerlink" title="用户指南"></a>用户指南</h1><h3 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h3><p>Tornado是一个Python web框架和异步网络库，通过非阻塞网络I/O，Tornado可以支持上万级的连接，处理场链接，WebSockets和其他需要与每个用户保持长久连接的应用。</p><p>Tornado大提升可以被分为4个主要的部分</p><ul><li>web框架（包含创建web应用的RequestHandler类，还有很多其他支持的类）</li><li>HTTP的客户端和服务端实现（HTTPServer and AsyncHTTPClient）</li><li>异步网络库（IOLoop和IOStream），为HTTP组件提供构建模块，也可以用来实现其他协议。</li><li>协程库（tornado.gen）允许异步代码写的更直接而不用链式回调的方式。</li></ul><p>Tornado web 框架和HTTP server 一起为 <a href="http://www.python.org/dev/peps/pep-3333/">WSGI</a> 提供了一个全栈式的选择. 在WSGI容器 (<a href="https://tornado-zh.readthedocs.io/zh/latest/wsgi.html#tornado.wsgi.WSGIAdapter"><code>WSGIAdapter</code></a>) 中使用Tornado web框架或者使用Tornado HTTP server 作为一个其他WSGI框架(<a href="https://tornado-zh.readthedocs.io/zh/latest/wsgi.html#tornado.wsgi.WSGIContainer"><code>WSGIContainer</code></a>)的容器,这样的组合方式都是有局限性的. 为了充分利用Tornado的特性,你需要一起使用Tornado的web框架和HTTP server.</p><h3 id="二、异步和非阻塞I-x2F-O"><a href="#二、异步和非阻塞I-x2F-O" class="headerlink" title="二、异步和非阻塞I/O"></a>二、异步和非阻塞I/O</h3><p>实时web功能需要为每个用户提供一个多数时间被闲置的长连接, 在传统的同步web服务器中，这意味着要为每个用户提供一个线程, 当然每个线程的开销都是很昂贵的.</p><p>为了尽量减少并发连接造成的开销，Tornado使用了一种单线程事件循环的方式. 这就意味着所有的应用代码都应该是异步非阻塞的, 因为在同一时间只有一个操作是有效的.</p><p>异步和非阻塞是非常相关的并且这两个术语经常交换使用,但它们不是完全相同的事情.</p><h4 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h4><p>一个函数在等待某些事情的返回值的时候会被阻塞。函数被阻塞的原因有很多：网络I/O，磁盘I/O，互斥锁等，事实上 每个函数在运行和使用CPU的时候都或多或少会被阻塞(举个极端的例子来说明对待CPU阻塞和对待一般阻塞一样的严肃：比如密码哈希函数bcrypt，需要消耗几百毫秒的CPU时间。这已经远远超过了一般的网络或者磁盘请求时间了)。</p><p>一个函数可以在某些方面阻塞在另外一些方面不阻塞。例如：<code>tornado.Httpclient</code>在默认的配置下，会在DNS解析上面阻塞，但是在其他网络请求的时候不阻塞（为了减轻这种影响，可以用ThreadedResolver或者是通过正确配置<code>libcurl</code>用<code>tornado.curl_httpclient</code>来做）。在tornado的上下文中，我们一般讨论网络I/O上下文的阻塞，尽管各种阻塞已经被最小化。</p><h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><p><strong>异步</strong>函数会在完成之前返回，在应用中触发下一个动作前通常会在后台执行一些工作（和正常的同步函数在返回前就执行完所有的事情不同）。这里列举了几种风格的异步接口</p><ul><li>回调参数</li><li>返回一个占位符（Future，Promise，Deferred）</li><li>传送给一个队列</li><li>回调注册表(POSIX信号)</li></ul><p>不论使用那种类型的接口，按照定义异步函数与他们的调用者都有着不同的交互方式；也没有对调用者透明的方式使得同步函数异步（类似gevent使用轻量级现成的系统性能虽然堪比异步系统，但他们并没有真正的让事情异步）。</p><p>一个简单的同步函数：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tornado.httpclient <span class="keyword">import</span> HTTPClient</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">synchronous_fetch</span>(<span class="params">url</span>):</span><br><span class="line">    http_client = HTTPClient()</span><br><span class="line">    response = http_client.fetch(url)</span><br><span class="line">    <span class="keyword">return</span> response.body</span><br></pre></td></tr></tbody></table></figure><p>用回调参数重写的异步函数</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tornado.httpclient <span class="keyword">import</span> AsyncHTTPClient</span><br><span class="line"><span class="comment"># 用回调参数重写的异步函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">asynchronous_fetch</span>(<span class="params">url, callback</span>):</span><br><span class="line">    http_client = AsyncHTTPClient()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle_response</span>(<span class="params">response</span>):</span><br><span class="line">        callback(response.body)</span><br><span class="line">    http_client.fetch(url, callback=handle_response)</span><br></pre></td></tr></tbody></table></figure><p>使用Future代替回调</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tornado.concurrent <span class="keyword">import</span> Future</span><br><span class="line"><span class="comment"># 使用Future代替回调</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">async_fetch_future</span>(<span class="params">url</span>):</span><br><span class="line">    http_client = AsyncHTTPClient()</span><br><span class="line">    my_future = Future()</span><br><span class="line">    fetch_future = http_client.fetch(url)</span><br><span class="line">    fetch_future.add_done_callback(</span><br><span class="line">        <span class="keyword">lambda</span> f:my_future.set_result(f.result)</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> my_future</span><br></pre></td></tr></tbody></table></figure><h3 id="三、协程"><a href="#三、协程" class="headerlink" title="三、协程"></a>三、协程</h3><pre><code>return my_future</code></pre><pre><code>### 三、协程</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>初识python</title>
      <link href="/2022/05/19/treasurebox/python/python-ji-chu/1.ji-chu/1.chu-shi-python/"/>
      <url>/2022/05/19/treasurebox/python/python-ji-chu/1.ji-chu/1.chu-shi-python/</url>
      
        <content type="html"><![CDATA[<h2 id="初识python"><a href="#初识python" class="headerlink" title="初识python"></a>初识python</h2><h3 id="一、安装python"><a href="#一、安装python" class="headerlink" title="一、安装python"></a>一、安装python</h3><ol><li><h4 id="windows安装"><a href="#windows安装" class="headerlink" title="windows安装"></a>windows安装</h4><p> 在python官网下载对应的解释器版本：<a href="https://www.python.org/%E3%80%82%E5%8F%8C%E5%87%BB%E8%BF%90%E8%A1%8C%E8%A7%A3%E9%87%8A%E5%99%A8%E8%BF%9B%E8%A1%8C%E5%AE%89%E8%A3%85%E3%80%82%E6%8E%A8%E8%8D%90%E5%9C%A8%E5%AE%89%E8%A3%85%E6%97%B6%E4%B8%8D%E8%A6%81%E5%AE%89%E8%A3%85%E5%9C%A8C%E7%9B%98%E3%80%82">https://www.python.org/。双击运行解释器进行安装。推荐在安装时不要安装在C盘。</a></p></li><li><h4 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h4><p> Linux环境中自带了Python 2.x版本，想更新到3.x版本需要去官网下载对应的解释器，以Centos安装python示例：</p><ol><li><p><strong>安装依赖库</strong></p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget gcc zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>下载Python源码并解压到指定目录</strong></p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.7.6/Python-3.7.6.tar.xz</span><br><span class="line">xz -d Python-3.7.6.tar.xz</span><br><span class="line">tar -xvf Python-3.7.6.tar</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>切换到Python源代码目录并执行下边的命令进行配置和安装</strong></p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd Python-3.7.6</span><br><span class="line">./configure --prefix=/usr/local/python37 --enable-optimizations</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>修改用户主目录下名为.bash_profile的文件，配置PATH环境变量。</strong></p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">vim .bash_profile</span><br></pre></td></tr></tbody></table></figure> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$PATH:/usr/local/python37/bin</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>激活环境变量</strong></p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source .bash_profile</span><br></pre></td></tr></tbody></table></figure></li></ol></li><li><h4 id="mac安装"><a href="#mac安装" class="headerlink" title="mac安装"></a>mac安装</h4><p> macOS也自带了Python 2.x版本，可以通过<a href="https://www.python.org/">Python的官方网站</a>提供的安装文件（pkg文件）安装Python 3.x的版本。默认安装完成后，可以通过在终端执行<code>python</code>命令来启动2.x版本的Python解释器，启动3.x版本的Python解释器需要执行<code>python3</code>命令。</p></li></ol><h3 id="二、运行python程序"><a href="#二、运行python程序" class="headerlink" title="二、运行python程序"></a>二、运行python程序</h3><ol><li><h4 id="确认Python版本"><a href="#确认Python版本" class="headerlink" title="确认Python版本"></a>确认Python版本</h4><ul><li><p>可以在windows的命令提示符中键入：<code>python --version</code></p></li><li><p>Linux或者MacOS系统在终端输入：<code>python3 --version</code></p></li><li><p>也可以输入python或者这python3进入交互模式:</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="built_in">print</span>(sys.version_info)</span><br><span class="line"><span class="built_in">print</span>(sys.version)</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><h4 id="编写python源代码"><a href="#编写python源代码" class="headerlink" title="编写python源代码"></a>编写python源代码</h4><p> 可以用文本编辑工具（推荐使用<a href="https://www.sublimetext.com/">Sublime</a>、<a href="https://code.visualstudio.com/">Visual Studio Code</a>等高级文本编辑工具）编写Python源代码并用<strong>hello.py</strong>作为文件名保存该文件，代码内容如下所示：</p><p> <strong>注意：在Windows中需要显示文件扩展名。</strong></p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"hello"</span>)</span><br></pre></td></tr></tbody></table></figure><p> python中时候换行符标识语句结束，多个python语句示例：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"hello"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"world"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"this is ths first python project"</span>)</span><br></pre></td></tr></tbody></table></figure><p> <strong>对代码的说明：</strong></p><p> ​print是python内置的函数，用于在终端输出信息，经常用于代码调试，需要牢记。</p></li><li><h4 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h4><p> 在windows的命令行（linux 的终端）切换到<strong>文件所在的文件夹</strong>，执行以下命令：</p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python hello.py</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="代码中的注释"><a href="#代码中的注释" class="headerlink" title="代码中的注释"></a>代码中的注释</h4><p> <strong>注释</strong>是编程语言的一个重要组成部分，用于在源代码中解释代码的作用从而增强程序的可读性和可维护性，当然也可以将源代码中不需要参与运行的代码段通过注释来去掉，这一点在调试程序的时候经常用到。注释在随源代码进入预处理器或编译时会被移除，不会在目标代码中保留也不会影响程序的执行结果。</p><p> python中的注释分为两种：</p><ul><li><p><strong>单行注释</strong>（使用#）</p></li><li><p><strong>多行注释（使用””””””或者’’’’’’）</strong></p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@File: hello.py</span></span><br><span class="line"><span class="string">@Time: 2020/6/6 13:50</span></span><br><span class="line"><span class="string">@user：liuhuan   </span></span><br><span class="line"><span class="string">多行注释</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 单行注释</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"hello"</span>)</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><h4 id="Python开发工具"><a href="#Python开发工具" class="headerlink" title="Python开发工具"></a>Python开发工具</h4><p> 工欲善其事，必先利其器。开发工具在开发展过程中占据着重要的一环。python有自带的idea开发工具，但是在开发大型项目时不太适合。推荐的开发工具有sublime，editplus，pycharm，visual code等，其中pycharm是为python量身打造的开发工具，在开发大型项目时很方便。</p></li><li><h4 id="python之禅"><a href="#python之禅" class="headerlink" title="python之禅"></a>python之禅</h4><p> 在python交互模式中输入：<code>import this</code>查看python之禅</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Beautiful <span class="keyword">is</span> better than ugly.</span><br><span class="line">Explicit <span class="keyword">is</span> better than implicit.</span><br><span class="line">Simple <span class="keyword">is</span> better than <span class="built_in">complex</span>.</span><br><span class="line">Complex <span class="keyword">is</span> better than complicated.</span><br><span class="line">Flat <span class="keyword">is</span> better than nested.</span><br><span class="line">Sparse <span class="keyword">is</span> better than dense.</span><br><span class="line">Readability counts.</span><br><span class="line">Special cases aren<span class="string">'t special enough to break the rules.</span></span><br><span class="line"><span class="string">Although practicality beats purity.</span></span><br><span class="line"><span class="string">Errors should never pass silently.</span></span><br><span class="line"><span class="string">Unless explicitly silenced.</span></span><br><span class="line"><span class="string">In the face of ambiguity, refuse the temptation to guess.</span></span><br><span class="line"><span class="string">There should be one-- and preferably only one --obvious way to do it</span></span><br><span class="line"><span class="string">Although that way may not be obvious at first unless you'</span>re Dutch.</span><br><span class="line">Now <span class="keyword">is</span> better than never.</span><br><span class="line">Although never <span class="keyword">is</span> often better than *right* now.</span><br><span class="line">If the implementation <span class="keyword">is</span> hard to explain, it<span class="string">'s a bad idea.</span></span><br><span class="line"><span class="string">If the implementation is easy to explain, it may be a good idea.</span></span><br><span class="line"><span class="string">Namespaces are one honking great idea -- let'</span>s do more of those!</span><br></pre></td></tr></tbody></table></figure><p> asy to explain, it may be a good idea.<br> Namespaces are one honking great idea – let’s do more of those!</p><pre><code></code></pre></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>flask_mail使用</title>
      <link href="/2022/05/19/treasurebox/python/flask/flask-mail/flask-mail-shi-yong/"/>
      <url>/2022/05/19/treasurebox/python/flask/flask-mail/flask-mail-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="flask-mail"><a href="#flask-mail" class="headerlink" title="flask-mail"></a>flask-mail</h2><p>1、安装</p><p><code>pip install flask-mail</code></p><p>2、配置项</p><table><thead><tr><th>配置</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>MAIL_SERVER</td><td>localhost</td><td>电子邮件服务器的主机名或IP地址</td></tr><tr><td>MAIL_PORT</td><td>25</td><td>电子邮件服务器的端口</td></tr><tr><td>MAIL_USE_TLS</td><td>False</td><td>启用传输层安全(TransportLayer Security,TLS)协议</td></tr><tr><td>MAIL_USE_SSL</td><td>False</td><td>启用安全套接层(Secure SocketsLayer,SSL)协议</td></tr><tr><td>MAIL_USERNAME</td><td>None</td><td>邮件账户的用户名</td></tr><tr><td>MAIL_PASSWORD</td><td>None</td><td>邮件账户的密码</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>4、中间件</title>
      <link href="/2022/05/19/treasurebox/python/django/qi-ta/4-zhong-jian-jian/"/>
      <url>/2022/05/19/treasurebox/python/django/qi-ta/4-zhong-jian-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>中间件是Django请求/响应处理的框架。这是一个轻量级的插件系统，用于全局更改Django的输入或者输出。</p><p>每个中间件组件负责执行某些特定的功能，Django中有一些内置的中间件，可以直接进行使用。<br><strong>自定义中间件文件</strong>：MiddleWareIp.py</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@File: middleware.py</span></span><br><span class="line"><span class="string">@user：liuhuan   </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># process_request 请求开始，视图之前</span></span><br><span class="line"><span class="comment"># process_views 请求开始，视图之中</span></span><br><span class="line"><span class="comment"># process_exception 错误</span></span><br><span class="line"><span class="comment"># process_template_response 视图结束，模板开始渲染</span></span><br><span class="line"><span class="comment"># process_response 响应结束</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse,JsonResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MiddleWareIp</span>(<span class="title class_ inherited__">MiddlewareMixin</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self,request</span>):</span><br><span class="line">        request_ip = request.META[<span class="string">"REMOTE_ADDR"</span>]</span><br><span class="line">        <span class="built_in">print</span>(request_ip)</span><br><span class="line">        <span class="comment"># if request_ip == "127.0.0.1":</span></span><br><span class="line">        <span class="comment">#     return HttpResponse("非法IP")</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_view</span>(<span class="params">self,request,view_func,view_args,view_kwargs</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :param request:             请求</span></span><br><span class="line"><span class="string">        :param view_func:           视图函数</span></span><br><span class="line"><span class="string">        :param view_args:           视图函数需要的参数，元组类型</span></span><br><span class="line"><span class="string">        :param view_kwargs:         视图函数需要的参数，字典类型</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="built_in">print</span>(view_func,view_args,view_kwargs,<span class="number">1111111111</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_exception</span>(<span class="params">self,request,exception</span>):</span><br><span class="line">        <span class="built_in">print</span>(exception)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_template_response</span>(<span class="params">self,request,response</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :param request:         请求</span></span><br><span class="line"><span class="string">        :param response:        响应</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"process_template_response"</span>)</span><br><span class="line">        <span class="built_in">print</span>(response)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_response</span>(<span class="params">self,request,response</span>):</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>在settings添加中间件配置：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"MyApp.middleware.MiddleWareIp"</span><br></pre></td></tr></tbody></table></figure><p>yApp.middleware.MiddleWareIp”</p><pre><code></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1、基础配置</title>
      <link href="/2022/05/19/treasurebox/python/flask/flask-sqlalchemy/1-ji-chu-pei-zhi/"/>
      <url>/2022/05/19/treasurebox/python/flask/flask-sqlalchemy/1-ji-chu-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h4 id="一、基础flask-sqlalchemy示例"><a href="#一、基础flask-sqlalchemy示例" class="headerlink" title="一、基础flask-sqlalchemy示例"></a>一、基础flask-sqlalchemy示例</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">"SQLALCHEMY_DATABASE_URI"</span>] = <span class="string">"sqlite:///OA.sqlite"</span></span><br><span class="line"><span class="comment"># 链接mysql时设置：mysql://username:password@server/db</span></span><br><span class="line">app.config[<span class="string">"SQLALCHEMY_TRACK_MODIFICATIONS"</span>] = <span class="literal">False</span></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(db.Model):</span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    username = db.Column(db.String(<span class="number">80</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    email = db.Column(db.String(<span class="number">120</span>), unique=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,username,email</span>):</span><br><span class="line">        self.username = username</span><br><span class="line">        self.email = email</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User {}"</span>.<span class="built_in">format</span>(self.username)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.username</span><br><span class="line"><span class="comment"># 创建数据表</span></span><br><span class="line"><span class="comment"># db.create_all()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、插入数据</span></span><br><span class="line"><span class="comment"># admin = User("admin","admin@sina.cn")</span></span><br><span class="line"><span class="comment"># user1 = User("user1","user1@sina.cn")</span></span><br><span class="line"><span class="comment"># db.session.add(admin)</span></span><br><span class="line"><span class="comment"># db.session.add(user1)</span></span><br><span class="line"><span class="comment"># db.session.commit()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、查询数据</span></span><br><span class="line"><span class="comment"># user = User.query.all()</span></span><br><span class="line"><span class="comment"># print(user,type(user))</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># admin = User.query.filter_by(username="admin").first()</span></span><br><span class="line"><span class="comment"># print(admin)</span></span><br></pre></td></tr></tbody></table></figure><h4 id="二、主要的配置键"><a href="#二、主要的配置键" class="headerlink" title="二、主要的配置键"></a>二、主要的配置键</h4><table><thead><tr><th align="center">参数</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">SQLALCHEMY_DATABASE_URI</td><td align="center">应该用于连接的数据库URI。例子：sqlite:////tmp/test.db ；mysql://username:password@server/db</td></tr><tr><td align="center">SQLALCHEMY_BINDS</td><td align="center">将绑定键映射到SQLAlchemy连接URI的字典（可绑定多个数据库）</td></tr><tr><td align="center">SQLALCHEMY_ECHO</td><td align="center">如果设置为True， SQLAlchemy将记录所有发给stderr的语句，这对于调试很有用。</td></tr><tr><td align="center">SQLALCHEMY_RECORD_QUERIES</td><td align="center">可用于显式禁用或启用查询记录。查询记录将自动在调试或测试模式下发生</td></tr><tr><td align="center">SQLALCHEMY_TRACK_MODIFICATIONS</td><td align="center">如果设置为<code>True</code>，Flask-SQLAlchemy将跟踪对象的修改并发出信号。默认值为<code>None</code>，它启用跟踪，但发出警告，默认情况下它将在将来禁用。这需要额外的内存，如果不需要，应将其禁用。</td></tr><tr><td align="center">SQLALCHEMY_ENGINE_OPTIONS</td><td align="center">发送给的关键字args字典 create_engine()</td></tr></tbody></table><p>配置多个数据库示例：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SQLALCHEMY_DATABASE_URI = <span class="string">'postgres://localhost/main'</span></span><br><span class="line">SQLALCHEMY_BINDS = {</span><br><span class="line">    <span class="string">'users'</span>:        <span class="string">'mysqldb://localhost/users'</span>,</span><br><span class="line">    <span class="string">'appmeta'</span>:      <span class="string">'sqlite:////path/to/appmeta.db'</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="三、支持的数据库引擎"><a href="#三、支持的数据库引擎" class="headerlink" title="三、支持的数据库引擎"></a>三、支持的数据库引擎</h4><ol><li><p>Postgres</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">postgresql://scott:tiger@localhost/mydatabase</span><br></pre></td></tr></tbody></table></figure></li><li><p>MySQL</p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql://scott:tiger@localhost/mydatabase</span><br></pre></td></tr></tbody></table></figure></li><li><p>Oracle</p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oracle://scott:tiger@127.0.0.1:1521/sidname</span><br></pre></td></tr></tbody></table></figure></li><li><p>SQLite</p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlite:////absolute/path/to/foo.db</span><br></pre></td></tr></tbody></table></figure> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlite:////absolute/path/to/foo.db</span><br></pre></td></tr></tbody></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2、声明模型</title>
      <link href="/2022/05/19/treasurebox/python/flask/flask-sqlalchemy/2-sheng-ming-mo-xing/"/>
      <url>/2022/05/19/treasurebox/python/flask/flask-sqlalchemy/2-sheng-ming-mo-xing/</url>
      
        <content type="html"><![CDATA[<h3 id="一、字段类型"><a href="#一、字段类型" class="headerlink" title="一、字段类型"></a>一、字段类型</h3><p>所有模型的基类都是db.Model，创建的表名会自动进行设置。将大写的表名转化为小写，并将”CamelCase”转换为”Camel_case”，需要改名字时设置类属性:*__tablename*__。</p><p>使用db.Column定义列，常见的字段类型。</p><table><thead><tr><th align="center">类型</th><th>python类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>Integer</code></td><td>int</td><td align="center">一个整数</td></tr><tr><td align="center">String(size)</td><td>str</td><td align="center">最大长度的字符串（在某些数据库中为可选，例如PostgreSQL）</td></tr><tr><td align="center">Text</td><td>str</td><td align="center">一些更长的unicode文本</td></tr><tr><td align="center">DateTime</td><td>datetime.datetime</td><td align="center">日期和时间表示为Python<a href="https://docs.python.org/3/library/datetime.html#datetime.datetime"><code>datetime</code></a>对象。</td></tr><tr><td align="center">Float</td><td>float</td><td align="center">存储浮点值</td></tr><tr><td align="center">Boolean</td><td>bool</td><td align="center">存储一个布尔值</td></tr><tr><td align="center">PickleType</td><td>任何 Python</td><td align="center">存储一个pickled python 对象</td></tr><tr><td align="center">LargeBinary</td><td>str</td><td align="center">存储大的任意二进制数据</td></tr></tbody></table><p>列选项设置</p><table><thead><tr><th>选项名</th><th>说明</th></tr></thead><tbody><tr><td>primary_key</td><td>如果设为True，就是表的主键</td></tr><tr><td>unique</td><td>如果设为True，不允许出现重复的值</td></tr><tr><td>index</td><td>创建索引，提高查询效率</td></tr><tr><td>nullable</td><td>True时允许使用空值</td></tr><tr><td>default</td><td>定义默认值</td></tr></tbody></table><h3 id="二、一对多关系"><a href="#二、一对多关系" class="headerlink" title="二、一对多关系"></a>二、一对多关系</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(db.Model):</span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">50</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    addresses = db.relationship(<span class="string">'Address'</span>, backref=<span class="string">'person'</span>, lazy=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Address</span>(db.Model):</span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    email = db.Column(db.String(<span class="number">120</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    person_id = db.Column(db.Integer, db.ForeignKey(<span class="string">'person.id'</span>),</span><br><span class="line">        nullable=<span class="literal">False</span>)</span><br></pre></td></tr></tbody></table></figure><p>想建立1对1关系时，需要在relationship()中添加<strong>uselist=False</strong>。</p><ol><li>设置nullable=False时说明该字段可以为空。</li><li>backref是在Address类上声明新属性的一种简单方法，可以试用my_address.person来找到该地址对应的人。</li><li>lazy定义SQLALchemy何时从数据库中加载数据。<ul><li>select/True，默认设置，手动设置比不设置会好一点，代表SQLAlchemy使用标准的select语句一次性加载数据。</li><li>joined/False告诉SQLAlchemy使用一条JOIN语句在与腹肌相同的查询中加载关系。</li><li>subquery与joined类似，但joined会使用子查询。</li><li>dynamic是特殊的，SQLAlchemy将返回一个查询对象，可以在加载项目之前进一步优化该对象。</li></ul></li></ol><p>常用 SQLALchemy关系选项</p><table><thead><tr><th>选项名</th><th>说明</th></tr></thead><tbody><tr><td>backref</td><td>在关系的另一个模型中添加反向引用</td></tr><tr><td>primaryjoin</td><td>明确指定两个明星之间使用的联结条件，只在模棱两可的关系中需要指定</td></tr><tr><td>lazy</td><td>指定如何加载相关记录。可选值有 select(首次访问时按需加)、immediate（源对象加载后就加载）、joined（加载记录，但使用联结）、subquery（立即加载，但使用子查询），noload（永不加载）和dynamic（不加载记录，但提供加载记录的查询）</td></tr><tr><td>uselist</td><td>如果设置为False，不适用列表，而使用标量值</td></tr><tr><td>order_by</td><td>指定关系表中记录的排序方式</td></tr><tr><td>secondary</td><td>指定多对多关系中关系表的名字</td></tr><tr><td>secondaryjoin</td><td>SQLalchemy无法自行决定时，指定多对多关系中的二级联结条件。</td></tr></tbody></table><p>��二级联结条件。   |</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>3、增删查</title>
      <link href="/2022/05/19/treasurebox/python/flask/flask-sqlalchemy/3-zeng-shan-cha/"/>
      <url>/2022/05/19/treasurebox/python/flask/flask-sqlalchemy/3-zeng-shan-cha/</url>
      
        <content type="html"><![CDATA[<h2 id="SQLALchemy的CRUD操作"><a href="#SQLALchemy的CRUD操作" class="headerlink" title="SQLALchemy的CRUD操作"></a>SQLALchemy的CRUD操作</h2><h3 id="一、添加"><a href="#一、添加" class="headerlink" title="一、添加"></a>一、添加</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">me = User(<span class="string">"user2"</span>,<span class="string">"user2@example.com"</span>)</span><br><span class="line">db.session.add(me)</span><br><span class="line">db.session.commit()</span><br></pre></td></tr></tbody></table></figure><h3 id="二、删除"><a href="#二、删除" class="headerlink" title="二、删除"></a>二、删除</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除</span></span><br><span class="line">db.session.delete(User.query.filter_by(username=<span class="string">"user2"</span>).first())</span><br><span class="line">db.session.commit()</span><br></pre></td></tr></tbody></table></figure><h3 id="三、查找"><a href="#三、查找" class="headerlink" title="三、查找"></a>三、查找</h3><h4 id="1、查询过滤器"><a href="#1、查询过滤器" class="headerlink" title="1、查询过滤器"></a>1、查询过滤器</h4><table><thead><tr><th>过滤器</th><th>说明</th></tr></thead><tbody><tr><td>filter()</td><td>把过滤器添加到原查询上，返回一个新查询</td></tr><tr><td>filter_by()</td><td>把等值过滤器添加到原查询上，返回一个新查询</td></tr><tr><td>limit()</td><td>使用指定的值限制原查询的结果数量，返回一个新查询</td></tr><tr><td>offset()</td><td>偏移原查询返回的结果，返回一个新查询</td></tr><tr><td>order_by()</td><td>根据指定条件对原查询结果进行排序，返回一个新查询</td></tr><tr><td>group_by()</td><td>根据指定结果对原查询结果进行分组，返回一个新查询</td></tr></tbody></table><h4 id="2、查询执行函数"><a href="#2、查询执行函数" class="headerlink" title="2、查询执行函数"></a>2、查询执行函数</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>all()</td><td>以列表形式返回查询的所有结果</td></tr><tr><td>first()</td><td>返回查询的第一个结果，如果没有结果，则返回None</td></tr><tr><td>first_or_404()</td><td>返回查询的第一个结果。如果没有结果，则终止请求，返回404错误响应</td></tr><tr><td>get()</td><td>返回指定主键对应的行，如果没有对应的行，则返回None</td></tr><tr><td>get_or_404()</td><td>返回指定主键对应的行，如果没找到指定的主键，则终止请求，返回404错误响应</td></tr><tr><td>count()</td><td>返回查询结果的数量</td></tr><tr><td>paginate()</td><td>返回一个Paginate对象，它包含指定范围内的结果</td></tr></tbody></table><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、通过用户名查找用户</span></span><br><span class="line">admin = User.query.filter_by(username=<span class="string">"admin"</span>).first()</span><br><span class="line"><span class="built_in">print</span>(admin.<span class="built_in">id</span>)</span><br><span class="line"><span class="comment"># 不存在时直接为None</span></span><br><span class="line">user2 = User.query.filter_by(username=<span class="string">"user2"</span>).first()</span><br><span class="line"><span class="built_in">print</span>(user2)</span><br><span class="line"><span class="comment"># 更复杂的表达式</span></span><br><span class="line">u1 = User.query.<span class="built_in">filter</span>(User.email.endswith(<span class="string">"@sina.cn"</span>)).<span class="built_in">all</span>()</span><br><span class="line"><span class="built_in">print</span>(u1)</span><br><span class="line"><span class="comment"># 排序</span></span><br><span class="line">u2 = User.query.order_by(User.username).<span class="built_in">all</span>()</span><br><span class="line"><span class="built_in">print</span>(u2)</span><br><span class="line"><span class="comment"># 分页</span></span><br><span class="line">u3 = User.query.limit(<span class="number">1</span>).<span class="built_in">all</span>()</span><br><span class="line"><span class="built_in">print</span>(u3)</span><br><span class="line"><span class="comment"># 通过主键获取数据</span></span><br><span class="line">u4 = User.query.get(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(u4)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>.query.get(1)<br>print(u4)</p><pre><code></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>4、使用flask_migrate管理数据库迁移</title>
      <link href="/2022/05/19/treasurebox/python/flask/flask-sqlalchemy/4-shi-yong-flask-migrate-guan-li-shu-ju-ku-qian-yi/"/>
      <url>/2022/05/19/treasurebox/python/flask/flask-sqlalchemy/4-shi-yong-flask-migrate-guan-li-shu-ju-ku-qian-yi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2、DataTable的使用</title>
      <link href="/2022/05/19/treasurebox/python/django/qi-ta/2-datatable-de-shi-yong/"/>
      <url>/2022/05/19/treasurebox/python/django/qi-ta/2-datatable-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="DataTable的使用"><a href="#DataTable的使用" class="headerlink" title="DataTable的使用"></a>DataTable的使用</h2><p>官网链接：<a href="https://datatables.net/">https://datatables.net/</a></p><p>一、引入</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span> =<span class="string">"https://cdn.datatables.net/1.10.20/css/jquery.dataTables.min.css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.datatables.net/1.10.20/js/jquery.dataTables.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>二、使用</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">      $(<span class="variable language_">document</span>).<span class="title function_">ready</span>( <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">          $(<span class="string">'#table_0'</span>).<span class="title class_">DataTable</span>({   <span class="comment">/*使用id进行绑定*/</span></span><br><span class="line">              <span class="string">"ordering"</span>: <span class="literal">false</span>,  <span class="comment">/*关闭插件自带排序*/</span></span><br><span class="line">              <span class="string">"pageLength"</span>: <span class="number">30</span>,      <span class="comment">/*每页数目*/</span></span><br><span class="line">              <span class="attr">language</span>: {</span><br><span class="line">                  <span class="string">"sProcessing"</span>: <span class="string">"处理中..."</span>,</span><br><span class="line">                  <span class="string">"sLengthMenu"</span>: <span class="string">"显示 _MENU_ 条记录"</span>,</span><br><span class="line">                  <span class="string">"sZeroRecords"</span>: <span class="string">"没有匹配结果"</span>,</span><br><span class="line">                  <span class="string">"sInfo"</span>: <span class="string">"显示第 _START_ 至 _END_ 条记录，共 _TOTAL_ 条提测记录"</span>,</span><br><span class="line">                  <span class="string">"sInfoEmpty"</span>: <span class="string">"显示第 0 至 0 条记录，共 0 条"</span>,</span><br><span class="line">                  <span class="string">"sInfoFiltered"</span>: <span class="string">"(由 _MAX_ 条记录过滤)"</span>,</span><br><span class="line">                  <span class="string">"sInfoPostFix"</span>: <span class="string">""</span>,</span><br><span class="line">                  <span class="string">"sSearch"</span>: <span class="string">"搜索:"</span>,</span><br><span class="line">                  <span class="string">"sUrl"</span>: <span class="string">""</span>,</span><br><span class="line">                  <span class="string">"sEmptyTable"</span>: <span class="string">"表中数据为空"</span>,</span><br><span class="line">                  <span class="string">"sLoadingRecords"</span>: <span class="string">"载入中..."</span>,</span><br><span class="line">                  <span class="string">"sInfoThousands"</span>: <span class="string">","</span>,</span><br><span class="line">                  <span class="string">"oPaginate"</span>: {</span><br><span class="line">                      <span class="string">"sFirst"</span>: <span class="string">"首页"</span>,</span><br><span class="line">                      <span class="string">"sPrevious"</span>: <span class="string">"&lt;"</span>,</span><br><span class="line">                      <span class="string">"sNext"</span>: <span class="string">"&gt;"</span>,</span><br><span class="line">                      <span class="string">"sLast"</span>: <span class="string">"末页"</span></span><br><span class="line">                   },</span><br><span class="line">                  <span class="string">"oAria"</span>: {</span><br><span class="line">                      <span class="string">"sSortAscending"</span>: <span class="string">": 以升序排列此列"</span>,</span><br><span class="line">                      <span class="string">"sSortDescending"</span>: <span class="string">": 以降序排列此列"</span></span><br><span class="line">                  }</span><br><span class="line">              }</span><br><span class="line">           });</span><br><span class="line">       });</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><blockquote></blockquote><pre><code></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1、Paginator</title>
      <link href="/2022/05/19/treasurebox/python/django/qi-ta/1-paginator/"/>
      <url>/2022/05/19/treasurebox/python/django/qi-ta/1-paginator/</url>
      
        <content type="html"><![CDATA[<h3 id="Django自带的分页方法"><a href="#Django自带的分页方法" class="headerlink" title="Django自带的分页方法"></a>Django自带的分页方法</h3><p>1、引入</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator,PageNotAnInteger,EmptyPage</span><br></pre></td></tr></tbody></table></figure><p>2、使用</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">p = Paginator(new_list,<span class="number">1</span>)<span class="comment">#news_list代表所有的数据,1代表每页的条数</span></span><br><span class="line">number = p.num_pages<span class="comment">#总的页码数</span></span><br><span class="line">page_range = p.page_range  <span class="comment">#所有页码的迭代器</span></span><br><span class="line">new_list.has_previous()<span class="comment">#是否有上一条数据</span></span><br><span class="line">new_list.has_next()<span class="comment">#是否有下一条数据</span></span><br><span class="line">new_list.previous_page_number()<span class="comment">#上一页的页码</span></span><br><span class="line">new_list.next_page_number()<span class="comment">#下一页的页码</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>3、示例</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> News</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">news</span>(<span class="params">request</span>):</span><br><span class="line">    news_list = News.objects.order_by(<span class="string">'id'</span>)</span><br><span class="line">    p = Paginator(news_list,<span class="number">1</span>)</span><br><span class="line">    number = p.num_pages  <span class="comment">#页码的总数</span></span><br><span class="line">    page_range = p.page_range</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        page = <span class="built_in">int</span>(request.GET.get(<span class="string">'page'</span>, <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        page = <span class="number">1</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = p.page(page)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">raise</span> Http404</span><br><span class="line">    page = <span class="built_in">int</span>(page)</span><br><span class="line">    <span class="keyword">if</span> page &lt; <span class="number">4</span>:   <span class="comment">#一次只返回四个页码</span></span><br><span class="line">        page_list = page_range[:<span class="number">4</span>]</span><br><span class="line">    <span class="keyword">elif</span> page + <span class="number">4</span> &gt; number:</span><br><span class="line">        page_list = page_range[-<span class="number">4</span>:]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        page_list = page_range[page - <span class="number">2</span>:page + <span class="number">2</span>]</span><br><span class="line">    <span class="built_in">print</span>(p.count)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'changed/news.html'</span>,{<span class="string">"news"</span>:news,<span class="string">"new_list"</span>:data,<span class="string">"page_range"</span>:page_list})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>在前端中使用：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> {% if new_list.has_previous %}</span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"?page={{ new_list.previous_page_number }}"</span> <span class="attr">class</span>=<span class="string">"pag-item"</span>&gt;</span><span class="symbol">&amp;lt;</span><span class="symbol">&amp;lt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> {% endif %}</span><br><span class="line">{% for page in page_range %}</span><br><span class="line">     {% if page == request.GET.page|add:0 %}</span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"?page={{ page }}"</span> <span class="attr">class</span>=<span class="string">"pag-item pag-active"</span> &gt;</span>{{ page }}<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     {% else %}</span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"?page={{ page }}"</span> <span class="attr">class</span>=<span class="string">"pag-item"</span> &gt;</span>{{ page }}<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      {% endif %}</span><br><span class="line">{% endfor %}</span><br><span class="line">       {% if new_list.has_next %}</span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"?page={{ new_list.next_page_number }}"</span> <span class="attr">class</span>=<span class="string">"pag-item"</span>&gt;</span><span class="symbol">&amp;gt;</span><span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       {% endif %}</span><br></pre></td></tr></tbody></table></figure><p>4、自定义分页器方法</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">set_page</span>(<span class="params">data,num,page</span>):</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :param data: 所有的数据</span></span><br><span class="line"><span class="string">    :param num:  每页的数据个数</span></span><br><span class="line"><span class="string">    :param page: 当前的页码</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    p = Paginator(data,num)</span><br><span class="line">    number = p.num_pages</span><br><span class="line">    page_range = p.page_range</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        page = <span class="built_in">int</span>(page)</span><br><span class="line">        data = p.page(page)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        data = p.page(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> page &lt; <span class="number">5</span>:  <span class="comment"># 一次只返回5个页码</span></span><br><span class="line">        page_list = page_range[:<span class="number">5</span>]</span><br><span class="line">    <span class="keyword">elif</span> page + <span class="number">4</span> &gt; number:</span><br><span class="line">        page_list = page_range[-<span class="number">5</span>:]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        page_list = page_range[page - <span class="number">3</span>:page + <span class="number">2</span>]</span><br><span class="line">    <span class="keyword">return</span> data,page_list</span><br></pre></td></tr></tbody></table></figure><p>page_range[page - 3:page + 2]<br>    return data,page_list</p><pre><code></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>3、免除csrf校验</title>
      <link href="/2022/05/19/treasurebox/python/django/qi-ta/3-mian-chu-csrf-xiao-yan/"/>
      <url>/2022/05/19/treasurebox/python/django/qi-ta/3-mian-chu-csrf-xiao-yan/</url>
      
        <content type="html"><![CDATA[<h3 id="一、函数免除csrf校验"><a href="#一、函数免除csrf校验" class="headerlink" title="一、函数免除csrf校验"></a>一、函数免除csrf校验</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt<span class="comment"># 免除csrf校验@csrf_exempt</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">users</span>(<span class="params">request</span>):    </span><br><span class="line">uses_list = [<span class="string">"柚子"</span>, <span class="string">"西瓜"</span>]    </span><br><span class="line"><span class="keyword">return</span> HttpResponse(json.dumps(uses_list))</span><br></pre></td></tr></tbody></table></figure><h3 id="二、对类免除csrf校验"><a href="#二、对类免除csrf校验" class="headerlink" title="二、对类免除csrf校验"></a>二、对类免除csrf校验</h3><ol><li><h4 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h4> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dispatch是类视图的根方法，通过dispatch进行反射找到其他请求</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt</span><br><span class="line"><span class="keyword">from</span> django.utils.decorators <span class="keyword">import</span> method_decorator</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StudentsView</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line">    <span class="string">"""student view"""</span></span><br><span class="line"><span class="meta">@method_decorator(<span class="params">csrf_exempt</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"before"</span>)</span><br><span class="line">        ret = <span class="built_in">super</span>(StudentsView, self).dispatch(request, *args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"after"</span>)</span><br><span class="line">        <span class="keyword">return</span> ret(request, *args, **kwargs)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"get"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self,*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"post"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self,*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"put"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self,*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"delete"</span>)</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h4> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt</span><br><span class="line"><span class="keyword">from</span> django.utils.decorators <span class="keyword">import</span> method_decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@method_decorator(<span class="params">csrf_exempt,name=<span class="string">"dispatch"</span></span>)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StudentsView</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line">    <span class="string">"""student view"""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"get"</span>)</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="第三种方式"><a href="#第三种方式" class="headerlink" title="第三种方式"></a>第三种方式</h4> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyBaseView</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"><span class="meta">    @csrf_exempt</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"before"</span>)</span><br><span class="line">        ret = <span class="built_in">super</span>(MyBaseView, self).dispatch(request, *args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"after"</span>)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="第四种，在url中添加"><a href="#第四种，在url中添加" class="headerlink" title="第四种，在url中添加"></a>第四种，在url中添加</h4> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'teachers/'</span>, csrf_exempt(TeachersView.as_view()), name=<span class="string">"teachers"</span>),</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure></li></ol><p>), name=”teachers”),<br>    ]<br>    ```</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>会话介绍</title>
      <link href="/2022/05/19/treasurebox/python/django/7.hui-hua-ji-zhu/1.hui-hua-jie-shao/"/>
      <url>/2022/05/19/treasurebox/python/django/7.hui-hua-ji-zhu/1.hui-hua-jie-shao/</url>
      
        <content type="html"><![CDATA[<h2 id="会话介绍"><a href="#会话介绍" class="headerlink" title="会话介绍"></a>会话介绍</h2><p>Django支持匿名会话。绘画框架支持给予每个站点的访问者存储和检索任意数据，在服务器端存储数据并提供cookie的发送和接受。cookie包含会话id——而不是数据本身。</p><h3 id="打开会话"><a href="#打开会话" class="headerlink" title="打开会话"></a>打开会话</h3><p>会话通过配置中间价实现，为了打开会话需要做以下操作：</p><p>编辑设置中的MIDDLEWARE，并确保包含了:<em>‘django.contrib.sessions.middleware.SessionMiddleware’</em></p><p>通过django-admin startproject创建的项目默认在settings.py中已经打开了SessionMiddleware这项设置。</p><p>如果不想使用会话功能时，可以从配置文件中删除”SessionMiddlware”,并且从INSTALLED_APPS中删除”django.contrib.sessions”。</p><h2 id="配置会话引擎"><a href="#配置会话引擎" class="headerlink" title="配置会话引擎"></a>配置会话引擎</h2><p>默认情况下，Django（使用模型<code>django.contrib.sessions.models.Session</code>）将会话存储在数据库中 。尽管这很方便，但是在某些设置中，将会话数据存储在其他位置更快，因此可以将Django配置为在文件系统或缓存中存储会话数据。</p><h3 id="使用数据库支持的会话"><a href="#使用数据库支持的会话" class="headerlink" title="使用数据库支持的会话"></a>使用数据库支持的会话</h3><p>如果要使用数据库支持的会话，则需要添加 <code>'django.contrib.sessions'</code>到<a href="https://docs.djangoproject.com/zh-hans/2.1/ref/settings/#std:setting-INSTALLED_APPS"><code>INSTALLED_APPS</code></a>设置中。</p><p>配置 完安装后，运行以安装存储会话数据的单个数据库表。<code>python manage.py migrate</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>cookie和session</title>
      <link href="/2022/05/19/treasurebox/python/django/7.hui-hua-ji-zhu/2.cookie-he-session/"/>
      <url>/2022/05/19/treasurebox/python/django/7.hui-hua-ji-zhu/2.cookie-he-session/</url>
      
        <content type="html"><![CDATA[<h2 id="Cookie和session"><a href="#Cookie和session" class="headerlink" title="Cookie和session"></a>Cookie和session</h2><h3 id="1、Cookie"><a href="#1、Cookie" class="headerlink" title="1、Cookie"></a>1、Cookie</h3><p>​cookie是服务器在本地机器上存储的小段文本并随每一个请求发送至同一服务器。Cookies保存在客户端，主要内容包括：名字，值，过期时间，路径等。</p><img src="image/1574344237231.png"><ol><li><p>设置cookie：</p><p> HttpResponse.set_cookie(key, value=’’, max_age=None, expires=None, path=’/‘, domain=None, secure=None, httponly=False)<br> 参数：<br> <strong>key</strong>：    cookie的名称。<br> <strong>value</strong>:   cookie的值,默认是空字符。<br> <strong>max_age</strong>：cookies的持续有效时间（以秒计），如果设置为 None，cookies 在浏览器关闭的时候就失效了。<br> <strong>expires</strong>：cookies的过期时间，格式:”Wdy, DD-Mth-YY HH:MM:SS GMT” 如果设置这个参数，它将覆盖max_age。<br> <strong>path</strong>:    cookie生效的路径前缀，浏览器只会把cookie回传给带有该路径的页面，这样你可以避免将cookie传给 站点中的其他的应用。/ 表示根路径，特殊的：根路径的cookie可以被任何url的页面访问<br> <strong>domain</strong>:   cookie生效的站点。你可用这个参数来构造一个跨站cookie。如， domain=”.example.com” 所构造的。</p></li><li><p>获取cookie</p><p> HttpRequest.COOKIES.get(key)<br> #获取加“盐”的cookie<br> HttpRequest.get_signed_cookie(key, default=RAISE_ERROR, salt=’’, max_age=None)</p></li><li><p>删除cookie</p><p> HttpResponse.delete_cookie(key, path=’/‘, domain=None)</p></li></ol><h3 id="2、会话cookie和持久cookie的区别"><a href="#2、会话cookie和持久cookie的区别" class="headerlink" title="2、会话cookie和持久cookie的区别"></a>2、会话cookie和持久cookie的区别</h3><p>会话cookie：不设置过期时间，只要关闭浏览器窗口cookie就消失。会话cookie不保存在硬盘上，保存在内存里。</p><p>持久cookie：设置过期时间，浏览器就会把cookie保存在硬盘上，关闭后再次打开浏览器，这些cookie依然有效直到超过设定的过期时间。存储在硬盘上的cookie可以在不同的浏览器进程间共享。而对于保存在内存中的cookie，不同的浏览器有不同的处理方式。</p><p>利用持久的Cookie自动登录：当用户在某个网站注册后，就会收到一个唯一用户ID的cookie。客户重新连接时，用户ID会自动返回，服务器对它进行检查，确定它是否为注册用户且选择了自动登录，从而使用户无需给出明确的用户名和密码，就可以访问服务器上的资源。</p><h3 id="3、session定义"><a href="#3、session定义" class="headerlink" title="3、session定义"></a>3、session定义</h3><p>session是在服务器端保存的用户数据。浏览器第一次发送请求时，服务器自动生成了Session ID来唯一标识这个，并将其通过响应发送到浏览器。浏览器第二次发送请求会将前一次服务器响应中的Session ID放在请求中并发到服务器上，服务器从请求中提取出Session ID，并和保存的所有session ID会进行对比，找到这个用户的信息。一般这个session ID会有个时间限制，默认超过30分钟时毁掉Session ID。</p><p>session和cookie有一定的关系，session id存在cookie中，每次访问时候将session id传到服务器进行对比。</p><p>设置session：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.session[<span class="string">'manager_name'</span>] = username</span><br><span class="line">request.session[<span class="string">'manager_id'</span>] = m[<span class="number">0</span>].<span class="built_in">id</span></span><br></pre></td></tr></tbody></table></figure><p>获取session：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(request.session[<span class="string">'manager_name'</span>])</span><br><span class="line"><span class="built_in">print</span>(request.session[<span class="string">'manager_id'</span>])</span><br></pre></td></tr></tbody></table></figure><p>删除session：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.session.clear()  <span class="comment">#清空</span></span><br><span class="line"><span class="keyword">del</span> request.session[<span class="string">'manager_name'</span>]</span><br></pre></td></tr></tbody></table></figure><h3 id="4、cookie和session的区别和联系"><a href="#4、cookie和session的区别和联系" class="headerlink" title="4、cookie和session的区别和联系"></a>4、cookie和session的区别和联系</h3><p>区别</p><ul><li>session将数据存储与服务器端 cookie存储在客户端</li><li>cookie 存储在客户端，不安全，sess存储在服务器端，客户端只存sesseionid,安全</li><li>cookie在客户端存储值有大小的限制，大约几kb。session没有限制</li></ul><p>联系</p><ul><li>session基于cookie限制</li></ul><p>联系</p><ul><li>session基于cookie</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>3</title>
      <link href="/2022/05/19/treasurebox/python/django/7.hui-hua-ji-zhu/3/"/>
      <url>/2022/05/19/treasurebox/python/django/7.hui-hua-ji-zhu/3/</url>
      
        <content type="html"><![CDATA[<h2 id="在视图中使用会话"><a href="#在视图中使用会话" class="headerlink" title="在视图中使用会话"></a>在视图中使用会话</h2><p>当<code>SessionMiddleware</code>被激活时，每个<a href="https://docs.djangoproject.com/zh-hans/2.1/ref/request-response/#django.http.HttpRequest"><code>HttpRequest</code></a> 对象-的第一个参数的任何Django的视图函数-将有一个 <code>session</code>属性，它是一个类似于字典的对象。</p><p>可以使用<code>request.session</code>在视图中的任何位置阅读和写入。并且可以对其进行多次编辑。</p><p><em>类</em><code>backends.base.``SessionBase</code><a href="https://docs.djangoproject.com/zh-hans/2.1/topics/http/sessions/#django.contrib.sessions.backends.base.SessionBase">¶</a>是所有会话对象的基类。它具有以下标准词典方法：</p><ol><li><h4 id="getitem-（键）"><a href="#getitem-（键）" class="headerlink" title="__getitem__（键）"></a><code>__getitem__</code>（<em>键</em>）</h4><p> 例： <code>fav_color = request.session['fav_color']</code></p></li><li><h4 id="setitem-（key，value）"><a href="#setitem-（key，value）" class="headerlink" title="__setitem__（key，value）"></a><code>__setitem__</code>（<em>key</em>，<em>value</em>）</h4><p> 例： <code>request.session['fav_color'] = 'blue'</code></p></li><li><h4 id="delitem-key"><a href="#delitem-key" class="headerlink" title="__delitem__(key)"></a><code>__delitem__</code>(<em>key</em>)</h4><p> 例： <code>del request.session['fav_color']</code></p><p> 如果该key不存在时，会抛出一个KeyError异常。</p></li><li><h4 id="contains-key"><a href="#contains-key" class="headerlink" title="__contains__(key)"></a><code>__contains__</code>(<em>key</em>)</h4><p> 例: <code>'fav_color' in request.session</code></p></li><li><h4 id="get-key-default-x3D-None"><a href="#get-key-default-x3D-None" class="headerlink" title="get(key, default=None)"></a><code>get</code>(<em>key</em>, <em>default=None</em>)</h4><p> 例: <code>fav_color = request.session.get('fav_color','red')</code></p></li><li><h4 id="pop-key-default-x3D-not-given"><a href="#pop-key-default-x3D-not-given" class="headerlink" title="pop(key, default=__not_given)"></a><code>pop</code>(<em>key</em>, <em>default=__not_given</em>)</h4><p> 例: <code>fav_color = request.session.pop('fav_color','blue')</code></p></li><li><h4 id="keys"><a href="#keys" class="headerlink" title="keys()"></a>keys()</h4><p> 获取所有的key。</p></li><li><h4 id="items"><a href="#items" class="headerlink" title="items()"></a>items()</h4><p> 获取所有的数据。</p></li><li><h4 id="setdefault"><a href="#setdefault" class="headerlink" title="setdefault()"></a>setdefault()</h4></li><li><h4 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h4></li><li><h4 id="flush"><a href="#flush" class="headerlink" title="flush()"></a>flush()</h4><p> 从会话中删除当前会话数据并删除会话cookie和数据表中的session。如果要确保用户不能再次从浏览器访问先前的会话数据，则使用此 方法。</p></li></ol><p>则使用此 方法。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>项目流程</title>
      <link href="/2022/05/19/treasurebox/python/django/6.django-xiang-mu-liu-cheng/1.xiang-mu-liu-cheng/"/>
      <url>/2022/05/19/treasurebox/python/django/6.django-xiang-mu-liu-cheng/1.xiang-mu-liu-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="项目流程"><a href="#项目流程" class="headerlink" title="项目流程"></a>项目流程</h2><p>python当使用pip安装失败时，可以直接使用轮子进行安装：<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/%EF%BC%8C%E4%B8%8B%E8%BD%BD%E5%AF%B9%E5%BA%94%E7%89%88%E6%9C%AC%E7%9A%84%E8%BD%AE%E5%AD%90%EF%BC%8C%E7%84%B6%E5%90%8E%E4%BD%BF%E7%94%A8pip">https://www.lfd.uci.edu/~gohlke/pythonlibs/，下载对应版本的轮子，然后使用pip</a> install去安装：</p><img src="image/1573959954875.png"><h4 id="1、需求分析"><a href="#1、需求分析" class="headerlink" title="1、需求分析"></a>1、需求分析</h4><p>定义项目需求，根据不同的用户群体划分不同的app：</p><p><strong>商家用户</strong>：</p><ol><li><p>开店（md5加密密码）——&gt;注册用户，个人信息管理，重置密码(邮箱校验，ajax异步通信技术)。</p></li><li><p>登录、退出操作（只删除该用户模式的session和cookie信息）。</p></li><li><p>商品管理：</p><p> ​(1) 添加商品：Bootstrap,table,form</p><p> ​(2) 商品数据展示：<a href="https://datatables.net/%E3%80%82">https://datatables.net/。</a></p><p> ​(3) 修改商品 ：数量、价格、上架、下架</p><p> ​(4) 订单管理：发货操作</p></li></ol><p><strong>买家用户</strong>：</p><p>​1、注册、登录</p><p>​2、浏览商品、添加购物车、购买、收货、添加收货地址</p><p><strong>商品模块</strong>：</p><p>​展示商品：index，list，detail</p><p><strong>管理平台</strong>：</p><p>​1、管理商品类别</p><p>​2、监督交易进展。</p><p>​3、审核用户信息。</p><h3 id="创建项目流程"><a href="#创建项目流程" class="headerlink" title="创建项目流程"></a>创建项目流程</h3><h4 id="1、创建完整的项目架构："><a href="#1、创建完整的项目架构：" class="headerlink" title="1、创建完整的项目架构："></a>1、创建完整的项目架构：</h4><img src="./image/1573957533755.png"><h4 id="2、修改settings-py设置"><a href="#2、修改settings-py设置" class="headerlink" title="2、修改settings.py设置:"></a>2、修改settings.py设置:</h4><ol><li><p>注册app:</p> <img src="./image/1573958354852.png"></li><li><p>配置模板文件路径</p> <img src="./image/1573958456663.png"></li><li><p>配置数据库</p> <img src="image/1573958630341.png"> <img src="image/1573958848572.png"></li><li><p>修改语言和时区</p> <img src="image/1578116571583.png"></li><li><p>配置静态文件的存放路径</p> <img src="image/1573959400145.png"></li><li><p>设置用户上传文件路径</p> <img src="image/wps1.jpg"></li></ol><h4 id="3、配置子路由："><a href="#3、配置子路由：" class="headerlink" title="3、配置子路由："></a>3、配置子路由：</h4><p>在子apps.py中设置：</p><img src="image/1573960725613.png"><p>在根urls中引入：</p><p><img src="/image/1573962954591.png" alt="1573962954591"></p><p>根urls中引入：</p><p><img src="/image/1573962954591.png" alt="1573962954591"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>报错信息处理</title>
      <link href="/2022/05/19/treasurebox/python/django/6.django-xiang-mu-liu-cheng/2.bao-cuo-xin-xi-chu-li/"/>
      <url>/2022/05/19/treasurebox/python/django/6.django-xiang-mu-liu-cheng/2.bao-cuo-xin-xi-chu-li/</url>
      
        <content type="html"><![CDATA[<h2 id="报错信息处理："><a href="#报错信息处理：" class="headerlink" title="报错信息处理："></a>报错信息处理：</h2><h4 id="1、连接mysql数据库报错时："><a href="#1、连接mysql数据库报错时：" class="headerlink" title="1、连接mysql数据库报错时："></a>1、连接mysql数据库报错时：</h4><img src="image/1573959559298.png"><p>安装对应版的mysqlclient:</p><img src="image/1573960031823.png"><h4 id="2、访问路径报错："><a href="#2、访问路径报错：" class="headerlink" title="2、访问路径报错："></a>2、访问路径报错：</h4><img src="image/1573962074737.png"><p>只能访问定义过的路径：</p><img src="image/1573962095247.png"><h4 id="3、模板文件找不到："><a href="#3、模板文件找不到：" class="headerlink" title="3、模板文件找不到："></a>3、模板文件找不到：</h4><img src="image/1573962111718.png"><p><strong>解决办法：</strong></p><p>1、查看settings.py中的配置文件对不对。</p><p>2、查看templates中有没有当前页面。</p><h4 id="4、静态文件找不到："><a href="#4、静态文件找不到：" class="headerlink" title="4、静态文件找不到："></a><strong>4、静态文件找不到：</strong></h4><img src="image/1573962271624.png"><p><strong>解决办法：</strong></p><p>1、查看settings.py中的配置。</p><p>2、查看在static文件夹是否有静态文件。</p><p>3、前端中的路径是否正确。</p><p>4、清理浏览器缓存。</p><h4 id="5、路径不合法："><a href="#5、路径不合法：" class="headerlink" title="5、路径不合法："></a>5、路径不合法：</h4><p><img src="/image/1575094054236.png" alt="1575094054236"></p><h4 id="6、路径不能重复："><a href="#6、路径不能重复：" class="headerlink" title="6、路径不能重复："></a>6、路径不能重复：</h4><p>执行静态收集时：</p><p>python manage.py collectstatic</p><p><img src="/image/1575094136270.png" alt="1575094136270"></p><p><strong>解决方法：先把MEDIA_ROOT暂时注释掉，收集完静态之后再打开。</strong></p><p><img src="/image/1575094199135.png" alt="1575094199135"></p><p><img src="/image/1575094344345.png" alt="1575094344345"></p><p><strong>静态收集成功：</strong></p><p><img src="/image/1575094380340.png" alt="1575094380340"></p><p><strong>静态文件收集之后，将STATIC_ROOT路径注释掉：</strong></p><p><img src="/image/1575094549829.png" alt="1575094549829"></p><h4 id="7、数据插入时常犯的错误："><a href="#7、数据插入时常犯的错误：" class="headerlink" title="7、数据插入时常犯的错误："></a>7、数据插入时常犯的错误：</h4><p>1、数据不能为null：</p><p><img src="/image/1575101964507.png" alt="1575101964507"></p><p>原因：前端中的name属性和后端不匹配。</p><p>html文件中：</p><p><img src="/image/1575102682104.png" alt="1575102682104"></p><p>python文件中：</p><p><img src="/image/1575102736928.png" alt="1575102736928"></p><p><strong>解决方法：修改前端或后端的name值。</strong></p><p>2、类型错误</p><img src="image/1575101235032.png"><p><strong>原因：在float字段中插入了字符串。</strong></p><p><strong>修改：将前端的数据设为必填并且为number类型。</strong></p><p>3、外键关联字段错误：</p><p><img src="/image/1575102074416.png" alt="1575102074416"></p><p><strong>原因：子表中外间关联的字段数据为0。</strong></p><p><strong>解决：外键关联的数据必须填值并且为大于0的整数。</strong></p><p><img src="/image/1575105333461.png" alt="1575105333461"></p><p>原因：</p><p><img src="/image/1575105428417.png" alt="1575105428417"></p><p>解决方法：</p><p><img src="/image/1575105597032.png" alt="1575105597032">428417.png)</p><p>解决方法：</p><p><img src="/image/1575105597032.png" alt="1575105597032"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>注册和动作</title>
      <link href="/2022/05/19/treasurebox/python/django/5.django-zhan-dian-guan-li/1.zhu-ce-he-dong-zuo/"/>
      <url>/2022/05/19/treasurebox/python/django/5.django-zhan-dian-guan-li/1.zhu-ce-he-dong-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="Django站点管理"><a href="#Django站点管理" class="headerlink" title="Django站点管理"></a>Django站点管理</h2><p>Django最强大的部分之一是自动管理界面。它从模型中读取元数据，以提供一个快速的、以模型为中心的界面，受信任的用户可以在其中管理网站上的内容。管理员的建议用法仅限于组织的内部管理工具。</p><p>管理员有许多用于自定义的钩子，但是要当心使用这些专门的钩子。如果需要提供一个更加以流程为中心的接口，以抽象出数据库表和字段的实现细节，那么可能需要编写自己的视图了。</p><p>要使用Django站点管理时，需要首先进行数据迁移：</p><p>python manage.py migrate</p><p>站点名称设置：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">admin.site.site_header=<span class="string">'贵族时代管理后台'</span></span><br><span class="line">admin.site.site_title=<span class="string">'贵族时代管理后台'</span></span><br></pre></td></tr></tbody></table></figure><h3 id="一、创建用户"><a href="#一、创建用户" class="headerlink" title="一、创建用户"></a>一、创建用户</h3><p>创建用户命令使用：</p><p>python   manage.py    createsuperuser</p><p>登录站点时必须保证is_superuser或者is_staff设置为True。</p><p>django自带表的引入方式：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span>  django.contrib.auth.models <span class="keyword">import</span> User,Group,Permission</span><br><span class="line"><span class="keyword">from</span> django.contrib.admin.models <span class="keyword">import</span> LogEntry <span class="comment">#对应数据库admin_log</span></span><br><span class="line"><span class="keyword">from</span> django.contrib.admin.models <span class="keyword">import</span> ContentType <span class="comment">#对应数据库ContentType</span></span><br></pre></td></tr></tbody></table></figure><p><strong>django自带auth_user表的操作：</strong></p><ol><li><h4 id="创建用户，在views-py中引入："><a href="#创建用户，在views-py中引入：" class="headerlink" title="创建用户，在views.py中引入："></a>创建用户，在views.py中引入：</h4> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib  <span class="keyword">import</span>  auth <span class="comment">#引入auth模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User <span class="comment"># auth应用中引入User类</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">    user_obj = request.POST</span><br><span class="line">    <span class="built_in">print</span>(user_obj)</span><br><span class="line">    username = user_obj.get(<span class="string">'name'</span>)</span><br><span class="line">    password = user_obj.get(<span class="string">'password'</span>)</span><br><span class="line">      user = User.objects.create_user(username=username, password=password,)</span><br><span class="line">user.save()</span><br><span class="line">     <span class="keyword">return</span> HttpResponse(<span class="string">"注册成功"</span>)</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> login <span class="keyword">as</span> Auth_Login,authenticate,logout <span class="keyword">as</span> Auth_Logout</span><br><span class="line">user = authenticate(username=<span class="string">"username"</span>, password=<span class="string">'password'</span>)</span><br><span class="line">Auth_Login(request, user)</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h4> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Auth_Logout(request)</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="二、添加模型的方法"><a href="#二、添加模型的方法" class="headerlink" title="二、添加模型的方法"></a>二、添加模型的方法</h3><p>添加模型的方法有两种，通常，这些文件存储在<code>admin.py</code>应用程序中命名的文件中。：</p><ol><li><h4 id="admin-site-register"><a href="#admin-site-register" class="headerlink" title="admin.site.register()"></a>admin.site.register()</h4> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> myproject.myapp.models <span class="keyword">import</span> Author</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuthorAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">admin.site.register(Author, AuthorAdmin)</span><br></pre></td></tr></tbody></table></figure><p> 如果只是注册一个简单的admin，则不需要定义admin类，可以直接进行注册：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> myproject.myapp.models <span class="keyword">import</span> Author</span><br><span class="line"></span><br><span class="line">admin.site.register(Author)</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="使用装饰器：-admin-register"><a href="#使用装饰器：-admin-register" class="headerlink" title="使用装饰器：@admin.register()"></a>使用装饰器：@admin.register()</h4> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Author</span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.register(<span class="params">Author</span>)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuthorAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="三、在admin中添加”动作“"><a href="#三、在admin中添加”动作“" class="headerlink" title="三、在admin中添加”动作“"></a>三、在admin中添加”动作“</h3><p>Django管理员的基本工作流程是“选择一个对象，然后更改它”。这对于大多数用例都适用。但是，如果需要一次对多个对象进行相同的更改，则此工作流程可能非常繁琐。此时可以编写和注册”动作”函数，通过这些函数再更改列表页面上的选择对象时进行调用。</p><p>示例：为模型增加批量修改状态功能。</p><p>动作函数需要添加三个参数：</p><ul><li>当前<strong>ModelAdmin</strong></li><li>一个<strong>HttpRequest</strong>表示当前请求，</li><li>甲<strong>QuerySet</strong>含有该组用户所选择的对象。</li></ul><p>第一种方法：在ModelAdmin类外部定义动作函数。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> myapp.models <span class="keyword">import</span> Article</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_published</span>(<span class="params">modeladmin, request, queryset</span>):</span><br><span class="line">    queryset.update(status=<span class="string">'p'</span>)</span><br><span class="line">make_published.short_description = <span class="string">"批量更新状态"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArticleAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    list_display = [<span class="string">'title'</span>, <span class="string">'status'</span>]</span><br><span class="line">    ordering = [<span class="string">'title'</span>]</span><br><span class="line">    actions = [make_published]</span><br><span class="line"></span><br><span class="line">admin.site.register(Article, ArticleAdmin)</span><br></pre></td></tr></tbody></table></figure><p>第二种方法：将动作挂钩给ArticleAdmin对象本身。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ArticleAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    actions = [<span class="string">'make_published'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_published</span>(<span class="params">self, request, queryset</span>):</span><br><span class="line">        queryset.update(status=<span class="string">'p'</span>)</span><br><span class="line">    make_published.short_description = <span class="string">"Mark selected stories as published"</span></span><br></pre></td></tr></tbody></table></figure><p>可以使用提示的方法告诉用户操作成功：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ArticleAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_published</span>(<span class="params">self, request, queryset</span>):</span><br><span class="line">        rows_updated = queryset.update(status=<span class="string">'p'</span>)</span><br><span class="line">        <span class="keyword">if</span> rows_updated == <span class="number">1</span>:</span><br><span class="line">            message_bit = <span class="string">"1 story was"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            message_bit = <span class="string">"%s stories were"</span> % rows_updated</span><br><span class="line">        self.message_user(request, <span class="string">"%s successfully marked as published."</span> % message_bit)</span><br></pre></td></tr></tbody></table></figure><p>还可以在动作执行之后进行HttpResponse或者路由的重定向。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.contrib.contenttypes.models <span class="keyword">import</span> ContentType</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">export_selected_objects</span>(<span class="params">modeladmin, request, queryset</span>):</span><br><span class="line">    selected = request.POST.getlist(admin.ACTION_CHECKBOX_NAME)</span><br><span class="line">    ct = ContentType.objects.get_for_model(queryset.model)</span><br><span class="line">    <span class="keyword">return</span> HttpResponseRedirect(<span class="string">"/export/?ct=%s&amp;ids=%s"</span> % (ct.pk, <span class="string">","</span>.join(selected)))</span><br></pre></td></tr></tbody></table></figure><p><strong>在整个站点范围内设置”动作“：</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line">admin.site.add_action(export_selected_objects)</span><br></pre></td></tr></tbody></table></figure><p><strong>禁止动作：</strong></p><p>例如：禁止使用”删除所选对象“操作：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin.site.disable_action(<span class="string">'delete_selected'</span>)</span><br></pre></td></tr></tbody></table></figure><p>如果想在某个admin中重新启用某个动作，则只需在actions列表中列出即可：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 禁止全局的"删除所选对象"操作</span></span><br><span class="line">admin.site.disable_action(<span class="string">'delete_selected'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 该amdin不包含"删除所选对象"操作</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SomeModelAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    actions = [<span class="string">'some_other_action'</span>]</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="comment">#将"删除所选对象"操作加入该admin中</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AnotherModelAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    actions = [<span class="string">'delete_selected'</span>, <span class="string">'a_third_action'</span>]</span><br><span class="line">    ...</span><br></pre></td></tr></tbody></table></figure><p>在该admin中禁用所有特定的操作：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyModelAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    actions = <span class="literal">None</span></span><br></pre></td></tr></tbody></table></figure><h4 id="有条件地启用或禁用操作"><a href="#有条件地启用或禁用操作" class="headerlink" title="有条件地启用或禁用操作"></a>有条件地启用或禁用操作</h4><p>可以通过覆盖根据每个请求有条件地启用或禁用操作。这将返回被允许的动作字典。键是动作名称，值是元组。<code>(function, name, short_description)</code>大多数时候，您将使用此方法从超类收集的列表中有条件地删除操作。例如，如果我只希望名称以“ J”开头的用户能够批量删除对象，则可以执行以下操作：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyModelAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_actions</span>(<span class="params">self, request</span>):</span><br><span class="line">        actions = <span class="built_in">super</span>().get_actions(request)</span><br><span class="line">        <span class="keyword">if</span> request.user.username[<span class="number">0</span>].upper() != <span class="string">'J'</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'delete_selected'</span> <span class="keyword">in</span> actions:</span><br><span class="line">                <span class="keyword">del</span> actions[<span class="string">'delete_selected'</span>]</span><br><span class="line">        <span class="keyword">return</span> actions</span><br></pre></td></tr></tbody></table></figure><p><strong>设置操作权限：</strong>Django2.1的新功能：</p><p>通过<code>allowed_permissions</code>在动作功能上设置属性，动作可以将其可用性限制为具有特定权限的用户使用：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_published</span>(<span class="params">modeladmin, request, queryset</span>):</span><br><span class="line">    queryset.update(status=<span class="string">'p'</span>)</span><br><span class="line">make_published.allowed_permissions = (<span class="string">'change'</span>,)</span><br></pre></td></tr></tbody></table></figure><p>如果有多个权限时，则只需要通过其中一个权限就可以了，对应的权限如下：</p><ul><li><code>'add'</code>： <a href="https://docs.djangoproject.com/zh-hans/2.1/ref/contrib/admin/#django.contrib.admin.ModelAdmin.has_add_permission"><code>ModelAdmin.has_add_permission()</code></a></li><li><code>'change'</code>： <a href="https://docs.djangoproject.com/zh-hans/2.1/ref/contrib/admin/#django.contrib.admin.ModelAdmin.has_change_permission"><code>ModelAdmin.has_change_permission()</code></a></li><li><code>'delete'</code>： <a href="https://docs.djangoproject.com/zh-hans/2.1/ref/contrib/admin/#django.contrib.admin.ModelAdmin.has_delete_permission"><code>ModelAdmin.has_delete_permission()</code></a></li><li><code>'view'</code>： <a href="https://docs.djangoproject.com/zh-hans/2.1/ref/contrib/admin/#django.contrib.admin.ModelAdmin.has_view_permission"><code>ModelAdmin.has_view_permission()</code></a></li></ul><p>还可以使用指定的其他值，只需要实现相应的方法即可：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> get_permission_codename</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArticleAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    actions = [<span class="string">'make_published'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_published</span>(<span class="params">self, request, queryset</span>):</span><br><span class="line">        queryset.update(status=<span class="string">'p'</span>)</span><br><span class="line">    make_published.allowed_permissions = (<span class="string">'publish'</span>,)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_publish_permission</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="string">"""Does the user have the publish permission?"""</span></span><br><span class="line">        opts = self.opts</span><br><span class="line">        codename = get_permission_codename(<span class="string">'publish'</span>, opts)</span><br><span class="line">        <span class="keyword">return</span> request.user.has_perm(<span class="string">'%s.%s'</span> % (opts.app_label, codename))</span><br><span class="line">```equest):</span><br><span class="line">        <span class="string">"""Does the user have the publish permission?"""</span></span><br><span class="line">        opts = self.opts</span><br><span class="line">        codename = get_permission_codename(<span class="string">'publish'</span>, opts)</span><br><span class="line">        <span class="keyword">return</span> request.user.has_perm(<span class="string">'%s.%s'</span> % (opts.app_label, codename))</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ModelAdmin方法</title>
      <link href="/2022/05/19/treasurebox/python/django/5.django-zhan-dian-guan-li/3.modeladmin-fang-fa/"/>
      <url>/2022/05/19/treasurebox/python/django/5.django-zhan-dian-guan-li/3.modeladmin-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="ModelAdmin方法"><a href="#ModelAdmin方法" class="headerlink" title="ModelAdmin方法"></a>ModelAdmin方法</h2><ol><li><h3 id="save-model"><a href="#save-model" class="headerlink" title="save_model"></a>save_model</h3><p> 根据save_model方法是添加还是更改HttpRequest对象，覆盖此方法可进行保存或保存后的操作。调用super().save_model()以使用Model.save()方法来保存对象。</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GoodsInfoAdmin</span>(admin.ModelAdmin):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_model</span>(<span class="params">self, request, obj, form, change</span>):   </span><br><span class="line">    obj.seller=request.user   </span><br><span class="line"><span class="built_in">super</span>(GoodsInfoAdmin, self).save_model(request, obj, form, change)</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>delete_model</strong></p><p> 重写此方法可以执行删除前或者删除后的操作。调用super().delete_model()以使用Model.delete()删除对象。</p><p> 重写此方法可为”删除所选对象“操作自定义删除过程。</p></li><li><p><strong>get_ordering</strong></p><p> 该方法采用request作为参数，并且返回与属性相似的list或tuple用于排序。如：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PersonAdmin</span>(admin.ModelAdmin):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_ordering</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">if</span> request.user.is_superuser:</span><br><span class="line">            <span class="keyword">return</span> [<span class="string">'name'</span>, <span class="string">'rank'</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> [<span class="string">'name'</span>]</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>get_readonly_fields</strong></p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PersonAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_readonly_fields</span>(<span class="params">self, request, obj=<span class="literal">None</span></span>):   </span><br><span class="line">            <span class="keyword">if</span> obj:      </span><br><span class="line">                <span class="keyword">if</span> request.user.is_superuser:         </span><br><span class="line">                    <span class="keyword">return</span> [<span class="string">'publisher'</span>]      </span><br><span class="line">                <span class="keyword">return</span> [<span class="string">'publisher'</span>]   </span><br><span class="line">            <span class="keyword">return</span> [<span class="string">'publisher'</span>]</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>get_list_display</strong></p><p> 指定HttpRequest,返回一个list或者tuple类型的字段名称，这些名称将显示在更改列表是图中。类似list_display。</p></li><li><p><strong>get_urls</strong></p><p> 在<code>get_urls</code>上一个方法<code>ModelAdmin</code>中相同的方式，URL配置要用于该返回的ModelAdmin的URL。因此，可以对url进行扩充：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.template.response <span class="keyword">import</span> TemplateResponse</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyModelAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_urls</span>(<span class="params">self</span>):</span><br><span class="line">        urls = <span class="built_in">super</span>().get_urls()</span><br><span class="line">        my_urls = [</span><br><span class="line">            path(<span class="string">'my_view/'</span>, self.my_view),</span><br><span class="line">        ]</span><br><span class="line">        <span class="keyword">return</span> my_urls + urls</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">my_view</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">        context = <span class="built_in">dict</span>(</span><br><span class="line">           <span class="comment"># Include common variables for rendering the admin template.</span></span><br><span class="line">           self.admin_site.each_context(request),</span><br><span class="line">           <span class="comment"># Anything else you want in the context...</span></span><br><span class="line">           key=value,</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> TemplateResponse(request, <span class="string">"sometemplate.html"</span>, context)</span><br></pre></td></tr></tbody></table></figure><p> 如果要使用管理员布局，请从<code>admin/base_site.html</code>以下扩展：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">{% extends <span class="string">"admin/base_site.html"</span> %}</span><br><span class="line">{% block content %}</span><br><span class="line">...</span><br><span class="line">{% endblock %}</span><br></pre></td></tr></tbody></table></figure><p> 在此示例中，<code>my_view</code>将通过访问 <code>/admin/myapp/mymodel/my_view/</code>（假设管理URL位于）<code>/admin/</code></p></li><li><p><strong>formfield_for_foreignkey</strong></p><p> 对外键关联的数据做筛选：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RecordAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">formfield_for_foreignkey</span>(<span class="params">self, db_field, request, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> db_field.name == <span class="string">"version"</span>:</span><br><span class="line">            kwargs[<span class="string">'queryset'</span>] = Version.objects.<span class="built_in">all</span>().exclude(oss_links=<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().formfield_for_foreignkey(db_field, request, **kwargs)</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>formfield_for_manytomany</strong></p><p> 与<code>formfield_for_foreignkey</code>方法类似，<code>formfield_for_manytomany</code>可以重写该方法以将默认表单字段更改为多对多字段。例如，如果所有者可以拥有多辆汽车，并且汽车可以属于多个所有者（多对多关系），则可以过滤<code>Car</code>外键字段以仅显示拥有的汽车<code>User</code>：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyModelAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">formfield_for_manytomany</span>(<span class="params">self, db_field, request, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> db_field.name == <span class="string">"cars"</span>:</span><br><span class="line">            kwargs[<span class="string">"queryset"</span>] = Car.objects.<span class="built_in">filter</span>(owner=request.user)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().formfield_for_manytomany(db_field, request, **kwargs)</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>formfield_for_choice_field</strong></p><p> 与<code>formfield_for_foreignkey</code>和<code>formfield_for_manytomany</code> 方法一样，<code>formfield_for_choice_field</code>可以重写该方法以更改已声明选择的字段的默认formfield。例如，如果超级用户可用的选择与普通员工可用的选择不同，则可以按以下步骤进行：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyModelAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">formfield_for_choice_field</span>(<span class="params">self, db_field, request, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> db_field.name == <span class="string">"status"</span>:</span><br><span class="line">            kwargs[<span class="string">'choices'</span>] = (</span><br><span class="line">                (<span class="string">'accepted'</span>, <span class="string">'Accepted'</span>),</span><br><span class="line">                (<span class="string">'denied'</span>, <span class="string">'Denied'</span>),</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">if</span> request.user.is_superuser:</span><br><span class="line">                kwargs[<span class="string">'choices'</span>] += ((<span class="string">'ready'</span>, <span class="string">'Ready for deployment'</span>),)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().formfield_for_choice_field(db_field, request, **kwargs)</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>get_queryset</strong></p><p>返回特定的数据</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@admin.register(<span class="params">Orders</span>)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OrdersAdmin</span>(admin.ModelAdmin):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_queryset</span>(<span class="params">self, request</span>):</span><br><span class="line">qs = <span class="built_in">super</span>(OrdersAdmin, self).get_queryset(request)</span><br><span class="line"><span class="keyword">if</span> request.user.is_superuser:</span><br><span class="line"><span class="keyword">return</span> qs</span><br><span class="line"><span class="keyword">return</span> qs.<span class="built_in">filter</span>(seller=request.user.<span class="built_in">id</span>)</span><br></pre></td></tr></tbody></table></figure></li><li><p>待续</p></li></ol><p>st.user.is_superuser:<br>                return qs<br>            return qs.filter(seller=request.user.id)<br>    ```</p><ol start="11"><li>待续</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ModelAdmin选项</title>
      <link href="/2022/05/19/treasurebox/python/django/5.django-zhan-dian-guan-li/2.modeladmin-xuan-xiang/"/>
      <url>/2022/05/19/treasurebox/python/django/5.django-zhan-dian-guan-li/2.modeladmin-xuan-xiang/</url>
      
        <content type="html"><![CDATA[<p>ModelAdmin选项</p><p>ModelAdmin是比较灵活的，具有定制页面的选项，所有选项都在ModelAdmin子类上定义：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuthorAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    date_hierarchy = <span class="string">'pub_date'</span></span><br></pre></td></tr></tbody></table></figure><ol><li><h4 id="date-hierarchy"><a href="#date-hierarchy" class="headerlink" title="date_hierarchy"></a>date_hierarchy</h4><p> 设置date_hierarchy为模型中的DateField或DateTimeField，更改列表页面实现一个简单的分组功能，将符合某个日期分类的数据归为一类。如：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date_hierarchy = <span class="string">'pub_date'</span></span><br></pre></td></tr></tbody></table></figure><p> 还可以使用__查找在相关模型上指定的字段，如：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date_hierarchy = <span class="string">'author__pub_date'</span></span><br></pre></td></tr></tbody></table></figure><p> 这会根据可用的数据智能地分类，如果所有日期都在一个月之内，则按日级时间分类。</p></li><li><h4 id="empty-value-display"><a href="#empty-value-display" class="headerlink" title="empty_value_display"></a>empty_value_display</h4><p> 覆盖记录字段为空（None，空字符串等）的默认显示值。默认值为破折号（—）。</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuthorAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    empty_value_display = <span class="string">'-empty-'</span></span><br></pre></td></tr></tbody></table></figure><p> 还可以只复写某个特定的字段如：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuthorAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    fields = (<span class="string">'name'</span>, <span class="string">'title'</span>, <span class="string">'view_birth_date'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">view_birth_date</span>(<span class="params">self, obj</span>):</span><br><span class="line">        <span class="keyword">return</span> obj.birth_date</span><br><span class="line"></span><br><span class="line">    view_birth_date.empty_value_display = <span class="string">'???'</span></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="exclude"><a href="#exclude" class="headerlink" title="exclude"></a>exclude</h4><p> 提供此属性时，代表要从表单中排除的字段名称列表。</p><p> 例如，如下模型：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Author</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    title = models.CharField(max_length=<span class="number">3</span>)</span><br><span class="line">    birth_date = models.DateField(blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure><p> 如果仅希望<code>Author</code>模型的表单仅包含<code>name</code> 和<code>title</code>字段，则可以指定<code>fields</code>或<code>exclude</code>类似这样：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuthorAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    fields = (<span class="string">'name'</span>, <span class="string">'title'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuthorAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    exclude = (<span class="string">'birth_date'</span>,)</span><br></pre></td></tr></tbody></table></figure><p> 由于作者模型只有三个字段，<code>name</code>，<code>title</code>，和 <code>birth_date</code>，上面的两种构造方式达成的效果一致。</p></li><li><h4 id="fields"><a href="#fields" class="headerlink" title="fields"></a>fields</h4><p> fields选项控制在“添加”和“更改”页面上的表单进行简单的布局更改，如：仅显示可用字段的子集，修改顺序或者分组。</p><p> 要在同一行上显示多个字段，请将这些字段包装在自己的元组中。在此示例中，<code>url</code>和<code>title</code>字段将显示在同一行上，并且该<code>content</code>字段将在其下面显示在其自己的行上：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FlatPageAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    fields = ((<span class="string">'url'</span>, <span class="string">'title'</span>), <span class="string">'content'</span>)</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="fieldsets"><a href="#fieldsets" class="headerlink" title="fieldsets"></a>fieldsets</h4><p> fieldsets对表单进行分块如：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fieldsets = (   </span><br><span class="line">(<span class="string">"基本信息"</span>, {<span class="string">'fields'</span>: [<span class="string">'goods_name'</span>,<span class="string">'goods_method'</span>,<span class="string">'goods_pic'</span>,<span class="string">'goods_address'</span>,<span class="string">'type'</span>,<span class="string">'oprice'</span>,<span class="string">'xprice'</span>]}),   </span><br><span class="line">(<span class="string">"介绍"</span>, {<span class="string">'fields'</span>: [<span class="string">'goods_info'</span>, <span class="string">'goods_content'</span>]})</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="form"><a href="#form" class="headerlink" title="form"></a>form</h4><p> 默认情况下，admin将会为模型动态创建一个<code>ModelForm</code>。它用于创建在两个添加/更改页面上显示的表单。您可以轻松地提供自己的设置，<code>ModelForm</code>以覆盖添加/更改页面上的任何默认表单行为。</p><p> 如果您<code>ModelForm</code>和<code>ModelAdmin</code>双方都定义了一个<code>exclude</code> 选项，则<code>ModelAdmin</code>优先：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> myapp.models <span class="keyword">import</span> Person</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PersonForm</span>(forms.ModelForm):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Person</span><br><span class="line">        exclude = [<span class="string">'name'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PersonAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    exclude = [<span class="string">'age'</span>]</span><br><span class="line">    form = PersonForm</span><br></pre></td></tr></tbody></table></figure><p> 在上面的示例中，“年龄”字段将被排除，但“名称”字段将包含在生成的表单中。</p></li><li><h4 id="inlines"><a href="#inlines" class="headerlink" title="inlines"></a>inlines</h4><p> 内联样式，如下例子：GoodsInfo表和Detail表属于一对多的关系，这样可以在添加GoodsInfo页面时，添加三条Detail的数据。</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DetailInline</span>(admin.TabularInline):   </span><br><span class="line">    model = Detail   </span><br><span class="line">    extra = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.register(<span class="params">GoodsInfo</span>)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GoodsInfoAdmin</span>(admin.ModelAdmin):   </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_queryset</span>(<span class="params">self, request</span>):      </span><br><span class="line">        qs= <span class="built_in">super</span>(GoodsInfoAdmin, self).get_queryset(request)     </span><br><span class="line">        <span class="keyword">if</span> request.user.is_superuser:         </span><br><span class="line">            <span class="keyword">return</span> qs      </span><br><span class="line">        <span class="keyword">return</span> qs.<span class="built_in">filter</span>(seller=request.user.<span class="built_in">id</span>)   </span><br><span class="line">    <span class="comment">#根据登录的用户返回数据 </span></span><br><span class="line">    inlines = [DetailInline,]</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="list-display"><a href="#list-display" class="headerlink" title="list_display"></a>list_display</h4><p> list_display控制在列表页面显示哪些字段。例：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list_display = (<span class="string">'first_name'</span>, <span class="string">'last_name'</span>)</span><br></pre></td></tr></tbody></table></figure><p> 如果未设置list_display，则管理站点将只显示一列，显示_<em>str</em>_()每个对象的表示形式。</p><p> 有四种形式的参数：</p><ul><li><p>模型字段的名称。例如：</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PersonAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    list_display = (<span class="string">'first_name'</span>, <span class="string">'last_name'</span>)</span><br></pre></td></tr></tbody></table></figure></li><li><p>接受一个参数（模型实例）的可调用对象。例如：</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">upper_case_name</span>(<span class="params">obj</span>):</span><br><span class="line">    <span class="keyword">return</span> (<span class="string">"%s %s"</span> % (obj.first_name, obj.last_name)).upper()</span><br><span class="line">upper_case_name.short_description = <span class="string">'Name'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PersonAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    list_display = (upper_case_name,)</span><br></pre></td></tr></tbody></table></figure></li><li><p>一个字符串，表示<code>ModelAdmin</code>接受一个参数（模型实例）的方法。例如：</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PersonAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    list_display = (<span class="string">'upper_case_name'</span>,)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">upper_case_name</span>(<span class="params">self, obj</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"%s %s"</span> % (obj.first_name, obj.last_name)).upper()</span><br><span class="line">    upper_case_name.short_description = <span class="string">'Name'</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>代表模型属性或方法的字符串（无任何必需的参数）。例如：</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    birthday = models.DateField()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decade_born_in</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.birthday.strftime(<span class="string">'%Y'</span>)[:<span class="number">3</span>] + <span class="string">"0's"</span></span><br><span class="line">    decade_born_in.short_description = <span class="string">'Birth decade'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PersonAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    list_display = (<span class="string">'name'</span>, <span class="string">'decade_born_in'</span>)</span><br></pre></td></tr></tbody></table></figure><p>  需要注意的一些特殊情况<code>list_display</code>：</p><ul><li><p>如果该字段为<code>ForeignKey</code>，则Django将显示 <code>__str__()</code>相关对象的。</p></li><li><p>不支持<code>ManyToManyField</code>字段，因为这将需要为表中的每一行执行一个单独的SQL语句。不过，如果要执行此操作，请为模型提供自定义方法，然后将该方法的名称添加到<code>list_display</code>。</p></li><li><p>如果该字段为<code>BooleanField</code>，则Django将显示一个漂亮的“ on”或“ off”图标，而不是<code>True</code>or <code>False</code>。</p></li><li><p>如果给定的字符串是模型的方法<code>ModelAdmin</code>或可调用的字符串，则Django将默认对输出进行HTML转义。要转义用户输入并允许您自己使用未转义的标签，请使用<a href="https://docs.djangoproject.com/zh-hans/2.1/ref/utils/#django.utils.html.format_html"><code>format_html()</code></a>。</p><p>  <strong>完整的示例代码：</strong></p><p>  model.py中:</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.utils.html <span class="keyword">import</span> format_html</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(models.Model):</span><br><span class="line">    status=models.BooleanField(default=<span class="number">1</span>,verbose_name=(<span class="string">'上传状态'</span>))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">colored_status</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.status == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> format_html(</span><br><span class="line">                <span class="string">'&lt;span&gt;&lt;a href="/unlockcms/send_status/{}"&gt;{}&lt;/a&gt;&lt;/span&gt;'</span>,self.<span class="built_in">id</span>,<span class="string">'正在上传，查看详情'</span>,</span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            color_code=<span class="string">'green'</span></span><br><span class="line">            <span class="keyword">return</span> format_html(</span><br><span class="line">                <span class="string">'&lt;span style="color:{};"&gt;{}&lt;/span&gt;'</span>,color_code,<span class="string">'上传成功'</span>,</span><br><span class="line">            )</span><br><span class="line">    colored_status.short_description = <span class="string">u'上传状态'</span></span><br></pre></td></tr></tbody></table></figure><p>  在admin.py中设置：</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VersionAdmin</span>(admin.ModelAdmin):   </span><br><span class="line">list_display = (<span class="string">'colored_status'</span>)</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ul></li><li><h4 id="list-display-links"><a href="#list-display-links" class="headerlink" title="list_display_links"></a>list_display_links</h4><p> 默认情况下，list_display中的第一列会链接到每个项目的更改页面，但是可以通过list_display_links进行复写。</p><ul><li><p>设置为<code>None</code>时，完全不链接。</p></li><li><p>将其设置为<code>list_display</code>您想要将其列转换为链接的字段列表或元组（格式与相同 ）。</p><p>  可以指定一个或多个字段。只要这些字段显示在中 <code>list_display</code>，Django就不会在意链接了多少个字段。唯一的要求是，如果使用 <code>list_display_links</code>这种方式，则必须定义<code>list_display</code>。</p></li></ul></li><li><h4 id="list-filter"><a href="#list-filter" class="headerlink" title="list_filter"></a>list_filter</h4><p>设置list_filter可以激活管理员列表页面右侧的过滤器。如下图所示</p><img src="./image/list_filter.png"><p>list_filter应为元素的列表或元组，其中每个元素应为以下类型之一：</p><p><code>BooleanField</code>，<code>CharField</code>，<code>DateField</code>，<code>DateTimeField</code>， <code>IntegerField</code>，<code>ForeignKey</code>或<code>ManyToManyField</code>。</p><p>查找时也可以使用__来跨越关系查找如：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PersonAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    list_filter = (<span class="string">'is_staff'</span>, <span class="string">'company'</span>,<span class="string">'company__name'</span>)</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="list-per-page"><a href="#list-per-page" class="headerlink" title="list_per_page"></a>list_per_page</h4><p> 设置list_per_page控制在每个列表页显示的项目条数，默认情况下为100条。如：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list_per_page = <span class="number">50</span></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="ordering"><a href="#ordering" class="headerlink" title="ordering"></a>ordering</h4><p> 在admin中设置ordering以指定如何在Django管理视图中对对象列表进行排序，ordering参数应该为列表或者元组。</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ordering=(<span class="string">'id'</span>,)</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="raw-id-fields"><a href="#raw-id-fields" class="headerlink" title="raw_id_fields"></a>raw_id_fields</h4><p> 默认情况下，Django的管理员对<code>ForeignKey</code>字段使用（<select>）选择框界面。有时，不需要承担必须选择所有相关实例以显示在下拉菜单中的开销。 raw_id_fields是要更改为或Input窗口小部件的`ForeignKey``ManyToManyField字段的列表： 12class ArticleAdmin(admin.ModelAdmin):    raw_id_fields = ("newspaper",) 该raw_id_fields Input窗口小部件应包含一个主键，如果该字段是一个ForeignKey或逗号分隔值的列表中，如果该字段为一个ManyToManyField的raw_id_fields,会在小部件旁边显示放大镜按钮，允许用户搜索和选择一个值的字段： readonly_fields 默认情况下，管理员将所有字段显示为可编辑，此选项中的任何字段（应为list或者tuple）将按原样显示其数据，并且不可编辑。在创建和标记ModelForm时也会被排除。 12class PersonAdmin(admin.ModelAdmin):    readonly_fields = ('address_report',) 还可以通过方法进行控制： 123456class ModelInfoAdmin(admin.ModelAdmin):def get_readonly_fields(self, request, obj=None):   if obj:      if not request.user.has_perm('unlockcms.add_modelinfo'):         return['title','name']                  return []   return []save_as 设置save_as为在管理员更改表单页面的”另存为“功能。 通常，对象具有是哪个保存选项：”保存“，”保存并继续编辑“，和”保存并添加另一个“。如果save_as为True，则”保存并添加另一个“将由”另存为新“按钮代替，该按钮会创建新对象，而不是更新现有对象。 默认情况下，save_as设置为False。save_as_continue 当save_as = True时，添加新对象的默认重定向是该对象的更改视图。如果设置save_as_continue=False，重定向将转到更改列表视图。默认情况下：save_as_continue设置为True。save_on_top 设置save_on_top可以在管理员更改表单顶部添加保存按钮。通常，保存按钮只显示在底部。如果设置为save_on_top,则按钮同时显示在顶部和底部。search_fields 设置search_fields为管理员列表页面启用搜索框。应该将其设置为一个字段名称列表。只要有人在该文本矿中提交搜索查询，就讲对其进行搜索。 这些字段应该是某种文本字段，例如CharField或TextField。您还可以使用ForeignKey或 ManyToManyField使用查询API来执行相关的关联查询。 123search_fields = ['foreign_key__related_fieldname']#在博客admin中按照作者邮箱查找博客条目search_fields = ['user__email'] 该搜索时按照icontains思路，搜索时不区分大小写。如果想要在搜索时区分大小写，则在最后添加exact： 1search_fields = ['first_name__exact']show_full_result_count 设置show_full_result_count控制是否在过滤后的管理页面上显示对象的全部数量，默认为True，生成符合条件的条数。如果数量比较大时，使用比较费时。filter_horizontal  多对多字段时可以在后台批量增加数据增加数据 12345# type，language，technology为Projects表中的多对多字段@admin.register(Projects)class ProjectsAdmin(admin.ModelAdmin):    list_display = ["project_name", "href", "url", "href", "add_time"]    filter_horizontal = ["type", "language", "technology"] �数据 12345# type，language，technology为Projects表中的多对多字段@admin.register(Projects)class ProjectsAdmin(admin.ModelAdmin):    list_display = ["project_name", "href", "url", "href", "add_time"]    filter_horizontal = ["type", "language", "technology"]</select></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Django的Form类</title>
      <link href="/2022/05/19/treasurebox/python/django/4.biao-dan/2.django-de-form-lei/"/>
      <url>/2022/05/19/treasurebox/python/django/4.biao-dan/2.django-de-form-lei/</url>
      
        <content type="html"><![CDATA[<h2 id="Django的From类"><a href="#Django的From类" class="headerlink" title="Django的From类"></a>Django的From类</h2><p>Django表单系统的核心组件是Form类，Form类标书一张表单并决定它如何工作以及呈现。</p><p>类似模型类中的字段映射到数据库字段的方式，表单类的字段会映射到HTML表单的input元素。ModelForm通过Form映射模型类的字段到HTML表单的input元素，Django的admin就基于此。</p><p>表单字段本身也是累，他们管理表单数据并在提交表单时执行验证。DateField和FileField处理的数据类型差别较大，所以必须用来处理不同的字段。</p><p>在浏览器中，表单字段以HTML“控件”（用户界面的一个片段）的形式展现给我们，每个字段类型都有与之相匹配的控件类，但在必要时可以覆盖。</p><h3 id="一、在Django-中构建一张表单"><a href="#一、在Django-中构建一张表单" class="headerlink" title="一、在Django 中构建一张表单"></a>一、在Django 中构建一张表单</h3><p>Form类：在forms.py中去定义：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NameForm</span>(forms.Form):</span><br><span class="line">    your_name = forms.CharField(label=<span class="string">'Your name'</span>, max_length=<span class="number">100</span>)</span><br></pre></td></tr></tbody></table></figure><p>当设置了最大长度时，在前端会自动校验输入的字符的长度，在前端中的表现形式为：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;label <span class="keyword">for</span>=<span class="string">"your_name"</span>&gt;Your name: &lt;/label&gt;</span><br><span class="line">&lt;<span class="built_in">input</span> <span class="built_in">id</span>=<span class="string">"your_name"</span> <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"your_name"</span> maxlength=<span class="string">"100"</span> required&gt;</span><br></pre></td></tr></tbody></table></figure><p><strong>视图</strong></p><p>发回Django网站的表单数据由视图来处理，一般和发布这个表单用的是同一个视图。这允许我们重用一些相同的逻辑。</p><p>为了处理标表单，需要将它实例化到一我们希望发布的URL的对应的视图中：</p><p><strong>views.py:</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .forms <span class="keyword">import</span> NameForm</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 当POST请求时</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        <span class="comment"># 获取提交的数据</span></span><br><span class="line">        form = NameForm(request.POST)</span><br><span class="line">        <span class="comment"># 检验是否符合</span></span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            <span class="comment">#处理数据</span></span><br><span class="line">            your_name = form.cleaned_data[<span class="string">'your_name'</span>]</span><br><span class="line">            <span class="keyword">return</span> HttpResponseRedirect(<span class="string">'/thanks/'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当发起的是一个GET请求时，把表单返回</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = NameForm()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'name.html'</span>, {<span class="string">'form'</span>: form})</span><br></pre></td></tr></tbody></table></figure><p>如果访问视图时用的GET请求，它会创建一个空的表单实例并将其放置在模板上下文中进行渲染。</p><p>如果表单提交用的是POST请求，那么该视图将再次创建一个表单实例并使用请求中的数据填充它：form = NameForm(request.POST)，叫做“将数据绑定到表单”。</p><p>调用表单的is_valid()方法；如果不为True时，讲表单返回到模板。这时表单将不再为空，所以HTML表单将用之前提交的数据进行填充，放到可以根据需要进行编辑和修正的位置。</p><p>如果is_valid()为True，我们就能在cleaned_data属性中找到所有通过验证的表单数据。</p><p><strong>模板</strong></p><p>在模板文件中不需要做太多的操作：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"/your-name/"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    {% csrf_token %}</span><br><span class="line">    {{ form }}</span><br><span class="line">    &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">"submit"</span> value=<span class="string">"Submit"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></tbody></table></figure><p>所有表单字段及其属性将通过Django模板语言从中被解包为HTML标记。语言从中被解包为HTML标记。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>表单的属性</title>
      <link href="/2022/05/19/treasurebox/python/django/4.biao-dan/3.biao-dan-de-shu-xing/"/>
      <url>/2022/05/19/treasurebox/python/django/4.biao-dan/3.biao-dan-de-shu-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="表单的属性"><a href="#表单的属性" class="headerlink" title="表单的属性"></a>表单的属性</h2><h3 id="一、绑定和非绑定形式"><a href="#一、绑定和非绑定形式" class="headerlink" title="一、绑定和非绑定形式"></a>一、绑定和非绑定形式</h3><ol><li><h4 id="is-bound"><a href="#is-bound" class="headerlink" title="is_bound"></a><strong>is_bound</strong></h4></li></ol><ul><li><p>如果将其绑定到一组数据中，则可以验证该数据并将表单显示为HTML，并将数据显示在HTML中。</p></li><li><p>如果未绑定，则无法进行验证（因为没有要验证的数据！），但仍可以将空白表单呈现为HTML。</p><p>  要创建一个Form示例，只需要实例化该类：</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = ContactForm()</span><br></pre></td></tr></tbody></table></figure><p>  要将数据绑定到表单，需要将数据作为字典传递给Form类构造函数的第一个参数：</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data = {<span class="string">'subject'</span>: <span class="string">'hello'</span>,</span><br><span class="line">       <span class="string">'message'</span>: <span class="string">'Hi there'</span>,</span><br><span class="line">       <span class="string">'sender'</span>: <span class="string">'foo@example.com'</span>,</span><br><span class="line">       <span class="string">'cc_myself'</span>: <span class="literal">True</span>}</span><br><span class="line">f = ContactForm(data)</span><br></pre></td></tr></tbody></table></figure><p>  在该字典中，键是字段名称，字段名称与Form类中的属性相对应，这些值是想要验证的数据，通常这些都是字符串，但不强制要求是字符串。</p><p>  如果需要在运行时区分绑定表单实例和未绑定表单实例，需要检查is_bound属性的值。</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">f = ContactForm()</span><br><span class="line">f.is_bound</span><br><span class="line"><span class="literal">False</span></span><br><span class="line">f = ContactForm({<span class="string">'subject'</span>: <span class="string">'hello'</span>})</span><br><span class="line">f.is_bound</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">f = ContactForm({})</span><br><span class="line">f.is_bound</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="二、使用表单验证数据"><a href="#二、使用表单验证数据" class="headerlink" title="二、使用表单验证数据"></a>二、使用表单验证数据</h3><ol><li><h4 id="is-valid"><a href="#is-valid" class="headerlink" title="is_valid()"></a>is_valid()</h4><p> Form对象的主要任务是验证数据。对于绑定的Form实例，调用is_valid()方法以验证并返回一个布尔值，指定数据是否有效：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data = {<span class="string">'subject'</span>: <span class="string">'hello'</span>,</span><br><span class="line">        <span class="string">'message'</span>: <span class="string">'Hi there'</span>,</span><br><span class="line">        <span class="string">'sender'</span>: <span class="string">'foo@example.com'</span>,</span><br><span class="line">        <span class="string">'cc_myself'</span>: <span class="literal">True</span>}</span><br><span class="line">f = ContactForm(data)</span><br><span class="line">f.is_valid()</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></tbody></table></figure><p> 当数据无效时：如subject为空白（所有的字段都是必需的），sender并不是有效的电子邮件地址：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data = {<span class="string">'subject'</span>: <span class="string">''</span>,</span><br><span class="line">         <span class="string">'message'</span>: <span class="string">'Hi there'</span>,</span><br><span class="line">         <span class="string">'sender'</span>: <span class="string">'invalid email address'</span>,</span><br><span class="line">         <span class="string">'cc_myself'</span>: <span class="literal">True</span>}</span><br><span class="line">f = ContactForm(data)</span><br><span class="line">f.is_valid()</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="errors"><a href="#errors" class="headerlink" title="errors"></a>errors</h4><p> 获取错误消息字典。</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f.errors</span><br><span class="line">{<span class="string">'sender'</span>: [<span class="string">'Enter a valid email address.'</span>], <span class="string">'subject'</span>: [<span class="string">'This field is required.'</span>]}</span><br></pre></td></tr></tbody></table></figure><p> 在此字典中，键是字段名称，值是代表错误消息的字符串列表。错误消息存储在列表中，因为一个字段中可能包含多个错误消息。</p><p> 当使用errors时不需要调用is_valid()，表格在调用is_valid()时或者使用errors时自动生成errors。</p></li><li><h4 id="errors-as-data"><a href="#errors-as-data" class="headerlink" title="errors.as_data()"></a>errors.as_data()</h4><p> 返回一个dict将字段映射到其原始ValidationError实例。</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f.errors.as_data()</span><br><span class="line">{<span class="string">'sender'</span>: [ValidationError([<span class="string">'Enter a valid email address.'</span>])],</span><br><span class="line"><span class="string">'subject'</span>: [ValidationError([<span class="string">'This field is required.'</span>])]}</span><br></pre></td></tr></tbody></table></figure><p> 每当需要通过错误标识错误时，都可以使用此方法。</p></li><li><h4 id="errors-as-json"><a href="#errors-as-json" class="headerlink" title="errors.as_json()"></a>errors.as_json()</h4><p> 返回序列化为JSON的错误：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f.errors.as_json()</span><br><span class="line">{<span class="string">"sender"</span>: [{<span class="string">"message"</span>: <span class="string">"Enter a valid email address."</span>, <span class="string">"code"</span>: <span class="string">"invalid"</span>}],</span><br><span class="line"><span class="string">"subject"</span>: [{<span class="string">"message"</span>: <span class="string">"This field is required."</span>, <span class="string">"code"</span>: <span class="string">"required"</span>}]}</span><br></pre></td></tr></tbody></table></figure><p> 默认情况下，as_json()不转义输出。如果将其应用于表单视图的Ajax请求，客户端将揭示该相应并将错误插入页面，</p></li><li><h4 id="initial"><a href="#initial" class="headerlink" title="initial"></a>initial</h4><p> initial用于在运行时生命表单字段的初始值，此时，可以使用initial参数。如果提供此参数，则应为将字段名称映射到初始值的字典。仅包要为其指定初始值的字段，不必再表单中包含每个字段。如：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = ContactForm(initial={<span class="string">'subject'</span>: <span class="string">'Hi there!'</span>})</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="has-changed"><a href="#has-changed" class="headerlink" title="has_changed()"></a>has_changed()</h4><p> 当需要检查表单数据是否已从初始数据更改时，使用has_changed()验证表单：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data = {<span class="string">'subject'</span>: <span class="string">'hello'</span>,</span><br><span class="line">         <span class="string">'message'</span>: <span class="string">'Hi there'</span>,</span><br><span class="line">         <span class="string">'sender'</span>: <span class="string">'foo@example.com'</span>,</span><br><span class="line">         <span class="string">'cc_myself'</span>: <span class="literal">True</span>}</span><br><span class="line">f = ContactForm(data, initial=data)</span><br><span class="line">f.has_changed()</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></tbody></table></figure><p> 提交表单后，对数据进行重构并提供原始数据，以便进行比较：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f = ContactForm(request.POST, initial=data)</span><br><span class="line">f.has_changed()</span><br></pre></td></tr></tbody></table></figure><p> 如果request.POST中的数据不同于提供的initial值，则结果为True，否则为False。通过使用Field.has_changed()可以计算表单中每个字段的结果。</p></li><li><h4 id="changed-data"><a href="#changed-data" class="headerlink" title="changed_data"></a>changed_data</h4><p> 如果这些字段绑定的值（通常是request.POST）与提供的initial值不同，就返回字段名称的列表。如果没有数据不同，将返回一个空列表。</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = ContactForm(request.POST, initial=data)</span><br><span class="line"><span class="keyword">if</span> f.has_changed():</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">"The following fields changed: %s"</span> % <span class="string">", "</span>.join(f.changed_data))</span><br></pre></td></tr></tbody></table></figure></li><li><p>if f.has_changed():<br> print(“The following fields changed: %s” % “, “.join(f.changed_data))<br>```</p></li><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>表单概述</title>
      <link href="/2022/05/19/treasurebox/python/django/4.biao-dan/1.biao-dan-gai-shu/"/>
      <url>/2022/05/19/treasurebox/python/django/4.biao-dan/1.biao-dan-gai-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="表单概述"><a href="#表单概述" class="headerlink" title="表单概述"></a>表单概述</h2><h3 id="一、HTML表单"><a href="#一、HTML表单" class="headerlink" title="一、HTML表单"></a>一、HTML表单</h3><p>在HTML中，表单是在 <code>&lt;form&gt;...&lt;/form&gt;</code> 中的一些元素，它允许访客做一些类似输入文本、选择选项、操作对象或空间等动作，然后发送这些信息到服务端。</p><p>一些表单界面元素（文本框或复选框）非常简单并内置在HTML中。其他会复杂些；像弹出日期选择或者允许移动滑块或者操作控件，一般通过使用JavaScript，CSS以及HTML表单中的 <code>&lt;input&gt;</code> 元素来实现这些效果。</p><p>和它的 <code>&lt;input&gt;</code> 元素一样，表单必须指定两样东西：</p><ul><li><em>何地</em>（action）：负责响应用户输入数据的URL地址</li><li><em>如何</em>（method）：数据请求使用的HTTP方法。</li></ul><h3 id="二、GET和POST"><a href="#二、GET和POST" class="headerlink" title="二、GET和POST"></a>二、GET和POST</h3><p>GET和POST是处理表单时唯一使用的HTTP方法：</p><ul><li><strong>POST：</strong>浏览器将表单数据打包，编码以进行传输，将其发送到服务器，然后接收其响应。</li><li><strong>GET</strong>：相比于POST，GET请求会将数据捆绑为一个字符串，然后使用该字符串来组成一个URL。该URL包含必须将数据发送到的地址以及数据键和值。类似：<strong><a href="https://docs.djangoproject.com/search/?q=forms&amp;release=1">https://docs.djangoproject.com/search/?q=forms&amp;release=1</a></strong></li></ul><p>GET和POST通常应用于不同的目的：</p><p>任何可能用于更改系统状态的请求应该使用POST，不如更改数据库的请求，GET应该只被用与不也会影响系统状态的请求。</p><p>在WEB应用的管理表达那种使用GET请求具有安全隐患：攻击者很容易通过模拟请求来访问系统的敏感数据。</p><p>在django中编写一个视图跳过CSRF验证：</p><p>from django.views.decorators.csrf import csrf_exempt<br>@csrf_exempt</p><p>def xxx(request):</p><p>​… …</p><p>​return …rn …</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/2022/05/19/treasurebox/python/django/3.mo-ban-ceng/2.biao-qian/"/>
      <url>/2022/05/19/treasurebox/python/django/3.mo-ban-ceng/2.biao-qian/</url>
      
        <content type="html"><![CDATA[<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>标签比变量更复杂：一些在输出中创建文本，一些通过执行循环或逻辑来控制流，有些将外部信息加载到模板中以供以后的变量使用。<code>{% tag %}`一些标签需要开始和结束标签。例如：`{% tag %} ... tag contents ... {% endtag %}</code></p><p>官网链接：<a href="https://docs.djangoproject.com/zh-hans/2.1/ref/templates/language/">https://docs.djangoproject.com/zh-hans/2.1/ref/templates/language/</a></p><ol><li><h4 id="csrf-token"><a href="#csrf-token" class="headerlink" title="csrf_token"></a>csrf_token</h4><p> 抵挡跨域攻击，用于form表单的post提交时使用。</p></li><li><h4 id="cycle"><a href="#cycle" class="headerlink" title="cycle"></a>cycle</h4><p> 每次遇到此标签时，都会产生其参数之一。第一个参数在第一次遇到时产生，第二个参数在第二次遇到时产生，依此类推。一旦所有参数用尽，标记将循环到第一个参数并再次产生它。</p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;{% for o in some_list %}</span><br><span class="line">    &lt;tr class="{% cycle 'row1' 'row2' %}"&gt;</span><br><span class="line">        ...</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">{% endfor %}</span><br></pre></td></tr></tbody></table></figure><p> 在某些情况下，您可能希望引用循环的当前值而不前进到下一个值。为此，只需使用“ as” 为标签命名，如下所示：<code>{% cycle %}</code></p><p> <code>{% cycle 'row1' 'row2' as rowcolors %}</code></p></li></ol><p>命名之后，可以通过将循环名称作为上下文变量引用，在模板中的任意位置插入循环的当前值。如果要独立于原始<code>cycle</code>标签将循环移动到下一个值，则 可以使用另一个<code>cycle</code>标签并指定变量的名称。因此，以下模板：</p><pre><code>&lt;tr&gt;    &lt;td class="{% cycle 'row1' 'row2' as rowcolors %}"&gt;...&lt;/td&gt;    &lt;td class="{{ rowcolors }}"&gt;...&lt;/td&gt; &lt;/tr&gt;&lt;tr&gt;    &lt;td class="{% cycle rowcolors %}"&gt;...&lt;/td&gt;    &lt;td class="{{ rowcolors }}"&gt;...&lt;/td&gt;&lt;/tr&gt;将输出：&lt;tr&gt;   &lt;td class="row1"&gt;...&lt;/td&gt;    &lt;td class="row1"&gt;...&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;    &lt;td class="row2"&gt;...&lt;/td&gt;    &lt;td class="row2"&gt;...&lt;/td&gt;&lt;/tr&gt;</code></pre><blockquote></blockquote><h4 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h4><p>表示此模板扩展了父类模板。该标签可以用两种方式使用。</p><ul><li><p><code>{% extends "base.html" %}</code>（带引号）使用文字值 <code>"base.html"</code>作为要扩展的父模板的名称。</p></li><li><p><code>{% extends variable %}</code>使用的值<code>variable</code>。如果该变量的值为字符串，则Django将使用该字符串作为父模板的名称。如果变量的值是一个<code>Template</code>对象，则Django将使用该对象作为父模板。</p><p>  在中<code>template.html</code>，以下路径将有效：</p>  <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{% extends "./base2.html" %}</span><br><span class="line">{% extends "../base1.html" %}</span><br><span class="line">{% extends "./my/base3.html" %}</span><br></pre></td></tr></tbody></table></figure></li></ul><ol start="3"><li><h4 id="firstof"><a href="#firstof" class="headerlink" title="firstof"></a>firstof</h4><p> 输出第一个不是False的变量。如果所有传递的变量均为False，则不输出任何内容。</p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{% firstof var1 var2 var3 %}</span><br></pre></td></tr></tbody></table></figure> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">{% if var1 %}</span><br><span class="line">    {{ var1 }}</span><br><span class="line">{% elif var2 %}</span><br><span class="line">    {{ var2 }}</span><br><span class="line">{% elif var3 %}</span><br><span class="line">    {{ var3 }}</span><br><span class="line">{% endif %}</span><br></pre></td></tr></tbody></table></figure><p> 如果所有传递的变量均为False，则还可以使用文字字符串作为后备值：</p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{% firstof var1 var2 var3 "fallback value" %}</span><br></pre></td></tr></tbody></table></figure><p> 您可以使用语法将输出存储在变量中。<code>{% firstof var1 var2 var3 as value %}</code></p></li><li><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><p> 循环访问数组中的每个项目，使该项目在上下文变量中可用。例如，显示以下项中提供的运动员列表 <code>athlete_list</code>：</p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">{% for athlete in athlete_list %}</span><br><span class="line">    &lt;li&gt;{{ athlete.name }}&lt;/li&gt;</span><br><span class="line">{% endfor %}</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></tbody></table></figure><p> 同样可以使用反向遍历列表：</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>自定义过滤器和标签</title>
      <link href="/2022/05/19/treasurebox/python/django/3.mo-ban-ceng/4.zi-ding-yi-guo-lu-qi-he-biao-qian/"/>
      <url>/2022/05/19/treasurebox/python/django/3.mo-ban-ceng/4.zi-ding-yi-guo-lu-qi-he-biao-qian/</url>
      
        <content type="html"><![CDATA[<h2 id="自定义模板和过滤器"><a href="#自定义模板和过滤器" class="headerlink" title="自定义模板和过滤器"></a>自定义模板和过滤器</h2><p>Django的模板语言带有多种<a href="https://docs.djangoproject.com/zh-hans/2.1/ref/templates/builtins/">内置标签和过滤器，</a>用于满足应用程序的逻辑需求。但是，当这些不能满足需求时。您可以通过使用Python定义自定义标签和过滤器来扩展模板引擎，然后使用<code>{% load %}</code>标签在模板中引入。</p><h3 id="一、代码布局"><a href="#一、代码布局" class="headerlink" title="一、代码布局"></a>一、代码布局</h3><p>将Django应用程序添加到<code>INSTALLED_APPS</code>中，它在以下所述的常规位置中定义的所有标签都会自动变为可加载到模板中。该应用程序应该包含一个<code>templatetags</code>目录，在相同的水平 <code>models.py</code>，<code>views.py</code>等等文件。</p><p>自定义标签和过滤器将位于<code>templatetags</code> 目录内的模块中。模块文件的名称是以后用来加载标签的名称，因此需要选择一个不会与另一个应用程序中的自定义标签和过滤器冲突的名称。</p><p>如果您的自定义标签/过滤器位于名为的文件中 <code>meishi_extras.py</code>，整个目录结构为：</p><img src="image/1574238483281.png"><p>在模板文件中使用<code>{% load meishi_extras%}</code></p><p>放在templatetags包中的模块数量没有限制，使用<code>{% load  %}</code>加载的是模块名称，而不是标签/过滤器。</p><p>为了成为一个有效的标签库，模块名称必须包含一个名为模块级变量register，该template.Library实例是一个实例，在其中注册了所有的标签和过滤器。因此在模块顶部放置以下内容：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</span><br><span class="line"></span><br><span class="line">register = template.Library()</span><br></pre></td></tr></tbody></table></figure><h2 id="二、编写自定义的模板过滤器"><a href="#二、编写自定义的模板过滤器" class="headerlink" title="二、编写自定义的模板过滤器"></a>二、编写自定义的模板过滤器</h2><p>自定义的过滤器就是一些有一到两个参数的python函数</p><ul><li>（输入的）变量的值，不一定是字符串类型。</li><li>参数的值可以有一个默认值，或者被排除在外。</li></ul><p>例：在过滤器<code>{{ var|foo:"bar" }}</code>中，变量<code>var</code>和参数<code>bar</code>会传递给过滤器<code>foo</code>。</p><p>因为在模板语言不提供异常处理机制，所以任何从模板过滤器中抛出的异常都将被视为服务器异常。因此，如果有一个合理的返回值将要被返回的话，过滤器函数应当避免产生异常。万一模板中出现有明显错误的输入，产生异常也仍然比隐藏这个bug要好。</p><p>过滤器示例：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cut</span>(<span class="params">value, arg</span>):</span><br><span class="line">    <span class="string">"""将value中的arg全部替换掉"""</span></span><br><span class="line">    <span class="keyword">return</span> value.replace(arg, <span class="string">''</span>)</span><br></pre></td></tr></tbody></table></figure><p>在模板中使用：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{ number|cut:<span class="string">"0"</span> }}</span><br></pre></td></tr></tbody></table></figure><p>大部分的过滤器并没有参数。这样的话，只需要把这些参数从函数中去掉就好。例子如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">lower</span>(<span class="params">value</span>): </span><br><span class="line">    <span class="string">"""把所有的英文字符转化为小写"""</span></span><br><span class="line">    <span class="keyword">return</span> value.lower()</span><br></pre></td></tr></tbody></table></figure><h2 id="三、注册自定义过滤器"><a href="#三、注册自定义过滤器" class="headerlink" title="三、注册自定义过滤器"></a>三、注册自定义过滤器</h2><p>每当写好自定义的过滤器时候，需要用Library实例去注册它，从而让他对于Django模板语言是可用的。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">register.<span class="built_in">filter</span>(<span class="string">'cut'</span>, cut)</span><br><span class="line">register.<span class="built_in">filter</span>(<span class="string">'lower'</span>, lower)</span><br></pre></td></tr></tbody></table></figure><p>Library.filter()方法有两个参数：</p><ul><li>筛选器的名称——字符串</li><li>编写的python函数。</li></ul><p>可以使用register.filter()装饰器来注册：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@register.filter(<span class="params">name=<span class="string">'cut'</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cut</span>(<span class="params">value, arg</span>):</span><br><span class="line">    <span class="keyword">return</span> value.replace(arg, <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@register.filter</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lower</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="keyword">return</span> value.lower()</span><br></pre></td></tr></tbody></table></figure><p>如果不使用name参数时，如上面第二个示例所示，Django将使用函数的名称作为过滤器的名称。register.filter()函数还接受三个关键字参数，is_safe,needs_autoescape和expects_localtime。</p><p>如果编写的模板过滤器仅将字符串作为第一个参数，则应使用decorator stringfilter。在对象传递给函数之前将其转换为字符串值，这样在传入一个整数时，不会导致AttributeError。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</span><br><span class="line"><span class="keyword">from</span> django.template.defaultfilters <span class="keyword">import</span> stringfilter</span><br><span class="line"></span><br><span class="line">register = template.Library()</span><br><span class="line"></span><br><span class="line"><span class="meta">@register.filter</span></span><br><span class="line"><span class="meta">@stringfilter</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lower</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="keyword">return</span> value.lower()</span><br></pre></td></tr></tbody></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>def lower(value):<br>    return value.lower()</p><pre><code>### </code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>模板继承与加载</title>
      <link href="/2022/05/19/treasurebox/python/django/3.mo-ban-ceng/3.mo-ban-ji-cheng-yu-jia-zai/"/>
      <url>/2022/05/19/treasurebox/python/django/3.mo-ban-ceng/3.mo-ban-ji-cheng-yu-jia-zai/</url>
      
        <content type="html"><![CDATA[<h2 id="模板继承与加载"><a href="#模板继承与加载" class="headerlink" title="模板继承与加载"></a>模板继承与加载</h2><h3 id="一、模板继承"><a href="#一、模板继承" class="headerlink" title="一、模板继承"></a>一、模板继承</h3><p>Django模板引擎中最强大（因此也是最复杂）的部分是模板继承。模板继承可以构建基本的“骨架”模板，该模板包含站点的所有常见元素并定义子模板可以覆盖的<strong>块</strong>。</p><p>例：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"style.css"</span>&gt;</span><br><span class="line">    &lt;title&gt;{% block title %}My amazing site{% endblock %}&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div <span class="built_in">id</span>=<span class="string">"sidebar"</span>&gt;</span><br><span class="line">        {% block sidebar %}</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=<span class="string">"/"</span>&gt;Home&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=<span class="string">"/blog/"</span>&gt;Blog&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        {% endblock %}</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div <span class="built_in">id</span>=<span class="string">"content"</span>&gt;</span><br><span class="line">        {% block content %}{% endblock %}</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>该模板称为<code>base.html</code>，定义了一个简单的HTML框架文档，可以将其用于一个简单的两列页面。“子”模板的工作是用内容填充空白块。</p><p>在此示例中，<a href="https://docs.djangoproject.com/zh-hans/2.1/ref/templates/builtins/#std:templatetag-block"><code>block</code></a>标记定义了子模板可以填充的三个块。<a href="https://docs.djangoproject.com/zh-hans/2.1/ref/templates/builtins/#std:templatetag-block"><code>block</code></a>标记所做的只是告诉模板引擎子模板可以覆盖模板的那些部分。</p><p>子模板可能如下所示：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">{% extends <span class="string">"base.html"</span> %}</span><br><span class="line"></span><br><span class="line">{% block title %}My  blog{% endblock %}</span><br><span class="line"></span><br><span class="line">{% block content %}</span><br><span class="line">{% <span class="keyword">for</span> entry <span class="keyword">in</span> blog_entries %}</span><br><span class="line">    &lt;h2&gt;{{ entry.title }}&lt;/h2&gt;</span><br><span class="line">    &lt;p&gt;{{ entry.body }}&lt;/p&gt;</span><br><span class="line">{% endfor %}</span><br><span class="line">{% endblock %}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://docs.djangoproject.com/zh-hans/2.1/ref/templates/builtins/#std:templatetag-extends"><code>extends</code></a>标签是这里的关键。它告诉模板引擎该模板“扩展”了另一个模板。模板系统评估该模板时，首先会找到父模板，在本例中为“ base.html”。</p><p>届时，模板引擎将注意到其中的三个<a href="https://docs.djangoproject.com/zh-hans/2.1/ref/templates/builtins/#std:templatetag-block"><code>block</code></a>标记，<code>base.html</code>并用子模板的内容替换这些块。根据的值<code>blog_entries</code>，输出可能类似于：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"style.css"</span>&gt;</span><br><span class="line">    &lt;title&gt;My amazing blog&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div <span class="built_in">id</span>=<span class="string">"sidebar"</span>&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=<span class="string">"/"</span>&gt;Home&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=<span class="string">"/blog/"</span>&gt;Blog&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div <span class="built_in">id</span>=<span class="string">"content"</span>&gt;</span><br><span class="line">        &lt;h2&gt;Entry one&lt;/h2&gt;</span><br><span class="line">        &lt;p&gt;This <span class="keyword">is</span> my first entry.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">        &lt;h2&gt;Entry two&lt;/h2&gt;</span><br><span class="line">        &lt;p&gt;This <span class="keyword">is</span> my second entry.&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>请注意，由于子模板未定义<code>sidebar</code>块，因此将使用父模板中的值。 父模板中标签内的内容始终用作后备。<code>{% block %}`可以根据需要使用任意多个继承级别。使用继承的一种常见方法是以下三个级别的方法：- 创建一个`base.html`包含网站主要外观的模板。- `base_SECTIONNAME.html`为站点的每个“部分” 创建一个模板。例如`base_news.html`，`base_sports.html`。这些模板全部扩展，`base.html`并包括特定于部分的样式/设计。- 为每种类型的页面（例如新闻文章或博客条目）创建单独的模板。这些模板扩展了相应的节模板。这种方法最大程度地提高了代码重用性，并易于将项目添加到共享内容区域，例如部分范围的导航。以下是使用继承的一些技巧：- 如果在模板中使用，则它必须是该模板中的第一个模板标记。否则模板继承将不起作用。- 在基本模板更多的标签是更好的。请记住，子模板不必定义所有父块，因此可以在许多块中填写合理的默认值，然后仅在以后定义所需的块。最好有更多的块而不是更少的块。- 如果发现自己在多个模板中复制内容，则可能意味着您应该将该内容移至父模板中的`{%block %}`- 如果需要从父模板中获取块的内容，则可以使用变量来解决问题。如果要添加到父块的内容而不是完全覆盖它，这将很有用。- 使用模板标记语法在a外部创建的变量不能在块内部使用。例如，此模板不呈现任何内容：[`{% block %}`](https://docs.djangoproject.com/zh-hans/2.1/ref/templates/builtins/#std:templatetag-block)`as`    </code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">{% trans <span class="string">"Title"</span> <span class="keyword">as</span> title %}</span><br><span class="line">{% block content %}{{ title }}{% endblock %}</span><br></pre></td></tr></tbody></table></figure><code>- 对于额外的可读性，您可以选择给一个*名字*到您的 标签。例如：`{% endblock %}</code><p></p><pre><code><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{% block content %}</span><br><span class="line">...</span><br><span class="line">{% endblock content %}</span><br></pre></td></tr></tbody></table></figure></code></pre><p>注意:不能<a href="https://docs.djangoproject.com/zh-hans/2.1/ref/templates/builtins/#std:templatetag-block"><code>block</code></a>在同一模板中定义多个具有相同名称的标签。存在此限制的原因是，块标签在“两个”方向上均起作用。也就是说，block标签不仅提供填充孔，还定义了填充<em>父级</em>孔的内容。如果<a href="https://docs.djangoproject.com/zh-hans/2.1/ref/templates/builtins/#std:templatetag-block"><code>block</code></a>模板中有两个名称相似的标签，则该模板的父级将不知道要使用哪个块内容。</p><h3 id="二、模板的转义"><a href="#二、模板的转义" class="headerlink" title="二、模板的转义"></a>二、模板的转义</h3><p>要控制模板的自动转义，请将模板（或模板的特定部分）包装在autoescape标记中，如下所示：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{% autoescape off %}</span><br><span class="line">    Hello {{ name }}</span><br><span class="line">{% endautoescape %}</span><br></pre></td></tr></tbody></table></figure><p>该autoescape标签采用两种<code>on</code>或<code>off</code>作为其参数。有时，可能想强制自动转义，否则会被禁用。这是一个示例模板：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Auto-escaping <span class="keyword">is</span> on by default. Hello {{ name }}</span><br><span class="line"></span><br><span class="line">{% autoescape off %}</span><br><span class="line">    This will <span class="keyword">not</span> be auto-escaped: {{ data }}.</span><br><span class="line"></span><br><span class="line">    Nor this: {{ other_data }}</span><br><span class="line">    {% autoescape on %}</span><br><span class="line">        Auto-escaping applies again: {{ name }}</span><br><span class="line">    {% endautoescape %}</span><br><span class="line">{% endautoescape %}</span><br></pre></td></tr></tbody></table></figure><h3 id="三、模板的加载"><a href="#三、模板的加载" class="headerlink" title="三、模板的加载"></a>三、模板的加载</h3><p>加载模板并使用当前上下文呈现它。这是在模板中“包含”其他模板的一种方式。</p><p>模板名称可以是变量，也可以是硬编码（带引号）的字符串，用单引号或双引号引起来。</p><p>此示例包括模板的内容<code>"foo/bar.html"</code>：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{% include <span class="string">"foo/bar.html"</span> %}</span><br></pre></td></tr></tbody></table></figure><p>通常，模板名称是相对于模板加载器的根目录而言的。字符串参数也可以是以标记开头<code>./</code>或<code>../</code> 在<a href="https://docs.djangoproject.com/zh-hans/2.1/ref/templates/builtins/#std:templatetag-extends"><code>extends</code></a>标记中所述的相对路径。</p><p>此示例包含名称包含在变量中的模板的内容<code>template_name</code>：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{% include template_name %}</span><br></pre></td></tr></tbody></table></figure><p>该变量也可以是带有<code>render()</code>接受上下文的方法的任何对象。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{% include template_name %}</span><br></pre></td></tr></tbody></table></figure><p>该变量也可以是带有<code>render()</code>接受上下文的方法的任何对象。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>字段约束</title>
      <link href="/2022/05/19/treasurebox/python/django/1.mo-xing-ceng/4.zi-duan-yue-shu/"/>
      <url>/2022/05/19/treasurebox/python/django/1.mo-xing-ceng/4.zi-duan-yue-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="字段约束"><a href="#字段约束" class="headerlink" title="字段约束"></a>字段约束</h2><h3 id="2、字段约束"><a href="#2、字段约束" class="headerlink" title="2、字段约束"></a><strong>2、字段约束</strong></h3><p><strong>(1)</strong> <strong>null</strong>：默认为False，当设置为True时，该字段插入数据时可以为空，使用NULL进行填充。</p><p><strong>(2)</strong> <strong>blank</strong>：默认为False，为False时在admin后台中表单必须要填内容，为True时可以允许表单为空。一般与null=True或defalut连用。</p><p><strong>(3)</strong> <strong>choices</strong>：接收一个可重复的列表或元组（基本单位为二元组）。如果指定了该参数，在实例化该模型时，该变量只能选择列表中的值。</p><p>如：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(models.Model):</span><br><span class="line"></span><br><span class="line">  SHIRT_SIZES = (</span><br><span class="line">        (<span class="string">'S'</span>, <span class="string">'Small'</span>),</span><br><span class="line">       (<span class="string">'M'</span>, <span class="string">'Medium'</span>),</span><br><span class="line">        (<span class="string">'L'</span>, <span class="string">'Large'</span>),</span><br><span class="line">    )</span><br><span class="line">  name = models.CharField(max_length=<span class="number">60</span>)</span><br><span class="line">  shirt_size = models.CharField(max_length=<span class="number">1</span>,choices=SHIRT_SIZES)</span><br></pre></td></tr></tbody></table></figure><p><strong>(4)</strong> <strong>default</strong>：该变量的值，可以是一个值或者是一个可调用的对象，如果是个可调用的对象，每次实例化模型时都会调用该对象。默认不能是可变对象（模型实例，<strong>list</strong>，<strong>set</strong>等），作为该对象的相同实例的引用将被用作在所有新的模型实例的默认值。而是将所需的默认值包装在可调用中。例如，如果要指定一个默认<strong>dict</strong>的<a href="#django.contrib.postgres.fields.JSONField"><strong>JSONField</strong></a>，使用函数：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">contact_default</span>():</span><br><span class="line">   <span class="keyword">return</span> {<span class="string">"email"</span>: <span class="string">"to1@example.com"</span>}</span><br><span class="line">contact_info = JSONField(<span class="string">"ContactInfo"</span>, default=contact_default)</span><br></pre></td></tr></tbody></table></figure><p><strong>(5)</strong> <strong>help_text：</strong>额外的帮助文本，将与表单窗口小部件仪器显示，即使字段未在表单上使用，对于文档记录很有帮助。</p><p><strong>(6)</strong> <strong>primary_key</strong>：如果设置为True，则该初始设置为该模型的主键。在一个模型中，如果没有对任何一个字段设置primary_key=True选项。Djnago中会自动添加一个IntegerField字段，用于设置为主键，因此除非像重写默认的主键，否则可以不手动设置主键。</p><p><strong>(7)</strong> <strong>unique：</strong>如果设置为True，这个细分必须在整个表中保持值唯一。</p><p><strong>(8)</strong> <strong>verbose_name：</strong>该字段的易读名称。如果未提供详细名称，则Django将使用字段的属性名称自动创建，将下划线转换为空格。在admin管理后台中会显示该名称。</p><p><strong>(9)</strong> <strong>db_colum：</strong>用于此字段的数据库序列名称。如果未指定，Django将使用该字段的名称。</p><p><strong>(10)</strong> <strong>db_index：</strong>如果为True，将为此字段创建数据库索引。</p><p><strong>(11)</strong> <strong>db.tablespace：</strong>如果该字段已创建索引，则用于该字段的索引为数据库表空间的名称。默认值是项目的<a href="#std:setting-DEFAULT_INDEX_TABLESPACE"><strong>DEFAULT_INDEX_TABLESPACE</strong></a>设置（如果已设置），或者 <a href="#django.db.models.Options.db_tablespace"><strong>db_tablespace</strong></a>是模型的设置（如果有）。如果后端不支持索引的表空间，则可以忽略。PostgreSQL和Oracle支持表空间。SQLite和MySQL不支持。</p><p><strong>(12)</strong> <strong>editable：</strong>如果为False，则该字段将不会显示在管理员或其它任何人中ModelForm。在模型验证期间也将跳过他们。默认值为True。</p><p><strong>(13)</strong> <strong>Error_messages：</strong>参数可以覆盖还该字段将引发的默认消息。传递一个包含与您要覆盖的错误消息相匹配的键的字典。错误消息包括：null,blank,invalid,invalid_choice,unique,和unique_for_date。</p><p><strong>(14)</strong> <strong>unique_for_date：</strong>将设置为DateField或DateTimeField的日期字段的值是唯一的。当字段为DateTimeField时，仅考虑字段的日期部分。</p><p><strong>(15)</strong> <strong>unique_for_month：</strong>要求该字段相对于月份是唯一的。</p><p><strong>(16)</strong> <strong>unique_for_year：</strong>要求该字段对于年份是唯一的。</p><p><strong>(17)validators</strong>：要为此字段运行的验证器列表。验证器示例：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.exceptions <span class="keyword">import</span> ValidationError</span><br><span class="line"><span class="keyword">from</span> django.utils.translation <span class="keyword">import</span> gettext_lazy <span class="keyword">as</span> _</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">validate_even</span>(<span class="params">value</span>):</span><br><span class="line">  <span class="keyword">if</span> value % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">raise</span> ValidationError(</span><br><span class="line">           _(<span class="string">'%(value)s is not an even number'</span>),</span><br><span class="line">          params={<span class="string">'value'</span>: value},</span><br><span class="line">      )</span><br></pre></td></tr></tbody></table></figure><p><strong>(18)validators</strong>:用于方便主表查从表中的数据。<br>可以把引用理解为主从关系，主引用从，即一对多 , 注意外键字段是放在多的一端的，比如一个班级class 有很多同学 students,那么就在students类里面设置class字段值是外键类型从students拿class数据很好拿, studets.class就拿到了。<br>但是从class 拿students数据 就不好拿了,当然也可以拿,默认的方式是class.students_set.all() 也可以拿到不过这样麻烦,简单一点就是设置一个related_name=classs属性直接 class.classs.all() 就可以了。�直接 class.classs.all() 就可以了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>QuerySet API</title>
      <link href="/2022/05/19/treasurebox/python/django/1.mo-xing-ceng/5.queryset-api/"/>
      <url>/2022/05/19/treasurebox/python/django/1.mo-xing-ceng/5.queryset-api/</url>
      
        <content type="html"><![CDATA[<h2 id="QuerySet-API使用"><a href="#QuerySet-API使用" class="headerlink" title="QuerySet API使用"></a>QuerySet API使用</h2><p>QuerySet可以构造、过滤、切片、和大致的结果而不实际访问数据库。除非执行某些操作来评估查询集，否则实际上不会发生对数据库的查询活动。</p><h3 id="1-基本属性"><a href="#1-基本属性" class="headerlink" title="(1) 基本属性"></a><strong>(1)</strong> <strong>基本属性</strong></h3><ol><li><p><strong>迭代</strong></p><p> QuerySet是可迭代的，并且在第一次对其迭代是会执行其数据库查询。如：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> Entry.objects.<span class="built_in">all</span>():</span><br><span class="line"> <span class="built_in">print</span>(e.headline)</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>切片</strong></p><p> 可以使用python的数组切片语法对QuerySet集进行切片操作。</p></li><li><p><strong>len</strong></p><p> 返回QuerySet列表的长度。</p></li><li><p><strong>list</strong></p><p> 使用list()进行强制转化。entry_list = list(Entry.objects.all())</p></li><li><p><strong>exists</strong></p><p> 判断结果集中是否存在至少一个结果。Entry.objects.all().exists()。</p></li></ol><h3 id="2-查询"><a href="#2-查询" class="headerlink" title="(2) 查询"></a><strong>(2)</strong> <strong>查询</strong></h3><ol><li><p><strong>filter</strong></p><p> ​条件查找，是一个结果集，多个条件时使用逗号(,)隔开。Entry.objects.filter(id=3,name=’张三’)。</p></li><li><p><strong>exclude</strong></p><p> 筛选出与给定查找参数不匹配的结果，是一个结果集，多个条件时使用逗号(,)隔开。Entry.objects.exclude(id=3,name=’张三’)。括号里面的参数属于and关系。当想使用or关系时要写多个exclude()。</p></li><li><p><strong>annotate</strong></p><p> 表达式可以是简单值，也可以是对模型（或任何相关模型）上字段的引用，也可以是针对与对象中的对象相关的对象计算出的聚合表达式（平均值，总和等）</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Count</span><br><span class="line">q = Blog.objects.annotate(Count(<span class="string">'entry'</span>))</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>order_by</strong></p><p> ​默认情况下可以在<strong>Meta</strong>给出的ordering排序元组进行排序，可以使用order_by()对ordering的方法进行覆盖，额外对查询结果进行排序。</p><p> 如：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Entry.objects.order_by(<span class="string">'headline'</span>)</span><br></pre></td></tr></tbody></table></figure><p> 在字段名称前加负号(-)代表降序。</p><p> 如果想要随机排序，可以使用”?”，如下：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Entry.objects.order_by(<span class="string">'?'</span>)</span><br></pre></td></tr></tbody></table></figure><p> <strong>注意：</strong>order_by(‘?’)查询比较缓慢。</p><p> 多次使用order_by时会使前边的排序规则失效。</p></li><li><p><strong>reverse</strong></p><p> 使用reverse()可以翻转查询集元素的返回顺序。如：检索查询集中”最后”五个项目，可以执行以下操作：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Entry.objects.order_by(<span class="string">'headline'</span>).reverse()[:<span class="number">5</span>]</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>distinct</strong></p><p> 消除重复的行。</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Entry.objects.order_by(<span class="string">'pub_date'</span>).distinct(<span class="string">'pub_date'</span>)</span><br><span class="line">Entry.objects.order_by(<span class="string">'blog'</span>).distinct(<span class="string">'blog'</span>)</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>values</strong></p><p> 返回QuerySet用作迭代器时返回的字典，而不是模型实例，这些词典中的每一个都代表对象，键对应于模型对象的属性名称。</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Blog.objects.<span class="built_in">filter</span>(name__startswith=<span class="string">'Beatles'</span>)</span><br><span class="line"><span class="comment">#&lt;QuerySet [&lt;Blog: Beatles Blog&gt;]&gt;</span></span><br><span class="line">Blog.objects.<span class="built_in">filter</span>(name__startswith=<span class="string">'Beatles'</span>).values()</span><br><span class="line"><span class="comment">#&lt;QuerySet [{'id': 1, 'name': 'Beatles Blog', 'tagline': 'All the latest Beatles news.'}]&gt;</span></span><br></pre></td></tr></tbody></table></figure><p> values()方法可以采用可选的位置参数，如果指定字段，则每个字典将仅包含指定的字段的键/值，如果不指定字段，则每个字段将为数据库表忠中的每个字段包含一个键和值。如：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Blog.objects.values()</span><br><span class="line"><span class="comment">#&lt;QuerySet [{'id': 1, 'name': 'Beatles Blog', 'tagline': 'All the latest Beatles news.'}]&gt;</span></span><br><span class="line"></span><br><span class="line">Blog.objects.values(<span class="string">'id'</span>, <span class="string">'name'</span>)</span><br><span class="line"><span class="comment">#&lt;QuerySet [{'id': 1, 'name': 'Beatles Blog'}]&gt;</span></span><br></pre></td></tr></tbody></table></figure><p> values()子句中的聚合在同一values()子句中的其他参数之前应用。如果需要按另一个值分组，请将其添加到更早的values()子句中。例如：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Count</span><br><span class="line">Blog.objects.values(<span class="string">'entry__authors'</span>,entries=Count(<span class="string">'entry'</span>))</span><br><span class="line"><span class="comment">#&lt;QuerySet [{'entry__authors': 1, 'entries': 20}, {'entry__authors': 1, 'entries': 13}]</span></span><br><span class="line"></span><br><span class="line">Blog.objects.values(<span class="string">'entry__authors'</span>).annotate(entries=Count(<span class="string">'entry'</span>))</span><br><span class="line"><span class="comment">#&lt;QuerySet [{'entry__authors': 1, 'entries': 33}]&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>values_list</strong></p><p> 类似于values，但是返回元组形式的数据，每个元组包含来自传递到values_list()中调用的相应字段或表达式的值。</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> Entry.objects.values_list(<span class="string">'id'</span>, <span class="string">'headline'</span>)</span><br><span class="line"><span class="comment">#&lt;QuerySet [(1, 'First entry'), ...]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db.models.functions <span class="keyword">import</span> Lower</span><br><span class="line">Entry.objects.values_list(<span class="string">'id'</span>, Lower(<span class="string">'headline'</span>))</span><br><span class="line"><span class="comment">#&lt;QuerySet [(1, 'first entry'), ...]&gt;</span></span><br></pre></td></tr></tbody></table></figure><p> 如果仅传递单个字段，则也可以传递flat参数。如果flat为True，则表示返回的结果是单个值，而不是一个元组。</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Entry.objects.values_list(<span class="string">'id'</span>).order_by(<span class="string">'id'</span>)</span><br><span class="line"><span class="comment">#&lt;QuerySet[(1,), (2,), (3,), ...]&gt;</span></span><br><span class="line"></span><br><span class="line">Entry.objects.values_list(<span class="string">'id'</span>, flat=**<span class="literal">True</span>**).order_by(<span class="string">'id'</span>)</span><br><span class="line"><span class="comment">#&lt;QuerySet [1, 2, 3, ...]&gt;</span></span><br></pre></td></tr></tbody></table></figure><p> 可以通过named=True来获取结果named tuple()</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Entry.objects.values_list(<span class="string">'id'</span>, <span class="string">'headline'</span>, named=**<span class="literal">True</span>**)</span><br><span class="line">QuerySet [Row(<span class="built_in">id</span>=<span class="number">1</span>, headline=<span class="string">'First entry'</span>), ...]&gt;</span><br></pre></td></tr></tbody></table></figure><p> 如果不向values_list()中传递任何值，则按照声明的顺序返回模型中的所有字段，通常需要获取某个模型实例的特定字段值，因此需要values_list()配合get()使用。</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Entry.objects.values_list(<span class="string">'headline'</span>, flat=**<span class="literal">True</span>**).get(pk=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#'First entry'</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>dates</strong></p><p> <strong>dates</strong>（field，kind，order =’ASC’），返回结果是一个QuerySet，结果是一个datetime.date对象列表，该对象列表表示的内容中也定种类的所有可用日期QuerySet。</p><p> Field应该是DateField类型，kind可以为year，month，week，day。</p><ul><li>“year”返回该字段的所有不同年份值的列表。</li><li>“month”返回该字段的所有不同年份/月份值的列表。</li><li>“week”返回该字段的所有不同年份/星期值的列表。所有日期均为星期一。</li><li>“day”返回该字段所有不同年/月/日值的列表。</li></ul></li><li><p><strong>none</strong></p><p>创建一个空的查询集，该查询集不返回任何对象，并且在访问结果时不执行任何操作。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Entry.objects.none()</span><br><span class="line">&lt;QuerySet []&gt;</span><br><span class="line"><span class="keyword">from</span> django.db.models.query <span class="keyword">import</span> EmptyQuerySet</span><br><span class="line"></span><br><span class="line"><span class="built_in">isinstance</span>(Entry.objects.none(), EmptyQuerySet)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>all</strong></p><p>查询所有的数据。</p></li><li><p><strong>raw</strong></p><p>执行该查询会进行原始SQL查询。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> Person.objects.raw(<span class="string">'SELECT * FROM myapp_person'</span>):     </span><br><span class="line"><span class="built_in">print</span>(p)  <span class="comment">#John SmithJane Jones</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>Q</strong></p><p>and（&amp;）连接符：</p><p><strong>from</strong> <strong>django.db.models</strong> <strong>import</strong> Q</p><p>以下为等价查询：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Model.objects.<span class="built_in">filter</span>(x=<span class="number">1</span>) &amp; Model.objects.<span class="built_in">filter</span>(y=<span class="number">2</span>)</span><br><span class="line">Model.objects.<span class="built_in">filter</span>(x=<span class="number">1</span>, y=<span class="number">2</span>) </span><br><span class="line">Model.objects.<span class="built_in">filter</span>(Q(x=<span class="number">1</span>) &amp; Q(y=<span class="number">2</span>))</span><br><span class="line">等效于SELECT ... WHERE x=<span class="number">1</span> AND y=<span class="number">2</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>or(|)</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Model.objects.<span class="built_in">filter</span>(x=<span class="number">1</span>) | Model.objects.<span class="built_in">filter</span>(y=<span class="number">2</span>)</span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line">Model.objects.<span class="built_in">filter</span>(Q(x=<span class="number">1</span>) | Q(y=<span class="number">2</span>))</span><br></pre></td></tr></tbody></table></figure><p>SQL等效项：</p><p>SELECT … WHERE x=1 OR y=2;</p></li><li><p><strong>contains</strong></p><p>模糊查询，区分大小写。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Entry.objects.get(headline__contains=<span class="string">'Lennon'</span>)</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>icontains</strong></p><p>模糊查询，不区分大小写。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Entry.objects.get(headline__icontains=<span class="string">'Lennon'</span>)</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>in</strong></p><p>查询在列表、元组或其他查询集中的数据，也可接收字符串。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Entry.objects.<span class="built_in">filter</span>(id__in=[<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">Entry.objects.<span class="built_in">filter</span>(headline__in=<span class="string">'abc'</span>)</span><br></pre></td></tr></tbody></table></figure><p>​<strong>等价于：</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT ... WHERE id IN (1, 3, 4);</span><br><span class="line"></span><br><span class="line">SELECT ... WHERE headline IN ('a', 'b', 'c');</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>gt</strong></p><p>大于。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Entry.objects.<span class="built_in">filter</span>(id__gt=<span class="number">4</span>)</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>gte</strong> </p><p>大于等于。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Entry.objects.<span class="built_in">filter</span>(id__gte=<span class="number">4</span>)</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>lt</strong></p><p>小于。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Entry.objects.<span class="built_in">filter</span>(id__lt=<span class="number">4</span>)</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>lte</strong></p><p>小于等于。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Entry.objects.<span class="built_in">filter</span>(id__lte=<span class="number">4</span>)</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>startswith</strong></p><p>区分大小写，以….开头</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Entry.objects.<span class="built_in">filter</span>(headline__startswith=<span class="string">'Lennon'</span>)</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>istartswidth</strong></p><p>不区分大小写，以…开头</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Entry.objects.<span class="built_in">filter</span>(headline__istartswith=<span class="string">'Lennon'</span>)</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>endswith</strong></p><p>区分大小写，以…结束</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Entry.objects.<span class="built_in">filter</span>(headline__endswith=<span class="string">'Lennon'</span>)</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>iendswith</strong></p><p>区分大小写，以…结束</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Entry.objects.<span class="built_in">filter</span>(headline__iendswith=<span class="string">'Lennon'</span>)</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>range</strong></p><p>范围查询。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">start_date = datetime.date(<span class="number">2005</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">end_date = datetime.date(<span class="number">2005</span>, <span class="number">3</span>, <span class="number">31</span>)</span><br><span class="line"></span><br><span class="line">Entry.objects.<span class="built_in">filter</span>(pub_date__range=(start_date, end_date))</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>F</strong></p><p>F允许Django在未实际链接数据的情况下，具有对数据库字段的值的引用。通常情况下会在更新数据时先从数据库里对原始数据取出后放在内存里，然后编辑某些属性进行提交。如：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">order = Order.objects.get(orderid=<span class="string">'123456789'</span>)</span><br><span class="line">order.amount += <span class="number">1</span></span><br><span class="line">order.save()</span><br></pre></td></tr></tbody></table></figure><p>此时的SQL语句等效为：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UPDATE core_order SET ..., amount = 22 WHERE core_order.orderid = '123456789' </span><br><span class="line"># ...表示Order中的其他值，在这里会重新赋一遍值; 22表示为计算后的结果</span><br></pre></td></tr></tbody></table></figure><p>当使用F()函数时：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F</span><br><span class="line"><span class="keyword">from</span> core.models <span class="keyword">import</span> Order</span><br><span class="line"> </span><br><span class="line">order = Order.objects.get(orderid=<span class="string">'123456789'</span>)</span><br><span class="line">order.amount = F(<span class="string">'amount'</span>) - <span class="number">1</span></span><br><span class="line">order.save()</span><br></pre></td></tr></tbody></table></figure><p>此时SQL语句等价于：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE core_order SET ..., amount = amount + 1 WHERE core_order.orderid = '123456789'</span><br></pre></td></tr></tbody></table></figure><p>在使用此种方法跟新数据之后，需要重新加载数据来使数据库中的值与程序中的值对应：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">order= Order.objects.get(pk=order.pk) </span><br><span class="line"> </span><br><span class="line"><span class="comment">#  或者使用更加简单的方法：</span></span><br><span class="line">order.refresh_from_db()</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="3-不适用于缓存的查询"><a href="#3-不适用于缓存的查询" class="headerlink" title="(3) 不适用于缓存的查询"></a><strong>(3)</strong> <strong>不适用于缓存的查询</strong></h3><ol><li><p><strong>count</strong></p><p> 返回一个整数，该整数表示数据库中与匹配的对象数。</p></li><li><p><strong>in_bulk</strong></p><p> 获取字段值（id_list）和filed_name这些值的列表，并返回将每个值映射到具体给定字段值的对象实例的字典。如果id_list未提供，则返回查询集中所有对象。Filed_name必须是唯一字段，并且默认为主键。</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> Blog.objects.in_bulk([<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#{1: &lt;Blog: Beatles Blog&gt;} </span></span><br><span class="line"></span><br><span class="line">Blog.objects.in_bulk([<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#{1:&lt;Blog:BeatlesBlog&gt;,2:&lt;Blog:CheddarTalk&gt;}</span></span><br><span class="line"></span><br><span class="line">Blog.objects.in_bulk([]){}Blog.objects.in_bulk()</span><br><span class="line"></span><br><span class="line"><span class="comment">#{1: &lt;Blog: Beatles Blog&gt;, 2: &lt;Blog: Cheddar Talk&gt;, 3: &lt;Blog: Django Weblog&gt;}</span></span><br><span class="line"></span><br><span class="line">Blog.objects.in_bulk([<span class="string">'beatles_blog'</span>], field_name=<span class="string">'slug'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#{'beatles_blog': &lt;Blog: Beatles Blog&gt;}</span></span><br></pre></td></tr></tbody></table></figure><p> <strong>注意：</strong></p><p> 如果在in_bluk中传递一个空列表，则会得到一个空字典。</p></li><li><p><strong>latest</strong></p><p> 根据给定的字段返回列表中的最新对象。例：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Entry.objects.latest(<span class="string">'pub_date'</span>)</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>first</strong></p><p> 返回结果集中匹配到的第一个对象。</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p = Article.objects.order_by(<span class="string">'title'</span>, <span class="string">'pub_date'</span>).first()</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>last</strong></p><p> 类似于first，返回结果集中的最后一个。</p></li><li><p><strong>aggregate</strong></p><p> 返回计算出的合计值（平均值、总和等）的字典QuerySet。每个参数都指定一个值，该值将包含在返回的字典中。例：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Count</span><br><span class="line"></span><br><span class="line">q = Blog.objects.aggregate(Count(<span class="string">'entry'</span>))</span><br><span class="line">{<span class="string">'entry__count'</span>: <span class="number">16</span>}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>get</strong></p><p> 根据条件查询单条数据，查不到时会报错。如果希望结果集中返回一行，则可以使用get()不加任何参数的行来返回改行的对象：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">entry = Entry.objects.<span class="built_in">filter</span>(...).exclude(...).get()</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="4-保存"><a href="#4-保存" class="headerlink" title="(4) 保存"></a><strong>(4)</strong> <strong>保存</strong></h3><ol><li><p><strong>create</strong></p><p> 可以一步创建对象并将其全部保存：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p = Person.objects.create(first_name=<span class="string">"Bruce"</span>, last_name=<span class="string">"Springsteen"</span>)</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>save</strong></p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p = Person(first_name=<span class="string">"Bruce"</span>, last_name=<span class="string">"Springsteen"</span>)</span><br><span class="line"></span><br><span class="line">p.save(force_insert=**<span class="literal">True</span>**)</span><br></pre></td></tr></tbody></table></figure><p> 或者：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">P=Person()</span><br><span class="line">p.first_name=<span class="string">"Bruce"</span></span><br><span class="line">p.last_name=<span class="string">"Springsteen"</span></span><br><span class="line">p.save()</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>get_or_create</strong></p><p> 一种使用给定查找对象的便捷方法kwargs（如果模型的所有字段均具有默认值，则为空），并在必要时创建一个对象。</p></li><li><p><strong>update_or_create</strong></p><p> 一种使用给定对象更新对象的便捷方法，该update_or_create方法尝试根据给定的值从数据库中获取对象kwargs。如果找到匹配项，它将更新defaults字典中传递的字段 。</p></li></ol><h3 id="5-修改"><a href="#5-修改" class="headerlink" title="(5) 修改"></a><strong>(5)</strong> <strong>修改</strong></h3><ol><li><p><strong>update</strong></p><p> 对指定的字段执行SQL更新查询，并返回匹配的行数（如果某些行已经具有新值，则该行数可能不等于更新的行数）</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Entry.objects.<span class="built_in">filter</span>(pub_date__year=<span class="number">2010</span>).update(comments_on=<span class="literal">False</span>, headline=<span class="string">'This is old'</span>)</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>save</strong></p><p> 使用save方法进行修改。</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">e = Entry.objects.get(<span class="built_in">id</span>=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">e.comments_on = <span class="literal">False</span></span><br><span class="line">e.save()</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="6-删除"><a href="#6-删除" class="headerlink" title="(6) 删除"></a><strong>(6)</strong> <strong>删除</strong></h3><ol><li><p><strong>delete</strong></p><p>对QuerySet执行删除操作。例：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Entry.objects.<span class="built_in">filter</span>(blog=b).delete()</span><br><span class="line"></span><br><span class="line"><span class="comment">#(4, {'weblog.Entry': 2, 'weblog.Entry_authors': 2})</span></span><br></pre></td></tr></tbody></table></figure></li></ol><p>.objects.filter(pub_date__year=2010).update(comments_on=False, headline=’This is old’)<br>    </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. **save**</span><br><span class="line"></span><br><span class="line">    使用save方法进行修改。</span><br><span class="line"></span><br><span class="line">    ```python</span><br><span class="line">    e = Entry.objects.get(id=10)</span><br><span class="line">    </span><br><span class="line">    e.comments_on = False</span><br><span class="line">    e.save()</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="6-删除-1"><a href="#6-删除-1" class="headerlink" title="(6) 删除"></a><strong>(6)</strong> <strong>删除</strong></h3><ol><li><p><strong>delete</strong></p><p>对QuerySet执行删除操作。例：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Entry.objects.<span class="built_in">filter</span>(blog=b).delete()</span><br><span class="line"></span><br><span class="line"><span class="comment">#(4, {'weblog.Entry': 2, 'weblog.Entry_authors': 2})</span></span><br></pre></td></tr></tbody></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>URL调度器</title>
      <link href="/2022/05/19/treasurebox/python/django/2.shi-tu-ceng/1.url-diao-du-qi/"/>
      <url>/2022/05/19/treasurebox/python/django/2.shi-tu-ceng/1.url-diao-du-qi/</url>
      
        <content type="html"><![CDATA[<h3 id="URL调度器"><a href="#URL调度器" class="headerlink" title="URL调度器"></a>URL调度器</h3><h4 id="一、请求处理流程"><a href="#一、请求处理流程" class="headerlink" title="一、请求处理流程"></a>一、请求处理流程</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,include</span><br></pre></td></tr></tbody></table></figure><p>当一个用户请求Django站点的页面时，Django系统按以下流程执行python代码：</p><ol><li>Django首先确定要使用的根URLconf模块，通常，这是在settings.py中设置的<a href="https://docs.djangoproject.com/zh-hans/2.1/ref/settings/#std:setting-ROOT_URLCONF"><code>ROOT_URLCONF</code></a>的值。但是如果传入<code>HttpRequest</code>对象具有<a href="https://docs.djangoproject.com/zh-hans/2.1/ref/request-response/#django.http.HttpRequest.urlconf"><code>urlconf</code></a> 属性（由中间件设置），则将使用其值代替<a href="https://docs.djangoproject.com/zh-hans/2.1/ref/settings/#std:setting-ROOT_URLCONF"><code>ROOT_URLCONF</code></a>设置。</li><li>Django加载该Python模块并查找变量 <code>urlpatterns</code>。这是<a href="https://docs.djangoproject.com/zh-hans/2.1/ref/urls/#django.urls.path"><code>django.urls.path()</code></a> 和/或<a href="https://docs.djangoproject.com/zh-hans/2.1/ref/urls/#django.urls.re_path"><code>django.urls.re_path()</code></a>实例的Python列表。</li><li>Django依次匹配每个URL模式，在与请求的URL匹配的第一个模式停下来。</li><li>一旦与其中一个URL模式匹配，Django就会导入并调用给定的视图，该视图是一个简单的Python函数（或基于类的视图）。该视图将传递以下参数：<ul><li>一个<a href="https://docs.djangoproject.com/zh-hans/2.1/ref/request-response/#django.http.HttpRequest"><code>HttpRequest</code></a>实例。</li><li>如果匹配的URL模式未返回命名组，则来自正则表达式的匹配项将作为位置参数。</li><li>关键字参数由与路径表达式匹配的任何命名部分组成，并由可选的<code>kwargs</code>参数中指定的任何参数覆盖 。<a href="https://docs.djangoproject.com/zh-hans/2.1/ref/urls/#django.urls.path"><code>django.urls.path()</code></a><a href="https://docs.djangoproject.com/zh-hans/2.1/ref/urls/#django.urls.re_path"><code>django.urls.re_path()</code></a></li></ul></li><li>如果没有URL模式匹配，或者在此过程中的任何时候引发异常，Django都会调用一个适当的错误处理视图。</li></ol><h4 id="二、URL中携带的参数"><a href="#二、URL中携带的参数" class="headerlink" title="二、URL中携带的参数"></a>二、URL中携带的参数</h4><ol><li><p>在URL中传递的参数，要使用尖括号去传递参数。</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">'articles/&lt;int:year&gt;/'</span>, views.year_archive),</span><br></pre></td></tr></tbody></table></figure></li><li><p>参数的类型</p><ul><li><p>str</p><p>  匹配任何非空字符串，但路径分隔符除外’/‘。如果在表达式中不包含转换器，则为默认设置。</p></li><li><p>int</p><p>  匹配零或任何正整数。返回一个int。</p></li><li><p>slug</p><p>  匹配一个由ASCII字母或数字以及连字符和下划线字符组成的任何条形字符串。</p></li><li><p>uuid</p><p>  匹配格式化的UUID。为防止多个URL映射到同一页面，必须包含破折号并且字母必须小写。例如：<strong>075194d3-6885-417e-a8a8-6c931e272f00</strong></p></li><li><p>path</p><p>  匹配任何非空字符串，包括路径分隔符’/‘。可以匹配完整的URL路径进行匹配，而不仅仅是与URL路径的一部分进行匹配str。</p></li></ul></li></ol><h4 id="三、使用正则表达式"><a href="#三、使用正则表达式" class="headerlink" title="三、使用正则表达式"></a>三、使用正则表达式</h4><p>​如果路径和转换器不足以定义URL模式时，则还可以使用正则表达式。此时可以使用re_path()代替path()。在python正则表达式中，命名真这个表达式组的语法为(?P<name>pattern)，name为组的名称，pattern是匹配的某种模式。</name></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'articles/2003/'</span>, views.special_case_2003),</span><br><span class="line">    re_path(<span class="string">r'^articles/(?P&lt;year&gt;[0-9]{4})/$'</span>, views.year_archive),</span><br><span class="line">    re_path(<span class="string">r'^articles/(?P&lt;year&gt;[0-9]{4})/(?P&lt;month&gt;[0-9]{2})/$'</span>, views.month_archive),</span><br><span class="line">    re_path(<span class="string">r'^articles/(?P&lt;year&gt;[0-9]{4})/(?P&lt;month&gt;[0-9]{2})/(?P&lt;slug&gt;[\w-]+)/$'</span>, views.article_detail),</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p>‘, views.article_detail),<br>]</p><pre><code></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>变量与过滤器</title>
      <link href="/2022/05/19/treasurebox/python/django/3.mo-ban-ceng/1.bian-liang-yu-guo-lu-qi/"/>
      <url>/2022/05/19/treasurebox/python/django/3.mo-ban-ceng/1.bian-liang-yu-guo-lu-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="模板层的使用"><a href="#模板层的使用" class="headerlink" title="模板层的使用"></a>模板层的使用</h2><h4 id="一、变量"><a href="#一、变量" class="headerlink" title="一、变量"></a>一、变量</h4><p>变量名称由数字、字母和下划线任意组合组成，但不能以下划线开头。在变量中也可以使用点(.)，代表特殊含义。变量名中不能包含空格或标点符号。</p><p>当在模板中遇到点（.）时，会尝试按一下顺序查找</p><ul><li>字典查询</li><li>属性或方法查找</li><li>数值索引查找</li></ul><h4 id="二、过滤器"><a href="#二、过滤器" class="headerlink" title="二、过滤器"></a>二、过滤器</h4><p>通过过滤器对要显示的内容做改变。</p><ul><li><h4 id="default"><a href="#default" class="headerlink" title="default"></a>default</h4><p>  如果变量为False或为空，则使用给定的默认值，否则，将使用变量的值。</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{ value|default:<span class="string">"nothing"</span> }}</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="filesizeformat"><a href="#filesizeformat" class="headerlink" title="filesizeformat"></a>filesizeformat</h4><p>  一个可读的文件大小的值。如：”13KB”，”4.1MB”,”102bytes”。</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{ value|filesizeformat }}</span><br></pre></td></tr></tbody></table></figure><p>  如果value的值为123456789，则输出为：117.7MB。</p></li><li><h4 id="add"><a href="#add" class="headerlink" title="add"></a>add</h4><p>  对value值进行加法操作。如果value为4，则结果为6。</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{ value|add:<span class="number">2</span> }}</span><br></pre></td></tr></tbody></table></figure><p>  如果想减去某个值，则将add后的数字改为负数。</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{ value|add:-<span class="number">2</span> }}</span><br></pre></td></tr></tbody></table></figure><p>  如果想将字符串类型改为整数类型，则进行+0操作。</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{ value|add:<span class="number">0</span> }}</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="widthratio"><a href="#widthratio" class="headerlink" title="widthratio"></a>widthratio</h4>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{% widthratio <span class="number">5</span> <span class="number">1</span> <span class="number">100</span> %}</span><br></pre></td></tr></tbody></table></figure><p>  该代码表示：5/1*100，返回500，widthratio需要三个参数，他会使用参数1/参数2*参数3，所以进行乘法时，将参数2赋值为1即可。</p><p>  如果想进行除法时，则将参数三的值赋为1即可。</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{% widthratio <span class="number">5</span> <span class="number">100</span> <span class="number">1</span> %}</span><br></pre></td></tr></tbody></table></figure><p>  如果想对widthratio函数处理后的值当做变量，可以使用如下方法：</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{% widthratio this_value max_value max_width <span class="keyword">as</span> width %}</span><br><span class="line"></span><br><span class="line">{% blocktrans %}The width <span class="keyword">is</span>: {{ width }}{% endblocktrans %}</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="second"><a href="#second" class="headerlink" title="second"></a>second</h4><p>  进行加2次操作。如：</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{ first|add:second }}</span><br></pre></td></tr></tbody></table></figure><p>  first为[1,2,3]时，第二次为[4,5,6]，最终的输出为[1,2,3,4,5,6]</p></li><li><h4 id="addlashes"><a href="#addlashes" class="headerlink" title="addlashes"></a>addlashes</h4><p>  在引号前边加斜杠，在CSV中转义字符串很有用。如：</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{ value|addslashes }}</span><br></pre></td></tr></tbody></table></figure><p>  如果value是：**”I’m** <strong>using</strong> <strong>Django”<strong>，则结果为：</strong>“I\‘m</strong> <strong>using</strong> <strong>Django”</strong></p></li><li><h4 id="capfirst"><a href="#capfirst" class="headerlink" title="capfirst"></a>capfirst</h4><p>  将值的第一个字符大写，如果第一个字符不是大写时，则此过滤器不会生效。</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{ value|capfirst }}</span><br></pre></td></tr></tbody></table></figure><p>  如果value值为”django”，则输出为”Django”。</p></li><li><h4 id="center"><a href="#center" class="headerlink" title="center"></a>center</h4><p>  将值居中在给定宽度的字段中。</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"{{ value|center:"</span><span class="number">15</span><span class="string">" }}"</span></span><br></pre></td></tr></tbody></table></figure><p>  如果value的值为”django”，则输出为：**”**     <strong>Django</strong>    <strong>“</strong></p></li><li><h4 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h4><p>  从给定的字符串中删除所有的arg的值。如删除字符串中所有的空格</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{ value|cut:<span class="string">" "</span> }}</span><br></pre></td></tr></tbody></table></figure><p>  如果value是”<strong>String</strong> <strong>with</strong> <strong>spaces</strong>“，则输出结果为”<strong>Stringwithspaces</strong>“</p></li><li><h4 id="date"><a href="#date" class="headerlink" title="date"></a>date</h4><p>  根据给定的格式格式化日期。如：</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">{{ value|date:<span class="string">"D d M Y"</span> }} </span><br><span class="line">{{ value|time:<span class="string">"H:i"</span> }}</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="default-if-none"><a href="#default-if-none" class="headerlink" title="default_if_none"></a>default_if_none</h4><p>  当且仅当值为None，则使用给定的默认值，否则使用该值。如果是空字符串时，将不使用默认值。</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{ value|default_if_none:<span class="string">"nothing"</span> }}</span><br></pre></td></tr></tbody></table></figure><p>  如果value是None，则输出为nothing。</p></li><li><h4 id="dictsort"><a href="#dictsort" class="headerlink" title="dictsort"></a>dictsort</h4><p>  获取字典列表，并返回按参数中给定键排序的列表。</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{ value|dictsort:<span class="string">"name"</span> }}</span><br></pre></td></tr></tbody></table></figure><p>  如果value是：</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    {<span class="string">'name'</span>: <span class="string">'zed'</span>, <span class="string">'age'</span>: <span class="number">19</span>},</span><br><span class="line">    {<span class="string">'name'</span>: <span class="string">'amy'</span>, <span class="string">'age'</span>: <span class="number">22</span>},</span><br><span class="line">    {<span class="string">'name'</span>: <span class="string">'joe'</span>, <span class="string">'age'</span>: <span class="number">31</span>},</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p>  那么输出结果将是：</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    {<span class="string">'name'</span>: <span class="string">'amy'</span>, <span class="string">'age'</span>: <span class="number">22</span>},</span><br><span class="line">    {<span class="string">'name'</span>: <span class="string">'joe'</span>, <span class="string">'age'</span>: <span class="number">31</span>},</span><br><span class="line">    {<span class="string">'name'</span>: <span class="string">'zed'</span>, <span class="string">'age'</span>: <span class="number">19</span>},</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p>  还可执行更复杂的操作，如：</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{% <span class="keyword">for</span> book <span class="keyword">in</span> books|dictsort:<span class="string">"author.age"</span> %}</span><br><span class="line">    * {{ book.title }} ({{ book.author.name }})</span><br><span class="line">{% endfor %}</span><br></pre></td></tr></tbody></table></figure><p>  如果books是：</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    {<span class="string">'title'</span>: <span class="string">'1984'</span>, <span class="string">'author'</span>: {<span class="string">'name'</span>: <span class="string">'George'</span>, <span class="string">'age'</span>: <span class="number">45</span>}},</span><br><span class="line">    {<span class="string">'title'</span>: <span class="string">'Timequake'</span>, <span class="string">'author'</span>: {<span class="string">'name'</span>: <span class="string">'Kurt'</span>, <span class="string">'age'</span>: <span class="number">75</span>}},</span><br><span class="line">    {<span class="string">'title'</span>: <span class="string">'Alice'</span>, <span class="string">'author'</span>: {<span class="string">'name'</span>: <span class="string">'Lewis'</span>, <span class="string">'age'</span>: <span class="number">33</span>}},</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p>  那么输出是：</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* Alice (Lewis)</span><br><span class="line">* <span class="number">1984</span> (George)</span><br><span class="line">* Timequake (Kurt)</span><br></pre></td></tr></tbody></table></figure><p>  还可以按照指定索引处的元素队列表（或其它实现的对象）进行排序。索引必须作为整数传递，而不能是字符串(‘0’)。如：</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{ value|dictsort:<span class="number">0</span> }}</span><br></pre></td></tr></tbody></table></figure><p>  如果value是：</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    (<span class="string">'a'</span>, <span class="string">'42'</span>),</span><br><span class="line">    (<span class="string">'c'</span>, <span class="string">'string'</span>),</span><br><span class="line">    (<span class="string">'b'</span>, <span class="string">'foo'</span>),</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p>  那么输出将是：</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    (<span class="string">'a'</span>, <span class="string">'42'</span>),</span><br><span class="line">    (<span class="string">'b'</span>, <span class="string">'foo'</span>),</span><br><span class="line">    (<span class="string">'c'</span>, <span class="string">'string'</span>),</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="dictsortreversed"><a href="#dictsortreversed" class="headerlink" title="dictsortreversed"></a>dictsortreversed</h4><p>  获取字典列表，并返回该列表，该列表按参数中给定的键以相反的顺序排序。与dictsort相同，只是返回值的顺序相反。</p></li><li><h4 id="divisibleby"><a href="#divisibleby" class="headerlink" title="divisibleby"></a>divisibleby</h4><p>  根据值是否可被参数整除返回True或False。</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{ value|divisibleby:<span class="string">"3"</span> }}</span><br></pre></td></tr></tbody></table></figure><p>  如果value是21，则输出为True。</p></li><li><h4 id="escape"><a href="#escape" class="headerlink" title="escape"></a>escape</h4><p>  转义字符串的HTML，如：</p><ul><li><p><code>&lt;</code> 转换为 <code>&amp;lt;</code></p></li><li><p><code>&gt;</code> 转换为 <code>&amp;gt;</code></p></li><li><p><code>'</code> （单引号）转换为 <code>&amp;#39;</code></p></li><li><p><code>"</code> （双引号）转换为 <code>&amp;quot;</code></p></li><li><p><code>&amp;</code> 转换为 <code>&amp;amp;</code></p><p>  可以在autoescape关闭状态下应用于字段。</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{% autoescape off %}</span><br><span class="line">    {{ title|escape }}</span><br><span class="line">{% endautoescape %}</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><h4 id="first"><a href="#first" class="headerlink" title="first"></a>first</h4><p>  返回列表中的第一项，如：</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{ value|first }}</span><br></pre></td></tr></tbody></table></figure><p>  如果value是列表[‘a’,’b’,’c’]，则输出为：’a’。</p></li><li><h4 id="floatformat"><a href="#floatformat" class="headerlink" title="floatformat"></a>floatformat</h4><ul><li><p>保留小数位数，如果不带参数时，将浮点数四舍五入到小数点后一位，但小数为0时，则不保留。如：</p><table><thead><tr><th><code>value</code></th><th>模板</th><th>输出量</th></tr></thead><tbody><tr><td><code>34.23234</code></td><td><code>{{ value|floatformat}}</code></td><td><code>34.2</code></td></tr><tr><td><code>34.00000</code></td><td><code>{{ value|floatformat}}</code></td><td><code>34</code></td></tr><tr><td><code>34.26000</code></td><td><code>{{ value|floatformat}}</code></td><td><code>34.3</code></td></tr></tbody></table><p>  如果与数字整数参数一起使用，则表示将数字四舍五入到小数点后的位数。例如：</p><table><thead><tr><th><code>value</code></th><th>模板</th><th>输出量</th></tr></thead><tbody><tr><td><code>34.23234</code></td><td><code>{{ value|floatformat:3}}</code></td><td><code>34.232</code></td></tr><tr><td><code>34.00000</code></td><td><code>{{ value|floatformat:3}}</code></td><td><code>34.000</code></td></tr><tr><td><code>34.26000</code></td><td><code>{{ value|floatformat:3}}</code></td><td><code>34.260</code></td></tr></tbody></table><p>  传递0（零）作为参数，则将浮点数四舍五入为最接近的整数。</p><table><thead><tr><th><code>value</code></th><th>模板</th><th>输出量</th></tr></thead><tbody><tr><td><code>34.23234</code></td><td><code>{{ value|floatformat:"0" }}</code></td><td><code>34</code></td></tr><tr><td><code>34.00000</code></td><td><code>{{ value|floatformat:"0" }}</code></td><td><code>34</code></td></tr><tr><td><code>39.56000</code></td><td><code>{{ value|floatformat:"0" }}</code></td><td><code>40</code></td></tr></tbody></table><p>  如果传递给的参数为负数，它将把数字四舍五入到小数点后n位，但是只有在有要显示小数部分的情况下有用。例如：</p><table><thead><tr><th><code>value</code></th><th>模板</th><th>输出量</th></tr></thead><tbody><tr><td><code>34.23234</code></td><td><code>{{ value|floatformat:"-3" }}</code></td><td><code>34.232</code></td></tr><tr><td><code>34.00000</code></td><td><code>{{ value|floatformat:"-3" }}</code></td><td><code>34</code></td></tr><tr><td><code>34.26000</code></td><td><code>{{ value|floatformat:"-3" }}</code></td><td><code>34.260</code></td></tr></tbody></table><p>  使用<code>floatformat</code>不带参数等效于使用<code>floatformat</code> 带参数<code>-1</code>。</p></li></ul></li><li><h4 id="get-digit"><a href="#get-digit" class="headerlink" title="get_digit"></a>get_digit</h4><p>  给定一个整数，返回所请求的数字，其中1是最右边的数字，2是最右边的第二个数字，依此类推。如果输入或参数不是整数，或者参数小于1,z则返回无效输入的原始值。否则，输出始终是整数。</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{ value|get_digit:<span class="string">"2"</span> }}</span><br></pre></td></tr></tbody></table></figure><p>  如果value是123456789，则输出为8。</p></li><li><h4 id="iriencode"><a href="#iriencode" class="headerlink" title="iriencode"></a>iriencode</h4><p>  将IRI（国际化资源标识符）转换为适合包含在URL中的字符串。如果您要在URL中使用包含非ASCII字符的字符串，则这是必需的。</p><p>  例如：</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{ value|iriencode }}</span><br></pre></td></tr></tbody></table></figure><p>  如果<code>value</code>是<code>"?test=1&amp;me=2"</code>，则输出为<code>"?test=1&amp;amp;me=2"</code>。</p></li><li><h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4><p>  用字符串连接列表，例如Python的 <code>str.join(list)</code></p><p>  例如：</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{ value|join:<span class="string">" // "</span> }}</span><br></pre></td></tr></tbody></table></figure><p>  如果<code>value</code>是列表，则输出将为字符串 。<code>['a', 'b', 'c']``"a //b // c"</code></p></li><li><h4 id="join-script"><a href="#join-script" class="headerlink" title="join_script"></a>join_script</h4><p>  Django 2.1的新功能：</p><p>  将Python对象作为JSON安全地输出，包装在<code>&lt;script&gt;</code>标记中，可以与JavaScript一起使用。</p><p>  <strong>参数：</strong><code>&lt;script&gt;</code>标记的HTML“ id” 。</p><p>  例如：</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{ value|json_script:<span class="string">"hello-data"</span> }}</span><br></pre></td></tr></tbody></table></figure><p>  如果<code>value</code>是dictionary ，则输出为：<code>{'hello': 'world'}</code></p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script <span class="built_in">id</span>=<span class="string">"hello-data"</span> <span class="built_in">type</span>=<span class="string">"application/json"</span>&gt;{<span class="string">"hello"</span>: <span class="string">"world"</span>}&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p>  可以使用以下方式在JavaScript中访问结果数据：</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var value = JSON.parse(document.getElementById(<span class="string">'hello-data'</span>).textContent);</span><br></pre></td></tr></tbody></table></figure><p>  通过转义字符“ &lt;”，“&gt;”和“＆”来缓解XSS攻击。例如，如果<code>value</code>为，则输出为：<code>{'hello': 'world&lt;/script&gt;&amp;amp;'}</code></p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script <span class="built_in">id</span>=<span class="string">"hello-data"</span> <span class="built_in">type</span>=<span class="string">"application/json"</span>&gt;{<span class="string">"hello"</span>: <span class="string">"world\\u003C/script\\u003E\\u0026amp;"</span>}&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p>  这与禁止页面内脚本执行的严格的内容安全策略兼容。它还可以在被动数据和可执行代码之间保持清晰的分隔。</p></li><li><h4 id="last"><a href="#last" class="headerlink" title="last"></a>last</h4><p>  返回列表中的最后一项如：</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{ value|last }}</span><br></pre></td></tr></tbody></table></figure><p>  如果value是列表[‘a’,’b’,’c’,’d’]，则输出为字符串’d’。</p></li><li><h4 id="length"><a href="#length" class="headerlink" title="length"></a>length</h4><p>  返回值的长度，适用于字符串和列表。</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{ value|length }}</span><br></pre></td></tr></tbody></table></figure><p>  如果value是[1,2,3,4]或”abcd”，则输出为：4。</p></li><li><h4 id="length-is"><a href="#length-is" class="headerlink" title="length_is"></a>length_is</h4><p>  如果value长度是参数的值，则返回True，否则返回False。</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{ value|length_is:<span class="string">"4"</span> }}</span><br></pre></td></tr></tbody></table></figure><p>  如果<code>value</code>为<code>['a', 'b', 'c', 'd']或"abcd"，则输出为True。</code></p></li><li><h4 id="linebreaks"><a href="#linebreaks" class="headerlink" title="linebreaks"></a>linebreaks</h4><p>  将一段纯文本中的所有换行符转换为HTML换行符（<code>&lt;br&gt;</code>）。</p><p>  例如：</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{ value|linebreaksbr }}</span><br></pre></td></tr></tbody></table></figure><p>  如果<code>value</code>是Joel\n is a slug，则输出为。Joe&lt;br&gt;is a slug</p></li><li><h5 id="linenumbers"><a href="#linenumbers" class="headerlink" title="linenumbers"></a>linenumbers</h5><p>  显示带有行号的文本。如：</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{ value|linenumbers }}</span><br></pre></td></tr></tbody></table></figure><p>  如果value是：</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">one</span><br><span class="line">two</span><br><span class="line">three</span><br></pre></td></tr></tbody></table></figure><p>  输出将是：</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> one</span><br><span class="line"><span class="number">2.</span> two</span><br><span class="line"><span class="number">3.</span> three</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="ljust"><a href="#ljust" class="headerlink" title="ljust"></a>ljust</h4><p>  将值在给定宽度的字段中左对齐。</p><p>  <strong>参数：</strong>字段大小</p><p>  例如：</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"{{ value|ljust:"</span><span class="number">10</span><span class="string">" }}"</span></span><br></pre></td></tr></tbody></table></figure><p>  如果<code>value</code>是<code>Django</code>，则输出为。<code>"Django    "</code></p></li><li><h4 id="lower"><a href="#lower" class="headerlink" title="lower"></a>lower</h4><p>  将字符串所有字母转换为小写字母。如：</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{ value|lower }}</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="safe"><a href="#safe" class="headerlink" title="safe"></a>safe</h4><p>  关闭自动转义功能。</p></li><li><h4 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h4><p>  返回列表的一部分。</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{ some_list|<span class="built_in">slice</span>:<span class="string">":2"</span> }}</span><br></pre></td></tr></tbody></table></figure><p>  如果some_list是[‘a’, ‘b’, ‘c’]，则输出为[‘a’, ‘b’]</p></li><li><h4 id="upper"><a href="#upper" class="headerlink" title="upper"></a>upper</h4><p>  将字符串全部转化为大写。</p><p>  例如：</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{ value|upper }}</span><br></pre></td></tr></tbody></table></figure><p>  如果<code>value</code>是，则输出为。<code>"Joel is a slug"。"JOEL IS A SLUG"</code></p></li><li><p>|lower }}</p>  <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- #### safe</span><br><span class="line"></span><br><span class="line">    关闭自动转义功能。</span><br><span class="line"></span><br><span class="line">- #### slice</span><br><span class="line"></span><br><span class="line">    返回列表的一部分。</span><br><span class="line"></span><br><span class="line">    ```python</span><br><span class="line">    {{ some_list|slice:":2" }}</span><br></pre></td></tr></tbody></table></figure><p>  如果some_list是[‘a’, ‘b’, ‘c’]，则输出为[‘a’, ‘b’]</p></li><li><h4 id="upper-1"><a href="#upper-1" class="headerlink" title="upper"></a>upper</h4><p>  将字符串全部转化为大写。</p><p>  例如：</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{ value|upper }}</span><br></pre></td></tr></tbody></table></figure><p>  如果<code>value</code>是，则输出为。<code>"Joel is a slug"。"JOEL IS A SLUG"</code></p></li><li></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>迁移</title>
      <link href="/2022/05/19/treasurebox/python/django/1.mo-xing-ceng/1.qian-yi/"/>
      <url>/2022/05/19/treasurebox/python/django/1.mo-xing-ceng/1.qian-yi/</url>
      
        <content type="html"><![CDATA[<h3 id="数据库迁移"><a href="#数据库迁移" class="headerlink" title="数据库迁移"></a>数据库迁移</h3><ol><li><p>迁移前的检测</p><p> python manage.py check</p></li><li><p>生成迁移文件</p><p> python manage.py makemigrations</p></li><li><p>执行迁移</p><p> python manage.py migrate</p></li><li><p>显示用于迁移的SQL语句</p><p> python manage.py sqlmigrate</p></li><li><p>列出项目的迁移及其状态</p><p> python manage.py showmigrations</p></li><li><p>忽略某条迁移文件</p><p> python  manage.py  migrate  app_name  0003  –fake</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Meta选项</title>
      <link href="/2022/05/19/treasurebox/python/django/1.mo-xing-ceng/2.meta-xuan-xiang/"/>
      <url>/2022/05/19/treasurebox/python/django/1.mo-xing-ceng/2.meta-xuan-xiang/</url>
      
        <content type="html"><![CDATA[<h3 id="Meta选项"><a href="#Meta选项" class="headerlink" title="Meta选项"></a>Meta选项</h3><ol><li><h4 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h4><p> 如果设置为True时，该模型为抽象基类，在创建表时不创建。</p><p> abstract = True</p></li><li><h4 id="app-label"><a href="#app-label" class="headerlink" title="app_label"></a>app_label</h4><p> 如果模型是在INSTALLED_APPS中定义之外的app中，则必须声明其所属的应用用程序</p><p> app_label = ‘myapp’</p></li><li><h4 id="verbose-name"><a href="#verbose-name" class="headerlink" title="verbose_name"></a>verbose_name</h4><p> 对象的可读名称，在admin后台上单数形式的名称。</p><p> verbose_name = ‘新闻’</p></li><li><h4 id="verbose-name-plural"><a href="#verbose-name-plural" class="headerlink" title="verbose_name_plural"></a>verbose_name_plural</h4><p> 对象的可读名称，在admin后台上复数形式的名称。</p><p> verbose_name_plural = ‘新闻’</p></li><li><h4 id="db-table"><a href="#db-table" class="headerlink" title="db_table"></a>db_table</h4><p> 用于模型的数据库表的名称</p><p> db_table=’music_album’</p></li><li><h4 id="ordering"><a href="#ordering" class="headerlink" title="ordering"></a>ordering</h4><p> 对象的默认排序，用于在获取列表时使用</p><p> ordering = [‘-id’]</p></li><li><h4 id="permission"><a href="#permission" class="headerlink" title="permission"></a>permission</h4><p> 创建额外的权限，将自动为模型创建除了add,change,delete,view之外新的权限。</p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">permissions = (("can_deliver_pizzas", "Can deliver pizzas"),)</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="default-permissions"><a href="#default-permissions" class="headerlink" title="default_permissions"></a>default_permissions</h4><p> 模型的默认权限，可以重新自定义此列表。例如：如果应用不需要任何默认权限，可以将其设置为空列表。必须在创建模型之前在模型上指定它，以防止创建任何遗漏的权限。<code>('add', 'change', 'delete', 'view')</code></p></li><li><h4 id="indexes"><a href="#indexes" class="headerlink" title="indexes"></a>indexes</h4><p> 在模型中定义索引。</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Customer</span>(models.Model):</span><br><span class="line">    first_name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    last_name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        indexes = [</span><br><span class="line">            models.Index(fields=[<span class="string">'last_name'</span>, <span class="string">'first_name'</span>]),</span><br><span class="line">            models.Index(fields=[<span class="string">'first_name'</span>], name=<span class="string">'first_name_idx'</span>),</span><br><span class="line">        ]</span><br></pre></td></tr></tbody></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>字段类型</title>
      <link href="/2022/05/19/treasurebox/python/django/1.mo-xing-ceng/3.zi-duan-lei-xing/"/>
      <url>/2022/05/19/treasurebox/python/django/1.mo-xing-ceng/3.zi-duan-lei-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="字段类型"><a href="#字段类型" class="headerlink" title="字段类型"></a>字段类型</h2><h3 id="常用字段"><a href="#常用字段" class="headerlink" title="常用字段"></a><strong>常用字段</strong></h3><p>源代码连接：<a href="https://docs.djangoproject.com/zh-hans/2.1/_modules/django/db/models/fields/">https://docs.djangoproject.com/zh-hans/2.1/_modules/django/db/models/fields/</a></p><p><strong>(1)</strong> <strong>AutoField</strong></p><p>自增的整型字段，必填参数primary_key=True,则成为数据库的主键，无该字段时，django会自动创建主键id字段。</p><p><strong>(2)</strong> <strong>BigAutoField</strong></p><p>一个64位整数，非常类似与AutoField，但是范围是从1~9223372036854775807。</p><p><strong>(3)</strong> <strong>BigIntegerField</strong></p><p>一个64位整数，非常类似于IntegerField，不同之处在于保证可以匹配从-9223372036854775808到9223372036854775807。此字段默认表单小部件是TextInput。</p><p><strong>(4)</strong> <strong>BinaryField</strong></p><p>一个用于存储原始二进制数据的字段，可以分配bytes，bytearray或memoryview。默认情况下，BinaryField设置editable为False，在这种情况下，他不能包含在ModelForm中，在django2.1中进行了修改：旧版本不允许设置editable为True。有一个额外的可选参数：max_length，字段的最大长度，以字符为单位。最大长度在django的验证中使用强制执行<a href="#django.core.validators.MaxLengthValidator">MaxLengthValidator</a>。</p><p><strong>(5)</strong> <strong>BooleanField</strong></p><p>一个真假字段，该字段默认表单控件是CheckboxInput或者NullBooleanSelect。当没有设置default值是，BooleanField的值为None。 </p><p><strong>(6)</strong> <strong>IntegerField</strong></p><p>整数类型字段，数值范围是—2147483648~2147483647.</p><p><strong>(7)</strong> <strong>CharField</strong></p><p>字符类型，必须提供max_length参数。代表字符的最大长度。</p><p><strong>(8)</strong> <strong>DateField</strong></p><p>日期类型，日期格式为YYYY-MM-DD，相当于python中的datetime.date实例。</p><p>参数：</p><p>auto_now：每次修改保存修改为当前日期时间，对于“最后修改的”时间戳有用。在使用Model.save()保存时有效，使用QuerySet.update()时不会自动更新。</p><p>auto_now_add：新创建对象时自动添加当前日期时间，用于“创建时间”时使用。</p><p>auto_now和auto_now_add和default参数是互斥的，不能同时设置。</p><p><strong>(9)</strong> <strong>DatetimeField</strong></p><p>日期时间字段，格式为YYYY-MM-DD HH:MM[:ss[.uuuuuu]][TZ]，相当于Python中的datetime.datetime的实例。</p><p><strong>(10)</strong> <strong>DecimalField</strong></p><p>固定精度的十进制数字，在python中由Decimal实例表示。有两个必需的参数：max_digits数字允许的最大位数，此数字必须大于或等于decimal_places。decimal_places表示与数字一起存储的小数位数。例如：要存最大整数为999，小数为两位的数字，可以使用：</p><p>models.DecimalField(max_digits=5, decimal_places=2)</p><p><strong>(11)</strong> <strong>DurationField</strong></p><p>一个用于存储时间的字段-用Python在Python中建模<a href="#datetime.timedelta">timedelta</a>。在PostgreSQL上使用时，使用的数据类型为interval，在Oracle上使用为。否则，将使用微秒。INTERVAL DAY(9) TO  SECOND(6)bigint</p><p><strong>(12)</strong> <strong>EmailField</strong></p><p>使用EmailValidator检测该字段是否为有效的电子邮箱地址。</p><p><strong>(13)</strong> <strong>FileField</strong></p><p>文件上传字段，不支持primary_key参数，使用该参数时将引发错误。</p><p>有两个可选参数：</p><p>upload_to：设置上传目录和文件名的方法，并且可以通过两种方法进行设置。将参数附加到MEDIA_ROOT路径中，已形成本地文件系统上将存储上传文件的位置。</p><p>storage:一个存储对象，用于处理文件的存储和检索。</p><p><strong>注意：</strong>在模型中使用FileField或ImageField时，需要执行以下几个步骤：</p><p>l 在settings.py中定义MEDIA_ROOT为django设置存储上载文件的目录的完整路径（这些文件并未直接存储在数据库中，在数据库中只是存储路径）。定义MEDIA_URL为该目录的基本公共URL，确保该目录可由web服务器的用户账号写入。</p><p>l 在模型中添加FileField或ImageField字段时，定义upload_to指定MEDIA_ROOT的路径用于上传文件的目录。</p><p>l 存储在数据库中的所有文件都是该文件的路径（相对于MEDIA_ROOT）。如果ImageField调用了，则mug_shot可以使用来获取摸板中图像的绝对路径。</p><p>假入MEDIA_ROOT的设置为’/home/media’，并且upload_to设置为’photos/%Y/%m/%d’。所述**’%Y/%m/%d’** 的部分<a href="#django.db.models.FileField.upload_to"><strong>upload_to</strong></a>被<a href="#time.strftime"><strong>strftime()</strong></a>格式化;<strong>‘%Y’<strong>是四位数的年份，</strong>‘%m’<strong>是两位数的月份，</strong>‘%d’<strong>是两位数的日期。如果在2007年1月15日上传文件，该文件将保存在目录</strong>/home/media/photos/2007/01/15</strong>中。</p><p>l FieldFile.name：文件名，包括相对路径。</p><p>l FieldFile.url：一个只读属性，访问文件的相对URL。</p><p><strong>(14)</strong> <strong>FloatField</strong></p><p>代表在python中由float实例表示的浮点数。</p><p><strong>(15)</strong> <strong>ImageField</strong></p><p>继承FileField所有的方法，但还验证上传的对象为有效的图像。除了可用于特殊属性FileField，一个ImageField也具有height和width属性。为了便于查询这些属性，ImageField有两个额外的可选参数。在数据库中创建的为varchar列，默认最大长度为100字符。</p><p>ImageField.height_field：每次保存模型实例时，模型字段的名称都会自动填充图像的高度。</p><p>ImageField.width_field：每次保存模型实例时，模型字段的名称都会自动填充图像的宽度。</p><p><strong>(16)</strong> <strong>IntegerField</strong></p><p>一个整数。从-2147483648到2147483647.</p><p><strong>(17)</strong> <strong>GenericIPAdressField</strong></p><p>字符串格式的IPv4和IPv6地址（如：192.0.2.30或2a02:42fe::4）。默认表单格式为TextInput。</p><p><strong>(18)</strong> <strong>TextField</strong></p><p>文本字段。默认表单小部件是Textarea，如果指定max_length属性，将反映在Textarea自动生成的表单字段中。</p><p><strong>(19)</strong> <strong>TimeField</strong></p><p>时间，在Python中以datetime.time实例表示。接受与相同的自动填充选项<a href="#django.db.models.DateField">DateField</a>。</p><p><strong>(20)</strong> <strong>URLField</strong></p><p>一个<a href="#django.db.models.CharField">CharField</a>一个URL，通过验证 <a href="#django.core.validators.URLValidator">URLValidator</a>。</p><p>此字段的默认表单小部件是<a href="#django.forms.TextInput">TextInput</a>。</p><p>像所有<a href="#django.db.models.CharField">CharField</a>子类一样，<a href="#django.db.models.URLField">URLField</a>采用可选 <a href="#django.db.models.CharField.max_length">max_length</a>参数。如果未指定 <a href="#django.db.models.CharField.max_length">max_length</a>，则使用默认值200。</p><p><strong>(21)</strong> <strong>UUIDField</strong></p><p>用于存储通用唯一标识符的字段。使用Python的 <a href="#uuid.UUID">UUID</a>类。在PostgreSQL上使用时，它存储在uuid数据类型中，否则存储在 中char(32)。</p><p>是通用的唯一标识符，可以很好的替代带有的 <a href="#django.db.models.Field.primary_key">primary_key</a>的<a href="#django.db.models.AutoField">AutoField</a>字段。数据库不会为您生成UUID，因此建议使用<a href="#django.db.models.Field.default">default</a>：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uuidfrom django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyUUIDModel</span>(models.Model):</span><br><span class="line"></span><br><span class="line"> <span class="built_in">id</span>=models.UUIDField(primary_key=<span class="literal">True</span>,default=uuid.uuid4,editable=<span class="literal">False</span>)</span><br></pre></td></tr></tbody></table></figure><p><strong>(22)</strong> <strong>ForeignKey</strong></p><p>多对一关系，需要两个位置参数：与模型相关的类和on_delete选项，如果创建地柜关系（一个与自身具有多对一关系的对象）则使用model.ForeignKey(‘self’,on_delete=models.CASCADE)。如果需要在尚未定义的模型上创建关系，则可以使用模型的名称，而不是模型对象本身。如：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>(models.Model):</span><br><span class="line">   manufacturer = models.ForeignKey(<span class="string">'Manufacturer'</span>,on_delete=models.CASCADE, )</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Manufacturer</span>(models.Model):</span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></tbody></table></figure><p><strong>参数：</strong></p><p>ForeignKey.on_delete：所有可能的参数都在django.db.models中。当删除由a引用的对象时，Django将模拟on_delete参数指定的SQL约束的行为。例如：如果有一个可为空的字段，并且在删除引用的对象时将其设置为空，如：</p><p>user = models.ForeignKey(</p><p>​    User,</p><p>​    models.SET_NULL,</p><p>​    blank=<strong>True</strong>,</p><p>​    null=<strong>True</strong>,)</p><p><strong>CASCADE：</strong>级联删除。Django会在DELETE CASCADE上模拟SQL约束的行为，并删除包含ForeignKey的对象。</p><p><strong>DO_NOTHING：</strong>不采取行动。</p><p><strong>PROTECT：</strong>通过引发ProtectedError的子类来防止删引用的对象，是django.db.IntegrityError的子类。</p><p><strong>SET_NULL</strong>：删除时把外键置为null，当null=True时才可以使用。</p><p><strong>SET_DEFAULT</strong>：把外键置为默认值，必须要设置默认值时才可以使用。</p><p><strong>(23)</strong> <strong>ManyToManyField</strong></p><p>多对多关系表，需要一个位置参数：与模型相关的类，工作原理与ForeignKey完全相同，包括递归和惰性关系。Django会自动创建中间的链接表来表示多对多的关系。</p><p><strong>(24)</strong> <strong>OneToOneField</strong></p><p>一对一关系的关系，从概念上与带有unique=True的ForeignKey相似，但是在关系的另一侧（主表数据）直接返回单个对象。</p><p>一关系的关系，从概念上与带有unique=True的ForeignKey相似，但是在关系的另一侧（主表数据）直接返回单个对象。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux进阶</title>
      <link href="/2022/05/19/treasurebox/linux/2.linux-jin-jie/"/>
      <url>/2022/05/19/treasurebox/linux/2.linux-jin-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="linux进阶"><a href="#linux进阶" class="headerlink" title="linux进阶"></a>linux进阶</h2><p>[TOC]</p><h3 id="一、用户管理命令"><a href="#一、用户管理命令" class="headerlink" title="一、用户管理命令"></a>一、用户管理命令</h3><p>linux是一个多用户的操作系统，允许多个用户同时操作系统中的文件。而windows是一个伪多用户的操作系统，可以存在多个用户，但是同时只允许一个用户操作系统中的文件。</p><p>为了更好的管理服务器中的服务，一般会创建不同的用户维护不同的服务。</p><h4 id="1、用户管理命令"><a href="#1、用户管理命令" class="headerlink" title="1、用户管理命令"></a>1、用户管理命令</h4><p>一般情况下都是需要管理员权限才能执行。</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>useradd</td><td>增加一个用户，在系统中创建一个用户</td></tr><tr><td>userdel</td><td>删除一个用户，将系统中的某个用户删除</td></tr><tr><td>passwd <account></account></td><td>修改指定用户密码</td></tr></tbody></table><p>创建用户并添加密码：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root]# useradd youzi</span><br><span class="line">[root@localhost root]# cd /home</span><br><span class="line">[root@localhost home]# ls</span><br><span class="line">root youzi</span><br><span class="line">[root@localhost home]# passwd youzi</span><br><span class="line">密码有默认的限制规则，会校验是否符合格式，输入密码时一般不回显。输完直接确认。</span><br></pre></td></tr></tbody></table></figure><p>添加完用户之后即可在远端使用<code>ssh youzi@ip</code>进行远端登录。</p><p><strong>删除用户：</strong></p><ol><li><p><strong>默认：删除用户，但是不删除用户数据。</strong></p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost home]# userdel youzi</span><br><span class="line">[root@localhost home]# ls</span><br><span class="line">root youzi</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>删除用户同时删除用户数据（危险操作）。</strong></p><p> 一旦删除执行成功了，数据就真的损失了，一般情况下是找不回来的。添加-r参数</p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost home]# userdel -r xigua</span><br><span class="line">[root@localhost home]# ls</span><br><span class="line">root </span><br></pre></td></tr></tbody></table></figure></li></ol><h4 id="2、管理员身份"><a href="#2、管理员身份" class="headerlink" title="2、管理员身份"></a>2、管理员身份</h4><p>在系统操作中，经常会听到使用管理员身份运行，wind系统中可以直接使用鼠标选择管理员方式打开，在unix/linux系统中有一个特殊的命令：sudo，可以让当前正在执的命令，使用管理员身份运行。</p><p>在unix/linux系统中，为了严格的管理用户权限，普通用户一般不允许使用管理员身份直接操作系统文件，造成一些不必要的危险操作。</p><p>在某些情况一个普通用户确实需要管理员身份，但是又不能直接使用root用户，需要将普通用户提升为管理员账号，可以使用管理员身份运行一些命令，此时需要修改制定的配置文件/etc/sudoers，添加普通用户。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost home]# vi /etc/sudoers</span><br><span class="line">模仿上一行数据添加一条用户数据</span><br></pre></td></tr></tbody></table></figure><p>之后即可使用sudo进行提权：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[youzi@localhost home]# sudo rm -rf hello</span><br></pre></td></tr></tbody></table></figure><h4 id="3、切换用户"><a href="#3、切换用户" class="headerlink" title="3、切换用户"></a>3、切换用户</h4><p>在命令行操作过程中，经常会涉及到多个用户之间的切换操作，系统中提供了对应的命令可以完成不同场景下的用户切换需求。</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>su</td><td>在当前目录中，直接切换到root用户</td></tr><tr><td>su 账号</td><td>在当前目录中，直接切换到指定账号的用户</td></tr><tr><td>su -</td><td>切换到root用户，并将当前目录切换到/root中</td></tr><tr><td>su - root</td><td>和su -效果相同</td></tr><tr><td>su - 账号</td><td>切换到一个普通用户，并将当前目录切换到/home/账户</td></tr></tbody></table><h3 id="二、内容查看命令"><a href="#二、内容查看命令" class="headerlink" title="二、内容查看命令"></a>二、内容查看命令</h3><h4 id="1、查找文件命令：find"><a href="#1、查找文件命令：find" class="headerlink" title="1、查找文件命令：find"></a>1、查找文件命令：find</h4><p>find命令，类似windows中的文件搜索，功能更加强大，在命令执行过程中可以按照文件名、文件大小、文件用户、文件权限、文件修改、访问时间…等等进行检索。</p><p>特点是精确查找，实时查找，但是查找速度较慢。</p><p><strong>语法格式</strong>：<strong>find [option] … [查找路径] [查找条件] [处理动作]</strong></p><ul><li><p><strong>查找路径：</strong>指定具体目标路径，默认为当前目录</p></li><li><p><strong>查找条件：</strong>指定的查找标准，可以是文件名、大小、类型、权限等，默认为找出指定路径下所有的文件</p><blockquote><p>根据文件名查找：<br>   -name “文件名称”  (支持使用glob通配 <em>,?,[],[^]）  例如 find /etc -name “passwd</em>“<br>   -iname “文件名称” (不区分大小写）<br>   -regex “PATTEN”: 以PATTEN匹配整个文件路径字符串，而不仅仅是文件名称：<br>根据属主 属组查找<br>   -user USERNAME:查找属主为指定用户的文件<br>   group GROUPNAME:查找属组为指定用户的文件。<br>   -uid UserID:查找属主为指定UID的文件<br>   -gid GroupID:查找属主为指定GID的文件<br>   -nouser:查找没有属主的文件<br>   -nogroup:查找没有属组的文件<br>根据文件类型查找：<br>   -type TYPE:<br>   f:普通文件<br>   d:目录文件<br>   l:符号链接文件<br>   s:套接字文件<br>   b:块设备文件<br>   c:字符设备文件<br>   p：管道文件<br>   组合条件（与 或 非）<br>   a  o  not<br>根据文件大小来查找：<br>   -size [+|-]#UNIT<br>   常用单位：k,M,G<br>   UNIT:(#-1,#]<br>   -UNIT:(0,#-1]<br>   +#UNIT:(#,oo)<br>根据时间戳：<br>   以“天”为单位：<br>   -atime:  [+|-]#<br>   -mtime:<br>   -ctime:<br>   以“分钟”为单位:<br>   -amin<br>   -mmin<br>   -cmin<br>根据权限来查找<br>   -perm [+|-]MODE  </p></blockquote></li><li><p><strong>处理动作：</strong>对符合条件的文件做什么操作，默认为标准输出至屏幕。</p><blockquote><p>-print:默认动作，输出至屏幕<br>-ls:类似ls -l命令<br>-delete：查找出然后删除<br>-fls /path/to/somefile<br>-ok COMMAND {} ;对查到的每个文件执行COMMAND命令，对于每个文件执行命令，需交互确认<br>-exec COMMAND {} ;直接处理，不交互。   ｛｝：用于引用查找到的文件名称本身</p></blockquote></li></ul><h4 id="2、查找内容的命令：grep"><a href="#2、查找内容的命令：grep" class="headerlink" title="2、查找内容的命令：grep"></a>2、查找内容的命令：grep</h4><p>grep命令主要用于在一部分内容中，搜索执行的内容是否出现。</p><p><strong>案例1：在hello.py中查找是否有<code>hello</code></strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost home]#grep hello hello.py</span><br></pre></td></tr></tbody></table></figure><p><strong>案例2：查找包含sshd内容的进程</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost home]#ps -ef| grep sshd</span><br></pre></td></tr></tbody></table></figure><h4 id="3、展示内容的命令-echo"><a href="#3、展示内容的命令-echo" class="headerlink" title="3、展示内容的命令:echo"></a>3、展示内容的命令:echo</h4><p>echo命令，windows系统和linux系统中常用的命令，<strong>主要是输出打印常用信息</strong>，借助文件操作符：&gt; 内容添加符号; &gt;&gt; 内容追加符号，完成创建文件的操作。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost home]#echo "hello"</span><br><span class="line">hello</span><br></pre></td></tr></tbody></table></figure><p><strong>案例1：添加hello到hello.py</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost home]#echo "hello" &gt; hello.py</span><br></pre></td></tr></tbody></table></figure><p><strong>小知识：</strong></p><blockquote><p>linux中，！符号是一个命令语法</p><p>!p 代表执行上一个p开头的命令</p><p>!!  代表执行上一条命令 </p></blockquote><h4 id="4、查看内容的命令：cat-x2F-more-x2F-less"><a href="#4、查看内容的命令：cat-x2F-more-x2F-less" class="headerlink" title="4、查看内容的命令：cat/more/less"></a>4、查看内容的命令：cat/more/less</h4><ol><li><h5 id="cat全文浏览"><a href="#cat全文浏览" class="headerlink" title="cat全文浏览"></a>cat全文浏览</h5><ul><li><p><strong>语法：cat 文件名称</strong></p><p>  将文件的所有内容展示到屏幕中。</p></li><li><p><strong>语法：cat 文件1 文件2 &gt; 文件</strong></p><p>  将文件1的内容展示出来、将文件2的内容展示出来，将两部分内容添加到&gt;符号后面的文件中。</p></li></ul></li><li><h5 id="more分页浏览"><a href="#more分页浏览" class="headerlink" title="more分页浏览"></a>more分页浏览</h5><p> 如果文件内容过多，不好使用cat进行全部展示，就可以使用more命令分页查看文件内容，打开文件后默认展示第一页。</p><blockquote><p>more 文件：分页查看，默认展示第一页</p><p>more +20：分页查看，从第20行开始查看</p><p>more+/youzi：分页查看，从第一次出现youzi的行开始查看</p><p>文件打开之后的翻页快捷键：</p><p>回车：逐行查看，每次回车滚动一行</p><p>空格：逐页查看，每次按下空格滚动一页</p><p>b：往上翻页，查看文件开头内容</p><p>f：往下翻页，查看文件后面的内容</p><p>q：浏览文件过程中，按下q键随时终端浏览，退出命令行</p></blockquote></li><li><h4 id="less分页浏览"><a href="#less分页浏览" class="headerlink" title="less分页浏览"></a>less分页浏览</h4><p> 和more命令类似，文件内容不会覆盖显示到屏幕上。</p></li></ol><h4 id="5、查看内容命令：head-x2F-tail"><a href="#5、查看内容命令：head-x2F-tail" class="headerlink" title="5、查看内容命令：head/tail"></a>5、查看内容命令：head/tail</h4><ol><li><h5 id="head命令：查看文件关键信息"><a href="#head命令：查看文件关键信息" class="headerlink" title="head命令：查看文件关键信息"></a>head命令：查看文件关键信息</h5><p> 查看文件头部信息命令，某些需求下并不需要查看完整的文件内容，只需要查看文件的头部信息。</p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost home]#head -5 hello.py</span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="tail命令：实时监测文件"><a href="#tail命令：实时监测文件" class="headerlink" title="tail命令：实时监测文件"></a>tail命令：实时监测文件</h5><p> 查看一些特殊文件的时候，文件的内容实时的更新，如果在察看过程中需要新更新的数据同 时能看到，使用实时查看命令 tail 命令，可以动态监测文件内容的变化。</p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost home]#tail -f hello.py</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="三、vi-x2F-vim编辑器"><a href="#三、vi-x2F-vim编辑器" class="headerlink" title="三、vi/vim编辑器"></a>三、vi/vim编辑器</h3><p>vim编辑器是linux系统中常用的编辑器，是linux系统中自带的，vim分为三种模式：</p><ul><li><p><strong>视图模式</strong>：查看内容。</p></li><li><p><strong>末行模式</strong>：输入命令执行特殊操作如搜索，保存等。</p></li><li><p><strong>插入模式</strong>：在文本中插入内容。</p><p>  输入模式向编辑模式转换——&gt;ESC</p><p>  编辑模式向末行模式——&gt;：</p><p>  末行模式向编辑模式转换——&gt;ESC。</p></li></ul><img src="image/1592323567601.png"><h4 id="1、视图模式"><a href="#1、视图模式" class="headerlink" title="1、视图模式"></a>1、视图模式</h4><ul><li><p>视图模式向编辑模式转换</p><blockquote><p>i：当前光标处输入内容<br>I:在当前光标所在行的行首<br>a：在当前光标所在处的后面<br>A:在当前光标所在行的行尾输入<br>o：在光标所在行的下方新增一行空白行<br>O:在光标所在行的上方新增一行空白行</p></blockquote></li><li><p>光标移动</p><p>  光标移动是为了能在文件中快速找到需要编辑的位置。</p><blockquote><p>h：光标向下移动、等价于左方向键</p><p>j：光标向下移动、等价于右方向键</p><p>k：光标向上移动</p><p>l：光标向右移动</p><p>gg：光标直接移动到文件的第一行位置</p><p>G：光标直接移动到文件的最后一行位置</p><p>H：光标移动到可视窗口的第一行</p><p>M：光标移动到可视窗口的中间一行</p><p>shift+6——^：光标移动到行首</p><p>shift+6——^：光标移动到行末</p></blockquote></li><li><p>查看模式下的编辑操作</p><blockquote><p>x：删除光标所在位置的字符</p><p>r：替换光标所在位置的字符</p><p>dd：删除光标所在的行</p><p>d3d：删除光标所在位置向下3行的内容</p><p>u：重做，撤销上一次的操作</p><p>yy：复制光标所在的一行</p><p>y5y：复制光标所在位置向下5行的内容</p><p>p：粘贴</p></blockquote></li><li><p>翻页操作：</p><blockquote><p>ctrl+b：back往回翻整页</p><p>ctrl+f：front往前翻整页</p><p>ctrl+d：down往下翻整页</p><p>ctrl+u：up网上翻半页</p></blockquote></li></ul><h4 id="2、末行模式"><a href="#2、末行模式" class="headerlink" title="2、末行模式"></a>2、末行模式</h4><p>在视图模式下，直接输入特定的符号，就可以在文件的末尾输入命令完成特定的功能。</p><table><thead><tr><th>符号</th><th>功能</th></tr></thead><tbody><tr><td>:w</td><td>保存文件</td></tr><tr><td>:q</td><td>不保存，退出文件</td></tr><tr><td>:wq</td><td>保存退出</td></tr><tr><td>:w!</td><td>强制保存文件</td></tr><tr><td>:q!</td><td>强制不保存退出</td></tr><tr><td>:wq!</td><td>强制保存退出</td></tr><tr><td>:x</td><td>保存退出</td></tr><tr><td>:x!</td><td>强制保存退出</td></tr><tr><td>:set nu</td><td>显示行号</td></tr><tr><td>:set nonu</td><td>取消显示行号</td></tr><tr><td>:n1,n2s/old/new/g</td><td>将n1行开始到n2行的内容中出现的old字符替换成new字符<br>old支持正则匹配（正则表达式匹配规则）</td></tr><tr><td>/str</td><td>在文件中从光标位置向下查询str字符串</td></tr><tr><td>?str</td><td>在文件中从光标位置向上查询str字符串</td></tr></tbody></table><h4 id="3、辑模模式"><a href="#3、辑模模式" class="headerlink" title="3、辑模模式"></a>3、辑模模式</h4><p>按照正常的文本编辑方式，直接输入内容即可。</p><blockquote><p>光标位置：直接输入字符</p><p>换行：直接敲击回车键</p><p>移动光标位置：方向键直接移动光标[退出到查看模式hjkl移动光标]</p></blockquote><h4 id="4、VIM中的缩进操作"><a href="#4、VIM中的缩进操作" class="headerlink" title="4、VIM中的缩进操作"></a>4、VIM中的缩进操作</h4><blockquote><p>a. 让光标定位至需要缩进的某一行</p><p>b. 按shift+v选择当前行（同时操作多行，可以按上下方向键选择多行）</p><p>c. 按&gt;向右缩进一个tab位，&lt;符号向左缩进一个tab位。</p></blockquote><p>  置：方向键直接移动光标[退出到查看模式hjkl移动光标]</p><h4 id="4、VIM中的缩进操作-1"><a href="#4、VIM中的缩进操作-1" class="headerlink" title="4、VIM中的缩进操作"></a>4、VIM中的缩进操作</h4><blockquote><p>a. 让光标定位至需要缩进的某一行</p><p>b. 按shift+v选择当前行（同时操作多行，可以按上下方向键选择多行）</p><p>c. 按&gt;向右缩进一个tab位，&lt;符号向左缩进一个tab位。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>shell编程</title>
      <link href="/2022/05/19/treasurebox/linux/3.shell-bian-cheng/"/>
      <url>/2022/05/19/treasurebox/linux/3.shell-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="shell编程"><a href="#shell编程" class="headerlink" title="shell编程"></a>shell编程</h2><h3 id="一、shell编程简介"><a href="#一、shell编程简介" class="headerlink" title="一、shell编程简介"></a>一、shell编程简介</h3><p><strong>shell编程入门</strong>：是unix/linux操作系统中的一种工程自动化操作方式。让我们通过手工操作的繁琐的步骤，使用程序完成自动化的操作。</p><h4 id="1、shell编程用途"><a href="#1、shell编程用途" class="headerlink" title="1、shell编程用途"></a>1、shell编程用途</h4><p>基础配置：系统初始化操作、系统更新、内核调整等等。</p><p>安装程序：自动部署LNMP、LAMP、MySQL等</p><p>配置变更：Nginx配置、MySQL配置、Redis配置等等</p><p>业务部署：配合git、jenkins等实现自动化持续交付</p><p>日常备份：脚本对项目或者软件实现全备份或者增量备份等</p><p>信息采集：硬件、系统、服务、网络等各种数据的自动采集</p><p>日志分析：获取日志、排序、去重、统计、分析</p><p>服务扩容：监控服务器信息，脚本程序自动化扩容部署</p><h4 id="2、Shell编程的核心"><a href="#2、Shell编程的核心" class="headerlink" title="2、Shell编程的核心"></a>2、Shell编程的核心</h4><p>shell编程内部就是批量执行Unix/Linux命令的操作，将手工执行多次的命令，转换到脚本程序中通过命令完成一次性执行的效果。</p><p>案例：备份文件，编写shell文件back.sh</p><blockquote><p>#! /bin/sh</p><p>echo   ——开始文件备份——–</p><p>echo 打包文件</p><p>tar -cvf hw.bak.tar 1.py 2.py 3.py test.py</p><p>echo 打包完成，开始压缩</p><p>gzip hw.bak.tar</p><p>echo 压缩玩成，开始规范命名</p><p>mv hw.bak.tar.gz hw.bak0311.tar.gz</p><p>echo   ———文件备份完成————–</p></blockquote><p>执行shell文件：<code>sh back.sh</code></p><h3 id="二、定时任务"><a href="#二、定时任务" class="headerlink" title="二、定时任务"></a>二、定时任务</h3><p>定时任务，就是指定了在某个固定的时间点（时刻）或者在某个时间点执行一些任务。</p><ul><li><strong>一次性任务</strong>：执行某些业务操作时，需要在某个特殊时刻执行一个命令/脚本。</li><li><strong>周期性任务</strong>：某些指定的时刻，需要执行指定的操作命令/脚本。</li></ul><h4 id="1、一次性定时任务"><a href="#1、一次性定时任务" class="headerlink" title="1、一次性定时任务"></a>1、一次性定时任务</h4><p>Linux系统中，提供了at命令，用于指定时间点，就可以在指定时间点添加多条执行命令，党制定的时刻到达时，就会触发执行的所有命令。</p><h5 id="（1）at添加一次性任务"><a href="#（1）at添加一次性任务" class="headerlink" title="（1）at添加一次性任务"></a>（1）at添加一次性任务</h5><p>at -l：查看任务</p><p>at   时间点：指定的时间点上，添加任务</p><blockquote><p>如果时间点早于系统时间，默认第二天执行任务。</p><p>如果时间点晚于系统时间，默认当天这个时间实行任务。</p></blockquote><p>Ctrl+D：组合键保存定时任务。</p><h5 id="（2）at命令删除一次性任务"><a href="#（2）at命令删除一次性任务" class="headerlink" title="（2）at命令删除一次性任务"></a>（2）at命令删除一次性任务</h5><p>atrm  任务编号：删除指定编号的命令。</p><p>示例：atrm 6。删除编号为6的定时任务。</p><p>其他命令可以试用<code>man at</code>查看使用详情。</p><h4 id="2、周期性任务"><a href="#2、周期性任务" class="headerlink" title="2、周期性任务"></a>2、周期性任务</h4><p>当某个任务需要每天执行，或者每隔多长时间执行时，就可以使用周期性定时任务。可以使用crontab操作定时任务，通常情况下该组件是系统的一个内建组件，如果系统中缺少这个组件，可以使用<code>yum install crontab</code>安装。</p><h5 id="（1）crontab基本语法"><a href="#（1）crontab基本语法" class="headerlink" title="（1）crontab基本语法"></a>（1）crontab基本语法</h5><p>通过crontab命令，添加任务、编辑任务、删除任</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>crontab -l</td><td>列出当前用户的所有周期性任务</td></tr><tr><td>crontab -e</td><td>编辑当前用户的周期性任务</td></tr><tr><td>crontab -r</td><td>删除当前用户的所有周期性任务【谨慎使用】</td></tr></tbody></table><img src="image/1593251095588.png"><blockquote><p>以第一个*符号为例，说明上述语法：</p><p>①   *： 表示每一天的每个小时的每分钟执行一次后面的命令。</p><p>② 10：表示每一天的每个小时的第10分钟，执行一次后面的命令</p><p>③  */5：表示每一天的每个小时中，每隔5分钟，执行一次后面的命令</p><p>④  5，10，20，30：表示每一天的每个小时中，第5、10、20、30分钟执行后面的命令</p><p>⑤  10-20：表示每一天的每个小时中，第10分钟开始直到第20分钟结束，每分钟执行命令</p></blockquote><h5 id="（2）crontab案例"><a href="#（2）crontab案例" class="headerlink" title="（2）crontab案例"></a>（2）crontab案例</h5><p>每天的每分钟执行一次爬虫脚本，并且记录执行结果。</p><p>��例</p><p>每天的每分钟执行一次爬虫脚本，并且记录执行结果。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/2022/05/19/treasurebox/git-ming-ling/git/"/>
      <url>/2022/05/19/treasurebox/git-ming-ling/git/</url>
      
        <content type="html"><![CDATA[<h2 id="git操作"><a href="#git操作" class="headerlink" title="git操作"></a>git操作</h2><ol><li><h4 id="配置-gitignore文件"><a href="#配置-gitignore文件" class="headerlink" title="配置.gitignore文件"></a>配置.gitignore文件</h4><p> 作用：可以屏蔽掉某些不需要被管理的文件或文件夹，如日志文件、临时文件等。<br> git rm -r –cached .<br> git add .<br> git commit -m ‘update .gitignore’</p></li><li><h3 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h3><p> 创建一个新的git仓库。这个版本库的配置、存储等信息会被保存到.git文件中</p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 初始化当前项目</span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"># 新建一个目录，将其初始化为Git代码库</span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"># 在指定目录创建一个空的 Git 仓库。运行这个命令会创建一个名为 directory，只包含 .git 子目录的空目录。</span><br><span class="line"></span><br><span class="line">$ git init --bare &lt;directory&gt;</span><br><span class="line"></span><br><span class="line"># 下载一个项目和它的整个代码历史</span><br><span class="line"># 这个命令就是将一个版本库拷贝到另一个目录中，同时也将分支都拷贝到新的版本库中。这样就可以在新的版本库中提交到远程分支</span><br><span class="line">$ git clone [url]</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p> 更改设置。可以是版本库的设置，也可以是系统的或者全局的设置：</p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 显示当前的Git配置</span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"># 编辑Git配置文件</span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"># 输出、设置基本的全局变量</span><br><span class="line">$ git config --global user.email</span><br><span class="line">$ git config --global user.name</span><br><span class="line"></span><br><span class="line">$ git config --global user.email "MyEmail@gmail.com"</span><br><span class="line">$ git config --global user.name "My Name"</span><br><span class="line"></span><br><span class="line"># 定义当前用户所有提交使用的作者邮箱。</span><br><span class="line">$ git config --global alias.&lt;alias-name&gt; &lt;git-command&gt;</span><br><span class="line"></span><br><span class="line"># 为Git命令创建一个快捷方式（别名）。</span><br><span class="line">$ git config --system core.editor &lt;editor&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h4><p> <strong>git的内部帮助命令</strong></p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 查找可用命令</span><br><span class="line">$ git help</span><br><span class="line"></span><br><span class="line"># 查找所有可用命令</span><br><span class="line">$ git help -a</span><br><span class="line"></span><br><span class="line"># 在文档当中查找特定的命令</span><br><span class="line"># git help &lt;命令&gt;</span><br><span class="line">$ git help add</span><br><span class="line">$ git help commit</span><br><span class="line">$ git help init</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h4><p> 显示索引文件（也就是当前工作空间）和当前的头指针指向的提交的不同</p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 显示分支，未跟踪文件，更改和其他不同</span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"># 查看其他的git status的用法</span><br><span class="line">$ git help status</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h4><p> 获取某些文件，某些分支，某次提交等git信息</p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"># 显示commit历史，以及每次commit发生变更的文件</span><br><span class="line">$ git log --stat</span><br><span class="line"></span><br><span class="line"># 搜索提交历史，根据关键词</span><br><span class="line">$ git log -S [keyword]</span><br><span class="line"></span><br><span class="line"># 显示某个commit之后的所有变动，每个commit占据一行</span><br><span class="line">$ git log [tag] HEAD --pretty=format:%s</span><br><span class="line"></span><br><span class="line"># 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件</span><br><span class="line">$ git log [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"># 显示某个文件的版本历史，包括文件改名</span><br><span class="line">$ git log --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"># 显示指定文件相关的每一次diff</span><br><span class="line">$ git log -p [file]</span><br><span class="line"></span><br><span class="line"># 显示过去5次提交</span><br><span class="line">$ git log -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"># 显示所有提交过的用户，按提交次数排序</span><br><span class="line">$ git shortlog -sn</span><br><span class="line"></span><br><span class="line"># 显示指定文件是什么人在什么时间修改过</span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"># 显示暂存区和工作区的差异</span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"># 显示暂存区和上一个commit的差异</span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"></span><br><span class="line"># 显示工作区与当前分支最新commit之间的差异</span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"># 显示两次提交之间的差异</span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"># 显示今天你写了多少行代码</span><br><span class="line">$ git diff --shortstat "@{0 day ago}"</span><br><span class="line"></span><br><span class="line"># 比较暂存区和版本库差异</span><br><span class="line">$ git diff --staged</span><br><span class="line"></span><br><span class="line"># 比较暂存区和版本库差异</span><br><span class="line">$ git diff --cached</span><br><span class="line"></span><br><span class="line"># 仅仅比较统计信息</span><br><span class="line">$ git diff --stat</span><br><span class="line"></span><br><span class="line"># 显示某次提交的元数据和内容变化</span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"># 显示某次提交发生变化的文件</span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"># 显示某次提交时，某个文件的内容</span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"># 显示当前分支的最近几次提交</span><br><span class="line">$ git reflog</span><br><span class="line"></span><br><span class="line"># 查看远程分支</span><br><span class="line">$ git br -r</span><br><span class="line"></span><br><span class="line"># 创建新的分支</span><br><span class="line">$ git br &lt;new_branch&gt;</span><br><span class="line"></span><br><span class="line"># 查看各个分支最后提交信息</span><br><span class="line">$ git br -v</span><br><span class="line"></span><br><span class="line"># 查看已经被合并到当前分支的分支</span><br><span class="line">$ git br --merged</span><br><span class="line"></span><br><span class="line"># 查看尚未被合并到当前分支的分支</span><br><span class="line">$ git br --no-merged</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><p> 添加文件到当前工作空间中。如果你不使用 <code>git add</code> 将文件添加进去，那么这些文件也不会添加到之后的提交之中。</p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 添加一个文件</span><br><span class="line">$ git add test.js</span><br><span class="line"></span><br><span class="line"># 添加一个子目录中的文件</span><br><span class="line">$ git add /path/to/file/test.js</span><br><span class="line"></span><br><span class="line"># 支持正则表达式</span><br><span class="line">$ git add ./*.js</span><br><span class="line"></span><br><span class="line"># 添加指定文件到暂存区</span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"># 添加指定目录到暂存区，包括子目录</span><br><span class="line">$ git add [dir]</span><br><span class="line"></span><br><span class="line"># 添加当前目录的所有文件到暂存区</span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"># 添加每个变化前，都会要求确认</span><br><span class="line"># 对于同一个文件的多处变化，可以实现分次提交</span><br><span class="line">$ git add -p</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p> rm 和上面的 add 命令相反，从工作空间中去掉某个文件</p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 移除 HelloWorld.js</span><br><span class="line">$ git rm HelloWorld.js</span><br><span class="line"></span><br><span class="line"># 移除子目录中的文件</span><br><span class="line">$ git rm /pather/to/the/file/HelloWorld.js</span><br><span class="line"></span><br><span class="line"># 删除工作区文件，并且将这次删除放入暂存区</span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"># 停止追踪指定文件，但该文件会保留在工作区</span><br><span class="line">$ git rm --cached [file]</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><p> 管理分支，可以通过下列命令对分支进行增删改查切换等。</p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"># 查看所有的分支和远程分支</span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"># 创建一个新的分支</span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"># 重命名分支</span><br><span class="line"># git branch -m &lt;旧名称&gt; &lt;新名称&gt;</span><br><span class="line">$ git branch -m [branch-name] [new-branch-name]</span><br><span class="line"></span><br><span class="line"># 编辑分支的介绍</span><br><span class="line">$ git branch [branch-name] --edit-description</span><br><span class="line"></span><br><span class="line"># 列出所有本地分支</span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"># 列出所有远程分支</span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"># 新建一个分支，但依然停留在当前分支</span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，并切换到该分支</span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，指向指定commit</span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，与指定的远程分支建立追踪关系</span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"># 切换到指定分支，并更新工作区</span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"># 切换到上一个分支</span><br><span class="line">$ git checkout -</span><br><span class="line"></span><br><span class="line"># 建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class="line">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"># 合并指定分支到当前分支</span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"># 选择一个commit，合并进当前分支</span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"># 删除分支</span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"># 删除远程分支</span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br><span class="line"></span><br><span class="line"># 切换到某个分支</span><br><span class="line">$ git co &lt;branch&gt;</span><br><span class="line"></span><br><span class="line"># 创建新的分支，并且切换过去</span><br><span class="line">$ git co -b &lt;new_branch&gt;</span><br><span class="line"></span><br><span class="line"># 基于branch创建新的new_branch</span><br><span class="line">$ git co -b &lt;new_branch&gt; &lt;branch&gt;</span><br><span class="line"></span><br><span class="line"># 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</span><br><span class="line">$ git co $id</span><br><span class="line"></span><br><span class="line"># 把某次历史提交记录checkout出来，创建成一个分支</span><br><span class="line">$ git co $id -b &lt;new_branch&gt;</span><br><span class="line"></span><br><span class="line"># 删除某个分支</span><br><span class="line">$ git br -d &lt;branch&gt;</span><br><span class="line"></span><br><span class="line"># 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</span><br><span class="line">$ git br -D &lt;branch&gt;</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="检出"><a href="#检出" class="headerlink" title="检出"></a>检出</h4><p>将当前工作空间更新到索引所标识的或者某一特定的工作空间。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 检出一个版本库，默认将更新到master分支</span><br><span class="line">$ git checkout</span><br><span class="line"># 检出到一个特定的分支</span><br><span class="line">$ git checkout branchName</span><br><span class="line"># 新建一个分支，并且切换过去，相当于"git branch &lt;名字&gt;; git checkout &lt;名字&gt;"</span><br><span class="line">$ git checkout -b newBranch</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h4><p>远程同步的远端分支</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># 下载远程仓库的所有变动</span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"># 显示所有远程仓库</span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"># 显示某个远程仓库的信息</span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"># 增加一个新的远程仓库，并命名</span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"># 查看远程服务器地址和仓库名称</span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"># 添加远程仓库地址</span><br><span class="line">$ git remote add origin git@ github:xxx/xxx.git</span><br><span class="line"></span><br><span class="line"># 设置远程仓库地址(用于修改远程仓库地址)</span><br><span class="line">$ git remote set-url origin git@ github.com:xxx/xxx.git</span><br><span class="line"></span><br><span class="line"># 删除远程仓库</span><br><span class="line">$ git remote rm &lt;repository&gt;</span><br><span class="line"></span><br><span class="line"># 上传本地指定分支到远程仓库</span><br><span class="line"># 把本地的分支更新到远端origin的master分支上</span><br><span class="line"># git push &lt;远端&gt; &lt;分支&gt;</span><br><span class="line"># git push 相当于 git push origin master</span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"># 强行推送当前分支到远程仓库，即使有冲突</span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"># 推送所有分支到远程仓库</span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"># 恢复暂存区的指定文件到工作区</span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"># 恢复某个commit的指定文件到暂存区和工作区</span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"># 恢复暂存区的所有文件到工作区</span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"># 重置暂存区与工作区，与上一次commit保持一致</span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"># 新建一个commit，用来撤销指定commit</span><br><span class="line"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br><span class="line">$ git revert [commit]</span><br><span class="line"></span><br><span class="line"># 恢复最后一次提交的状态</span><br><span class="line">$ git revert HEAD</span><br><span class="line"></span><br><span class="line"># 暂时将未提交的变化移除，稍后再移入</span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br><span class="line"></span><br><span class="line"># 列所有stash</span><br><span class="line">$ git stash list</span><br><span class="line"></span><br><span class="line"># 恢复暂存的内容</span><br><span class="line">$ git stash apply</span><br><span class="line"></span><br><span class="line"># 删除暂存区</span><br><span class="line">$ git stash drop</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h4><p>将当前索引的更改保存为一个新的提交，这个提交包括用户做出的更改与信息</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 提交暂存区到仓库区附带提交信息</span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"># 提交暂存区的指定文件到仓库区</span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"># 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"># 提交时显示所有diff信息</span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"># 使用一次新的commit，替代上一次提交</span><br><span class="line"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"># 重做上一次commit，并包括指定文件的新变化</span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h4><p>显示当前工作空间和提交的不同</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 显示工作目录和索引的不同</span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"># 显示索引和最近一次提交的不同</span><br><span class="line">$ git diff --cached</span><br><span class="line"></span><br><span class="line"># 显示工作目录和最近一次提交的不同</span><br><span class="line">$ git diff HEAD</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h4><p>可以在版本库中快速查找</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 在搜索结果中显示行号</span><br><span class="line">$ git config --global grep.lineNumber true</span><br><span class="line"></span><br><span class="line"># 是搜索结果可读性更好</span><br><span class="line">$ git config --global alias.g "grep --break --heading --line-number"</span><br><span class="line"># 在所有的java中查找variableName</span><br><span class="line">$ git grep 'variableName' -- '*.java'</span><br><span class="line"></span><br><span class="line"># 搜索包含 "arrayListName" 和, "add" 或 "remove" 的所有行</span><br><span class="line">$ git grep -e 'arrayListName' --and \( -e add -e remove \)</span><br></pre></td></tr></tbody></table></figure></li><li><p>log</p><p>显示这个版本库的所有提交</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 显示所有提交</span><br><span class="line">$ git log</span><br><span class="line"></span><br><span class="line"># 显示某几条提交信息</span><br><span class="line">$ git log -n 10</span><br><span class="line"></span><br><span class="line"># 仅显示合并提交</span><br><span class="line">$ git log --merges</span><br><span class="line"></span><br><span class="line"># 查看该文件每次提交记录</span><br><span class="line">$ git log &lt;file&gt;</span><br><span class="line"></span><br><span class="line"># 查看每次详细修改内容的diff</span><br><span class="line">$ git log -p &lt;file&gt;</span><br><span class="line"></span><br><span class="line"># 查看最近两次详细修改内容的diff</span><br><span class="line">$ git log -p -2</span><br><span class="line"></span><br><span class="line">#查看提交统计信息</span><br><span class="line">$ git log --stat</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h4><p>合并就是将外部的提交合并到自己的分支中</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 将其他分支合并到当前分支</span><br><span class="line">$ git merge branchName</span><br><span class="line"></span><br><span class="line"># 在合并时创建一个新的合并后的提交</span><br><span class="line"># 不要 Fast-Foward 合并，这样可以生成 merge 提交</span><br><span class="line">$ git merge --no-ff branchName</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="mv重命名或移动一个文件"><a href="#mv重命名或移动一个文件" class="headerlink" title="mv重命名或移动一个文件"></a>mv重命名或移动一个文件</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 重命名</span><br><span class="line">$ git mv test.js test2.js</span><br><span class="line"></span><br><span class="line"># 移动</span><br><span class="line">$ git mv test.js ./new/path/test.js</span><br><span class="line"></span><br><span class="line"># 改名文件，并且将这个改名放入暂存区</span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br><span class="line"></span><br><span class="line"># 强制重命名或移动</span><br><span class="line"># 这个文件已经存在，将要覆盖掉</span><br><span class="line">$ git mv -f myFile existingFile</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 列出所有tag</span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"># 新建一个tag在当前commit</span><br><span class="line">$ git tag [tag]</span><br><span class="line"></span><br><span class="line"># 新建一个tag在指定commit</span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"># 删除本地tag</span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"></span><br><span class="line"># 删除远程tag</span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"></span><br><span class="line"># 查看tag信息</span><br><span class="line">$ git show [tag]</span><br><span class="line"></span><br><span class="line"># 提交指定tag</span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"># 提交所有tag</span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"># 新建一个分支，指向某个tag</span><br><span class="line">$ git checkout -b [branch] [tag]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h4><p>从远端版本库合并到当前分支</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 从远端origin的master分支更新版本库</span><br><span class="line"># git pull &lt;远端&gt; &lt;分支&gt;</span><br><span class="line">$ git pull origin master</span><br><span class="line"></span><br><span class="line"># 抓取远程仓库所有分支更新并合并到本地，不要快进合并</span><br><span class="line">$ git pull --no-ff</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="ci"><a href="#ci" class="headerlink" title="ci"></a>ci</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git ci &lt;file&gt;</span><br><span class="line">$ git ci .</span><br><span class="line"># 将git add, git rm和git ci等操作都合并在一起做</span><br><span class="line">$ git ci -a</span><br><span class="line">$ git ci -am "some comments"</span><br><span class="line"># 修改最后一次提交记录</span><br><span class="line">$ git ci --amend</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="rebase（谨慎使用）"><a href="#rebase（谨慎使用）" class="headerlink" title="rebase（谨慎使用）"></a>rebase（谨慎使用）</h4><p> 将一个分支上所有的提交历史都应用到另一个分支上<br> <em>不要在一个已经公开的远端分支上使用 rebase</em>.</p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 将experimentBranch应用到master上面</span><br><span class="line"># git rebase &lt;basebranch&gt; &lt;topicbranch&gt;</span><br><span class="line">$ git rebase master experimentBranch</span><br><span class="line"></span><br><span class="line">#合并若干次提交为一次</span><br><span class="line"># git rebase -i commit_id</span><br><span class="line"># 在本地rebase之后，将修改推送到远端</span><br><span class="line">git push --force-with-lease</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="reset（谨慎使用）"><a href="#reset（谨慎使用）" class="headerlink" title="reset（谨慎使用）"></a>reset（谨慎使用）</h4><p>将当前的头指针复位到一个特定的状态。这样可以使你撤销 merge、pull、commits、add 等<br>这是个很强大的命令，但是在使用时一定要清楚其所产生的后果。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 使 staging 区域恢复到上次提交时的状态，不改变现在的工作目录</span><br><span class="line">$ git reset</span><br><span class="line"></span><br><span class="line"># 使 staging 区域恢复到上次提交时的状态，覆盖现在的工作目录</span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"># 将当前分支恢复到某次提交，不改变现在的工作目录</span><br><span class="line"># 在工作目录中所有的改变仍然存在</span><br><span class="line">$ git reset dha78as</span><br><span class="line"></span><br><span class="line"># 将当前分支恢复到某次提交，覆盖现在的工作目录</span><br><span class="line"># 并且删除所有未提交的改变和指定提交之后的所有提交</span><br><span class="line">$ git reset --hard dha78as</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 生成一个可供发布的压缩包</span><br><span class="line">$ git archive</span><br><span class="line"></span><br><span class="line"># 打补丁</span><br><span class="line">$ git apply ../sync.patch</span><br><span class="line"></span><br><span class="line"># 测试补丁能否成功</span><br><span class="line">$ git apply --check ../sync.patch</span><br><span class="line"></span><br><span class="line"># 查看Git的版本</span><br><span class="line">$ git --version</span><br><span class="line"></span><br><span class="line">```�不改变现在的工作目录</span><br><span class="line"># 在工作目录中所有的改变仍然存在</span><br><span class="line">$ git reset dha78as</span><br><span class="line"></span><br><span class="line"># 将当前分支恢复到某次提交，覆盖现在的工作目录</span><br><span class="line"># 并且删除所有未提交的改变和指定提交之后的所有提交</span><br><span class="line">$ git reset --hard dha78as</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 生成一个可供发布的压缩包</span><br><span class="line">$ git archive</span><br><span class="line"></span><br><span class="line"># 打补丁</span><br><span class="line">$ git apply ../sync.patch</span><br><span class="line"></span><br><span class="line"># 测试补丁能否成功</span><br><span class="line">$ git apply --check ../sync.patch</span><br><span class="line"></span><br><span class="line"># 查看Git的版本</span><br><span class="line">$ git --version</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git2</title>
      <link href="/2022/05/19/treasurebox/git-ming-ling/git2/"/>
      <url>/2022/05/19/treasurebox/git-ming-ling/git2/</url>
      
        <content type="html"><![CDATA[<p>0、.gitignore文件</p><blockquote><p>当版本库中的某个文件不想进行版本控制时，可以通过.gitignore文件进行设置。</p><p>git rm -r –cached .<br>git add .<br>git commit -m ‘update .gitignore’</p></blockquote><p>1、创建Git仓库</p><pre><code>&gt;(1)新建一个文件夹，进入文件夹执行 git init初始化Git仓库，(2)添加文件到Git仓库，git add 文件名 ，可反复多次使用，添加多个文件(3) git commit -m "更改介绍"</code></pre><p>2、时光机穿梭</p><pre><code>&gt;(1)git status 查看仓库状态 git diff 查看修改内容&gt;&gt;(2)git log 查看历史记录或者 git log --pretty=oneline &gt;&gt;(3)git reset --hard HEAD^   (^代表上一个版本，HEAD~100,代表第上100个版本)&gt;&gt;(4)git reset --hard （commit_id）  在git历史中穿梭&gt;&gt;(5)git log  查看被提交历史，git reflog 查看命令历史，以便确定回到哪个版本&gt;&gt;(6)只有git add之后的版本才能被git commit&gt;&gt;(7)场景1：直接丢弃工作区的修改：git checkout -- file   让file回到最近一次git commit或git add时的状态。&gt;场景2：若是已经添加到暂存区：先撤回到工作区git reset HEAD &lt;file&gt;，然后再按场景1进行&gt;场景3：已经提交了不合适的修改到版本库时，想要撤销需要版本回退。&gt;&gt;(8)git rm删除一个文件，git checkout 实际是用版本库里的版本替换工作区的版本</code></pre><p>3、本地库与网上库的连接</p><blockquote><p>(1)本地Git链接网上git仓库<br>git remote add origin <a href="https://github.com/liuhuanxg/learngit.git">https://github.com/liuhuanxg/learngit.git</a></p><p>(2)将本地库与网上库链接<br>git push -u origin master</p><p>(3)将本地master分支的最新修改推送至GitHub<br>git push origin master</p><p>(4)将网上仓库复制到本地<br>git clone <a href="https://github.com/liuhuanxg/gitskills.git">https://github.com/liuhuanxg/gitskills.git</a></p><p>(5)git remote -v    查看远程库的信息</p></blockquote><p>4、分支管理</p><blockquote><p>将本地dev分支与远程dev分支关联<br>git branch –set-upstream origin/远程分支名    本地新建分支名 </p><p>(1)git checkout -b dev   创建并切换分支<br>相当于：git branch dev（创建分支） + git checkout dev（切换分支）</p><p>(2)git branch 列出所有分支   当前分支前边会有*</p><p>(3)git merge dev  合并分支到当前分支</p><p>(4)git branch -d dev   删除dev分支</p><p>(5)当分支冲突时：可以查看分支合并的情况<br>git log –graph –pretty=oneline –abbrev-commit</p><p>首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p><p>干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；</p><p>每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。</p><p>合并分支时，加上–no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。<br>git merge –no-ff -m “merge with no-ff” dev</p><p>(6)分支未完成不能提交但是需要去完成另一个分支时：<br>先git stash然后去创建别的分支，再git stash pop</p><p>(7)开发一个新功能，最好新创建一个分支，如果丢弃一个没有被合并的分支：通过git branch -D <name>强行删除</name></p></blockquote><p>5、多人协作</p><pre><code>&gt;(1)查看远程库信息，使用git remote -v；&gt;&gt;(2)本地新建的分支如果不推送到远程，对其他人就是不可见的；&gt;&gt;(3)从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；&gt;&gt;(4)在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；&gt;&gt;(5)建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；&gt;&gt;(6)从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。</code></pre><p>6、标签管理</p><p>  (1)切换到需要打标签的分支上：git tag v1.0<br>  (2)查看所有标签：git tag<br>  (3)git tag v0.9 (commit id)<br>  (4)git show <tagname>  查看所有标签信息<br>  (5)git tag -a v0.1 -m “version 0.1 released” commit id   创建带有说明的标签<br>  (6)删除标签：git tag -d <tag name=""><br>  (7)推送某个标签到远程：git push origin <tagname><br>  (8)删除某个远程标签:git push origin :refs/tags/<tagname>h origin <tagname><br>  (8)删除某个远程标签:git push origin :refs/tags/<tagname></tagname></tagname></tagname></tagname></tag></tagname></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基础命令</title>
      <link href="/2022/05/19/treasurebox/linux/1.ji-chu-ming-ling/"/>
      <url>/2022/05/19/treasurebox/linux/1.ji-chu-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="一、基础命令"><a href="#一、基础命令" class="headerlink" title="一、基础命令"></a>一、基础命令</h2><ol><li><p>重启网络服务</p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sytemctl restart network</span><br></pre></td></tr></tbody></table></figure></li><li><p>查看IP</p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="二、系统常见命令"><a href="#二、系统常见命令" class="headerlink" title="二、系统常见命令"></a>二、系统常见命令</h2><ol><li><h4 id="常见命令——ls"><a href="#常见命令——ls" class="headerlink" title="常见命令——ls"></a>常见命令——ls</h4><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>ls</td><td>查看当前文件夹/路径/目录中的所有文件，list file，列表展示文件。<br>-a：查看所有文件，包括隐藏文件<br>linux中以.开头的文件默认为隐藏文件<br>-l：按照列表的方式，展示文件信息<br>-R：递归使用树形的方式展示文件夹中的所有文件</td></tr></tbody></table></li><li><h4 id="系统常见命令——cd"><a href="#系统常见命令——cd" class="headerlink" title="系统常见命令——cd"></a>系统常见命令——cd</h4><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>cd</td><td>改变当前文件夹的命令，进入指定的文件夹，英文：change directory——cd<br>cd path/：表示命令行中切换到path/路径/文件夹/目录中<br>cd：直接回车进入当前用户的家目录中<br>root用户进入/root/<br>waltz用户，进入/home/waltz<br>cd /：进入根目录<br>cd /etc：进入根目录下的etc路径<br>cd test：进入当前目录下的test路径</td></tr></tbody></table></li><li><h4 id="系统常见命令——pwd"><a href="#系统常见命令——pwd" class="headerlink" title="系统常见命令——pwd"></a>系统常见命令——pwd</h4><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>pwd</td><td>查看当前命令执行的路径<br>英文：print working directory</td></tr></tbody></table></li><li><h4 id="系统常见命令——系统关闭-x2F-重启"><a href="#系统常见命令——系统关闭-x2F-重启" class="headerlink" title="系统常见命令——系统关闭/重启"></a>系统常见命令——系统关闭/重启</h4><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>shutdown</td><td>系统关闭的命令<br>shutdown -h now 立刻关闭系统<br>shutdown -h 15:30   指定时间关闭系统<br>shutdown -h 5      5分钟后关闭系统<br>shutdown -h 10 “系统即将关闭”     10分钟后关闭系统，通知用户<br>shutdown -r now   立刻重启系统<br>shutdown -c   取消关闭系统的行为</td></tr><tr><td>reboot</td><td>重启系统</td></tr><tr><td>poweroff</td><td>关闭系统</td></tr><tr><td>sync</td><td>同步内存数据到磁盘，保证关闭时系统不会造成数据丢失</td></tr></tbody></table></li><li><h4 id="系统常见命令——网络信息-x2F-任务管理器-x2F-进程查看-x2F-端口占用"><a href="#系统常见命令——网络信息-x2F-任务管理器-x2F-进程查看-x2F-端口占用" class="headerlink" title="系统常见命令——网络信息/任务管理器/进程查看/端口占用"></a>系统常见命令——网络信息/任务管理器/进程查看/端口占用</h4><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>ifconfig</td><td>查看Unix/linux系统中的网络信息<br>展示网卡连接网络的信息、本机回环地址信息</td></tr><tr><td>top</td><td>查看Unix/linux系统中的所有运行程序的信息<br>类似windows中的任务管理器</td></tr><tr><td>ps</td><td>查看和筛选正在运行的某个进程<br>ps -ef|grep sshed       查看sshd程序是否正在运行<br>ps -aux|grep firewalld     查看防火墙程序是否正在运行</td></tr><tr><td>lsof  -i</td><td>用来显示符合条件的进程情况,lsof（list open files）<br>lsof -i  :端口号   查看某一端口的占用情况</td></tr></tbody></table></li><li><h4 id="系统常见命令——软件更新-x2F-系统更新"><a href="#系统常见命令——软件更新-x2F-系统更新" class="headerlink" title="系统常见命令——软件更新/系统更新"></a>系统常见命令——软件更新/系统更新</h4><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>yum</td><td>联网的方式，在线安装软件<br>yum list：查看当前系统中已经安装过的软件列表<br>yum search 名称：查看包含关键字名称的可以安装的软件<br>yum install 软件全名称：安装某个指定名称的软件<br>yum remove 软件名称：卸载某个指定名称的软件</td></tr><tr><td>rpm</td><td>离线的方式，安装rpm离线软件包<br>rpm -i  离线软件包：rpm安装一个软件包<br>rpm -e 软件名称：卸载一个rpm方式安装的软件<br>rpm -qa  列出所有使用rpm方式安装过的软件</td></tr><tr><td>系统更新</td><td>更新软件源：<br>yum update  找到有哪些软件可以更新的信息<br>更新系统<br>yum upgrade pkg  指定更新软件信息</td></tr></tbody></table></li><li><h4 id="系统操作命令——帮助命令"><a href="#系统操作命令——帮助命令" class="headerlink" title="系统操作命令——帮助命令"></a>系统操作命令——帮助命令</h4><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>man</td><td>查看某个命令的说明文档<br>如：man ls</td></tr><tr><td>–help</td><td>所有命令的通用选项，查看当前命令的操作手册<br>如：ls –help</td></tr><tr><td>whereis</td><td>查看某个名称的命令文件出现在哪些文件夹中<br>如：whereis ls</td></tr><tr><td>which</td><td>查看某个命令，可执行文件在哪个文件夹中</td></tr></tbody></table></li><li><h4 id="基础操作命令——文件操作"><a href="#基础操作命令——文件操作" class="headerlink" title="基础操作命令——文件操作"></a>基础操作命令——文件操作</h4><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>touch</td><td>创建一个空白文件<br>语法：touch  文件名称</td></tr><tr><td>rm</td><td>删除一个文件<br>-r选项：删除文件夹<br>语法：rm -rf *  删除当前文件夹下所有文件<br>语法：rm -rf /    <strong>危险操作，删除所有内容</strong></td></tr><tr><td>mkdir</td><td>创建一个文件夹<br>语法：mkdir 文件夹名称<br>语法：mkdir -p  文件夹/文件夹   循环创建文件夹</td></tr><tr><td>rmdir</td><td>删除一个非空文件夹，很少使用<br>一般用rm -rf替代</td></tr><tr><td>cp</td><td>复制一个文件到目标路径—cp：复制<br>cp  原文件   目标文件：将一个原文件复制到目标路径中</td></tr><tr><td>mv</td><td>移动一个文件到目标路径—mv：move<br>mv 原文件  目标路径：将一个原文件移动到目标路径中（剪贴）</td></tr></tbody></table></li><li><h4 id="基础操作命令——文件权限命令"><a href="#基础操作命令——文件权限命令" class="headerlink" title="基础操作命令——文件权限命令"></a>基础操作命令——文件权限命令</h4><p> 权限的描述：rwx 分别描述了只读、只写、执行三种权限，在计算机中为了更好的更简单的 表示权限，可以使用十进制整数表示不同的权限组合：</p><p> 每个文件的权限由三部分组成：当前用户权限(user)，当前用户所属组的权限(group)，其他用户权限(other)</p><table><thead><tr><th>权限说明</th><th>字符描述方式(r  w  x)</th><th>二进制描述方式(r  w  x)</th><th>十进制描述方式(r  w  x)</th></tr></thead><tbody><tr><td>没有权限</td><td>—  —  —</td><td>0  0  0</td><td>0(0+0+0)</td></tr><tr><td>只读权限</td><td>r   —   —</td><td>1  0  0</td><td>4(4+0+0)</td></tr><tr><td>读写权限</td><td>r   w    —</td><td>1  1  0</td><td>6(4+2+0)</td></tr><tr><td>所有权限</td><td>r   w    x</td><td>1  1  1</td><td>7(4+2+1)</td></tr></tbody></table><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>chmod</td><td>授权命令</td></tr></tbody></table><p> 当创建一个文件时，默认的权限为：rw-  r– r–</p><ul><li><p><strong>案例1：给当前用户授权—添加执行权限</strong></p><p>  chmod u+x demo.py   <strong>说明</strong>：+代表添加权限</p></li><li><p><strong>案例2：给当前用户rw权限，用户组rw权限，其他用户r权限</strong></p><p>  chmod u=rw,g=rw,o=r demo.py</p></li><li><p><strong>案例3：给当前用户rwx权限，用户组rw权限，其他用户rw权限</strong></p><p>  chmod 766 demo.py</p></li><li><p><strong>案例4：收回权限</strong></p><p>  chmod u-x,o-w demo.py  <strong>说明：</strong>- 代表减少权限</p></li></ul></li><li><h4 id="基础操作命令——压缩归档命令"><a href="#基础操作命令——压缩归档命令" class="headerlink" title="基础操作命令——压缩归档命令"></a>基础操作命令——压缩归档命令</h4><p>当需要传送多个文件时，需要对文件进行压缩操作，linux中有两种操作方式：</p><p>（1）<strong>归档</strong>：<strong>将多个文件整理到一个文件夹中</strong></p><p>常用的操作命令：tar，打包后的文件后缀名约定为.tar，tar命令只是将多个文件打包到一块，并没有进行压缩。</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><strong>tar</strong></td><td>归档命令、打包命令<br>-c   打包(compress)<br>-x   拆包<br>-t   查包(text)<br>-v  显示处理信息(verbose)<br>-f   处理过程不进行询问(confirm)</td></tr></tbody></table><ul><li><p>案例打包：将demo.py,demo1.py,demo2.py打包成一个压缩文件</p>  <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf  python_demo.tar demo.py demo1.py demo2.py</span><br></pre></td></tr></tbody></table></figure></li><li><p>案例查包</p>  <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -tvf  python_demo.tar</span><br></pre></td></tr></tbody></table></figure></li><li><p>案例解包</p>  <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf  python_demo.tar</span><br></pre></td></tr></tbody></table></figure></li></ul><p>（2）<strong>压缩：</strong>linux/unix提供压缩解压命令，对合并后的tar包进行压缩节省硬盘空间。</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>gzip</td><td>压缩解压命令<br>压缩文件<br>gzip 文件名称.tar：压缩tar包，得到压缩文件   文件名称.tar.gz<br>解压文件<br>gzip -d 文件名称.tar.gz：解压文件得到tar包   文件名称.tar<br>-d选项：decompress 解压缩</td></tr><tr><td>bzip2</td><td>压缩解压命令</td></tr><tr><td>zip/unzip</td><td>zip用于压缩文件，得到：文件名称.zip<br>unzip用于解压缩zip文件</td></tr><tr><td>xz</td><td>压缩<br>xz -z 文件.tar 压缩后的文件  文件.tar.xz<br>解压<br>xz -d 文件.tar.xz  解压缩后的文件  文件.tar</td></tr></tbody></table></li></ol><p>z 文件.tar 压缩后的文件  文件.tar.xz<br>解压<br>xz -d 文件.tar.xz  解压缩后的文件  文件.tar |</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java编辑工具说明</title>
      <link href="/2022/05/19/treasurebox/java/java-bian-ji-gong-ju-shuo-ming/"/>
      <url>/2022/05/19/treasurebox/java/java-bian-ji-gong-ju-shuo-ming/</url>
      
        <content type="html"><![CDATA[<p>1、关于java的集成开发环境【集成开发环境简称：IDE】<br>    1.1、什么是集成开发环境？<br>        * 集成开发环境可以让软件开发变得更简单、更高效。<br>    * 没有IDE工具：<br>        - 需要安装JDK、需要配置环境变量、需要手动编译java文件。<br>        - java源程序出错之后没有提示<br>        - 没有自动提示功能</p><pre><code>*有IDE工具：    - 不需要独立安装JDK【IDE中已经集成】    - 不需要手动配置环境变量    - 不需要使用javac命令编译java源文件    - 并且java源程序编写错误会直接提示    - 使用IDE工具有很多代码不用编写，自动生成了1.2、java有哪些IDE呢    * eclipse(免费)、myeclipse(收费)【最多】* myeclipse* Intellij IDEA* NetBeans* JBuilder</code></pre><p>   1.3、eclipse快捷键：<br>    Ctrl+1 快速修复(最经典的快捷键,就不用多说了)<br>    Ctrl+D: 删除当前行<br>    Ctrl+Alt+↓ 复制当前行到下一行(复制增加)<br>    Ctrl+Alt+↑ 复制当前行到上一行(复制增加)<br>    Alt+↓ 当前行和下面一行交互位置(特别实用,可以省去先剪切,再粘贴了)<br>    Alt+↑ 当前行和上面一行交互位置(同上)<br>    Alt+← 前一个编辑的页面<br>    Alt+→ 下一个编辑的页面(当然是针对上面那条来说了)<br>    Alt+Enter 显示当前选择资源(工程,or 文件 or文件)的属性<br>    Shift+Enter 在当前行的下一行插入空行(这时鼠标可以在当前行的任一位置,不一定是最后)<br>    Shift+Ctrl+Enter 在当前行插入空行(原理同上条)<br>    Ctrl+Q 定位到最后编辑的地方<br>    Ctrl+L 定位在某行 (对于程序超过100的人就有福音了)<br>    Ctrl+M 最大化当前的Edit或View (再按则反之)<br>    Ctrl+/ 注释当前行,再按则取消注释<br>    Ctrl+O 快速显示 OutLine<br>    Ctrl+T 快速显示当前类的继承结构<br>    Ctrl+W 关闭当前Editer<br>    Ctrl+K 参照选中的Word快速定位到下一个<br>    Ctrl+E 快速显示当前Editer的下拉列表(如果当前页面没有显示的用黑体表示)<br>    Ctrl+/(小键盘) 折叠当前类中的所有代码<br>    Ctrl+×(小键盘) 展开当前类中的所有代码<br>    Ctrl+Space 代码助手完成一些代码的插入(但一般和输入法有冲突,可以修改输入法的热键,也可以暂用Alt+/来代替)<br>    Ctrl+Shift+E 显示管理当前打开的所有的View的管理器(可以选择关闭,激活等操作)<br>    Ctrl+J 正向增量查找(按下Ctrl+J后,你所输入的每个字母编辑器都提供快速匹配定位到某个单词,如果没<br>    有,则在stutes line中显示没有找到了,查一个单词时,特别实用,这个功能Idea两年前就有了)<br>    Ctrl+Shift+J 反向增量查找(和上条相同,只不过是从后往前查)<br>    Ctrl+Shift+F4 关闭所有打开的Editer<br>    Ctrl+Shift+X 把当前选中的文本全部变为大写<br>    Ctrl+Shift+Y 把当前选中的文本全部变为小写<br>    Ctrl+Shift+F 格式化当前代码<br>    Ctrl+Shift+P 定位到对于的匹配符(譬如{}) (从前面定位后面时,光标要在匹配符里面,后面到前面,则反之)<br>    下面的快捷键是重构里面常用的,本人就自己喜欢且常用的整理一下(注:一般重构的快捷键都是Alt+Shift开头的了)<br>    Alt+Shift+R 重命名 (是我自己最爱用的一个了,尤其是变量和类的Rename,比手工方法能节省很多劳动力)<br>    Alt+Shift+M 抽取方法 (这是重构里面最常用的方法之一了,尤其是对一大堆泥团代码有用)<br>    Alt+Shift+C 修改函数结构(比较实用,有N个函数调用了这个方法,修改一次搞定)<br>    Alt+Shift+L 抽取本地变量( 可以直接把一些魔法数字和字符串抽取成一个变量,尤其是多处调用的时候)<br>    Alt+Shift+F 把Class中的local变量变为field变量 (比较实用的功能)<br>    Alt+Shift+I 合并变量(可能这样说有点不妥Inline)<br>    Alt+Shift+V 移动函数和变量(不怎么常用)<br>    Alt+Shift+Z 重构的后悔药(Undo)��构的后悔药(Undo)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常用类</title>
      <link href="/2022/05/19/treasurebox/java/3.gao-jie-yong-fa/1.chang-yong-lei/"/>
      <url>/2022/05/19/treasurebox/java/3.gao-jie-yong-fa/1.chang-yong-lei/</url>
      
        <content type="html"><![CDATA[<h2 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h2><h3 id="一、正则表达式-理解"><a href="#一、正则表达式-理解" class="headerlink" title="一、正则表达式(理解)"></a>一、正则表达式(理解)</h3><h3 id="二、Math-理解"><a href="#二、Math-理解" class="headerlink" title="二、Math(理解)"></a>二、Math(理解)</h3><h3 id="三、Random-理解"><a href="#三、Random-理解" class="headerlink" title="三、Random(理解)"></a>三、Random(理解)</h3><h3 id="四、System-理解"><a href="#四、System-理解" class="headerlink" title="四、System(理解)"></a>四、System(理解)</h3><h3 id="五、BigInteger-x2F-BigDecimal-理解"><a href="#五、BigInteger-x2F-BigDecimal-理解" class="headerlink" title="五、BigInteger/BigDecimal(理解)"></a>五、BigInteger/BigDecimal(理解)</h3><h3 id="六、Date-x2F-DateFormat-x2F-Calendar-掌握"><a href="#六、Date-x2F-DateFormat-x2F-Calendar-掌握" class="headerlink" title="六、Date/DateFormat/Calendar(掌握)"></a>六、Date/DateFormat/Calendar(掌握)</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>方法重载(overload)和递归函数</title>
      <link href="/2022/05/19/treasurebox/java/2.java-mian-xiang-dui-xiang/7.fang-fa-chong-zai-overload-he-di-gui-han-shu/"/>
      <url>/2022/05/19/treasurebox/java/2.java-mian-xiang-dui-xiang/7.fang-fa-chong-zai-overload-he-di-gui-han-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="方法重载和递归方法"><a href="#方法重载和递归方法" class="headerlink" title="方法重载和递归方法"></a>方法重载和递归方法</h2><h3 id="一、方法重载"><a href="#一、方法重载" class="headerlink" title="一、方法重载"></a>一、方法重载</h3><p>方法重载：两个方法的功能虽然不同，但是实现的功能类似，让程序员调用的时候就像调同一个方法。</p><h4 id="（1）方法重载示例："><a href="#（1）方法重载示例：" class="headerlink" title="（1）方法重载示例："></a>（1）方法重载示例：</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">体验方法重载的优点：</span></span><br><span class="line"><span class="comment">* 程序员调用方法的时候比较方便</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">前提：功能相似，功能不同时需要编写不同的方法。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OverloadTest02</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line"><span class="type">int</span> <span class="variable">result1</span> <span class="operator">=</span> sum(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">System.out.println(result1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line"><span class="type">double</span> <span class="variable">result2</span> <span class="operator">=</span> sum(<span class="number">1.0</span>,<span class="number">2.0</span>);</span><br><span class="line">System.out.println(result2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line"><span class="type">long</span> <span class="variable">result3</span> <span class="operator">=</span> sum((<span class="type">long</span>)<span class="number">1</span>,(<span class="type">long</span>)<span class="number">2</span>);</span><br><span class="line">System.out.println(result3);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个方法，计算两个int类型数据的和</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>{</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个方法，计算两个double类型数据的和</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">sum</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span>{</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个方法，计算两个long类型数据的和</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">sum</span><span class="params">(<span class="type">long</span> a, <span class="type">long</span> b)</span>{</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="（2）深入解析方法重载"><a href="#（2）深入解析方法重载" class="headerlink" title="（2）深入解析方法重载"></a>（2）深入解析方法重载</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">方法重载：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1、方法重载又被称为overload</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2、什么时候考虑使用方法重载方法名相同</span></span><br><span class="line"><span class="comment">* 功能相似的时候，尽可能让方法名相同</span></span><br><span class="line"><span class="comment">* 功能不同时要让方法名不同</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3、什么条件满足之后构成了方法重载</span></span><br><span class="line"><span class="comment">* 在同一个类中</span></span><br><span class="line"><span class="comment">* 方法名相同</span></span><br><span class="line"><span class="comment">* 参数列表不同：</span></span><br><span class="line"><span class="comment">- 数量不同</span></span><br><span class="line"><span class="comment">- 类型不同</span></span><br><span class="line"><span class="comment">- 顺序不同</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4、方法重载和什么有关系，和什么没关系？</span></span><br><span class="line"><span class="comment">* 方法重载和方法名+参数列表有关系</span></span><br><span class="line"><span class="comment">* 和返回值的类型没关系</span></span><br><span class="line"><span class="comment">* 和修饰符列表无关</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OverloadTest03</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line"></span><br><span class="line">m1(<span class="number">3</span>);</span><br><span class="line">m1();</span><br><span class="line">m1(<span class="number">3</span>,<span class="number">5</span>);</span><br><span class="line">m1(<span class="number">1.0</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">(<span class="type">int</span> a)</span>{} </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span>{} </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>{}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">(<span class="type">double</span> a,<span class="type">int</span> b)</span>{} </span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译报错</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public static void x(){}</span></span><br><span class="line"><span class="comment">public static int x(){}</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="（3）方法重载示例"><a href="#（3）方法重载示例" class="headerlink" title="（3）方法重载示例"></a>（3）方法重载示例</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">方法重载的具体应用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OverloadTest04</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line">U.p(<span class="string">"10"</span>);</span><br><span class="line">U.p(<span class="number">10</span>);</span><br><span class="line">U.p(<span class="number">20.0</span>);</span><br><span class="line">U.p(<span class="string">'1'</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">U</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">p</span><span class="params">(<span class="type">byte</span> a)</span>{</span><br><span class="line">System.out.println(a);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">p</span><span class="params">(<span class="type">short</span> a)</span>{</span><br><span class="line">System.out.println(a);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">p</span><span class="params">(<span class="type">int</span> a)</span>{</span><br><span class="line">System.out.println(a);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">p</span><span class="params">(<span class="type">long</span> a)</span>{</span><br><span class="line">System.out.println(a);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">p</span><span class="params">(<span class="type">double</span> a)</span>{</span><br><span class="line">System.out.println(a);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">p</span><span class="params">(<span class="type">boolean</span> a)</span>{</span><br><span class="line">System.out.println(a);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">p</span><span class="params">(<span class="type">char</span> a)</span>{</span><br><span class="line">System.out.println(a);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">p</span><span class="params">(String a)</span>{</span><br><span class="line">System.out.println(a);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="二、递归方法"><a href="#二、递归方法" class="headerlink" title="二、递归方法"></a>二、递归方法</h3><h4 id="（1）递归方法详解"><a href="#（1）递归方法详解" class="headerlink" title="（1）递归方法详解"></a>（1）递归方法详解</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">关于方法的递归调用</span></span><br><span class="line"><span class="comment">1、什么是递归？</span></span><br><span class="line"><span class="comment">方法自身调用自身。</span></span><br><span class="line"><span class="comment">a(){</span></span><br><span class="line"><span class="comment">a();</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment">2、递归是很耗费内存的，递归算法可以不用的时候尽量别用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3、以下程序会造成"栈内存溢出"错误：</span></span><br><span class="line"><span class="comment">Exception in thread "main" java.lang.StackOverflowError</span></span><br><span class="line"><span class="comment">栈内存溢出错误</span></span><br><span class="line"><span class="comment">错误无法挽回，JVM停止工作。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4、递归必须要有结束条件，没有结束条件一定会发生内存溢出错误。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RecursionTest01</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"main begin"</span>);</span><br><span class="line">doSome();</span><br><span class="line">System.out.println(<span class="string">"main over"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">(<span class="type">int</span> num)</span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">// System.out.println("doSome begin");</span></span><br><span class="line">doSome();  <span class="comment">// 这行代码不结束，下一行程序是不执行的</span></span><br><span class="line">System.out.println(<span class="string">"doSome over"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="（2）递归方法示例"><a href="#（2）递归方法示例" class="headerlink" title="（2）递归方法示例"></a>（2）递归方法示例</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1、使用递归实现斐波那契数列</span></span><br><span class="line"><span class="comment">2、使用递归实现1~N的和</span></span><br><span class="line"><span class="comment">3、计算阶乘</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RecursionTest02</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line"><span class="type">int</span> <span class="variable">resultFeb</span> <span class="operator">=</span> Feb(<span class="number">5</span>);</span><br><span class="line">System.out.println(resultFeb);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">resultSum</span> <span class="operator">=</span> sum(<span class="number">3</span>);</span><br><span class="line">System.out.println(resultSum);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">resultCheng</span> <span class="operator">=</span> cheng(<span class="number">5</span>);</span><br><span class="line">System.out.println(resultCheng);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、 Feb那契数列</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">Feb</span><span class="params">(<span class="type">int</span> a)</span>{</span><br><span class="line"><span class="keyword">if</span>(a ==<span class="number">1</span> || a==<span class="number">2</span>){</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> Feb(a-<span class="number">1</span>)+Feb(a-<span class="number">2</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、使用递归计算1~N的和</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> n)</span>{</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>){</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> n + sum(n-<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、计算阶乘</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">cheng</span><span class="params">(<span class="type">int</span> n)</span>{</span><br><span class="line"><span class="keyword">if</span> (n==<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> n*cheng(n-<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>=1){<br>            return 1;<br>        }<br>        return n + sum(n-1);<br>    }</p><pre><code>// 3、计算阶乘public static int cheng(int n){    if (n==1)    {        return 1;    }    return n*cheng(n-1);}</code></pre><p>}</p><pre><code></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>对象的创建和构造方法</title>
      <link href="/2022/05/19/treasurebox/java/2.java-mian-xiang-dui-xiang/8.dui-xiang-de-chuang-jian-he-gou-zao-fang-fa/"/>
      <url>/2022/05/19/treasurebox/java/2.java-mian-xiang-dui-xiang/8.dui-xiang-de-chuang-jian-he-gou-zao-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h2><ol><li><h4 id="类和对象的区别"><a href="#类和对象的区别" class="headerlink" title="类和对象的区别"></a>类和对象的区别</h4> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">面向对象【java语言的核心机制，最重要的内容，java语言的特色】</span><br><span class="line">    * 面向过程和面向对象的区别</span><br><span class="line">    -- 面向过程：主要关注点是：实现的具体过程，因果关系</span><br><span class="line"></span><br><span class="line">-- 面向对象：主要关注对象【独立体】能完成哪些功能。</span><br><span class="line">    优点：耦合度低，扩展力强。</span><br><span class="line">    缺点：前期投入成本较高，需要进行独立体的抽取，大量的系统设计</span><br><span class="line">    </span><br><span class="line">-- c语言是纯面向过程的、C++半面向对象、java纯面向对象</span><br><span class="line"></span><br><span class="line">    * 面向对象的三大特性</span><br><span class="line">    —— 封装</span><br><span class="line">—— 继承</span><br><span class="line">—— 多态</span><br><span class="line">面向对象的分析：OOA</span><br><span class="line">面向对象的设计：OOD</span><br><span class="line">面向对象的编程：OOP</span><br><span class="line"></span><br><span class="line">    * 类和对象的概念</span><br><span class="line">      * 什么是类？</span><br><span class="line">         —— 类是一个概念，又名类型，代表了一类事物</span><br><span class="line"> —— 在现实世界当中，对象A与对象B具有共同特征，进行抽象总结出的模板</span><br><span class="line">      </span><br><span class="line">      * 对象？</span><br><span class="line">         —— 是实际存在的个体。现实当中实际存在</span><br><span class="line">      </span><br><span class="line">      类——&gt;【实例化】——&gt;对象</span><br><span class="line"></span><br><span class="line">      对象又被称为实例/instance</span><br><span class="line"></span><br><span class="line">      对象——&gt;【抽象】——&gt;类</span><br><span class="line"></span><br><span class="line">      * 一个类主要描述什么信息呢？</span><br><span class="line">      一个类主要描述的是状态+动作。</span><br><span class="line">    * 类的定义</span><br><span class="line">      语法结构：</span><br><span class="line">      [修饰符列表] class 类名{</span><br><span class="line">      }</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="java虚拟机内存分配"><a href="#java虚拟机内存分配" class="headerlink" title="java虚拟机内存分配"></a>java虚拟机内存分配</h4> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">1、JVM(Java虚拟机)主要包括三块内存空间，分别是：栈内存、堆内存、方法区内存</span><br><span class="line"></span><br><span class="line">2、堆内存和方法区内存各有一个，一个线程一个栈内存。</span><br><span class="line"></span><br><span class="line">3、方法调用的时候，该方法所需要的的内存空间在栈中分配，称为压栈。方法结束之后，</span><br><span class="line">   该方法所属内存空间释放，称为弹栈。</span><br><span class="line"></span><br><span class="line">4、栈中主要存储的是方法体当中的局部变量。</span><br><span class="line"></span><br><span class="line">5、方法的代码片段以及整个类的代码片段都被存储在方法区内存当中，在类加载的时候，</span><br><span class="line">   这些代码片段会载入。</span><br><span class="line"></span><br><span class="line">6、在程序执行过程中使用new运算符创建的java对象,存储在堆内存中.对象内部有实例,</span><br><span class="line">   所以实例变量存在堆内存中.</span><br><span class="line"></span><br><span class="line">7、变量分类：</span><br><span class="line">- 局部变量【方法体中声明】</span><br><span class="line">- 成员变量【方法体外声明】</span><br><span class="line">实例变量【前边修饰符没有static】</span><br><span class="line">静态变量【前边修饰符中有static】</span><br><span class="line"></span><br><span class="line">8、静态变量存储在方法区内存当中</span><br><span class="line"></span><br><span class="line">9、三块内存变化最频繁的是栈内存，最先有数据的是方法区内存，垃圾回收器主要针对堆内存。</span><br><span class="line"></span><br><span class="line">10、垃圾回收器【自动垃圾回收机制，GC机制】</span><br><span class="line">* 当堆内存当中的java对象成为垃圾数据的时候，会被垃圾回收器回收。</span><br><span class="line">* 什么时候会变成垃圾呢？</span><br><span class="line">没有更多的引用指向它的时候</span><br><span class="line">这个对象无法被访问，因为访问对象只能通过引用的方式</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure> <img src="image/this%E5%86%85%E5%AD%98%E5%9B%BE.png"></li><li><h4 id="对象的创建和使用"><a href="#对象的创建和使用" class="headerlink" title="对象的创建和使用"></a>对象的创建和使用</h4> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">对象的创建和使用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OOTest01</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line"><span class="comment">// 通过一个类可以实例化N个对象</span></span><br><span class="line"><span class="comment">// 实例化对象语法：new 类名();</span></span><br><span class="line"><span class="comment">// new是java语句当中的一个运算符</span></span><br><span class="line"><span class="comment">// new运算符的作用是创建对象，在JVM堆内存中开辟新的内存空间</span></span><br><span class="line"><span class="comment">// 方法区内存在；类加载的时候，.class字节码文件被加载到该内存空间当中</span></span><br><span class="line"><span class="comment">// 栈内存（局部变量）：方法代码片段执行的时候，会给该方法分配内存空间，在栈中压栈</span></span><br><span class="line"><span class="comment">// 堆内存：new产生的对象</span></span><br><span class="line"><span class="comment">// Student是一个引用数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// s是一个局部变量，存储在栈内存中</span></span><br><span class="line"><span class="comment">// new Studnet()是一个学生对象</span></span><br><span class="line"><span class="comment">// s是一个局部变量，存储对象的内存地址</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 什么是对象？new运算符在堆内存中开辟的内存空间称为对象</span></span><br><span class="line"><span class="comment">// 什么是引用？引用是一个变量，只不过这个变量保存了内存地址</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问变量实例的语法格式</span></span><br><span class="line"><span class="comment">// 读取数据：引用.变量名</span></span><br><span class="line"><span class="comment">// 修改数据：引用.变量名 = 值</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">stuNo</span> <span class="operator">=</span> s.no;</span><br><span class="line"><span class="type">int</span> <span class="variable">stuAge</span> <span class="operator">=</span> s.age;</span><br><span class="line"><span class="type">String</span> <span class="variable">stuName</span> <span class="operator">=</span> s.name;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">stuSex</span> <span class="operator">=</span> s.sex;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"姓名:"</span>+stuNo);</span><br><span class="line">System.out.println(<span class="string">"年龄:"</span>+stuAge);</span><br><span class="line">System.out.println(<span class="string">"姓名:"</span>+stuName);</span><br><span class="line">System.out.println(<span class="string">"性别:"</span>+stuSex);</span><br><span class="line"></span><br><span class="line">s.name = <span class="string">"张三"</span>;</span><br><span class="line">System.out.println(<span class="string">"姓名："</span>+stuName);</span><br><span class="line">System.out.println(<span class="string">"姓名："</span>+s.name);</span><br><span class="line"></span><br><span class="line"><span class="comment">// stu也是一个引用,存储新实例的内存地址</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">System.out.println(stu);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译报错：</span></span><br><span class="line"><span class="comment">// 通过实例才能访问实例变量，不能直接通过类名的格式访问</span></span><br><span class="line"><span class="comment">// System.out.println(Student.no);</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">局部变量在栈内存中存储</span></span><br><span class="line"><span class="comment">成员变量中的实例变量在堆内存的java对象内部存储</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">实例变量是一个对象一份，100个对象有100份</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 学生类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">// 不创建对象，变量的内存空间是不存在的</span></span><br><span class="line"><span class="comment">// 创建完对象之后，对象存储在堆内存中</span></span><br><span class="line">String name;  <span class="comment">// String类型的成员变量不赋值默认为null</span></span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">int</span> no;</span><br><span class="line"><span class="type">boolean</span> sex;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><h3 id="java中的构造方法"><a href="#java中的构造方法" class="headerlink" title="java中的构造方法"></a>java中的构造方法</h3><h4 id="（1）构造方法综述"><a href="#（1）构造方法综述" class="headerlink" title="（1）构造方法综述"></a>（1）构造方法综述</h4> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test003;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 关于java中的构造方法：</span></span><br><span class="line"><span class="comment"> * 1、构造方法又被称为构造函数/构造器/Constructor</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2、构造方法语法结构：</span></span><br><span class="line"><span class="comment"> * [修饰符列表] 构造方法名(形式参数列表){</span></span><br><span class="line"><span class="comment"> * 构造方法体;</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 3、普通方法</span></span><br><span class="line"><span class="comment"> * [修饰符列表] 返回值类型 方法名(形参列表){</span></span><br><span class="line"><span class="comment"> * 方法体;</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> *4、对于构造方法来说，返回值类型不需要指定，并且也不能写</span></span><br><span class="line"><span class="comment"> *void，只要有void就是普通方法了</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *5、对于构造方法来说，构造方法的方法名必须和类名保持一致</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *6、构造方法的作用：</span></span><br><span class="line"><span class="comment"> *构造方法存在的意义是通过构造方法的调用，可以创建对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *7、构造方法怎么调用？</span></span><br><span class="line"><span class="comment"> *-- 普通方法调用：修饰符有static时候，类名.方法名；</span></span><br><span class="line"><span class="comment"> *没有static时候，引用.方法名</span></span><br><span class="line"><span class="comment"> *-- 构造方法：new 构造方法名(实参列表)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *8、构造方法的返回值:</span></span><br><span class="line"><span class="comment"> *每一个构造方法实际上执行结束之后都有返回值，但是这个"return 值";这样的语句不需要写。</span></span><br><span class="line"><span class="comment"> *构造方法结束的时候Java程序自动返回值。</span></span><br><span class="line"><span class="comment"> *并且返回值类型是构造方法所在类的类型。由于构造方法的返回值类型就是类本身，所以返回值类型不需要写。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *9、当一个类中没有任何构造方法的话，系统会默认产生一个无参数的构造方法，这个构造方法被称为缺省构造器。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*10、建议开发中手动为当前类提供无参数构造方法</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*11、构造方法支持重载机制，在一个类当中编写多个构造方法。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*12、构造方法不能使用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConstructorTest01</span> {</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建User对象;</span></span><br><span class="line"><span class="comment">// 只要构造方法调用，就会创建对象，以下创建两个对象，在堆内存中</span></span><br><span class="line"><span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">"hello"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带有static的方法有两种调用形式</span></span><br><span class="line">u.doSome();</span><br><span class="line">User.doSome();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不带static的方法要使用引用.方法，名调用</span></span><br><span class="line">u.doOther();</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="（2）、构造方法的作用"><a href="#（2）、构造方法的作用" class="headerlink" title="（2）、构造方法的作用"></a>（2）、构造方法的作用</h4> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test003;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造方法的作用：</span></span><br><span class="line"><span class="comment"> * 1、创建对象</span></span><br><span class="line"><span class="comment"> * 2、创建对象的同时，初始化实例变量的内存空间</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 成员变量之实例变量，属于对象级别的变量，这种变量必须现有对象才能有实例变量。</span></span><br><span class="line"><span class="comment"> * 实例变量的内存空间是在构造方法的执行过程中完成开辟的</span></span><br><span class="line"><span class="comment"> * 系统在默认赋值的时候，也是在构造方法执行过程中完成赋值的。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 实例变量是存储在JVM的堆内存内部</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContructorTest02</span> {</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"></span><br><span class="line"><span class="type">Account</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>();</span><br><span class="line">System.out.println(a);</span><br><span class="line"></span><br><span class="line"><span class="type">Account</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>(<span class="string">"110"</span>);</span><br><span class="line">System.out.println(a1);</span><br><span class="line">System.out.println(<span class="string">"账户是："</span>+a1.getActno());</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 账户类</span></span><br><span class="line"><span class="keyword">public</span> Account {</span><br><span class="line"></span><br><span class="line"><span class="comment">// 账户</span></span><br><span class="line"><span class="keyword">private</span> String actno;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> balance;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Account</span><span class="params">()</span> {</span><br><span class="line"><span class="comment">// 初始化实例变量的内存空间</span></span><br><span class="line"><span class="comment">// actno = null;</span></span><br><span class="line"><span class="comment">// balance = 0.0</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Account</span><span class="params">(String s)</span> {</span><br><span class="line">actno = s;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getActno</span><span class="params">()</span> {</span><br><span class="line"><span class="keyword">return</span> actno;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setActno</span><span class="params">(String actno)</span> {</span><br><span class="line"><span class="built_in">this</span>.actno = actno;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBalance</span><span class="params">()</span> {</span><br><span class="line"><span class="keyword">return</span> balance;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBalance</span><span class="params">(<span class="type">double</span> balance)</span> {</span><br><span class="line"><span class="built_in">this</span>.balance = balance;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test003;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这是一个User类</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> {</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> {</span><br><span class="line">System.out.println(<span class="string">"无参数的User构造器"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义有参数的构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> age)</span> {</span><br><span class="line">System.out.println(<span class="string">"带有Int类型参数的构造器"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String s)</span> {</span><br><span class="line">System.out.println(<span class="string">"带有String参数的构造器"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">()</span> {</span><br><span class="line">System.out.println(<span class="string">"带有static的方法"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doOther</span><span class="params">()</span> {</span><br><span class="line">System.out.println(<span class="string">"不带static的方法"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p> .out.println(“带有String参数的构造器”);<br> }<br><br> public static void doSome() {<br>     System.out.println(“带有static的方法”);<br> }<br><br> public void doOther() {<br>     System.out.println(“不带static的方法”);<br> }<br> }</p><pre><code></code></pre></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>封装、继承和多态</title>
      <link href="/2022/05/19/treasurebox/java/2.java-mian-xiang-dui-xiang/9.feng-zhuang-ji-cheng-he-duo-tai/"/>
      <url>/2022/05/19/treasurebox/java/2.java-mian-xiang-dui-xiang/9.feng-zhuang-ji-cheng-he-duo-tai/</url>
      
        <content type="html"><![CDATA[<h2 id="封装、继承和多态"><a href="#封装、继承和多态" class="headerlink" title="封装、继承和多态"></a>封装、继承和多态</h2><h3 id="一、封装"><a href="#一、封装" class="headerlink" title="一、封装"></a>一、封装</h3><h4 id="（1）封装的好处"><a href="#（1）封装的好处" class="headerlink" title="（1）封装的好处"></a>（1）封装的好处</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 用户测试类</span></span><br><span class="line"><span class="comment"> * 对象可以随便修改属性 </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 封装的好处：</span></span><br><span class="line"><span class="comment"> * 1、封装之后，看不到事物复杂的一面，对外提供简单的入口。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2、封装之后才会形成真正的“对象”，真正的独立体</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 3、封装就意味着程序可以重复使用，并且事物的适应性比较强，在任何场所都可以用</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 4、事物封装之后，安全性提升。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserTest</span> {</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//  访问age</span></span><br><span class="line">System.out.println(<span class="string">"用户年龄为："</span>+ user.age);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改用户年齡</span></span><br><span class="line">user.age = <span class="number">20</span>;</span><br><span class="line">System.out.println(<span class="string">"用户年龄为："</span>+ user.age);</span><br><span class="line"></span><br><span class="line"><span class="comment">// age属性暴露出来，导致数据出现不合适的数据</span></span><br><span class="line"><span class="comment">// 不建议这样，建议User类型进行封装，建议在外部程序不能随意修改</span></span><br><span class="line">user.age = -<span class="number">100</span>;</span><br><span class="line">System.out.println(<span class="string">"用户年龄为："</span>+user.age);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> {</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="（2）封装的步骤"><a href="#（2）封装的步骤" class="headerlink" title="（2）封装的步骤"></a>（2）封装的步骤</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 封装的步骤：</span></span><br><span class="line"><span class="comment"> * 1、所有属性私有化，使用private关键字进行修饰，private表示私有的，修饰的所有数据只能在本类中访问。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2、对外提供简单的操作入口，以后再想访问只能通过这些入口进行访问：</span></span><br><span class="line"><span class="comment"> * -- 对外提供两个公开的方法，分别是set方法和get方法</span></span><br><span class="line"><span class="comment"> * -- 想修改age属性，调用set方法</span></span><br><span class="line"><span class="comment"> * -- 想读取age属性，调用get方法</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 3、set方法的命名规范：</span></span><br><span class="line"><span class="comment"> * public void setAge(int a){</span></span><br><span class="line"><span class="comment"> * age =a;</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> * public 返回值类型   getAge(){</span></span><br><span class="line"><span class="comment"> * return age;</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 需要熟记：</span></span><br><span class="line"><span class="comment"> * setter and getter方法没有static关键字</span></span><br><span class="line"><span class="comment"> * 有static关键字修饰的方法调用：类名.方法名(实参)</span></span><br><span class="line"><span class="comment"> * 没有static关键字修饰的方法调用：引用.方法名(实参)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> {</span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性私有化</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 形参名称不能跟属性名相同</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> a)</span> {</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在此处对传的参数做限制</span></span><br><span class="line"><span class="keyword">if</span> (a&lt;<span class="number">0</span> || a&gt;<span class="number">150</span>) {</span><br><span class="line">System.out.println(<span class="string">"您输入的年龄不合法"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">age = a;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> {</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="二、继承"><a href="#二、继承" class="headerlink" title="二、继承"></a>二、继承</h3><h4 id="（1）类的继承"><a href="#（1）类的继承" class="headerlink" title="（1）类的继承"></a>（1）类的继承</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关于java语言中的继承：</span></span><br><span class="line"><span class="comment"> * 1、继承是面向对象的三大特征之一，三大特征分别是：封装、继承、多态</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2、继承的基本作用是：代码复用。继承最重要的作用是：有了继承之后才有了以后的方法覆盖和多态机制。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 3、继承语法格式</span></span><br><span class="line"><span class="comment"> * [修饰符列表] class 类名 extends 父类名{</span></span><br><span class="line"><span class="comment"> * 类体 = 属性  +  方法</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 4、java语言中只支持单继承，一个类中不能同时继承很多类，只能继承一个类</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 5、关于继承的一些术语：</span></span><br><span class="line"><span class="comment"> * B类继承A类，其中：</span></span><br><span class="line"><span class="comment"> * A类称为：父类、基类、超类、superclass</span></span><br><span class="line"><span class="comment"> * B类称为：子类、派生类、subclass</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 6、在java语言中，子类继承父类都继承哪些数据呢？</span></span><br><span class="line"><span class="comment"> * ① 私有的不支持继承</span></span><br><span class="line"><span class="comment"> * ② 构造方法不支持继承</span></span><br><span class="line"><span class="comment"> * ③ 其他数据都可以继承</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 7、虽然java语句中只支持单继承，但是一个类也可以间接继承其他类，例如：</span></span><br><span class="line"><span class="comment"> * C extends B{</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> * B extends A{</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> * A extends T{</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> * C直接继承B，但是也间接继承T、A类</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 8、java语言中假设一个类没有显示的继承任何类，该类默认集成JavaSE库中的java.lang,Object类</span></span><br><span class="line"><span class="comment"> *java语言中任何一个类都有Object类的特征</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtendsTest</span> {</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">ExtendsTest</span> <span class="variable">et</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExtendsTest</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> et.toString();</span><br><span class="line">System.out.println(s);</span><br><span class="line"></span><br><span class="line"><span class="type">CreditAccount</span> <span class="variable">act</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CreditAccount</span>();</span><br><span class="line">act.setActno(<span class="string">"act-01"</span>);</span><br><span class="line">System.out.println(act.getActno());</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test12;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 银行账户</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> {</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test12;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 信用账户</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreditAccount</span> <span class="keyword">extends</span> <span class="title class_">Account</span> {</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><strong>面试题：在java中定义一个不做事且没有参数的构造方法的作用？</strong></p><p>Java程序在执行子类的构造方法之前，如果没有用super()来调用父类特定的构造方法，则会调用父类中“没有参数的构造方法”。因此，如果父类中只定义了有参数的构造方法，而在子类的构造方法中又没有用super()来调用父类中特定的构造方法，则编译时将发生错误，因为Java程序在父类中找不到没有参数的构造方法可供执行。解决办法是在父类中加一个不做事且没有参数的构造方法。</p><h4 id="（2）方法的覆盖-x2F-重写"><a href="#（2）方法的覆盖-x2F-重写" class="headerlink" title="（2）方法的覆盖/重写"></a>（2）方法的覆盖/重写</h4><table><thead><tr><th>区别点</th><th>重载方法</th><th>重写方法</th></tr></thead><tbody><tr><td>发生范围</td><td>同一个类</td><td>子类 中</td></tr><tr><td>参数列表</td><td>必须修改</td><td>一定不能修改</td></tr><tr><td>返回类型</td><td>可修改</td><td>一定不能修改</td></tr><tr><td>异常</td><td>可修改</td><td>可以减少或删除，一定不能抛出新的或者更广的异常</td></tr><tr><td>访问修饰符</td><td>可修改</td><td>一定不能做更严格的限制（可以降低限制）</td></tr><tr><td>发生阶段</td><td>编译期</td><td>运行期</td></tr></tbody></table><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test13;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 关于方法的覆盖，</span></span><br><span class="line"><span class="comment"> * 1、方法覆盖又被称为方法重写，英语单词：override[官方的]/overwrite</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2、什么时候使用方法覆盖？</span></span><br><span class="line"><span class="comment"> * 当父类的中的方法已经无法满足当前子类的业务需求。</span></span><br><span class="line"><span class="comment"> * 子类有必要将父类继承过来的方法进行重新编写。</span></span><br><span class="line"><span class="comment"> * 这个子类中重新编写的方法称为方法重写/覆盖。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 3、什么时候发生方法重写？</span></span><br><span class="line"><span class="comment"> * 方法重写发生在有继承关系的父子类之间</span></span><br><span class="line"><span class="comment"> * 方法重写的时候：方法名相同，返回值类型相同，形参列表相同</span></span><br><span class="line"><span class="comment"> * 方法重写的时候：访问权限不能更低，只能更高public/private/proteced</span></span><br><span class="line"><span class="comment"> * 方法重写的时候：抛出异常不能更多，可以更少</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 4、建议方法重写的时候直接复制粘贴，避免出错！！！</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 5、注意：</span></span><br><span class="line"><span class="comment"> * 私有方法不能继承，所以不能覆盖</span></span><br><span class="line"><span class="comment"> * 构造方法不能继承，所以不能覆盖</span></span><br><span class="line"><span class="comment"> * 静态方法不存在覆盖</span></span><br><span class="line"><span class="comment"> * 覆盖只针对方法，不谈属性</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OverrideTest01</span> {</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"></span><br><span class="line"><span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">a.move();</span><br><span class="line"></span><br><span class="line"><span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">c.move();</span><br><span class="line"></span><br><span class="line"><span class="type">Bird</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bird</span>();</span><br><span class="line">b.move();</span><br><span class="line"></span><br><span class="line"><span class="type">YingWu</span> <span class="variable">yw</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">YingWu</span>();</span><br><span class="line">yw.move();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test13;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> {</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> {</span><br><span class="line">System.out.println(<span class="string">"动物在移动"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test13;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bird</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> {</span><br><span class="line">System.out.println(<span class="string">"鸟儿在飞翔"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="三、多态"><a href="#三、多态" class="headerlink" title="三、多态"></a>三、多态</h3><ol><li><h4 id="多态的基础语法"><a href="#多态的基础语法" class="headerlink" title="多态的基础语法"></a>多态的基础语法</h4><p> 多态主要指编译形态和运行形态的两种形态，主要涉及类型之间的转换：</p><ul><li><p><strong>向上转型(upcasting)：</strong></p><p>  父类型引用子类型对象</p></li><li><p><strong>向下转型(downcasting)</strong></p><p>  只有访问子类中的特有的方法</p></li></ul> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpower.javase.test001;</span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 关于java语言中的多态</span></span><br><span class="line"><span class="comment"> * 1、Animal、Cat、Bird三个类之间的关系</span></span><br><span class="line"><span class="comment"> * Animal是父类</span></span><br><span class="line"><span class="comment"> * Cat和Bird都继承Animal类</span></span><br><span class="line"><span class="comment"> * Cat和Bird都重写父类的move方法</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2、面向对象三大特征分别为：封装、继承、多态</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 3、关于多态中设计到的概念：</span></span><br><span class="line"><span class="comment"> * —— 向上转型 (upcasting)</span></span><br><span class="line"><span class="comment"> * 子类型 --&gt; 父类型</span></span><br><span class="line"><span class="comment"> * 又被称为：自动类型转换</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * —— 向下转型 (downcasting)</span></span><br><span class="line"><span class="comment"> * 父类型——&gt; 子类型</span></span><br><span class="line"><span class="comment"> * 又被称为：强制类型转换【需要加强制类型转换符】</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * —— 需要记忆：不论是向上转型，还是向下转型，两种类型之间必须要有继承关系</span></span><br><span class="line"><span class="comment"> * 没有继承关系，程序无法编译通过。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> {</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"></span><br><span class="line"><span class="type">Animal</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">a1.move();</span><br><span class="line"></span><br><span class="line"><span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">c.move();</span><br><span class="line"></span><br><span class="line"><span class="type">Bird</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bird</span>();</span><br><span class="line">b1.move();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用多态语法继承机制</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、Animal和Cat之间存在继承关系，Animal是父类，Cat是子类</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2、Cat is a Animal</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 3、new Cat()创建的对象的类型是Cat，a2这个引用的数据类型是Animal，可见他们进行了类型转换</span></span><br><span class="line"><span class="comment"> * 子类型转换成父类型，称为向上转型/upcasting，或者成为自动类型转换</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 4、Java中允许这种语法：父类型引用指向子类型对象</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="type">Animal</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、java程序永远都分为编译阶段和运行阶段</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2、先分析编译，再分析运行阶段，编译无法通过，根本无法运行</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 3、编译阶段编译器检查a2这个引用的数据类型为Animal，由于Animal.class字节码中有move()方法，</span></span><br><span class="line"><span class="comment"> * 所以编译编译通过了。这个过程称为静态绑定、编译阶段绑定。</span></span><br><span class="line"><span class="comment"> * 只有静态绑定成功之后才有后续的运行</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 4、在程序运行阶段，JVM虚拟堆内存中真实创建的对象是Cat对象，</span></span><br><span class="line"><span class="comment"> * 那么以下程序在运行阶段一定会调用Cat对象的move()方法，</span></span><br><span class="line"><span class="comment"> * 此时发生了程序的动态绑定，运行阶段绑定</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 5、无论是Cat类有没有重写move方法，运行阶段一定调用的是Cat对象的move方法，</span></span><br><span class="line"><span class="comment"> * 因为底层真实对象是Cat对象。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 6、父类型引用指向子类型对象这种机制导致程序存在编译阶段绑定和运行阶段绑定两种不同的形态。</span></span><br><span class="line"><span class="comment"> * 这种机制可以称为一种多态语法机制。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 只有子类和父类都有的方法才能调用</span></span><br><span class="line">a2.move();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译阶段没有在Animal中找到catchMouse()方法，导致静态绑定失败，没有绑定成功</span></span><br><span class="line"><span class="comment">//  a2.catchMouse(); // 编译报错，因为catchMouse在父类中没有</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 需求：想让以上对象执行catchMouse方法</span></span><br><span class="line"><span class="comment"> * 将a2从Animal类型强制类型转换为Cat类型，称为向下转型(downcasting)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 注：强制类型转换需要加强制类型转换符</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 什么时候需要向下转型？</span></span><br><span class="line"><span class="comment"> * 当调用的方法是子类型中特有的，在父类型中不存在，必须向下转型</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="comment">//Cat a3 = (Cat)a2;  // 强制类型转换</span></span><br><span class="line"><span class="comment">//a3.catchMouse();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// long l = 100L;</span></span><br><span class="line"><span class="comment">// int i = (int)l;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、以下程序编译是没有问题的，因为编译器检查到a3引用的数据类型是Animal</span></span><br><span class="line"><span class="comment"> * Animal和Cat存在继承关系，并且Animal是父类型，Cat是子类型</span></span><br><span class="line"><span class="comment">   *     父类型转换成子类型叫做向下转型，语法合格</span></span><br><span class="line"><span class="comment"> *       </span></span><br><span class="line"><span class="comment"> * 2、程序虽然编译通过了，但是程序在运行阶段会出现异常，因为JVM堆内存中真实存在的是Bird类型，</span></span><br><span class="line"><span class="comment"> *  Bird类型 无法转换成Cat类型，因为两种类型之间不存在任何继承关系，此时会出现异常：</span></span><br><span class="line"><span class="comment"> *   java.lang.ClassCastException</span></span><br><span class="line"><span class="comment"> *  类型转换异常，这种异常总是发生在"向下转型"时</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="type">Animal</span> <span class="variable">a3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bird</span>();</span><br><span class="line"><span class="comment">//Cat c3 = (Cat)a3;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、以上异常只有在强制类型转换时候发生，也就是"向下转型"时存在隐患（编译过了，运行报错）</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2、向上转型只要编译通过，运行一定不会出现问题，Animal a = new Cat();</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 3、向下转型编译通过，运行可能出现错误；Animal a3 = new Bird(); Cat c3 = (Cat)a3;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 4、向下转型怎么避免java.lang.ClassCastException异常？</span></span><br><span class="line"><span class="comment"> * 使用instanceof运算符</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 5、instanceof运算符怎么使用？</span></span><br><span class="line"><span class="comment"> * 5.1、语法格式</span></span><br><span class="line"><span class="comment"> * (引用 instanceof 数据类型名)</span></span><br><span class="line"><span class="comment"> * 5.2、以上运算符的执行结果类型是布尔类型，结果可能是true/false</span></span><br><span class="line"><span class="comment"> * 5.3、关于运算结果true/false</span></span><br><span class="line"><span class="comment"> * 假设：(a instanceof Animal)</span></span><br><span class="line"><span class="comment"> * true表示：</span></span><br><span class="line"><span class="comment"> * a这个引用执行的是Animal类型</span></span><br><span class="line"><span class="comment"> * false表示：</span></span><br><span class="line"><span class="comment"> * a这个引用不是一个Animal类型</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 6、Java语法规范中要求：在进行强制类型转换之前，建议采用instanceof运算符进行判断，</span></span><br><span class="line"><span class="comment"> * 避免ClassCastException</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">if</span>(a3 <span class="keyword">instanceof</span> Cat) { <span class="comment">// a3是一个Cat类型的对象</span></span><br><span class="line"><span class="type">Cat</span> <span class="variable">c3</span> <span class="operator">=</span> (Cat)a3;</span><br><span class="line">c3.move();</span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(a3 <span class="keyword">instanceof</span> Bird) { <span class="comment">// a3是一个Bird类型的对象</span></span><br><span class="line"><span class="type">Bird</span> <span class="variable">c3</span> <span class="operator">=</span> (Bird)a3;</span><br><span class="line">c3.move();</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpower.javase.test001;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 动物类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> {</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> {</span><br><span class="line">System.out.println(<span class="string">"动物在移动！"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpower.javase.test001;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 猫类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写父类的move()方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> {</span><br><span class="line">System.out.println(<span class="string">"猫在走猫步！"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 猫类特有的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchMouse</span><span class="params">()</span> {</span><br><span class="line">System.out.println(<span class="string">"猫抓老鼠"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpower.javase.test001;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 鸟类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bird</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> {</span><br><span class="line">System.out.println(<span class="string">"鸟儿在飞翔"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="多态知识点总结"><a href="#多态知识点总结" class="headerlink" title="多态知识点总结"></a>多态知识点总结</h4> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpower.javase.test001;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> {</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父类型引用指向子类型对象</span></span><br><span class="line"><span class="comment">// 向上转型</span></span><br><span class="line"><span class="type">Animal</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"><span class="type">Animal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bird</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 向下转型</span></span><br><span class="line"><span class="keyword">if</span>(b2 <span class="keyword">instanceof</span> Bird) {</span><br><span class="line"><span class="type">Bird</span> <span class="variable">b3</span> <span class="operator">=</span> (Bird)b2;</span><br><span class="line">b3.move();</span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(b2 <span class="keyword">instanceof</span> Cat) {</span><br><span class="line"><span class="type">Cat</span> <span class="variable">b3</span> <span class="operator">=</span> (Cat)b2;</span><br><span class="line">b3.move();</span><br><span class="line">};</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="多态在开发中的作用"><a href="#多态在开发中的作用" class="headerlink" title="多态在开发中的作用"></a>多态在开发中的作用</h4></li></ol><p>以人喂养宠物为例，Cat和Dog和Snake都继承Pet，人在喂养时针对Pet，不关注具体传的对象是哪一个。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpower.javase.test002;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多态在实际开发中的作用</span></span><br><span class="line"><span class="comment"> * 1、分析：主人喂养宠物这个场景实现需要进行类型的抽象：</span></span><br><span class="line"><span class="comment"> * —— 主人【类】</span></span><br><span class="line"><span class="comment"> * —— 主人可以喂养宠物，所以主人有喂养的动作</span></span><br><span class="line"><span class="comment"> * —— 宠物【类】</span></span><br><span class="line"><span class="comment"> * —— 宠物可以吃东西，所以宠物有吃东西这个动作</span></span><br><span class="line"><span class="comment"> * 2、面向对象编程的核心，定义好类，然后将实例化为对象，给一个环境驱使一下，让各个对象之间形成一个系统</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  3、多态的作用是什么？</span></span><br><span class="line"><span class="comment"> *  降低程序的耦合度，提高程序的能力</span></span><br><span class="line"><span class="comment"> *  能使用多态尽量使用多态</span></span><br><span class="line"><span class="comment"> *  父类型的引用指向子类型</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> *  核心：面向抽象编程，尽量不要面向具体编程</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> {</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"><span class="type">Master</span> <span class="variable">zhangsan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Master</span>();</span><br><span class="line"><span class="type">Cat</span> <span class="variable">tom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"><span class="type">Dog</span> <span class="variable">erHa</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"><span class="type">Snake</span> <span class="variable">snake</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Snake</span>();</span><br><span class="line">zhangsan.feed(tom);</span><br><span class="line">zhangsan.feed(erHa);</span><br><span class="line">zhangsan.feed(snake);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpower.javase.test002;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  人类</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 降低程序的耦合度【解耦合】，提高程序的扩展能力【软件开发的一个很重要的目标】</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Master</span> {</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提倡：面向对象编程，不要面向具体编程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">feed</span><span class="params">(Pet c)</span> {</span><br><span class="line">c.eat();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>宠物类：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpower.javase.test002;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pet</span> {</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> {</span><br><span class="line">System.out.println(<span class="string">"吃"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpower.javase.test002;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 宠物小猫</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Pet</span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小猫爱吃鱼</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> {</span><br><span class="line">System.out.println(<span class="string">"小猫在吃鱼"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpower.javase.test002;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  宠物小狗</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Pet</span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> {</span><br><span class="line">System.out.println(<span class="string">"小狗吃骨头"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpower.javase.test002;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 蟒蛇宠物</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Snake</span> <span class="keyword">extends</span> <span class="title class_">Pet</span>{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> {</span><br><span class="line">System.out.println(<span class="string">"蛇吞象"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>bjpower.javase.test002;</p><p>/**</p><ul><li><pre><code>宠物小猫</code></pre></li><li><p>*/<br>public class Cat extends Pet{</p><p> // 小猫爱吃鱼<br> public void eat() {<br> System.out.println(“小猫在吃鱼”);<br> }</p></li></ul><p>}</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```java</span><br><span class="line">package com.bjpower.javase.test002;</span><br><span class="line">/**</span><br><span class="line"> *  宠物小狗</span><br><span class="line"> * */</span><br><span class="line">public class Dog extends Pet{</span><br><span class="line"></span><br><span class="line">public void eat() {</span><br><span class="line">System.out.println("小狗吃骨头");</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpower.javase.test002;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 蟒蛇宠物</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Snake</span> <span class="keyword">extends</span> <span class="title class_">Pet</span>{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> {</span><br><span class="line">System.out.println(<span class="string">"蛇吞象"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java面向对象</title>
      <link href="/2022/05/19/treasurebox/java/2.java-mian-xiang-dui-xiang/java-mian-xiang-dui-xiang/"/>
      <url>/2022/05/19/treasurebox/java/2.java-mian-xiang-dui-xiang/java-mian-xiang-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="Java面向对象"><a href="#Java面向对象" class="headerlink" title="Java面向对象"></a>Java面向对象</h2><h3 id="一、类和对象"><a href="#一、类和对象" class="headerlink" title="一、类和对象"></a>一、类和对象</h3><ol><li><h5 id="面向对象和面向过程的区别？"><a href="#面向对象和面向过程的区别？" class="headerlink" title="面向对象和面向过程的区别？"></a>面向对象和面向过程的区别？</h5><ul><li><p><strong>面向过程</strong> ：<strong>面向过程性能比面向对象高。</strong> 因为类调用时需要实例化，开销比较大，比较消耗资源，所以当性能是最重要的考量因素的时候，比如单片机、嵌入式开发、Linux/Unix 等一般采用面向过程开发。但是，<strong>面向过程没有面向对象易维护、易复用、易扩展。</strong></p></li><li><p><strong>面向对象</strong> ：<strong>面向对象易维护、易复用、易扩展。</strong> 因为面向对象有封装、继承、多态性的特性，所以可以设计出低耦合的系统，使系统更加灵活、更加易于维护。但是，<strong>面向对象性能比面向过程低</strong>。</p><p>  面向过程 ：面向过程性能比面向对象高？？</p>  <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这个并不是根本原因，面向过程也需要分配内存，计算内存偏移量，Java 性能差的主要原因并不是因为它是面向对象语言，而是 Java 是半编译语言，最终的执行代码并不是可以直接被 CPU 执行的二进制机械码。</span><br><span class="line"></span><br><span class="line">而面向过程语言大多都是直接编译成机械码在电脑上执行，并且其它一些面向过程的脚本语言性能也并不一定比 Java 好。</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><h5 id="构造器Constructor是否可被overide？"><a href="#构造器Constructor是否可被overide？" class="headerlink" title="构造器Constructor是否可被overide？"></a>构造器Constructor是否可被overide？</h5><p> Constructor 不能被 override（重写）,但是可以 overload（重载）,所以你可以看到一个类中有多个构造函数的情况。</p></li><li><h5 id="在Java中定义一个不做事且没有参数的构造方法的作用？"><a href="#在Java中定义一个不做事且没有参数的构造方法的作用？" class="headerlink" title="在Java中定义一个不做事且没有参数的构造方法的作用？"></a>在Java中定义一个不做事且没有参数的构造方法的作用？</h5><p> Java 程序在执行子类的构造方法之前，如果没有用 <code>super()</code>来调用父类特定的构造方法，则会调用父类中“没有参数的构造方法”。因此，如果父类中只定义了有参数的构造方法，而在子类的构造方法中又没有用 <code>super()</code>来调用父类中特定的构造方法，则编译时将发生错误，因为 Java 程序在父类中找不到没有参数的构造方法可供执行。解决办法是在父类里加上一个不做事且没有参数的构造方法。</p></li><li><h5 id="成员变量和局部变量的区别有哪些？"><a href="#成员变量和局部变量的区别有哪些？" class="headerlink" title="成员变量和局部变量的区别有哪些？"></a>成员变量和局部变量的区别有哪些？</h5><ol><li>从语法形式上看:成员变量是属于类的，而局部变量是在方法中定义的变量或是方法的参数；成员变量可以被 public,private,static 等修饰符所修饰，而局部变量不能被访问控制修饰符及 static 所修饰；但是，成员变量和局部变量都能被 final 所修饰。</li><li>从变量在内存中的存储方式来看:如果成员变量是使用<code>static</code>修饰的，那么这个成员变量是属于类的，如果没有使用<code>static</code>修饰，这个成员变量是属于实例的。而对象存在于堆内存，局部变量则存在于栈内存。</li><li>从变量在内存中的生存时间上看:成员变量是对象的一部分，它随着对象的创建而存在，而局部变量随着方法的调用而自动消失。</li><li>成员变量如果没有被赋初值:则会自动以类型的默认值而赋值（一种情况例外:被 final 修饰的成员变量也必须显式地赋值），而局部变量则不会自动赋值。</li></ol></li><li><h5 id="创建一个对象用什么运算符？对象实体与对象引用有何不同？"><a href="#创建一个对象用什么运算符？对象实体与对象引用有何不同？" class="headerlink" title="创建一个对象用什么运算符？对象实体与对象引用有何不同？"></a>创建一个对象用什么运算符？对象实体与对象引用有何不同？</h5><p> new 运算符，new 创建对象实例（对象实例在堆内存中），对象引用指向对象实例（对象引用存放在栈内存中）。一个对象引用可以指向 0 个或 1 个对象（一根绳子可以不系气球，也可以系一个气球）;一个对象可以有 n 个引用指向它（可以用 n 条绳子系住一个气球）。</p></li><li><h5 id="一个类的构造方法的作用是什么？若一个类没有声明构造方法，该程序能正常执行吗？为什么？"><a href="#一个类的构造方法的作用是什么？若一个类没有声明构造方法，该程序能正常执行吗？为什么？" class="headerlink" title="一个类的构造方法的作用是什么？若一个类没有声明构造方法，该程序能正常执行吗？为什么？"></a>一个类的构造方法的作用是什么？若一个类没有声明构造方法，该程序能正常执行吗？为什么？</h5><p> 主要作用是完成对类对象的初始化工作。可以执行。因为一个类即使没有声明构造方法也会有默认的不带参数的构造方法。如果我们自己添加了类的构造方法（无论是否有参），Java 就不会再添加默认的无参数的构造方法了，这时候，就不能直接 new 一个对象而不传递参数了，所以我们一直在不知不觉地使用构造方法，这也是为什么我们在创建对象的时候后面要加一个括号（因为要调用无参的构造方法）。如果我们重载了有参的构造方法，记得都要把无参的构造方法也写出来（无论是否用到），因为这可以帮助我们在创建对象的时候少踩坑。</p></li><li><h5 id="构造方法有哪些特性？"><a href="#构造方法有哪些特性？" class="headerlink" title="构造方法有哪些特性？"></a>构造方法有哪些特性？</h5><ol><li>名字与类名相同。</li><li>没有返回值，但不能用 void 声明构造函数（带void声明的代表是普通方法）。</li><li>生成类的对象时自动执行，无需调用。</li></ol></li><li><h5 id="在调用子类构造方法之前会先调用父类没有参数的构造方法，目的是什么？"><a href="#在调用子类构造方法之前会先调用父类没有参数的构造方法，目的是什么？" class="headerlink" title="在调用子类构造方法之前会先调用父类没有参数的构造方法，目的是什么？"></a>在调用子类构造方法之前会先调用父类没有参数的构造方法，目的是什么？</h5><p> 帮助子类做初始化工作</p></li><li><h5 id="对象相等与指向他们的引用相等，两者有什么不同？"><a href="#对象相等与指向他们的引用相等，两者有什么不同？" class="headerlink" title="对象相等与指向他们的引用相等，两者有什么不同？"></a>对象相等与指向他们的引用相等，两者有什么不同？</h5><p> 对象相等比的是内存中存放的内容是否相等，而引用相等比的是指向的内存地址是否相等。</p></li></ol><h3 id="二、面向对象三大特征"><a href="#二、面向对象三大特征" class="headerlink" title="二、面向对象三大特征"></a>二、面向对象三大特征</h3><ol><li><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p> 封装指把一个对象的状态信息（也就是属性），隐藏在对象的内部，不允许外部直接访问对象的内部信息，但是可以提供一届可以被外界访问的方法来操作属性，就好像我们看不到空调的内部组件（也就是属性），但是可以使用遥控器(方法)来控制空调，如果属性不想被外界访问，就可以不提供方法给外界。但是如果一个类没有提供给外界的方法，name这个类就没什么意义了。</p> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;<span class="comment">//id属性私有化</span></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//name属性私有化</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取id的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置id的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> {</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取name的方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置name的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> {</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p> 不同的对象，相互之间经常有一定数量的共同点。例如，小茗同学，小红，小刚等都共享学生的特性，同时，每一个对象可能还有不同的特性，比如小明数学好，小红性格好，小刚力气大等。继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性的继承父类。通过使用继承，可以快速的创建新的类，提高代码的重用，程序的可维护性，节省大量创建新类的时间，提高开发效率。</p><p> <strong>关于继承需要牢记：</strong></p><ol><li>子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类无法访问，<strong>只是拥有</strong>。</li><li>子类可以拥有自己属性和方法，即子类可以对父类进行扩展。</li><li>子类可以用自己的方式实现父类的方法（重写/orveride）。</li></ol></li><li><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p> 多态，表示一个对象具有多种状态。具体表现为父类的引用指向子类的实例，让对象在编译器和运行期具有不同的状态。</p><p> <strong>多态的特点：</strong></p><ul><li>对象类型和引用类型之间具有继承（类）/实现（接口）的关系；</li><li>对象类型不可变，引用类型可变；</li><li>方法具有多态性，属性不具有多态性；</li><li>引用类型变量发出的方法调用的到底是哪个类中的方法，必须在程序运行期间才能确定；</li><li>多态不能调用“只在子类存在但在父类不存在”的方法；</li><li>如果子类重写了父类的方法，真正执行的是子类覆盖的方法，如果子类没有覆盖父类的方法，执行的是父类的方法。</li></ul></li></ol><h3 id="三、修饰符"><a href="#三、修饰符" class="headerlink" title="三、修饰符"></a>三、修饰符</h3><ol><li><h4 id="在一个静态方法中调用一个非静态成员为什么是非法的？"><a href="#在一个静态方法中调用一个非静态成员为什么是非法的？" class="headerlink" title="在一个静态方法中调用一个非静态成员为什么是非法的？"></a>在一个静态方法中调用一个非静态成员为什么是非法的？</h4><p> 由于静态方法可以不通过对象进行调用，因此在静态方法里，不能调用其他的非静态变量，也不可以访问非静态变量的成员。</p></li><li><h4 id="静态方法和实例方法有什么不同？"><a href="#静态方法和实例方法有什么不同？" class="headerlink" title="静态方法和实例方法有什么不同？"></a>静态方法和实例方法有什么不同？</h4><ol><li>在外部调用静态方法时，可以试用“类名.方法名”的方式，也可以使用“对象名.方法名的方式”（不推荐，静态方法跟具体的对象已经没有关系），而实例方法只能使用后面的方式。也就是：调用静态方法不需要创建对象</li><li>静态方法在访问本类成员时，只允许访问静态成员（即静态成员变量和静态方法），而不允许访问实例成员变量和实例方法。实例方法则无此限制。</li></ol></li><li><h4 id="常见的关键字总结，this，static，final，super："><a href="#常见的关键字总结，this，static，final，super：" class="headerlink" title="常见的关键字总结，this，static，final，super："></a>常见的关键字总结，this，static，final，super：</h4><ul><li><p><strong>this：用于引用类的当前实例，不能用在静态方法中。此关键字可选。</strong></p></li><li><p><strong>static关键字主要有以下四种使用场景：</strong></p>  <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1、修饰成员变量和成员方法: 被 static 修饰的成员属于类，不属于单个这个类的某个对象，被类中所有对象共享，可以并且建议通过类名调用。被static 声明的成员变量属于静态成员变量，静态变量 存放在 Java 内存区域的方法区。调用格式：类名.静态变量名  类名.静态方法名()</span><br><span class="line"></span><br><span class="line">2、静态代码块: 静态代码块定义在类中方法外, 静态代码块在非静态代码块之前执行(静态代码块—&gt;非静态代码块—&gt;构造方法)。 该类不管创建多少对象，静态代码块只执行一次.</span><br><span class="line"></span><br><span class="line">3、静态内部类（static修饰类的话只能修饰内部类）： 静态内部类与非静态内部类之间存在一个最大的区别: 非静态内部类在编译完成之后会隐含地保存着一个引用，该引用是指向创建它的外围类，但是静态内部类却没有。没有这个引用就意味着：1. 它的创建是不需要依赖外围类的创建。2. 它不能使用任何外围类的非static成员变量和方法。</span><br><span class="line"></span><br><span class="line">4、静态导包(用来导入类中的静态资源，1.5之后的新特性): 格式为：import static 这两个关键字连用可以指定导入某个类中的指定静态资源，并且不需要使用类名调用类中静态成员，可以直接使用类中静态成员变量和成员方法。</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>final关键字主要用在三个地方：变量、方法、类。</strong></p>  <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、对于一个final变量，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；如果是引用类型的变量，则在对其初始化之后便不能再让其指向另一个对象。</span><br><span class="line"></span><br><span class="line">2、当用final修饰一个类时，表明这个类不能被继承。final类中的所有成员方法都会被隐式地指定为final方法。</span><br><span class="line"></span><br><span class="line">3、使用final方法的原因有两个。第一个原因是把方法锁定，以防任何继承类修改它的含义；第二个原因是效率。在早期的Java实现版本中，会将final方法转为内嵌调用。但是如果方法过于庞大，可能看不到内嵌调用带来的任何性能提升（现在的Java版本已经不需要使用final方法进行这些优化了）。类中所有的private方法都隐式地指定为final</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>super关键字用于从子类访问父类的变量和方法。</strong> </p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Super</span> {</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">showNumber</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"number = "</span> + number);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_">Super</span> {</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">bar</span><span class="params">()</span> {</span><br><span class="line">        <span class="built_in">super</span>.number = <span class="number">10</span>;</span><br><span class="line">        <span class="built_in">super</span>.showNumber();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>在构造器中使用 <code>super（）</code> 调用父类中的其他构造方法时，该语句必须处于构造器的首行，否则编译器会报错。另外，this 调用本类中的其他构造方法时，也要放在首行。</li><li>this、super不能用在static方法中。</li></ul></li></ul></li></ol><h3 id="四、接口类和抽象类"><a href="#四、接口类和抽象类" class="headerlink" title="四、接口类和抽象类"></a>四、接口类和抽象类</h3><ol><li><h4 id="接口和抽象类的区别是什么？"><a href="#接口和抽象类的区别是什么？" class="headerlink" title="接口和抽象类的区别是什么？"></a>接口和抽象类的区别是什么？</h4><ol><li><p>接口的方法默认是public，所有方法在接口中不能有实现（Java 8开始接口方法可以有默认实现），而抽象类可以有非抽象的方法。</p></li><li><p>接口中除了static、final变量，不能有其他变量，而抽象类中则不一样。</p></li><li><p>一个类可以实现多个接口，但只能实现一个抽象类。接口自己本身可以通过extends关键字扩展多个接口。</p></li><li><p>接口方法默认修饰符是public，抽象方法可以有public、protected和default这些修饰符（抽象方法就是为了被抽血所以不能使用private关键字修饰）</p></li><li><p>从设计层面来说，抽象是对类的抽象，是一种模板设计，而接口是对行为的抽象，是一种行为的规范。</p><blockquote><p>备注：</p><ol><li>在 JDK8 中，接口也可以定义静态方法，可以直接用接口名调用。实现类和实现是不可以调用的。如果同时实现两个接口，接口中定义了一样的默认方法，则必须重写，不然会报错。(详见 issue:<a href="https://github.com/Snailclimb/JavaGuide/issues/146%E3%80%82">https://github.com/Snailclimb/JavaGuide/issues/146。</a></li><li>jdk9 的接口被允许定义私有方法 。</li></ol></blockquote><p> 总结一下 jdk7~jdk9 Java 中接口概念的变化：</p><ol><li>在 jdk 7 或更早版本中，接口里面只能有常量变量和抽象方法。这些接口方法必须由选择实现接口的类实现。</li><li>jdk8 的时候接口可以有默认方法和静态方法功能。</li><li>Jdk 9 在接口中引入了私有方法和私有静态方法</li></ol></li></ol></li></ol><h3 id="五、其他"><a href="#五、其他" class="headerlink" title="五、其他"></a>五、其他</h3><ol><li><h4 id="String，StringBuffer和StringBuilder的区别是什么？String为什么是不可变的？"><a href="#String，StringBuffer和StringBuilder的区别是什么？String为什么是不可变的？" class="headerlink" title="String，StringBuffer和StringBuilder的区别是什么？String为什么是不可变的？"></a>String，StringBuffer和StringBuilder的区别是什么？String为什么是不可变的？</h4><p> 简单来说：<code>String</code>类中使用final关键字修饰字符数组来保存字符串private final char value[]<code>,所以</code>String`对象是不可变的。</p><blockquote><p>补充：在 Java 9 之后，String 类的实现改用 byte 数组存储字符串 <code>private final byte[] value</code>;</p></blockquote><p> 而<code>StringBuilder</code>与<code>StringBuffer</code>都继承自<code>AbstractStringBulder</code>类，在<code>AbstractStringBuilder</code>中也是使用字符数组保存字符串<code>char[] value</code>，但是没有用final关键字修饰，所以这两种对象都是可变的。</p><p> <code>StringBuilder</code>与<code>StringBuffer</code>的构造方法都是调用父类构造方法也就是<code>AbstractStringBuilder</code>实现的。</p><h5 id="线程安全性："><a href="#线程安全性：" class="headerlink" title="线程安全性："></a>线程安全性：</h5><p> <code>String</code>中的对象是不可变，也就可以理解为常量，线程安全。<code>AbstractStringBuilder</code> 是 <code>StringBuilder</code> 与 <code>StringBuffer</code> 的公共父类，定义了一些字符串的基本操作，如 <code>expandCapacity</code>、<code>append</code>、<code>insert</code>、<code>indexOf</code> 等公共方法。<code>StringBuffer</code> 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。<code>StringBuilder</code> 并没有对方法进行加同步锁，所以是非线程安全的。</p><h5 id="性能："><a href="#性能：" class="headerlink" title="性能："></a>性能：</h5><p> 每次对 <code>String</code> 类型进行改变的时候，都会生成一个新的 <code>String</code> 对象，然后将指针指向新的 <code>String</code> 对象。<code>StringBuffer</code> 每次都会对 <code>StringBuffer</code>对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用 <code>StringBuilder</code> 相比使用 <code>StringBuffer</code> 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。</p><h5 id="三者的总结："><a href="#三者的总结：" class="headerlink" title="三者的总结："></a><strong>三者的总结：</strong></h5><ol><li>操作少量的数据: 适用 <code>String</code></li><li>单线程操作字符串缓冲区下操作大量数据: 适用 <code>StringBuilder</code></li><li>多线程操作字符串缓冲区下操作大量数据: 适用 <code>StringBuffer</code></li></ol></li><li><h4 id="Object类常见方法总结"><a href="#Object类常见方法总结" class="headerlink" title="Object类常见方法总结"></a>Object类常见方法总结</h4><p> (<strong>1)是类层次结构的根类，所有类都直接或者间接的继承自该类。</strong></p><p> (<strong>2)构造方法：</strong></p><ul><li>有一个无参构造方法。</li></ul><p> <strong>(3)成员方法：</strong></p> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> Class&lt;?&gt; getClass()<span class="comment">//native方法，用于返回当前运行时对象的Class对象，使用了final关键字修饰，故不允许子类重写。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> <span class="comment">//native方法，用于返回对象的哈希码，主要使用在哈希表中，比如JDK中的HashMap。</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span><span class="comment">//用于比较2个对象的内存地址是否相等，String类对该方法进行了重写用户比较字符串的值是否相等。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException<span class="comment">//naitive方法，用于创建并返回当前对象的一份拷贝。一般情况下，对于任何对象 x，表达式 x.clone() != x 为true，x.clone().getClass() == x.getClass() 为true。Object本身没有实现Cloneable接口，所以不重写clone方法并且进行调用的话会发生CloneNotSupportedException异常。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span><span class="comment">//返回类的名字@实例的哈希码的16进制的字符串。建议Object所有的子类都重写这个方法。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">notify</span><span class="params">()</span><span class="comment">//native方法，并且不能重写。唤醒一个在此对象监视器上等待的线程(监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">notifyAll</span><span class="params">()</span><span class="comment">//native方法，并且不能重写。跟notify一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">wait</span><span class="params">(<span class="type">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException<span class="comment">//native方法，并且不能重写。暂停线程的执行。注意：sleep方法没有释放锁，而wait方法释放了锁 。timeout是等待时间。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">wait</span><span class="params">(<span class="type">long</span> timeout, <span class="type">int</span> nanos)</span> <span class="keyword">throws</span> InterruptedException<span class="comment">//多了nanos参数，这个参数表示额外时间（以毫微秒为单位，范围是 0-999999）。 所以超时的时间还需要加上nanos毫秒。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">wait</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException<span class="comment">//跟之前的2个wait方法一样，只不过该方法一直等待，没有超时时间这个概念</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="x3D-x3D-与equals-重要"><a href="#x3D-x3D-与equals-重要" class="headerlink" title="==与equals(重要)"></a>==与equals(重要)</h4><p> **==<strong>：作用主要是判断两个对象的地址是不是相等。即判断两个对象是不是同一个对象（基本数据类型</strong>==<strong>比较的是值，引用数据类型</strong>==**比较的是内存地址）。</p><p> <strong>equals()：</strong>作用也是判断两个对象是否相等。但它一般有两种使用情况。</p><ul><li><p>情况1：类没有覆盖equals()方法。则通过equals()比较该类的两个对象时，等价于使用”==”比较。</p></li><li><p>情况2：类覆盖了equals()方法。一般，我们覆盖equals()方法来比较两个对象的内容是否相等；若他们的内容相等，则返回true(即认为两个对象相等)。</p><p>  <strong>示例：</strong></p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test001</span> {</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">"ab"</span>); <span class="comment">// a为一个引用，</span></span><br><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">"ab"</span>); <span class="comment">// b为另一个引用，对象的内容一样</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">aa</span> <span class="operator">=</span> <span class="string">"ab"</span>;<span class="comment">// 放在常量池中</span></span><br><span class="line"><span class="type">String</span> <span class="variable">bb</span> <span class="operator">=</span> <span class="string">"ab"</span>;<span class="comment">// 从常量中查找</span></span><br><span class="line"><span class="keyword">if</span> (aa == bb) { <span class="comment">// true</span></span><br><span class="line">System.out.println(<span class="string">"aa==bb"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (a == b) {<span class="comment">// false，非同一个对象</span></span><br><span class="line">System.out.println(<span class="string">"a==b"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (a.equals(b)) {<span class="comment">// true</span></span><br><span class="line">System.out.println(<span class="string">"a equals b"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (<span class="number">42</span> == <span class="number">42.0</span>) {<span class="comment">// true</span></span><br><span class="line">System.out.println(<span class="string">"true"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><ul><li>String 中的 equals 方法是被重写过的，因为 object 的 equals 方法是比较的对象的内存地址，而 String 的 equals 方法比较的是对象的值。</li><li>当创建 String 类型的对象时，虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同的对象，如果有就把它赋给当前引用。如果没有就在常量池中重新创建一个 String 对象。</li></ul></li></ul></li><li><h4 id="hashCode与equals（重要）"><a href="#hashCode与equals（重要）" class="headerlink" title="hashCode与equals（重要）"></a>hashCode与equals（重要）</h4><p> 重写过hashcode和equals么？为什么重写equal时需要重写hashCode方法？</p><ol><li><h5 id="hashCode-介绍"><a href="#hashCode-介绍" class="headerlink" title="hashCode()介绍"></a>hashCode()介绍</h5><p> hashCode作用是获取哈希码，也成为了散列码；实际上是返回一个int整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。hashCode()定义在JDK的Object。java中，这也意味着Java的任何类都包含有hashCode()函数。</p><p> 散列表存储的是键值对(key-value)，它的特点是：能根据“键”快速的检索出对应的“值”。这其中就利用到了散列码！（可以快速找到所需要的对象）</p></li><li><h5 id="为什么要有-hashCode"><a href="#为什么要有-hashCode" class="headerlink" title="为什么要有 hashCode"></a>为什么要有 hashCode</h5></li></ol></li><li><p>asd</p></li><li><p>asd</p></li><li><p>asd</p></li><li><p>asd</p></li><li><p>散列表存储的是键值对(key-value)，它的特点是：能根据“键”快速的检索出对应的“值”。这其中就利用到了散列码！（可以快速找到所需要的对象）</p><ol start="2"><li><h5 id="为什么要有-hashCode-1"><a href="#为什么要有-hashCode-1" class="headerlink" title="为什么要有 hashCode"></a>为什么要有 hashCode</h5></li></ol></li><li><p>asd</p></li><li><p>asd</p></li><li><p>asd</p></li><li><p>asd</p></li><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>包的使用和Object类介绍</title>
      <link href="/2022/05/19/treasurebox/java/2.java-mian-xiang-dui-xiang/11.bao-de-shi-yong-he-object-lei-jie-shao/"/>
      <url>/2022/05/19/treasurebox/java/2.java-mian-xiang-dui-xiang/11.bao-de-shi-yong-he-object-lei-jie-shao/</url>
      
        <content type="html"><![CDATA[<h2 id="包的使用和Object类介绍"><a href="#包的使用和Object类介绍" class="headerlink" title="包的使用和Object类介绍"></a>包的使用和Object类介绍</h2><h3 id="一、包的概念"><a href="#一、包的概念" class="headerlink" title="一、包的概念"></a>一、包的概念</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    关于java语言中的包机制</span></span><br><span class="line"><span class="comment">1、包又称为package，java中引入package这种语法机制主要为了方便程序的管理</span></span><br><span class="line"><span class="comment">不同功能的类被分门别类放到不同的软件包中，查找比较方便，管理比较方便，易维护</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2、怎么定义package？</span></span><br><span class="line"><span class="comment"> —— 在java源程序的第一行上编写package语句</span></span><br><span class="line"><span class="comment"> —— package只能编写一个语句</span></span><br><span class="line"><span class="comment"> —— 语法结构：</span></span><br><span class="line"><span class="comment">    package 包名;</span></span><br><span class="line"><span class="comment">3、包名的命名规范</span></span><br><span class="line"><span class="comment">    公司的域名倒序 + 项目名 + 模块名 + 功能名;</span></span><br><span class="line"><span class="comment">    采用这种方式的重名几率比较低，因为公司域名具有全球唯一性</span></span><br><span class="line"><span class="comment">    例如：</span></span><br><span class="line"><span class="comment">com.bjpowernode.oa.user.service</span></span><br><span class="line"><span class="comment">org.apach.tomcat.core</span></span><br><span class="line"><span class="comment">4、包名要求全部小写，包名也是标识符，必须遵守标识符命名规则</span></span><br><span class="line"><span class="comment">5、一个包将来对应一个目录</span></span><br><span class="line"><span class="comment">6、使用步骤，以com.bjpowernode.javase.day11为例：</span></span><br><span class="line"><span class="comment">第一种方式：</span></span><br><span class="line"><span class="comment">先使用javac Test01.java编译生成javac字节码：指定编码加：-encoding utf-8</span></span><br><span class="line"><span class="comment">手动创建com/bjpowernode/javase/day11文件夹</span></span><br><span class="line"><span class="comment">运行：java com.bjpowernode.javase.day11.Test01</span></span><br><span class="line"><span class="comment">第二种方式：</span></span><br><span class="line"><span class="comment">javac -d 编译之后存放路径 java源文件的路径</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> com.bjpowernode.javase.day11; <span class="comment">// 对应四个目录</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line"></span><br><span class="line">} </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javase.day11; <span class="comment">// 对应四个目录</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test02</span> </span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> </span><br><span class="line">{</span><br><span class="line">com.bjpowernode.javase.day11.<span class="type">Test01</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.bjpowernode.javase.day11.Test01();</span><br><span class="line">System.out.println(t); <span class="comment">//com.bjpowernode.javase.day11.Test01@15db9742</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Test01和Test02在同一个包下，默认在当前包下找，可以使用这种方式</span></span><br><span class="line"><span class="type">Test01</span> <span class="variable">tt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test01</span>();</span><br><span class="line">System.out.println(tt); <span class="comment">//com.bjpowernode.javase.day11.Test01@6d06d69c</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">import语句用来导入其他类，同一个类下的类不需要导入</span></span><br><span class="line"><span class="comment">不在同一个包下的类需要导入</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">import 包名</span></span><br><span class="line"><span class="comment">import 包名.*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">结论：什么时候需要import导入</span></span><br><span class="line"><span class="comment">不在同一个包中</span></span><br><span class="line"><span class="comment">不在java.lang包下</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.javase.day11.Test01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test04</span> </span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> </span><br><span class="line">{</span><br><span class="line">com.bjpowernode.javase.day11.<span class="type">Test01</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.bjpowernode.javase.day11.Test01();</span><br><span class="line">System.out.println(t); <span class="comment">//com.bjpowernode.javase.day11.Test01@15db9742</span></span><br><span class="line"></span><br><span class="line"><span class="type">Test01</span> <span class="variable">tt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test01</span>();</span><br><span class="line">System.out.println(tt); <span class="comment">//com.bjpowernode.javase.day11.Test01@15db9742</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// java.lang.*不需要导入，系统自动引入</span></span><br><span class="line"><span class="comment">// lang：language语言包，是java的核心类，不需要手动导入</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">"name"</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="二、Java中自带的包"><a href="#二、Java中自带的包" class="headerlink" title="二、Java中自带的包"></a>二、Java中自带的包</h3><ol><li><h4 id="Object类常见方法总结："><a href="#Object类常见方法总结：" class="headerlink" title="Object类常见方法总结："></a>Object类常见方法总结：</h4><p> (<strong>1)是类层次结构的根类，所有类都直接或者间接的继承自该类。</strong></p><p> (<strong>2)构造方法：</strong></p><ul><li>有一个无参构造方法。</li></ul><p> <strong>(3)成员方法：</strong></p> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> Class&lt;?&gt; getClass()<span class="comment">//native方法，用于返回当前运行时对象的Class对象，使用了final关键字修饰，故不允许子类重写。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> <span class="comment">//native方法，用于返回对象的哈希码，主要使用在哈希表中，比如JDK中的HashMap。</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span><span class="comment">//用于比较2个对象的内存地址是否相等，String类对该方法进行了重写用户比较字符串的值是否相等。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException<span class="comment">//naitive方法，用于创建并返回当前对象的一份拷贝。一般情况下，对于任何对象 x，表达式 x.clone() != x 为true，x.clone().getClass() == x.getClass() 为true。Object本身没有实现Cloneable接口，所以不重写clone方法并且进行调用的话会发生CloneNotSupportedException异常。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span><span class="comment">//返回类的名字@实例的哈希码的16进制的字符串。建议Object所有的子类都重写这个方法。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">notify</span><span class="params">()</span><span class="comment">//native方法，并且不能重写。唤醒一个在此对象监视器上等待的线程(监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">notifyAll</span><span class="params">()</span><span class="comment">//native方法，并且不能重写。跟notify一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">wait</span><span class="params">(<span class="type">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException<span class="comment">//native方法，并且不能重写。暂停线程的执行。注意：sleep方法没有释放锁，而wait方法释放了锁 。timeout是等待时间。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">wait</span><span class="params">(<span class="type">long</span> timeout, <span class="type">int</span> nanos)</span> <span class="keyword">throws</span> InterruptedException<span class="comment">//多了nanos参数，这个参数表示额外时间（以毫微秒为单位，范围是 0-999999）。 所以超时的时间还需要加上nanos毫秒。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">wait</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException<span class="comment">//跟之前的2个wait方法一样，只不过该方法一直等待，没有超时时间这个概念</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ol><p>过该方法一直等待，没有超时时间这个概念</p><pre><code>```</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Scanner和String类的使用</title>
      <link href="/2022/05/19/treasurebox/java/2.java-mian-xiang-dui-xiang/12.scanner-he-string-lei-de-shi-yong/"/>
      <url>/2022/05/19/treasurebox/java/2.java-mian-xiang-dui-xiang/12.scanner-he-string-lei-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="Scanner和String的使用"><a href="#Scanner和String的使用" class="headerlink" title="Scanner和String的使用"></a>Scanner和String的使用</h2><h3 id="一、Scanner的使用"><a href="#一、Scanner的使用" class="headerlink" title="一、Scanner的使用"></a>一、Scanner的使用</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Scanner的使用</span></span><br><span class="line"><span class="comment"> * 1、JDK5以后，帮助实现键盘录入数据</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2、构造方法：</span></span><br><span class="line"><span class="comment"> * public Scanner(InputStream is)</span></span><br><span class="line"><span class="comment"> * Scanner sc = new Scanner(System.in);</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 3、成员方法：</span></span><br><span class="line"><span class="comment"> * A：hasNextXxx()判断是否是xxx类型的元素</span></span><br><span class="line"><span class="comment"> * B：nextXxx() 获取xxx类型的元素</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 4、常用的三个方法</span></span><br><span class="line"><span class="comment"> * nextInt():获取一个int类型的数据</span></span><br><span class="line"><span class="comment"> * next()/nextLine():获取一个String类型的数据</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  5、注意的小问题：</span></span><br><span class="line"><span class="comment"> *  int  ---&gt;int</span></span><br><span class="line"><span class="comment"> *  String---&gt;String</span></span><br><span class="line"><span class="comment"> *  String---&gt;int</span></span><br><span class="line"><span class="comment"> *  int---&gt;String</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> *  如何解决：</span></span><br><span class="line"><span class="comment"> * A：所有数据都用String接收，将来要什么，就转换为什么</span></span><br><span class="line"><span class="comment"> * B：重新创建一个新的Scanner对象</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScannerTest001</span> {</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(sc.hasNextInt()) {</span><br><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">System.out.println(<span class="string">"number"</span>+number);</span><br><span class="line">}<span class="keyword">else</span> {</span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">System.out.println(<span class="string">"str1"</span>+str1);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line">sc = <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">y</span> <span class="operator">=</span> sc.nextLine(); <span class="comment">// 把回车换行给了这里</span></span><br><span class="line">System.out.println(x);</span><br><span class="line">System.out.println(y);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="二、String类"><a href="#二、String类" class="headerlink" title="二、String类"></a>二、String类</h3><ol><li><h4 id="String的构造方法"><a href="#String的构造方法" class="headerlink" title="String的构造方法"></a>String的构造方法</h4> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、字符串：由多个字符组成的一串数据</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2、构造方法有：</span></span><br><span class="line"><span class="comment"> * public String():创建String对象</span></span><br><span class="line"><span class="comment"> * public String(byte[] bytes):把字节数组转成字符串</span></span><br><span class="line"><span class="comment"> * public String(byte[] bytes,int index,int length):把字节数组的一部分转成字符串</span></span><br><span class="line"><span class="comment"> * public String(char[] value):把字符数组转成字符串</span></span><br><span class="line"><span class="comment"> * public String(char[] bytes,int index,int length):把字符数组的一部分转成字符串</span></span><br><span class="line"><span class="comment"> * public String(byte[] bytes):把字节数组转成字符串</span></span><br><span class="line"><span class="comment"> * public String(String original):把字符串转成字符串</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 3、问题：</span></span><br><span class="line"><span class="comment"> * 1、输出语句输出任何对象名称的时候，默认调用的是该对象的toString()方法。</span></span><br><span class="line"><span class="comment"> * toString()方法默认输出的是包名...类名@哈希值的十六进制</span></span><br><span class="line"><span class="comment"> * 如果输出一个对象名称的时候，发现不是这个格式，说明该类重写了toString()方法</span></span><br><span class="line"><span class="comment"> * 2、返回字符串的长度</span></span><br><span class="line"><span class="comment"> * public int length()</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 面试题：数组有length()吗？String有length()吗？</span></span><br><span class="line"><span class="comment"> * 没有有</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 4、字符串是常量，它的值创建之后不能更改</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 5、String s =  new String("hello");和String s = "hello";的区别</span></span><br><span class="line"><span class="comment"> * ==：比较的引用类型时比较的是地址</span></span><br><span class="line"><span class="comment"> * equals()：默认比较的是地址值。String类重写了equals()方法，该方法的作用是比较字符串的内容是否相等</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringTest001</span> {</span><br><span class="line"><span class="type">int</span> number=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"><span class="comment">// public String()  创建String对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line">System.out.println(<span class="string">"s1:"</span>+s1);</span><br><span class="line">System.out.println(<span class="string">"s1.length():"</span>+s1.length());</span><br><span class="line">System.out.println(<span class="string">"--------------------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// public String(byte[] bytes):把字节数组转成字符串。</span></span><br><span class="line"><span class="type">byte</span>[] bytes = { <span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>, <span class="number">100</span>, <span class="number">101</span> };</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes); <span class="comment">// 把数值转成对应的字符值</span></span><br><span class="line">System.out.println(<span class="string">"s2:"</span> + s2);</span><br><span class="line">System.out.println(<span class="string">"s2.length():"</span> + s2.length());</span><br><span class="line">System.out.println(<span class="string">"--------------------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// public String(byte[] bytes,int index,int length):把字节数组中的一部分转成字符串</span></span><br><span class="line"><span class="comment">// String s3 = new String(bytes, 1, 2);</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">System.out.println(<span class="string">"s3:"</span> + s3);</span><br><span class="line">System.out.println(<span class="string">"s3.length():"</span> + s3.length());</span><br><span class="line">System.out.println(<span class="string">"--------------------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// public String(char[] value):把字符数组转成字符串</span></span><br><span class="line"><span class="type">char</span>[] chs = { <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'林'</span>, <span class="string">'青'</span>, <span class="string">'霞'</span> };</span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chs);</span><br><span class="line">System.out.println(<span class="string">"s4:"</span> + s4);</span><br><span class="line">System.out.println(<span class="string">"s4.length():"</span> + s4.length());</span><br><span class="line">System.out.println(<span class="string">"--------------------------"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// public String(char[] value,int index,int count):把字符数组的一部分转成字符串</span></span><br><span class="line"><span class="comment">// 需求：我要输出的字符串是:de林青</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chs, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">System.out.println(<span class="string">"s5:"</span> + s5);</span><br><span class="line">System.out.println(<span class="string">"s5.length():"</span> + s5.length());</span><br><span class="line">System.out.println(<span class="string">"--------------------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// public String(String original):把字符串转成字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">"helloworld"</span>);</span><br><span class="line">System.out.println(<span class="string">"s6:"</span> + s6);</span><br><span class="line">System.out.println(<span class="string">"s6.length():"</span> + s6.length());</span><br><span class="line">System.out.println(<span class="string">"--------------------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Java 程序中的所有字符串字面值（如 "abc" ）都作为此类的实例实现。</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s7</span> <span class="operator">=</span> <span class="string">"helloworld"</span>;</span><br><span class="line">System.out.println(<span class="string">"s7:"</span> + s7);</span><br><span class="line">System.out.println(<span class="string">"s7.length():"</span> + s7.length());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串创建之后不能修改，但是可以修改变量的引用</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s8</span> <span class="operator">=</span> <span class="string">"hello"</span>;</span><br><span class="line">s8 += <span class="string">"\tworld"</span>;</span><br><span class="line">System.out.println(<span class="string">"s8:"</span>+s8);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以重写toString,输出实例化的对象时，会输出对应的额内容</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> {</span><br><span class="line"><span class="keyword">return</span> <span class="string">"111"</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="x3D-x3D-和equals的用法"><a href="#x3D-x3D-和equals的用法" class="headerlink" title="==和equals的用法"></a>==和equals的用法</h4><p> **==<strong>：作用主要是判断两个对象的地址是不是相等。即判断两个对象是不是同一个对象（基本数据类型</strong>==<strong>比较的是值，引用数据类型</strong>==**比较的是内存地址）。</p><p> <strong>equals()：</strong>作用也是判断两个对象是否相等。但它一般有两种使用情况。</p><ul><li>情况1：类没有覆盖equals()方法。则通过equals()比较该类的两个对象时，等价于使用”==”比较。</li><li>情况2：类覆盖了equals()方法。一般，我们覆盖equals()方法来比较两个对象的内容是否相等；若他们的内容相等，则返回true(即认为两个对象相等)。</li></ul> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ==和equals的区别</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringTest003</span> {</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"><span class="comment">// ==和equal的区别</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">"abc"</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">"abc"</span>);</span><br><span class="line">System.out.println(s1==s2);<span class="comment">// false</span></span><br><span class="line">System.out.println(s1.equals(s2));<span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">"abc"</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">"abc"</span>;</span><br><span class="line">System.out.println(s3==s4);<span class="comment">// true</span></span><br><span class="line">System.out.println(s3.equals(s4));<span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> <span class="string">"abc"</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">"abc"</span>);</span><br><span class="line">System.out.println(s5==s6);<span class="comment">// false</span></span><br><span class="line">System.out.println(s5.equals(s6));<span class="comment">// true</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p> <strong>练习：看程序说结果</strong></p> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 看程序写结果</span></span><br><span class="line"><span class="comment"> * 字符串变量相加：先开空间，再加内容</span></span><br><span class="line"><span class="comment"> * 字符串常量相加：先加，再找，没有开辟空间</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringTest004</span> {</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">"Hello"</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">"World"</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">"HelloWorld"</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> s1 + s2;</span><br><span class="line"><span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> <span class="string">"Hello"</span> + <span class="string">"World"</span>;</span><br><span class="line">System.out.println(s4);</span><br><span class="line">System.out.println(s5);</span><br><span class="line"></span><br><span class="line">System.out.println(s3==s4);<span class="comment">// false</span></span><br><span class="line">System.out.println(s3==<span class="string">"Hello"</span>+<span class="string">"World"</span>);<span class="comment">// true</span></span><br><span class="line">System.out.println(s3==s5);<span class="comment">// true</span></span><br><span class="line">System.out.println(s3.equals(s4));<span class="comment">// true</span></span><br><span class="line">System.out.println(s3.equals(s5));<span class="comment">// true</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="String类的判断功能"><a href="#String类的判断功能" class="headerlink" title="String类的判断功能"></a>String类的判断功能</h4> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * String类的判断功能</span></span><br><span class="line"><span class="comment"> * boolean equals(Object obj):比较字符串的内容是否相同，严格区分大小写</span></span><br><span class="line"><span class="comment"> * boolean equalsIgnoreCase(String str):比较字符串的内容是否相同，不考虑大小写</span></span><br><span class="line"><span class="comment"> * boolean contains(String str):判断是否包含指定的小串，区分大小写</span></span><br><span class="line"><span class="comment"> * boolean startsWith(Stirng str):判断是否以指定的字符串开头</span></span><br><span class="line"><span class="comment"> * boolean endsWith(String str):判断是否以指定的字符串结尾</span></span><br><span class="line"><span class="comment"> * boolean isEmpty():判断字符串的内容是否为空</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo</span> {</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">"helloworld"</span>;</span><br><span class="line">System.out.println(s.equals(<span class="string">"helloworld"</span>)); <span class="comment">// true</span></span><br><span class="line">System.out.println(s.equals(<span class="string">"Helloworld"</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">System.out.println(s.equalsIgnoreCase(<span class="string">"helloworld"</span>)); <span class="comment">// true</span></span><br><span class="line">System.out.println(s.equalsIgnoreCase(<span class="string">"Helloworld"</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">System.out.println(s.contains(<span class="string">"world"</span>)); <span class="comment">// true</span></span><br><span class="line">System.out.println(s.contains(<span class="string">"Hello"</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">System.out.println(s.startsWith(<span class="string">"hello"</span>));<span class="comment">// true</span></span><br><span class="line">System.out.println(s.endsWith(<span class="string">"wrold"</span>));<span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">""</span>;</span><br><span class="line">System.out.println(s1.isEmpty());<span class="comment">// true</span></span><br><span class="line">System.out.println(s1 == <span class="string">""</span>);<span class="comment">// true</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p> 案例练习：</p> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字符串案例练习：</span></span><br><span class="line"><span class="comment"> * 用户有三次机会输入用户名和密码，系统给提示剩余机会</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringTest001</span> {</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">"admin"</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">"admin"</span>;</span><br><span class="line">System.out.println(<span class="string">"--------------------------"</span>);</span><br><span class="line">System.out.println(<span class="string">"欢迎来到蜃楼商城"</span>);</span><br><span class="line">System.out.println(<span class="string">"您有三次机会输入账号和密码"</span>);</span><br><span class="line">System.out.println(<span class="string">"机会用完之后需要等账号解锁"</span>);</span><br><span class="line">System.out.println(<span class="string">"祝您好运！"</span>);</span><br><span class="line">System.out.println(<span class="string">"--------------------------"</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">while</span>(i&gt;<span class="number">0</span>) {</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">String</span> <span class="variable">sc_username</span> <span class="operator">=</span> sc.next();</span><br><span class="line">System.out.println(sc_username);</span><br><span class="line"><span class="keyword">if</span> (sc_username.equals(username)) {</span><br><span class="line"><span class="type">String</span> <span class="variable">sc_password</span> <span class="operator">=</span> sc.next();</span><br><span class="line"><span class="keyword">if</span> (sc_password.equals(password)) {</span><br><span class="line">System.out.println(<span class="string">"登录成功"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">i-=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (i==<span class="number">0</span>) {</span><br><span class="line">System.out.println(<span class="string">"机会已经用完，请联系管理员"</span>);</span><br><span class="line">}<span class="keyword">else</span> {</span><br><span class="line">System.out.println(<span class="string">"您还有"</span>+i+<span class="string">"次机会"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="String类的获取功能"><a href="#String类的获取功能" class="headerlink" title="String类的获取功能"></a>String类的获取功能</h4> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * String类的获取功能：</span></span><br><span class="line"><span class="comment"> * int length():获取字符串的长度</span></span><br><span class="line"><span class="comment"> * char charAt(int index):返回字符串中指定位置的字符</span></span><br><span class="line"><span class="comment"> * int indexOf(int ch):返回字符在字符串中第一次出现的位置</span></span><br><span class="line"><span class="comment"> * int indexOf(Stirng str):返回指定字符串在字符串中第一次出现的位置</span></span><br><span class="line"><span class="comment"> * int indexOf(String str,int fromIndex):返回指定字符串从指定位置开始在字符串中第一次出现的位置</span></span><br><span class="line"><span class="comment"> * String substring(int start):返回从指定位置开始到末尾的子串</span></span><br><span class="line"><span class="comment"> * String substring(int start,int end):放回从指定位置开始到指定位置结束的子串，注意：前包后不包</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo</span> {</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">"hello"</span>;</span><br><span class="line">System.out.println(str1.length());  <span class="comment">// 5</span></span><br><span class="line">System.out.println(str1.charAt(<span class="number">1</span>)); <span class="comment">// e</span></span><br><span class="line"><span class="comment">// System.out.println(str1.charAt(10)); // index of range</span></span><br><span class="line">System.out.println(str1.indexOf(<span class="string">'h'</span>)); <span class="comment">// 0</span></span><br><span class="line">System.out.println(str1.indexOf(<span class="string">"h"</span>)); <span class="comment">// 0</span></span><br><span class="line">System.out.println(str1.indexOf(<span class="string">'l'</span>,<span class="number">3</span>)); <span class="comment">// 3</span></span><br><span class="line">System.out.println(str1.substring(<span class="number">0</span>)); <span class="comment">// hello</span></span><br><span class="line">System.out.println(str1.substring(<span class="number">0</span>,<span class="number">3</span>)); <span class="comment">// hel</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h5 id="练习1：遍历每个小字符串"><a href="#练习1：遍历每个小字符串" class="headerlink" title="练习1：遍历每个小字符串"></a>练习1：遍历每个小字符串</h5> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字符串中的遍历：</span></span><br><span class="line"><span class="comment">     * 遍历每个子字符串</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringTest001</span> {</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">    <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">"HelloWorld"</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> index=<span class="number">0</span>;index&lt;s1.length();index++) {</span><br><span class="line">    System.out.println(<span class="string">"下标为"</span>+index+<span class="string">"的是"</span>+s1.charAt(index));</span><br><span class="line">    }</span><br><span class="line">    }</span><br><span class="line">    }</span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure><h5 id="练习2：统计字符串个数"><a href="#练习2：统计字符串个数" class="headerlink" title="练习2：统计字符串个数"></a>练习2：统计字符串个数</h5> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户从键盘输入一串字符串：分别统计：</span></span><br><span class="line"><span class="comment">     * 大写字符个数</span></span><br><span class="line"><span class="comment">     * 小写字母个数</span></span><br><span class="line"><span class="comment">     * 数字个数</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">import</span> java.util.Scanner;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringTest002</span> {</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">    </span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> sc.next();</span><br><span class="line">    <span class="type">int</span> bigCount= <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> smallCount= <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> intCount= <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++) {</span><br><span class="line">    <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">    <span class="keyword">if</span>(ch &gt;= <span class="string">'A'</span> &amp;&amp; ch &lt;= <span class="string">'Z'</span>) {</span><br><span class="line">    bigCount+=<span class="number">1</span>;</span><br><span class="line">    }<span class="keyword">else</span> <span class="keyword">if</span>(ch &gt;= <span class="string">'a'</span> &amp;&amp; ch &lt;= <span class="string">'z'</span>) {</span><br><span class="line">    smallCount+=<span class="number">1</span>;</span><br><span class="line">    }<span class="keyword">else</span> <span class="keyword">if</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) {</span><br><span class="line">    intCount+=<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    }</span><br><span class="line">    System.out.println(<span class="string">"大写字母有:"</span>+bigCount);</span><br><span class="line">    System.out.println(<span class="string">"小写字母有:"</span>+smallCount);</span><br><span class="line">    System.out.println(<span class="string">"数字有:"</span>+intCount);</span><br><span class="line">    }</span><br><span class="line">    }</span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="String类的转换功能"><a href="#String类的转换功能" class="headerlink" title="String类的转换功能"></a>String类的转换功能</h4> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bj.study.test006;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * String的转换功能</span></span><br><span class="line"><span class="comment"> * byte[] getBytes():把字符串转换为字节数组</span></span><br><span class="line"><span class="comment"> * char[] toCharArray():把字符串转换为字符数组</span></span><br><span class="line"><span class="comment"> * static String valueOf(char[] chs):把字符数组转换成字符串</span></span><br><span class="line"><span class="comment"> * static String valueOf(int i):把int类型的数据转成字符串</span></span><br><span class="line"><span class="comment"> * 把任意类型转换为字符串的方法。</span></span><br><span class="line"><span class="comment"> * String toLowerCase():把字符串转小写</span></span><br><span class="line"><span class="comment"> * String toUpperCase():把字符串转大写</span></span><br><span class="line"><span class="comment"> * String concat(String str):字符串的连接</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo</span> {</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">"abcde"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// byte[] getBytes():把字符串转换为字节数组</span></span><br><span class="line"><span class="type">byte</span>[] bys = s.getBytes();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; bys.length; x++) {</span><br><span class="line">System.out.println(bys[x]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// char[] toCharArray():把字符串转换为字符数组</span></span><br><span class="line"><span class="type">char</span>[] chs = s.toCharArray();</span><br><span class="line">System.out.println(chs);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; chs.length; x++) {</span><br><span class="line">System.out.println(chs[x]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// static String valueOf(char[] chs):把字符数组转成字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> String.valueOf(chs);</span><br><span class="line">System.out.println(<span class="string">"s2:"</span> + s2);</span><br><span class="line">System.out.println(<span class="string">"----------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// static String valueOf(int i):把int类型的数据转成字符串</span></span><br><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> number + <span class="string">""</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> String.valueOf(number);</span><br><span class="line">System.out.println(<span class="string">"s3:"</span> + s3);</span><br><span class="line">System.out.println(<span class="string">"s4:"</span> + s4);</span><br><span class="line">System.out.println(<span class="string">"----------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// String toLowerCase():把字符串转小写</span></span><br><span class="line"><span class="comment">// String toUpperCase():把字符串转大写</span></span><br><span class="line">System.out.println(<span class="string">"toLowerCase():"</span> + <span class="string">"HelloWorld11张三"</span>.toLowerCase());</span><br><span class="line">System.out.println(<span class="string">"toUpperCase():"</span> + <span class="string">"HelloWorld11张三"</span>.toUpperCase());</span><br><span class="line">System.out.println(<span class="string">"----------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// String concat(String str):字符串的连接</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> <span class="string">"hello"</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s6</span> <span class="operator">=</span> <span class="string">"world"</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s7</span> <span class="operator">=</span> s5.concat(s6);</span><br><span class="line"><span class="type">String</span> <span class="variable">s8</span> <span class="operator">=</span> s5 + s6;</span><br><span class="line">System.out.println(<span class="string">"s7:"</span> + s7);</span><br><span class="line">System.out.println(<span class="string">"s8:"</span> + s8);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h5 id="练习：字符串转换"><a href="#练习：字符串转换" class="headerlink" title="练习：字符串转换"></a>练习：字符串转换</h5> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 练习：用户从键盘输入一串字符串：</span></span><br><span class="line"><span class="comment"> * 将首字母转换成大写，其余转换成小写</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringTest001</span> {</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> sc.next();</span><br><span class="line"><span class="type">String</span> <span class="variable">first</span> <span class="operator">=</span> s.substring(<span class="number">0</span>,<span class="number">1</span>).toUpperCase();</span><br><span class="line"><span class="type">String</span> <span class="variable">end</span> <span class="operator">=</span> s.substring(<span class="number">1</span>).toLowerCase();</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">newWords</span> <span class="operator">=</span> first+end;</span><br><span class="line">System.out.println(newWords);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="String替换、去除空格、比较"><a href="#String替换、去除空格、比较" class="headerlink" title="String替换、去除空格、比较"></a>String替换、去除空格、比较</h4> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字符串替换</span></span><br><span class="line"><span class="comment"> * String replace(char old,char new)</span></span><br><span class="line"><span class="comment"> * String replace(String old,String new)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 字符串去除空格：</span></span><br><span class="line"><span class="comment"> * String trim()：去除两边的空格</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *按字典顺序比较两个字符串：a-z</span></span><br><span class="line"><span class="comment"> *  int compareTo(String str)</span></span><br><span class="line"><span class="comment"> * int compareToIgnoreCase(String str) </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo</span> {</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">"helloworld"</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> s.replace(<span class="string">'l'</span>, <span class="string">'b'</span>);</span><br><span class="line">System.out.println(<span class="string">"s:"</span> + s);</span><br><span class="line">System.out.println(<span class="string">"s2:"</span> + s2);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> s.replace(<span class="string">"owo"</span>, <span class="string">"ak47"</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> s.replace(<span class="string">"j"</span>, <span class="string">"h"</span>);</span><br><span class="line">System.out.println(<span class="string">"s3:"</span> + s3);</span><br><span class="line">System.out.println(<span class="string">"s4:"</span> + s4);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> <span class="string">"    hello     "</span>;</span><br><span class="line">System.out.println(<span class="string">"s5:"</span> + s5);</span><br><span class="line">System.out.println(<span class="string">"s5.trim:"</span> + s5.trim());</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s6</span> <span class="operator">=</span> <span class="string">"hello"</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(s.compareTo(<span class="string">"hello"</span>)); <span class="comment">// 0</span></span><br><span class="line">System.out.println(s.compareTo(<span class="string">"Hello"</span>)); <span class="comment">// 32</span></span><br><span class="line">System.out.println(s.compareTo(<span class="string">"mello"</span>)); <span class="comment">// -5</span></span><br><span class="line">System.out.println(s.compareTo(<span class="string">"hgllo"</span>));<span class="comment">//第一个不同字母之差  -2</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h5 id="练习1：把数组中的数据按指定格式拼接成字符串"><a href="#练习1：把数组中的数据按指定格式拼接成字符串" class="headerlink" title="练习1：把数组中的数据按指定格式拼接成字符串"></a>练习1：把数组中的数据按指定格式拼接成字符串</h5> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 练习：把数组中的数据按照指定格式拼接成一个字符串</span></span><br><span class="line"><span class="comment"> * 举例：int[] arr = {1,2,3}</span></span><br><span class="line"><span class="comment"> * 输出：[1,2,3]</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo2</span> {</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] arr = {<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>};</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">"["</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) {</span><br><span class="line"><span class="keyword">if</span>(i==arr.length-<span class="number">1</span>) {</span><br><span class="line">s += arr[i];</span><br><span class="line">}<span class="keyword">else</span> {</span><br><span class="line">s += arr[i]+<span class="string">","</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">s += <span class="string">"]"</span>;</span><br><span class="line">System.out.println(s);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h5 id="练习2：反转字符串"><a href="#练习2：反转字符串" class="headerlink" title="练习2：反转字符串"></a>练习2：反转字符串</h5> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 练习：对用户输入的字符串进行反转</span></span><br><span class="line"><span class="comment"> * 例：输入abc</span></span><br><span class="line"><span class="comment"> * 输出：cba</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo3</span> {</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=s.length()-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--) {</span><br><span class="line">result += s.charAt(i);</span><br><span class="line">}</span><br><span class="line">System.out.println(result);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h5 id="练习3：查找长字符串中小字符串的出现次数"><a href="#练习3：查找长字符串中小字符串的出现次数" class="headerlink" title="练习3：查找长字符串中小字符串的出现次数"></a>练习3：查找长字符串中小字符串的出现次数</h5> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 练习4：统计长的字符串中某个小字符串出现的次数</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo4</span> {</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"><span class="type">String</span> <span class="variable">maxString</span> <span class="operator">=</span> <span class="string">"woaijavawozhenaijavawozhendeaijavawozhendehenaijavaxinbuxinwoaijavagun"</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">minString</span> <span class="operator">=</span> <span class="string">"java"</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> getCount(maxString, minString);</span><br><span class="line">System.out.println(count);</span><br><span class="line">System.out.println(<span class="string">"hello"</span>.indexOf(<span class="string">"z"</span>,<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写功能实现：</span></span><br><span class="line"><span class="comment">// 形式参数:String maxString,String minString;</span></span><br><span class="line"><span class="comment">// 返回值类型:int</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">(String maxString, String minString)</span> {</span><br><span class="line"><span class="comment">// 定义统计变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先查找一次</span></span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> maxString.indexOf(minString);</span><br><span class="line"><span class="comment">// 定义一个变量，用于记录每次最新的查找位置</span></span><br><span class="line"><span class="type">int</span> <span class="variable">startIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断位置是不是-1，如果是，就不继续了</span></span><br><span class="line"><span class="keyword">while</span> (index != -<span class="number">1</span>) {</span><br><span class="line"><span class="comment">// 统计变量加1</span></span><br><span class="line">count++;</span><br><span class="line"><span class="comment">// 计算最新的查找位置</span></span><br><span class="line">startIndex = index + minString.length();</span><br><span class="line"><span class="comment">// 从最新的查找位置，再查一次小串在大串中出现的位置</span></span><br><span class="line">index = maxString.indexOf(minString, startIndex);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h5 id="练习5：比较两个字符串是否相等"><a href="#练习5：比较两个字符串是否相等" class="headerlink" title="练习5：比较两个字符串是否相等"></a>练习5：比较两个字符串是否相等</h5> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bj.study.test007;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 案例5：自己写一个方法，判断两个字符串是否相等</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 分析：</span></span><br><span class="line"><span class="comment"> * A：给出两个字符串</span></span><br><span class="line"><span class="comment"> * B:比较长度是否相等，不同返回false</span></span><br><span class="line"><span class="comment"> * C:把字符串转换成字符数组</span></span><br><span class="line"><span class="comment"> * D：比较数组中每一个位置的值</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo5</span> {</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">"abcdef"</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">"abcd"</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> checkString(s1,s2);</span><br><span class="line">System.out.println(result);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">checkString</span><span class="params">(String s1, String s2)</span> {</span><br><span class="line"><span class="keyword">if</span> (s1.length() == s2.length()) {</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s1.length();i++) {</span><br><span class="line"><span class="keyword">if</span>(s1.charAt(i) == s2.charAt(i)) {</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p> �组</p><ul><li><pre><code>    D：比较数组中每一个位置的值</code></pre></li><li><p>*/<br> public class StringDemo5 {</p><p> public static void main(String[] args) {<br> String s1 = “abcdef”;<br> String s2 = “abcd”;<br> boolean result = checkString(s1,s2);<br> System.out.println(result);<br> }</p><p> private static boolean checkString(String s1, String s2) {<br> if (s1.length() == s2.length()) {<br>     for(int i=0;i&lt;s1.length();i++) {<br>         if(s1.charAt(i) == s2.charAt(i)) {<br>             return true;<br>         }<br>     }<br>     return false;<br> }<br> return false;<br> }</p></li></ul><p> }</p><pre><code></code></pre></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>StringBuffer和Array</title>
      <link href="/2022/05/19/treasurebox/java/2.java-mian-xiang-dui-xiang/13.stringbuffer-he-array/"/>
      <url>/2022/05/19/treasurebox/java/2.java-mian-xiang-dui-xiang/13.stringbuffer-he-array/</url>
      
        <content type="html"><![CDATA[<h2 id="StringBuffer、数组排序，Integer、Character类"><a href="#StringBuffer、数组排序，Integer、Character类" class="headerlink" title="StringBuffer、数组排序，Integer、Character类"></a>StringBuffer、数组排序，Integer、Character类</h2><h3 id="一、StringBuffer-x2F-StringBuilder-掌握"><a href="#一、StringBuffer-x2F-StringBuilder-掌握" class="headerlink" title="一、StringBuffer/StringBuilder(掌握)"></a>一、StringBuffer/StringBuilder(掌握)</h3><ol><li><h4 id="StringBuffer-x2F-StringBuilder区别"><a href="#StringBuffer-x2F-StringBuilder区别" class="headerlink" title="StringBuffer/StringBuilder区别"></a>StringBuffer/StringBuilder区别</h4><p> StringBuffer是线程安全的可变字符串</p><p> StringBuilder是县城不安全的可变字符串。</p><p> 和StringBuffer的功能一样。就是效率高一些，但是不安全。</p></li><li><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * StringBuffer：线程安全的可变字符串</span></span><br><span class="line"><span class="comment"> * 可以改变内容和长度</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * StringBuffer和String的区别？</span></span><br><span class="line"><span class="comment"> * A：StringBuffer的长度可变</span></span><br><span class="line"><span class="comment"> * B：String的长度不可变</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 构造方法：</span></span><br><span class="line"><span class="comment"> * StringBuffer():构造一个其中不带字符的字符串缓冲区，其初始容量为16个字符</span></span><br><span class="line"><span class="comment"> * StringBuffer(int capacity):构造一个不带字符，但具有指定初始容量的字符串缓冲区</span></span><br><span class="line"><span class="comment"> * StringBuffer(String str):构造一个字符串缓冲区，并将其内容初始化为自定的字符串长度</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 成员方法：</span></span><br><span class="line"><span class="comment"> * public int length():返回长度(字符数)实际值</span></span><br><span class="line"><span class="comment"> * public int capacity():返回当前容量理论值</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringBufferTest001</span> {</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"></span><br><span class="line"><span class="comment">// StringBuffer():构造一个不带字符的字符串缓冲区，初始容量为16个字符</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">strb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">System.out.println(<span class="string">"strb:"</span>+strb);</span><br><span class="line">System.out.println(<span class="string">"strb.length:"</span>+strb.length());  <span class="comment">// 0</span></span><br><span class="line">System.out.println(<span class="string">"strb.capacity:"</span>+strb.capacity());<span class="comment">// 16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// StringBuffer(int capacity):构造一个不带字符，但带有指定初始容量的字符串缓冲区</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">sb2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="number">20</span>);</span><br><span class="line">System.out.println(<span class="string">"sb2:"</span>+sb2);</span><br><span class="line">System.out.println(<span class="string">"sb2.length:"</span>+sb2.length());  <span class="comment">// 0</span></span><br><span class="line">System.out.println(<span class="string">"sb2.capacity:"</span>+sb2.capacity()); <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// StringBuffer(String str):构造一个字符串缓冲区，并将其内容初始化为指定的字符串内容。</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">sb3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">"helloworld"</span>);</span><br><span class="line">System.out.println(<span class="string">"sb3:"</span> + sb3);</span><br><span class="line">System.out.println(<span class="string">"sb3.length():"</span> + sb3.length());</span><br><span class="line">System.out.println(<span class="string">"sb3.capacity():"</span> + sb3.capacity());</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h4><ul><li><h5 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h5>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加功能：</span></span><br><span class="line"><span class="comment"> * public StringBuffer append(String str):追加数据，往已有的数据后面添加</span></span><br><span class="line"><span class="comment"> * public StringBuffer insert(int offset,String str):往指定位置添加数据</span></span><br><span class="line"><span class="comment"> * (超出下标报错)</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringBufferTest002</span> {</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"><span class="comment">// 创建字符串缓冲区对象</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">sb2</span> <span class="operator">=</span> sb.append(<span class="string">"s"</span>);</span><br><span class="line">System.out.println(sb2); <span class="comment">// s</span></span><br><span class="line">System.out.println(sb2==sb); <span class="comment">// true</span></span><br><span class="line">System.out.println(<span class="string">"sb2:"</span>+sb2);<span class="comment">// s</span></span><br><span class="line">System.out.println(<span class="string">"sb:"</span>+sb); <span class="comment">// s</span></span><br><span class="line"></span><br><span class="line">sb.append(<span class="string">"hello"</span>);</span><br><span class="line">sb.append(<span class="string">"world"</span>);</span><br><span class="line">System.out.println(sb2==sb); <span class="comment">// true</span></span><br><span class="line">System.out.println(sb2);<span class="comment">// shelloworld</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 链式编程</span></span><br><span class="line">sb.append(<span class="string">"hello"</span>).append(<span class="string">"world"</span>).append(<span class="string">"java"</span>);</span><br><span class="line">System.out.println(sb2==sb); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">st2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">st2.insert(<span class="number">0</span>, <span class="string">"baLeiTe"</span>);  <span class="comment">// 超出内容最大下标会报错</span></span><br><span class="line">System.out.println(st2);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除功能：</span></span><br><span class="line"><span class="comment"> * public StringBuffer deleteCharAt(int index):删除指定位置的字符</span></span><br><span class="line"><span class="comment"> * public StringBuffer delete(int start,int end):删除start到end的数据，前包后不包</span></span><br><span class="line"><span class="comment"> * 超出下标报错</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringBufferTest003</span> {</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line"></span><br><span class="line">sb.append(<span class="string">"hello"</span>).append(<span class="string">"world"</span>);</span><br><span class="line">System.out.println(sb);</span><br><span class="line"></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">s</span> <span class="operator">=</span> sb.deleteCharAt(<span class="number">0</span>);   <span class="comment">// 超出下标会报错</span></span><br><span class="line">System.out.println(sb);<span class="comment">// elloworld</span></span><br><span class="line">System.out.println(s);<span class="comment">// elloworld</span></span><br><span class="line"></span><br><span class="line">sb.delete(<span class="number">0</span>, <span class="number">1</span>);<span class="comment">// 超出下标报错</span></span><br><span class="line">System.out.println(sb);<span class="comment">// lloworld</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h5>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字符串替换</span></span><br><span class="line"><span class="comment"> * public StringBuffer replace(int start,int end,String str)</span></span><br><span class="line"><span class="comment"> * 用给定的字符串替换从指定位置开始到指定位置结束的数据</span></span><br><span class="line"><span class="comment"> *超出下标会报错</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringBufferTest004</span> {</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">"HelloWorld"</span>);</span><br><span class="line">buffer.replace(<span class="number">0</span>, <span class="number">1</span>, <span class="string">"hello"</span>);</span><br><span class="line">System.out.println(buffer);<span class="comment">// helloelloWorld</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="反转"><a href="#反转" class="headerlink" title="反转"></a>反转</h5>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字符串反转</span></span><br><span class="line"><span class="comment"> * public StringBuffer reverse()</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringBufferTest005</span> {</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">"helloworld"</span>);</span><br><span class="line">buffer.reverse(); </span><br><span class="line">System.out.println(buffer); <span class="comment">//dlrowolleh</span></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="截取"><a href="#截取" class="headerlink" title="截取"></a>截取</h5>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bj.study.StringBuffer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 截取功能：返回值是String类型，本身没有发生改变</span></span><br><span class="line"><span class="comment"> * public String substring(int start)</span></span><br><span class="line"><span class="comment"> * 从指定位置开始到末尾，超出字符串长度会报错</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * public String substring(int start,int end)</span></span><br><span class="line"><span class="comment"> * 从指定位置开始到指定位置结束</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringBufferTest006</span> {</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">"helloworld"</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> buffer.substring(<span class="number">0</span>);</span><br><span class="line">System.out.println(s);<span class="comment">// helloworld</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> buffer.substring(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">System.out.println(s1);<span class="comment">// h</span></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><ol><li><h5 id="StringBuffer和String相互转换"><a href="#StringBuffer和String相互转换" class="headerlink" title="StringBuffer和String相互转换"></a>StringBuffer和String相互转换</h5> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * StringBuffer 和 String转换</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringBufferTest007</span> {</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">"hello"</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(buffer);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">"hello"</span>);</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(s1);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="数组转换成字符串"><a href="#数组转换成字符串" class="headerlink" title="数组转换成字符串"></a>数组转换成字符串</h5> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 练习：把数组拼接成字符串</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringBufferTest008</span> {</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"><span class="type">int</span>[] arr = {<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>};</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> arrayToString(arr);</span><br><span class="line">System.out.println(result);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">arrayToString</span><span class="params">(<span class="type">int</span>[] arr)</span> {</span><br><span class="line"></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">sb.append(<span class="string">"["</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) {</span><br><span class="line"><span class="keyword">if</span>(i==arr.length) {</span><br><span class="line">sb.append(arr[i]);</span><br><span class="line">}<span class="keyword">else</span> {</span><br><span class="line">sb.append(arr[i]+<span class="string">","</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">sb.append(<span class="string">"]"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(sb);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="判断字符串是不是回文字符串"><a href="#判断字符串是不是回文字符串" class="headerlink" title="判断字符串是不是回文字符串"></a>判断字符串是不是回文字符串</h5> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断字符串是不是回文字符串：</span></span><br><span class="line"><span class="comment"> * 如：aba，anmbmna</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringBufferTest009</span> {</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">"anmbmn"</span>;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buffer</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(s);</span><br><span class="line">buffer.reverse();</span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(buffer);</span><br><span class="line"><span class="keyword">if</span>(s.equals(s1)) {</span><br><span class="line">System.out.println(<span class="literal">true</span>);</span><br><span class="line">}<span class="keyword">else</span> {</span><br><span class="line">System.out.println(<span class="literal">false</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="看程序写结果"><a href="#看程序写结果" class="headerlink" title="看程序写结果"></a>看程序写结果</h5> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bj.study.StringBuffer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *1、String和StringBuffer和StringBuilder的区别</span></span><br><span class="line"><span class="comment"> *    A:String是固定长度，StringBuffer和StringBuilder长度可变</span></span><br><span class="line"><span class="comment"> *B:StringBuffer线程安全，效率低。StringBuilder线程不安全，效率高</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *2、StringBuffer和数组的区别</span></span><br><span class="line"><span class="comment"> *A:StringBuffer的长度可变，可以存储任意数据类型，最终结果都是一个字符串</span></span><br><span class="line"><span class="comment"> *B:数组长度固定，存储同一种数据类型的元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *3、看程序写结果</span></span><br><span class="line"><span class="comment"> *String作为参数传递和StringBuffer作为参数传递的区别</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *String是一种引用数据类型，在作为参数传递时，可以当做基本类型来看。因为传递的是常量值</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringBufferTest010</span> {</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">"hello"</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">"world"</span>;</span><br><span class="line">System.out.println(s1 + <span class="string">"---"</span> + s2); <span class="comment">// hello---world</span></span><br><span class="line">change(s1, s2);</span><br><span class="line">System.out.println(s1 + <span class="string">"---"</span> + s2);<span class="comment">// hello---world</span></span><br><span class="line"></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">sb1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">"hello"</span>);</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">sb2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">"world"</span>);</span><br><span class="line">System.out.println(sb1 + <span class="string">"---"</span> + sb2);<span class="comment">// hello---world</span></span><br><span class="line">change(sb1, sb2);</span><br><span class="line">System.out.println(sb1 + <span class="string">"---"</span> + sb2);<span class="comment">// hellossss---worldoooo</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(StringBuffer sb1, StringBuffer sb2)</span> {</span><br><span class="line">sb1.append(<span class="string">"ssss"</span>);</span><br><span class="line">sb2.append(<span class="string">"oooo"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(String s1, String s2)</span> {</span><br><span class="line">s1 += <span class="string">"ssss"</span>;</span><br><span class="line">s2 += <span class="string">"oooo"</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol></li></ol><h3 id="二、数组排序"><a href="#二、数组排序" class="headerlink" title="二、数组排序"></a>二、数组排序</h3><ol><li><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 冒泡排序</span></span><br><span class="line"><span class="comment"> * 外层循环控制比较次数，每次比较相邻的两个元素，第一次排序完之后最大的值一定在最后</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayBubbleSort</span> {</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"><span class="type">int</span>[] arr = {<span class="number">13</span>, <span class="number">69</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">101</span> };</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;arr.length;i++) {</span><br><span class="line"><span class="comment">// 设置标志位，如果某一次没有任何数据交换，说明数据有序</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;  </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;arr.length-i;j++) {</span><br><span class="line"><span class="keyword">if</span> (arr[j]&gt;arr[j+<span class="number">1</span>]) {</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 测试：当数组本身有序时，一次排序就结束程序</span></span><br><span class="line">System.out.println(<span class="number">111111</span>);</span><br><span class="line"><span class="keyword">if</span>(flag) {</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) {</span><br><span class="line">System.out.println(arr[i]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 选择排序：</span></span><br><span class="line"><span class="comment"> * 每一次先定义一个初识的最小值下标</span></span><br><span class="line"><span class="comment"> * 然后在剩余部分选出未排序数组中最小的值，如果最小值的下标与初识定义的不同，就交换位置</span></span><br><span class="line"><span class="comment"> * 第一次排完序之后最小的一定在最前边</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArraySelectSort</span> {</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"><span class="type">int</span>[] arr = {<span class="number">24</span>,<span class="number">13</span>,<span class="number">30</span>,<span class="number">69</span>,<span class="number">80</span>,<span class="number">3</span>};</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>;i++) {</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> i;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span>i+<span class="number">1</span>;j&lt;arr.length;j++) {</span><br><span class="line"><span class="keyword">if</span>(arr[j]&lt;arr[index]) {</span><br><span class="line">index = j;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">            <span class="comment">// 最小值下标与最开始定义的不同</span></span><br><span class="line"><span class="keyword">if</span>(index!=i) {</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[index];</span><br><span class="line">arr[index] = arr[i];</span><br><span class="line">arr[i] = temp;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k=<span class="number">0</span>;k&lt;arr.length;k++) {</span><br><span class="line">System.out.println(arr[k]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bj.study.Array;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用插入排序：</span></span><br><span class="line"><span class="comment"> *  每次从未排序的数组中拿出第一个元素跟已排序的列表的最后一个比较</span></span><br><span class="line"><span class="comment"> *  如果位置错误就交换位置。</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsertSort</span> {</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"><span class="type">int</span>[] arr = {<span class="number">24</span>,<span class="number">13</span>,<span class="number">30</span>,<span class="number">69</span>,<span class="number">80</span>,<span class="number">3</span>};;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;arr.length;i++) {</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i;j&gt;<span class="number">0</span>;j--) {</span><br><span class="line"><span class="keyword">if</span>(arr[j]&lt;arr[j-<span class="number">1</span>]) {</span><br><span class="line"><span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> arr[j];</span><br><span class="line">arr[j] = arr[j-<span class="number">1</span>];</span><br><span class="line">arr[j-<span class="number">1</span>] = s;</span><br><span class="line">}<span class="keyword">else</span> {</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) {</span><br><span class="line">System.out.printn(arr[i]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h4> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bj.study.Array;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基本查找：数组无序，按循序进行查找</span></span><br><span class="line"><span class="comment"> * 折半查找：数组有序，每次比较数组中间值</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayFindTest001</span> {</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"><span class="comment">/**数组无序，顺序查找*/</span></span><br><span class="line"><span class="type">int</span>[] arr1 = {<span class="number">8</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">11</span>,<span class="number">23</span>,<span class="number">40</span>};</span><br><span class="line"><span class="type">int</span> <span class="variable">number1</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr1.length;i++) {</span><br><span class="line"><span class="keyword">if</span>(number1==arr1[i]) {</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">System.out.println(flag);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(!flag) {</span><br><span class="line">System.out.println(flag);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="折半查找"><a href="#折半查找" class="headerlink" title="折半查找"></a>折半查找</h4> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bj.study.Array;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 折半查找:数组有序</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayFindTest002</span> {</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"><span class="type">int</span>[] arr = {<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>};</span><br><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> arr.length-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(start&lt;=end) {</span><br><span class="line"><span class="keyword">if</span>(number == arr[(start+end)/<span class="number">2</span>]) {</span><br><span class="line">System.out.println((start+end)/<span class="number">2</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(number &lt; arr[(start+end)/<span class="number">2</span>]) {</span><br><span class="line">end = (start+end)/<span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">}<span class="keyword">else</span> {</span><br><span class="line">start = (start+end)/<span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="数组自带排序和查找"><a href="#数组自带排序和查找" class="headerlink" title="数组自带排序和查找"></a>数组自带排序和查找</h4> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bj.study.Array;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Arrays：针对数组进行操作的工具类。提供了排序，查找等功能</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 成员方法：</span></span><br><span class="line"><span class="comment"> * public static String toString(int[] a):数组转换成字符串</span></span><br><span class="line"><span class="comment"> * public static void sort(int[] a):排序(快速排序)</span></span><br><span class="line"><span class="comment"> * public static void binarySearch(int[] a,int key):二分查找</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 注意：</span></span><br><span class="line"><span class="comment"> * 如果数组本身是无序的，不能直接使用二分查找</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayTest</span> {</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"><span class="type">int</span>[] arr = {<span class="number">20</span>, <span class="number">30</span>, <span class="number">10</span>, <span class="number">29</span>, <span class="number">89</span>};</span><br><span class="line"></span><br><span class="line">System.out.println(arr);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> Arrays.toString(arr);</span><br><span class="line">System.out.println(s);</span><br><span class="line">System.out.println(s.length()); <span class="comment">// 20</span></span><br><span class="line">Arrays.sort(arr);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">System.out.println(Arrays.binarySearch(arr,<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="三、Integer类"><a href="#三、Integer类" class="headerlink" title="三、Integer类"></a>三、Integer类</h3><ol><li><h4 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h4> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bj.study.Integer;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 需求1：我给出了一个数据，我要判断这个数据是不是在int范围呢?肿么办呢?</span></span><br><span class="line"><span class="comment"> * 需求2：我给出一个数据100，我要得到它的二进制，八进制，十六进制? 三进制，五进制，七进制???</span></span><br><span class="line"><span class="comment"> * 那么，有没有比较简单的方式让我们来实现这样的需求呢?有。</span></span><br><span class="line"><span class="comment"> * 而基本类型是做不到的，因为基本类型没有功能可以使用。所以，这种的操作最好是能有功能实现。</span></span><br><span class="line"><span class="comment"> * 然后我们调用功能即可。</span></span><br><span class="line"><span class="comment"> * 为了简化我们针对基本类型数据的更复杂的操作，java就针对每种基本类型提供了一个包装类类型，基本类型包装类。</span></span><br><span class="line"><span class="comment"> * byteByte</span></span><br><span class="line"><span class="comment"> * shortShort</span></span><br><span class="line"><span class="comment"> * intInteger</span></span><br><span class="line"><span class="comment"> * longLong</span></span><br><span class="line"><span class="comment"> * floatFloat</span></span><br><span class="line"><span class="comment"> * doubleDouble</span></span><br><span class="line"><span class="comment"> * charCharacter</span></span><br><span class="line"><span class="comment"> * booleanBoolean</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntegerTest001</span> {</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"><span class="comment">// public static final int MAX_VALUE</span></span><br><span class="line"><span class="comment">// public static final int MIN_VALUE</span></span><br><span class="line"><span class="comment">// if(数据&gt;=Integer.MIN_VALUE &amp;&amp; 数据&lt;=Integer.MAX_VALUE){}</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// public static String toBinaryString(int i)</span></span><br><span class="line">System.out.println(Integer.toBinaryString(<span class="number">100</span>));</span><br><span class="line"><span class="comment">// public static String toOctalString(int i)</span></span><br><span class="line">System.out.println(Integer.toOctalString(<span class="number">100</span>));</span><br><span class="line"><span class="comment">// public static String toHexString(int i)</span></span><br><span class="line">System.out.println(Integer.toHexString(<span class="number">100</span>));</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h4> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bj.study.Integer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Integer的构造方法：</span></span><br><span class="line"><span class="comment"> * Integer(int value)： 把int类型的值包装成Integer类型</span></span><br><span class="line"><span class="comment"> * Integer(String s): 把数字类型的字符串转换成Integer类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntegerTest002</span> {</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"><span class="comment">// 方式1</span></span><br><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(number);</span><br><span class="line">System.out.println(<span class="string">"i:"</span> + i); <span class="comment">//  100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式2</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">"100"</span>;</span><br><span class="line"><span class="comment">// String s = "abc"; // NumberFormatException:因为你给定的数据不是数字形式的字符串数据</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(s);</span><br><span class="line">System.out.println(<span class="string">"i2:"</span> + i2); <span class="comment">// 100</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="int和String类型转换"><a href="#int和String类型转换" class="headerlink" title="int和String类型转换"></a>int和String类型转换</h4> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bj.study.Integer;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * int和String类型的相互转换。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * int -- String</span></span><br><span class="line"><span class="comment"> * String.valueOf(number)</span></span><br><span class="line"><span class="comment"> * Integer.toString(number)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * String -- int</span></span><br><span class="line"><span class="comment"> * Integer.parseInt(s);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntegerTest003</span> {</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"><span class="comment">// int -- String</span></span><br><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="comment">// 方法1</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> number + <span class="string">""</span>;</span><br><span class="line"><span class="comment">//方式2</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> String.valueOf(number);</span><br><span class="line"><span class="comment">//方式3</span></span><br><span class="line"><span class="comment">//int -- Integer -- String</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(number);</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> i.toString();</span><br><span class="line"><span class="comment">//方式4</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> Integer.toString(number);</span><br><span class="line">System.out.println(<span class="string">"--------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">"100"</span>;</span><br><span class="line"><span class="comment">//方式1</span></span><br><span class="line"><span class="comment">//String -- Integer -- int</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">ii</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(s);</span><br><span class="line"><span class="comment">//public int intValue()</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> ii.intValue();</span><br><span class="line"><span class="comment">//方式2</span></span><br><span class="line"><span class="comment">//public static int parseInt(String s)</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> Integer.parseInt(s);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="进制转换-1"><a href="#进制转换-1" class="headerlink" title="进制转换"></a>进制转换</h4> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bj.study.Integer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 常用的基本进制转换</span></span><br><span class="line"><span class="comment"> *public static String toBinaryString(int i)</span></span><br><span class="line"><span class="comment"> *public static String toOctalString(int i)</span></span><br><span class="line"><span class="comment"> *public static String toHexString(int i)</span></span><br><span class="line"><span class="comment"> * 十进制到其他进制</span></span><br><span class="line"><span class="comment"> *public static String toString(int i,int radix)</span></span><br><span class="line"><span class="comment"> *其他进制到十进制</span></span><br><span class="line"><span class="comment"> *public static int parseInt(String s,int radix)</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntegerTest004</span> {</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"><span class="comment">// public static String toString(int i,int radix):</span></span><br><span class="line"><span class="comment">// 进制的范围是2-36</span></span><br><span class="line">System.out.println(Integer.toString(<span class="number">100</span>, <span class="number">2</span>)); <span class="comment">// 1100100</span></span><br><span class="line">System.out.println(Integer.toString(<span class="number">100</span>, <span class="number">8</span>));<span class="comment">// 144</span></span><br><span class="line">System.out.println(Integer.toString(<span class="number">100</span>, <span class="number">16</span>));<span class="comment">// 64</span></span><br><span class="line">System.out.println(Integer.toString(<span class="number">100</span>, <span class="number">1</span>));<span class="comment">// 100</span></span><br><span class="line">System.out.println(Integer.toString(<span class="number">100</span>, <span class="number">100</span>));<span class="comment">// 100</span></span><br><span class="line">System.out.println(Integer.toString(<span class="number">100</span>, <span class="number">50</span>));<span class="comment">// 100</span></span><br><span class="line">System.out.println(Integer.toString(<span class="number">100</span>, <span class="number">25</span>));<span class="comment">// 40</span></span><br><span class="line">System.out.println(Integer.toString(<span class="number">100</span>, <span class="number">37</span>));<span class="comment">// 100</span></span><br><span class="line">System.out.println(Integer.toString(<span class="number">100</span>, <span class="number">32</span>));<span class="comment">// 34</span></span><br><span class="line">System.out.println(Integer.toString(<span class="number">100</span>, <span class="number">35</span>));<span class="comment">// 2u</span></span><br><span class="line">System.out.println(Integer.toString(<span class="number">100</span>, <span class="number">36</span>));<span class="comment">// 2s</span></span><br><span class="line">System.out.println(Integer.toString(<span class="number">100</span>, <span class="number">7</span>));<span class="comment">// 202</span></span><br><span class="line">System.out.println(<span class="string">"----------------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他进制到十进制</span></span><br><span class="line"><span class="comment">// public static int parseInt(String s,int radix)</span></span><br><span class="line">System.out.println(Integer.parseInt(<span class="string">"100"</span>, <span class="number">2</span>));<span class="comment">// 4</span></span><br><span class="line">System.out.println(Integer.parseInt(<span class="string">"100"</span>, <span class="number">8</span>));<span class="comment">// 64</span></span><br><span class="line">System.out.println(Integer.parseInt(<span class="string">"100"</span>, <span class="number">16</span>));<span class="comment">// 256</span></span><br><span class="line">System.out.println(Integer.parseInt(<span class="string">"300"</span>, <span class="number">12</span>));<span class="comment">// 432</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h4> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bj.study.Integer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDK5新特性：</span></span><br><span class="line"><span class="comment"> * 自动装箱：int-- integer</span></span><br><span class="line"><span class="comment"> * 底层方法：public static Integer valueOf(int i)</span></span><br><span class="line"><span class="comment"> * 自动拆箱：Integer -- int</span></span><br><span class="line"><span class="comment"> * 底层方法：public int intValue()</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 注意：对象不能为null</span></span><br><span class="line"><span class="comment"> * 开发原则：</span></span><br><span class="line"><span class="comment"> * 只要是对象做操作，肯定先判断对象是否为null，如果不为null，才能继续操作</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntegerTest005</span> {</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"><span class="comment">// Integer i = new Integer(100);</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>; <span class="comment">// 自动装箱</span></span><br><span class="line"><span class="comment">// Integer i = Integer.valueOf(100);</span></span><br><span class="line"></span><br><span class="line">i += <span class="number">200</span>; <span class="comment">// i = i + 200</span></span><br><span class="line"><span class="comment">// i = Integer.valueOf(i.intValue() + 200);</span></span><br><span class="line"></span><br><span class="line">System.out.println(i);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="练习-看程序说结果"><a href="#练习-看程序说结果" class="headerlink" title="练习:看程序说结果"></a>练习:看程序说结果</h4> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bj.study.Integer;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 看程序写结果</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntegerTest006</span> {</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">127</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">127</span>);</span><br><span class="line">System.out.println(i1 == i2);<span class="comment">// false</span></span><br><span class="line">System.out.println(i1.equals(i2));<span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">128</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">128</span>);</span><br><span class="line">System.out.println(i3 == i4);<span class="comment">// false</span></span><br><span class="line">System.out.println(i3.equals(i4));<span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i5</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i6</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">System.out.println(i5 == i6);<span class="comment">// true</span></span><br><span class="line">System.out.println(i5.equals(i6));<span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i7</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i8</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">System.out.println(i7 == i8);<span class="comment">// false</span></span><br><span class="line">System.out.println(i7.equals(i8));<span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 要想知道为什么，就必须看源码。</span></span><br><span class="line"><span class="comment">// public static Integer valueOf(int i)</span></span><br><span class="line"><span class="comment">//char ch = 127;</span></span><br><span class="line"><span class="comment">//Integer i = Integer.valueOf(ch);</span></span><br><span class="line"><span class="comment">// 通过查看源码我们知道如果数据在-128到127之间，是从一个缓存数组中返回的。</span></span><br><span class="line"><span class="comment">// 如果不在这个范围内，就是重新创建的new出来的对象。</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="四、Character类"><a href="#四、Character类" class="headerlink" title="四、Character类"></a>四、Character类</h3><ol><li><h4 id="构造方法和类型转换"><a href="#构造方法和类型转换" class="headerlink" title="构造方法和类型转换"></a>构造方法和类型转换</h4> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bj.study.Character;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Character 类在对象中包装一个基本类型char的值；</span></span><br><span class="line"><span class="comment"> * 此外，该类还提供了几种方法：</span></span><br><span class="line"><span class="comment"> * 确定字符的类别（小写字母，数字等等），并将字符从大写转换成小写</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharacterDemo</span> {</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"><span class="comment">// 构造方法</span></span><br><span class="line"><span class="type">Character</span> <span class="variable">ch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Character</span>(<span class="string">'a'</span>);</span><br><span class="line">System.out.println(ch);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 字符转换*/</span></span><br><span class="line"><span class="comment">// public static boolean isUpperCase(char ch)</span></span><br><span class="line">System.out.println(Character.isUpperCase(<span class="string">'a'</span>));<span class="comment">// false</span></span><br><span class="line">System.out.println(Character.isUpperCase(<span class="string">'A'</span>));<span class="comment">// true</span></span><br><span class="line">System.out.println(Character.isUpperCase(<span class="string">'0'</span>));<span class="comment">// false</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">// public static boolean isLowerCase(char ch)</span></span><br><span class="line">System.out.println(Character.isLowerCase(<span class="string">'a'</span>));<span class="comment">// true</span></span><br><span class="line">System.out.println(Character.isLowerCase(<span class="string">'A'</span>));<span class="comment">// false</span></span><br><span class="line">System.out.println(Character.isLowerCase(<span class="string">'0'</span>));<span class="comment">// false</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">// public static boolean isDigit(char ch)</span></span><br><span class="line">System.out.println(Character.isDigit(<span class="string">'a'</span>));<span class="comment">// false</span></span><br><span class="line">System.out.println(Character.isDigit(<span class="string">'A'</span>));<span class="comment">// false</span></span><br><span class="line">System.out.println(Character.isDigit(<span class="string">'0'</span>));<span class="comment">// true</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">// public static char toUpperCase(char ch)</span></span><br><span class="line">System.out.println(Character.toUpperCase(<span class="string">'a'</span>));<span class="comment">// A</span></span><br><span class="line">System.out.println(Character.toUpperCase(<span class="string">'A'</span>));<span class="comment">// A</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">// public static char toLowerCase(char ch)</span></span><br><span class="line">System.out.println(Character.toLowerCase(<span class="string">'a'</span>));<span class="comment">// a</span></span><br><span class="line">System.out.println(Character.toLowerCase(<span class="string">'A'</span>));<span class="comment">// a</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p> ntln(Character.isLowerCase(‘A’));// false<br>     System.out.println(Character.isLowerCase(‘0’));// false<br><br>     // public static boolean isDigit(char ch)<br>     System.out.println(Character.isDigit(‘a’));// false<br>     System.out.println(Character.isDigit(‘A’));// false<br>     System.out.println(Character.isDigit(‘0’));// true<br><br>     // public static char toUpperCase(char ch)<br>     System.out.println(Character.toUpperCase(‘a’));// A<br>     System.out.println(Character.toUpperCase(‘A’));// A<br><br>     // public static char toLowerCase(char ch)<br>     System.out.println(Character.toLowerCase(‘a’));// a<br>     System.out.println(Character.toLowerCase(‘A’));// a<br><br> }<br> }</p><pre><code></code></pre></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java中的方法</title>
      <link href="/2022/05/19/treasurebox/java/1.java-ji-chu/6.java-zhong-de-fang-fa/"/>
      <url>/2022/05/19/treasurebox/java/1.java-ji-chu/6.java-zhong-de-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="Java中的方法"><a href="#Java中的方法" class="headerlink" title="Java中的方法"></a>Java中的方法</h2><h3 id="一、方法的介绍"><a href="#一、方法的介绍" class="headerlink" title="一、方法的介绍"></a>一、方法的介绍</h3><p>方法，把某些需要重复使用的代码段放在一块，可供重复调用。</p><p>方法的好处：代码得到了重复使用</p><p>方法本质：<br>    方法就是一段代码片段，并且这段代码片段：<br>    可以完成某个特定的功能，可以被重复的使用</p><p>方法，对应英语单词：Method<br>方法在C语言中叫做函数/Function</p><p>方法定义在类体之中，在一个类当中可以定义多个方法，<br>方法编写的位置没有先后顺序，可以随意</p><p>方法体当中不能再定义方法！！！！</p><p>方法体由java语句构成，方法体中的代码遵循自上而下执行</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodTest02</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用函数，计算两个int类型数据的和</span></span><br><span class="line">MethodTest02.sumInt(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line">MethodTest02.sumInt(<span class="number">666</span>,<span class="number">888</span>);</span><br><span class="line">MethodTest02.sumInt(<span class="number">1000</span>,<span class="number">2022</span>);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单独定义一个方法</span></span><br><span class="line"><span class="comment">// 该方法完成计算两个int类型数据的和，并且将结果输出</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sumInt</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>{</span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a+b;</span><br><span class="line">System.out.println(a+<span class="string">"+"</span>+b+<span class="string">"="</span>+c);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="二、方法的描述"><a href="#二、方法的描述" class="headerlink" title="二、方法的描述"></a>二、方法的描述</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">关于java语言中的方法：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1、方法怎么定义，语法结构：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">[修饰符列表] 返回值类型 方法名(形式参数列表){</span></span><br><span class="line"><span class="comment">方法体;</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment">2、对以上的语法结构进行解释</span></span><br><span class="line"><span class="comment">2.1、关于修饰符列表</span></span><br><span class="line"><span class="comment">* 可选项，不是必须的</span></span><br><span class="line"><span class="comment">* 目前统一写成：public static</span></span><br><span class="line"><span class="comment">* 方法的修饰符列表中有static关键字的话，调用时：</span></span><br><span class="line"><span class="comment">类名.方法名(实际参数列表);</span></span><br><span class="line"><span class="comment">2.2、返回值类型</span></span><br><span class="line"><span class="comment">* 什么是返回值？</span></span><br><span class="line"><span class="comment">一个方法是可以完成某个特定功能的，这个功能结束之后大多数都是需要返回</span></span><br><span class="line"><span class="comment">最终执行结果的，执行结果可能是一个具体存在的数据。而这个具体存在的数据就是返回值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 返回值类型？</span></span><br><span class="line"><span class="comment">返回值是一个具体存在的数据，数据都是有类型的，此时需要指定的是返回值的具体类型</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 返回值类型都可以指定哪些类型呢？</span></span><br><span class="line"><span class="comment">java任意一种类型都可以，包括基本数据类型和引用数据类型</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*也可能这个方法执行结束之后不返回任何数据，java中规定，当一个方法执行结束之后不返回任何数据的话，返回值类型位置必须编写：void关键字</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 返回值类型：</span></span><br><span class="line"><span class="comment">byte、short、int、long、float、double、char、boolean</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 返回值类型若不是void，表示这个方法执行结束之后必须返回一个具体的数据</span></span><br><span class="line"><span class="comment">当方法执行结束没有返回任何数据的话，编译器报错。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">return "值";并且要求“值”的数据类型必须和方法的返回值类型一致。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 返回值类型是void的时候，在方法体内不能编写“return 值;”这样的语句</span></span><br><span class="line"><span class="comment">可以编写“return;”这样的语句</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 只要带有return关键字的语句执行，return语句所在的方法结束，强行终止当前方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.3、方法名：</span></span><br><span class="line"><span class="comment">* 只要是合法的标识符就行</span></span><br><span class="line"><span class="comment">* 方法名最好见名知意</span></span><br><span class="line"><span class="comment">* 方法名最好是动词</span></span><br><span class="line"><span class="comment">* 方法名首字母小写，后面每个单词首字母大写</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.4、形式参数列表：简称形参</span></span><br><span class="line"><span class="comment">* 形参是局部变量：int a;double b;String s;</span></span><br><span class="line"><span class="comment">* 形参的个数可以是0~N个</span></span><br><span class="line"><span class="comment">* 多个形参之间用"逗号"隔开</span></span><br><span class="line"><span class="comment">* 形参中起决定作用的是形参的数据类型，形参的名字就是局部变量的名字</span></span><br><span class="line"><span class="comment">* 方法调用时，实际给方法传递的真是数据，被称为：实际参数，简称实参</span></span><br><span class="line"><span class="comment">* 实参列表和形参列表必须满足数量相同，类型对应想同</span></span><br><span class="line"><span class="comment">例如：</span></span><br><span class="line"><span class="comment">方法定义</span></span><br><span class="line"><span class="comment">public static int sum(int a,int b){</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment">方法调用</span></span><br><span class="line"><span class="comment">sum("abc","a");编译器报错</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.5、方法体必须由大括号括起来，自上而下执行，</span></span><br><span class="line"><span class="comment">由java语句构成，每一个java语句以";"结尾。</span></span><br><span class="line"><span class="comment">3、方法怎么调用？</span></span><br><span class="line"><span class="comment">方法只有在调用的时候才会执行</span></span><br><span class="line"><span class="comment">语法规则：&lt;方法的修饰符列表当中有static&gt;</span></span><br><span class="line"><span class="comment">类名.方法名(实参列表);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public 表示公开的</span></span><br><span class="line"><span class="comment">class表示定义类</span></span><br><span class="line"><span class="comment">MethodTest03是一个类名</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodTest03</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">// 类体</span></span><br><span class="line"><span class="comment">// 类体中不能直接编写java语句，除声明变量之外</span></span><br><span class="line"><span class="comment">// 方法出现在类体当中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line"><span class="comment">// public表示公开的</span></span><br><span class="line"><span class="comment">// static表示静态的</span></span><br><span class="line"><span class="comment">// void表示方法执行不返回任何数据</span></span><br><span class="line"><span class="comment">// main是方法名：主方法</span></span><br><span class="line"><span class="comment">// (String[] args)：形式参数列表，其中String[]是一种固定的写法</span></span><br><span class="line"><span class="comment">// 所以以下只有args这个局部变量名是随意的</span></span><br><span class="line"><span class="comment">// 主方法固定写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用sum方法</span></span><br><span class="line">MethodTest03.sum(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义方法，不是程序的入口</span></span><br><span class="line"><span class="comment">// 方法作用：计算两个int类型数据的和，不要求返回结果</span></span><br><span class="line"><span class="comment">// 修饰符列表：public static</span></span><br><span class="line"><span class="comment">// 返回值类型：void</span></span><br><span class="line"><span class="comment">// 方法名：sum</span></span><br><span class="line"><span class="comment">// 形参列表：(int a,intb)</span></span><br><span class="line"><span class="comment">// 方法体</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>{</span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a+b;</span><br><span class="line">System.out.println(c);</span><br><span class="line">}</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 无参数无返回值的方法(如果方法没有返回值，不能不写，必须写void，表示没有返回值)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"无参数无返回值的方法"</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 有参数无返回值的方法</span></span><br><span class="line"><span class="comment">    * 参数列表由零组到多组“参数类型+形参名”组合而成，多组参数之间以英文逗号（,）隔开，形参类型和形参名之间以英文空格隔开</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f2</span><span class="params">(<span class="type">int</span> a, String b, <span class="type">int</span> c)</span> {</span><br><span class="line">    System.out.println(a + <span class="string">"--&gt;"</span> + b + <span class="string">"--&gt;"</span> + c);</span><br><span class="line">}</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 有返回值无参数的方法（返回值可以是任意的类型,在函数里面必须有return关键字返回对应的类型）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">f3</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"有返回值无参数的方法"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">}</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 有返回值有参数的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">f4</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> {</span><br><span class="line">        <span class="keyword">return</span> a * b;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// return在无返回值方法的特殊使用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f5</span><span class="params">(<span class="type">int</span> a)</span> {</span><br><span class="line">        <span class="keyword">if</span> (a&gt;<span class="number">10</span>) {</span><br><span class="line">        <span class="keyword">return</span>;<span class="comment">//表示结束所在方法 （f5方法）的执行,下方的输出语句不会执行</span></span><br><span class="line">    }</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="三、方法的调用顺序"><a href="#三、方法的调用顺序" class="headerlink" title="三、方法的调用顺序"></a>三、方法的调用顺序</h3><p>方法的调用不分顺序，只要在同一个类体中都可以调用，其中main方法是程序的进口，从main方法开始执行。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">方法的调用不一定在main方法中，只要是程序可以执行到的位置，</span></span><br><span class="line"><span class="comment">都可以调用其他方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodTest04</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>{</span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a+b;</span><br><span class="line">System.out.println(c);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用dosome方法</span></span><br><span class="line">MethodTest04.dosome();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用some方法</span></span><br><span class="line">MethodTest04.sum(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dosome</span><span class="params">()</span>{</span><br><span class="line">System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="四、方法的传参"><a href="#四、方法的传参" class="headerlink" title="四、方法的传参"></a>四、方法的传参</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodTest05</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传参错误</span></span><br><span class="line"><span class="comment">// MethodTest05.sum();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line">MethodTest05.sum(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换数据类型</span></span><br><span class="line">MethodTest05.sum((<span class="type">long</span>)<span class="number">3.0</span>,<span class="number">20</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sum</span><span class="params">(<span class="type">long</span> a,<span class="type">long</span> b)</span>{</span><br><span class="line">System.out.println(a+b);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>为什么java中只有值传递？</p><p>首先了解程序语言设计中有关将参数传递给方法（或函数）的专业术语：</p><ul><li><strong>按值调用（call by value）</strong>：表示方法接受的是调用者提供的值</li><li><strong>引用调用（call by reference）</strong>：表示方法接收的是调用者提供的变量地址。一个方法可以修改传递引用所对应的变量值，而不能修改传递值调用所对应的变量值。</li></ul><p>Java程序语言设计总是采用按值调用。也就是说：方法得到的是所有参数值的一个拷贝，也就是说，方法不能修改传递给它的任何参数变量的内容。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    swap(num1, num2);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"num1 = "</span> + num1);<span class="comment">// num1=10</span></span><br><span class="line">    System.out.println(<span class="string">"num2 = "</span> + num2);<span class="comment">// num2=20</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"a = "</span> + a);  <span class="comment">// a=20</span></span><br><span class="line">    System.out.println(<span class="string">"b = "</span> + b);  <span class="comment">// b=10</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"><span class="type">int</span>[] arr = { <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> };</span><br><span class="line">System.out.println(arr[<span class="number">0</span>]);<span class="comment">//1</span></span><br><span class="line">change(arr);</span><br><span class="line">System.out.println(arr[<span class="number">0</span>]); <span class="comment">//0</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span>[] array)</span> {</span><br><span class="line"><span class="comment">// 将数组的第一个元素变为0</span></span><br><span class="line">array[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> {</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">"小张"</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">"小李"</span>);</span><br><span class="line">Test.swap(s1, s2);</span><br><span class="line">System.out.println(<span class="string">"s1:"</span> + s1.getName()); <span class="comment">// 小张</span></span><br><span class="line">System.out.println(<span class="string">"s2:"</span> + s2.getName()); <span class="comment">// 小李</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(Student x, Student y)</span> {</span><br><span class="line"><span class="type">Student</span> <span class="variable">temp</span> <span class="operator">=</span> x;</span><br><span class="line">x = y;</span><br><span class="line">y = temp;</span><br><span class="line">System.out.println(<span class="string">"x:"</span> + x.getName());  <span class="comment">// 小李</span></span><br><span class="line">System.out.println(<span class="string">"y:"</span> + y.getName()); <span class="comment">// 小张</span></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>下面再总结一下 Java 中方法参数的使用情况：</p><ul><li>一个方法不能修改一个基本数据类型的参数（即数值型或布尔型）。</li><li>一个方法可以改变一个对象参数的状态。</li><li>一个方法不能让对象参数引用一个新的对象。</li></ul><h3 id="五、方法的调用规则"><a href="#五、方法的调用规则" class="headerlink" title="五、方法的调用规则"></a>五、方法的调用规则</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">方法调用：</span></span><br><span class="line"><span class="comment">1、方法的修饰符列表当中有static关键字，完整的调用方式是：类名.方法名(实参列表);</span></span><br><span class="line"><span class="comment">2、但是，有的时候“类名.”可以省略</span></span><br><span class="line"><span class="comment">* 在当前类中调用时，类名可以不写</span></span><br><span class="line"><span class="comment">* 在其他类中调用时必须要写</span></span><br><span class="line"><span class="comment">3、建议一个java源文件只定义一个class</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodTest06</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">m();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">()</span>{</span><br><span class="line">System.out.println(<span class="string">"m method execute!"</span>);</span><br><span class="line">m2();</span><br><span class="line">A.m2();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span>{</span><br><span class="line">System.out.println(<span class="string">"m2 method execute!"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line"> {</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用其他类中的方法</span></span><br><span class="line">MethodTest06.m();</span><br><span class="line"> }</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span>{</span><br><span class="line">System.out.println(<span class="string">"A's method execute!"</span>);</span><br><span class="line"> }</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><h3 id="六、方法的内存分配"><a href="#六、方法的内存分配" class="headerlink" title="六、方法的内存分配"></a>六、方法的内存分配</h3><p>方法调用时候，分配的内存空间在栈内存中，进行压栈操作，当栈中的内存过多时，会报栈溢出错误。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">分析以下程序的输出结果</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodTest07</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">main begin</span></span><br><span class="line"><span class="comment">m1 begin</span></span><br><span class="line"><span class="comment">m2 begin</span></span><br><span class="line"><span class="comment">m3 begin</span></span><br><span class="line"><span class="comment">m3 over</span></span><br><span class="line"><span class="comment">m2 over</span></span><br><span class="line"><span class="comment">m1 over</span></span><br><span class="line"><span class="comment">main over</span></span><br><span class="line"><span class="comment">当前main方法结束之后整个程序才结束</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line">System.out.println(<span class="string">"main begin"</span>);</span><br><span class="line">m1();</span><br><span class="line">System.out.println(<span class="string">"main over"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span>{</span><br><span class="line">System.out.println(<span class="string">"m1 begin"</span>);</span><br><span class="line">m2();</span><br><span class="line">System.out.println(<span class="string">"m1 over"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span>{</span><br><span class="line">System.out.println(<span class="string">"m2 begin"</span>);</span><br><span class="line">m3();</span><br><span class="line">System.out.println(<span class="string">"m2 over"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m3</span><span class="params">()</span>{</span><br><span class="line">System.out.println(<span class="string">"m3 begin"</span>);</span><br><span class="line">System.out.println(<span class="string">"m3 over"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>m1();<br>        System.out.println(“main over”);<br>    }</p><pre><code>public static void m1(){    System.out.println("m1 begin");    m2();    System.out.println("m1 over");}public static void m2(){    System.out.println("m2 begin");    m3();    System.out.println("m2 over");}public static void m3(){    System.out.println("m3 begin");    System.out.println("m3 over");}</code></pre><p>}</p><pre><code></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>this、static、final和访问控制修饰符</title>
      <link href="/2022/05/19/treasurebox/java/2.java-mian-xiang-dui-xiang/10.this-static-final-he-fang-wen-kong-zhi-xiu-shi-fu/"/>
      <url>/2022/05/19/treasurebox/java/2.java-mian-xiang-dui-xiang/10.this-static-final-he-fang-wen-kong-zhi-xiu-shi-fu/</url>
      
        <content type="html"><![CDATA[<h2 id="this、static、final和修饰符"><a href="#this、static、final和修饰符" class="headerlink" title="this、static、final和修饰符"></a>this、static、final和修饰符</h2><h3 id="一、this的使用"><a href="#一、this的使用" class="headerlink" title="一、this的使用"></a>一、this的使用</h3><h4 id="（1）this使用概述"><a href="#（1）this使用概述" class="headerlink" title="（1）this使用概述"></a>（1）this使用概述</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关于java语言中的this关键字：</span></span><br><span class="line"><span class="comment"> * 1、this 是一个关键字，翻译为：这个</span></span><br><span class="line"><span class="comment"> * 2、是一个引用，保存在堆内存中对象的内部，指的是对象自身</span></span><br><span class="line"><span class="comment"> * 3、创建100个java对象，每一个对象都有一个this，也就是有100个不同的this</span></span><br><span class="line"><span class="comment"> * 4、this可以出现在实例方法中，this指向当前正在执行这个动作的对象</span></span><br><span class="line"><span class="comment"> * 5、this多数情况下可以不写</span></span><br><span class="line"><span class="comment"> * 6、this不能使用在带有static的方法中</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> {</span><br><span class="line"></span><br><span class="line">String name;   <span class="comment">// 实例变量</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Customer</span><span class="params">()</span> {</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不带有static关键字的方法</span></span><br><span class="line"><span class="comment">// 比如顾客的购物行为</span></span><br><span class="line"><span class="comment">// 每一个顾客购物的结果不同</span></span><br><span class="line"><span class="comment">// 所以购物行为属于对象级别的行为</span></span><br><span class="line"><span class="comment">// 由于每一个对象在执行购物这个动作的最终结果不同，所以购物这个动作必须有对象参与</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重点：没有static关键字的方法被称为实例方法</span></span><br><span class="line"><span class="comment">// 重点：没有static关键字的变量称为实例变量</span></span><br><span class="line"><span class="comment">// 注意：当一个行为/动作执行的过程当中是需要对象参与的，name这个方法一定要定义为实例方法，不要带static</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下方法定义为实例方法，因为每个顾客在真正购物时候，最终的结果都是不同的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shopping</span><span class="params">()</span> {</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于name是一个实例变量，所以这个name访问的时候一定访问的是当前对象的实例变量</span></span><br><span class="line"><span class="comment">// System.out.println(name+"在购物");</span></span><br><span class="line">System.out.println(<span class="built_in">this</span>.name+<span class="string">"在购物"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// static方法不需要对象，直接使用类名调用，所以执行过程中没有对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">()</span> {</span><br><span class="line"><span class="comment">// 执行过程中没有当前对象，因为带有static的方法是通过类名.方法名访问的</span></span><br><span class="line"><span class="comment">// 或者说这个上下文中没有当前对象，自然也不存在this</span></span><br><span class="line"><span class="comment">// doSome方法调用不是对象去调用，是一个类名去调用</span></span><br><span class="line"><span class="comment">// name是一个实例变量，以下代码没有实例，所以会编译报错</span></span><br><span class="line"><span class="comment">// System.out.println(name);</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doOther</span><span class="params">()</span> {</span><br><span class="line"><span class="comment">// 想访问时，需要先创建对象</span></span><br><span class="line"><span class="type">Customer</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>();</span><br><span class="line"><span class="comment">// 这里访问的name不再是当前调用的实例的name，而是c实例的name</span></span><br><span class="line">System.out.println(c.name);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><strong>this内存图分配：</strong></p><img src="image/this%E5%86%85%E5%AD%98%E5%9B%BE.png"><h4 id="（2）this在哪里使用"><a href="#（2）this在哪里使用" class="headerlink" title="（2）this在哪里使用"></a>（2）this在哪里使用</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * this可以使用在哪里？</span></span><br><span class="line"><span class="comment"> * 1、可以使用在实例方法当中，代表当前对象</span></span><br><span class="line"><span class="comment"> * 2、可以使用在构造方法中，通过当前的构造方法调用其他的构造方法</span></span><br><span class="line"><span class="comment"> *重点【记忆】：this()只能放在有效代码的第一行</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Date</span> {</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> year;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> month;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> day;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无参构造器</span></span><br><span class="line"><span class="comment">/* 需求：当调用时，默认日期为1970,1,1</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Date</span><span class="params">()</span> {</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">this.year = 1970;</span></span><br><span class="line"><span class="comment">this.month = 1;</span></span><br><span class="line"><span class="comment">this.day = 1;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 函数可以通过调用下边的构造方法</span></span><br><span class="line"><span class="comment">// 前提是不能创建新的对象,以下代码代表创建新的对象</span></span><br><span class="line"><span class="comment">// new Date(1960,1,1);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要采用这种方法进行调用，调用构造方法的另一种方式</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>(<span class="number">1970</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="comment">// 有参构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Date</span><span class="params">(<span class="type">int</span> year, <span class="type">int</span> month, <span class="type">int</span> day)</span> {</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.year = year;</span><br><span class="line"><span class="built_in">this</span>.month = month;</span><br><span class="line"><span class="built_in">this</span>.day = day;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getYear</span><span class="params">()</span> {</span><br><span class="line"><span class="keyword">return</span> year;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setYear</span><span class="params">(<span class="type">int</span> year)</span> {</span><br><span class="line"><span class="built_in">this</span>.year = year;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMonth</span><span class="params">()</span> {</span><br><span class="line"><span class="keyword">return</span> month;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMonth</span><span class="params">(<span class="type">int</span> month)</span> {</span><br><span class="line"><span class="built_in">this</span>.month = month;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDay</span><span class="params">()</span> {</span><br><span class="line"><span class="keyword">return</span> day;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDay</span><span class="params">(<span class="type">int</span> day)</span> {</span><br><span class="line"><span class="built_in">this</span>.day = day;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> {</span><br><span class="line">System.out.println(<span class="built_in">this</span>.year+<span class="string">"年"</span>+<span class="built_in">this</span>.month+<span class="string">"月"</span>+<span class="built_in">this</span>.day+<span class="string">"日"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="（3）案例练习"><a href="#（3）案例练习" class="headerlink" title="（3）案例练习"></a>（3）案例练习</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> {</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"></span><br><span class="line"><span class="comment">// 完整方法和省略方法分别调用method1和method2</span></span><br><span class="line">Test.method1();</span><br><span class="line">method1();</span><br><span class="line"><span class="type">Test</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">t.method2();</span><br><span class="line">t.method1();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> {</span><br><span class="line">System.out.println(<span class="string">"method1 调用"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 完整方法调用</span></span><br><span class="line">Test.doSome();</span><br><span class="line"><span class="comment">// 省略方法调用</span></span><br><span class="line">doSome();</span><br><span class="line"><span class="comment">// 完整方法调用</span></span><br><span class="line"><span class="type">Test</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">t.doOther();</span><br><span class="line"><span class="comment">// 完整访问i</span></span><br><span class="line">System.out.println(<span class="string">"完整的i："</span>+t.i);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> {</span><br><span class="line">System.out.println(<span class="string">"method2 调用"</span>);</span><br><span class="line">Test.doSome();</span><br><span class="line">doSome();</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.doOther();</span><br><span class="line">doOther();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"完整的i:"</span>+<span class="built_in">this</span>.i+<span class="string">"缩写的："</span>+i);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">()</span> {</span><br><span class="line">System.out.println(<span class="string">"do some!"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doOther</span><span class="params">()</span> {</span><br><span class="line">System.out.println(<span class="string">"do Other!"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="二、static的使用"><a href="#二、static的使用" class="headerlink" title="二、static的使用"></a>二、static的使用</h3><h4 id="（1）static用法概述"><a href="#（1）static用法概述" class="headerlink" title="（1）static用法概述"></a>（1）static用法概述</h4><p>带有static时候表示静态的，不管是方法还是变量都上升为类级别的，跟具体的对象无关。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  什么时候成员变量声明为实例变量呢？</span></span><br><span class="line"><span class="comment"> *  所有对象都有这个属性，但是这个属性随着对象的变化而变化</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  什么时候成员变量声明为静态变量呢？</span></span><br><span class="line"><span class="comment"> *  所有对象都有这个属性，但是这个属性不随着对象的变化而变化</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> *  静态变量在类加载的时候，存储在方法区内存中</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> *  所有静态的数据，都可以用“类名.”或“引用.”的方式访问</span></span><br><span class="line"><span class="comment"> *  采用“引用.”访问时，及时引用为null，也不会出现空指针异常</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> *  关于java的static关键字：</span></span><br><span class="line"><span class="comment"> *  1、static的英语为静态的</span></span><br><span class="line"><span class="comment"> *  2、static修饰的方法是静态方法，访问使用"类名."方法名的方式访问</span></span><br><span class="line"><span class="comment"> *  3、static修饰的变量是静态变量</span></span><br><span class="line"><span class="comment"> *  4、所有static修饰的都为静态的，都可以使用“类名.”的方式调用</span></span><br><span class="line"><span class="comment"> *  5、static修饰的元素都是类级别的特征，跟具体的对象无关。</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Chinese</span> {</span><br><span class="line"></span><br><span class="line"><span class="comment">// 身份证号【每一个对象身份证号不同】</span></span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 姓名【每一个对象姓名不同】</span></span><br><span class="line">String name;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 国籍【每一个对象由于都是chinese实例化的，所以每一个中国人的国籍都是中国】</span></span><br><span class="line"><span class="comment">// 无论通过Chinese类实例化多少对象，这些对象国籍都是“中国”</span></span><br><span class="line"><span class="comment">// 带static代表静态变量，内存在方法区内存中</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">String</span> <span class="variable">Country</span> <span class="operator">=</span> <span class="string">"中国"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Chinese</span><span class="params">(<span class="type">int</span> id, String name)</span> {</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">()</span> {</span><br><span class="line">System.out.println(<span class="string">"Chinese doSome"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Chinese2</span> {</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">()</span> {</span><br><span class="line">System.out.println(<span class="string">"Chinese2 doSome"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChinestTest</span> {</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"></span><br><span class="line"><span class="type">Chinese</span> <span class="variable">zhangsan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chinese</span>(<span class="number">1</span>,<span class="string">"zhangsan"</span>);</span><br><span class="line">System.out.println(<span class="string">"身份证号："</span>+zhangsan.id+<span class="string">"，姓名："</span>+zhangsan.name+<span class="string">"，国籍："</span>+Chinese.Country);</span><br><span class="line"></span><br><span class="line"><span class="type">Chinese</span> <span class="variable">lisi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chinese</span>(<span class="number">2</span>,<span class="string">"lisi"</span>);</span><br><span class="line">System.out.println(<span class="string">"身份证号："</span>+lisi.id+<span class="string">"，姓名："</span>+lisi.name+<span class="string">"，国籍："</span>+Chinese.Country);</span><br><span class="line"></span><br><span class="line"><span class="type">Chinese2</span> <span class="variable">wangwu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chinese2</span>();</span><br><span class="line">wangwu = <span class="literal">null</span>;</span><br><span class="line">wangwu.doSome();</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="（2）方法什么时候定义为静态的？"><a href="#（2）方法什么时候定义为静态的？" class="headerlink" title="（2）方法什么时候定义为静态的？"></a>（2）方法什么时候定义为静态的？</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 方法什么时候定义为静态的？</span></span><br><span class="line"><span class="comment"> * 方法描述的是动作，当所有对象执行这个动作的时候，最终产生的影响是一样的，</span></span><br><span class="line"><span class="comment"> * 那么这个动作已经不再属于一个对象动作了，可以将这个动作提升为类级别的动作，模板级别的动作。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *   静态方法无法直接访问实例变量和实例方法</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 大多数方法都定义为实例方法，一般一个行为或者一个动作在发生的时候，都需要对象的参与</span></span><br><span class="line"><span class="comment"> * 但是也有例外，例如：大多数“工具类”中的方法都是静态的，因为工具类中的方法不需要实例，直接用“类名</span></span><br><span class="line"><span class="comment"> *.”的方式调用</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticTest</span> {</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">()</span> {</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">System.out.println(MathUtil.sumInt(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><strong>工具类示例：</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MathUtil</span> {</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sumInt</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> {</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="（3）静态代码快和实例代码块"><a href="#（3）静态代码快和实例代码块" class="headerlink" title="（3）静态代码快和实例代码块"></a>（3）静态代码快和实例代码块</h4><ol><li><p><strong>静态代码块</strong></p> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 可以使用static关键字定义"静态代码块"</span></span><br><span class="line"><span class="comment"> * 1、语法格式</span></span><br><span class="line"><span class="comment"> * static{</span></span><br><span class="line"><span class="comment"> * java语句</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2、静态代码快在类加载的时候执行，并且只执行一次</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 3、静态代码块在一个类中可以编写多个，并且遵循自上而下的顺序依次执行</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 4、静态代码块的作用：</span></span><br><span class="line"><span class="comment"> *  - 和具体的需求有关，例如项目中在类加载的时刻，或者时机执行代码完成日志的记录。</span></span><br><span class="line"><span class="comment"> *  - 那么这段记录日志的代码可以放在静态代码块中，完成日志记录</span></span><br><span class="line"><span class="comment"> *  — 静态代码块是java为程序员准备的一个特殊的时刻，这个特殊的时刻被称为：类加载时刻</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticTest01</span> {</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> {</span><br><span class="line">System.out.println(<span class="string">"static1"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">static</span> {</span><br><span class="line">System.out.println(<span class="string">"static2"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>实例代码块</strong></p> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 实例代码块</span></span><br><span class="line"><span class="comment"> * 1、实例代码块也可以编写多个，也是遵循自上而下的顺序执行</span></span><br><span class="line"><span class="comment"> * 2、实例代码块在构造方法执行之前执行，构造方法执行一次，实例代码执行一次</span></span><br><span class="line"><span class="comment"> * 3、实例代码块也是java语言为程序员准备的一个特殊时刻，这个特殊时刻被称为：对象初始化时机。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> {</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span>{</span><br><span class="line">System.out.println(<span class="string">"Test类构造函数"</span>);</span><br><span class="line">}</span><br><span class="line">{</span><br><span class="line">System.out.println(<span class="string">"1"</span>);</span><br><span class="line">}</span><br><span class="line">{</span><br><span class="line">System.out.println(<span class="string">"2"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">System.out.println(<span class="string">"main begin"</span>);</span><br><span class="line"><span class="type">Test</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="type">Test</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="三、final关键字"><a href="#三、final关键字" class="headerlink" title="三、final关键字"></a>三、final关键字</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关于java语言中的final关键字</span></span><br><span class="line"><span class="comment"> * 1、final是一个关键字，表示最终的，不可变的</span></span><br><span class="line"><span class="comment"> * 2、final修饰的类无法被继承</span></span><br><span class="line"><span class="comment"> * 3、final修饰的方法无法被覆盖</span></span><br><span class="line"><span class="comment"> * 4、final修饰的变量一旦赋值之后不可重新赋值</span></span><br><span class="line"><span class="comment"> * 5、final修饰的实例变量：必须手动赋值，不能使用系统的默认值</span></span><br><span class="line"><span class="comment"> * final int age = 20;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 6、final修饰的引用：</span></span><br><span class="line"><span class="comment"> * final User user = new User(30);user=null;  // 报错</span></span><br><span class="line"><span class="comment"> * 一旦指向某个对象之后，不能再指向其他对象，那么被指向的对象无法被垃圾回收机制回收</span></span><br><span class="line"><span class="comment"> * final User user = new User(30);user.id = 50;   // 正确</span></span><br><span class="line"><span class="comment"> * 虽然指向某个对象之后不能指向其他对象，但是所指向的对象内部的内存是可以修改的</span></span><br><span class="line"><span class="comment"> * 7、final修饰的实例变量一般都要和static连用，被称为常量：</span></span><br><span class="line"><span class="comment"> * 常量定义的语法格式是：public static final 类型 常量名 = 值;</span></span><br><span class="line"><span class="comment"> * Java语法规范要求所有的常量的名字全部大写，每个单词之间使用下划线链接</span></span><br><span class="line"><span class="comment"> * 常量示例：public static final String GUO_JI = "中国";</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinalTest01</span> {</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span>  <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="comment">//  i = 20;  // 编译报错，无法为final修饰的变量赋值</span></span><br><span class="line">System.out.println(i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> m;</span><br><span class="line">m = <span class="number">20</span>;   <span class="comment">// 编译通过，不能二次赋值</span></span><br><span class="line">System.out.println(m);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="四、访问控制修饰符"><a href="#四、访问控制修饰符" class="headerlink" title="四、访问控制修饰符"></a>四、访问控制修饰符</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpower.javase.test005;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  访问控制修饰符</span></span><br><span class="line"><span class="comment"> *  1、访问控制修饰符来控制元素的访问范围</span></span><br><span class="line"><span class="comment"> *  2、访问控制修饰符包括：</span></span><br><span class="line"><span class="comment"> *  public公开的，在任何位置都可以访问</span></span><br><span class="line"><span class="comment"> *  protected同包，子类中可以访问</span></span><br><span class="line"><span class="comment"> *  缺省(无修饰符)同包可以访问</span></span><br><span class="line"><span class="comment"> *  private只能在本类中访问</span></span><br><span class="line"><span class="comment"> *  3、访问控制修饰符可以修饰类、变量、方法。。。</span></span><br><span class="line"><span class="comment"> *  4、当某个数据只希望子类使用：protected进行修饰</span></span><br><span class="line"><span class="comment"> *  5、修饰符范围：</span></span><br><span class="line"><span class="comment"> *  private &lt; 缺省 &lt; protected &lt; public</span></span><br><span class="line"><span class="comment"> *  6、类只能定义public或者缺省</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> {</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpower.javase.test005;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> {</span><br><span class="line"></span><br><span class="line"><span class="comment">// 受保护的</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缺省的</span></span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>��使用：protected进行修饰</p><ul><li><p>5、修饰符范围：</p></li><li><pre><code>private &lt; 缺省 &lt; protected &lt; public</code></pre></li><li><p>6、类只能定义public或者缺省</p></li><li></li><li><p>*/<br>public class Test01 {</p><p> public static void main(String[] args) {</p><p> }</p></li></ul><p>}</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```java</span><br><span class="line">package com.bjpower.javase.test005;</span><br><span class="line"></span><br><span class="line">public class User {</span><br><span class="line"></span><br><span class="line">// 受保护的</span><br><span class="line">protected int i = 20;</span><br><span class="line"></span><br><span class="line">// 缺省的</span><br><span class="line">int j = 20;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>运算符</title>
      <link href="/2022/05/19/treasurebox/java/1.java-ji-chu/3.yun-suan-fu/"/>
      <url>/2022/05/19/treasurebox/java/1.java-ji-chu/3.yun-suan-fu/</url>
      
        <content type="html"><![CDATA[<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>运算符包括：</p><ul><li>算术运算符</li><li>比较运算符</li><li>逻辑运算符</li><li>赋值运算符</li><li>特殊的“+”运算符</li><li>三元运算符/三目运算符</li></ul><h3 id="一、Java语言中的算术运算符"><a href="#一、Java语言中的算术运算符" class="headerlink" title="一、Java语言中的算术运算符"></a>一、Java语言中的算术运算符</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">关于java编程中运算符：算术运算符</span></span><br><span class="line"><span class="comment">+求和</span></span><br><span class="line"><span class="comment">—求差</span></span><br><span class="line"><span class="comment">*乘积</span></span><br><span class="line"><span class="comment">/商</span></span><br><span class="line"><span class="comment">%求余数【取模】</span></span><br><span class="line"><span class="comment">++自加1</span></span><br><span class="line"><span class="comment">--自减1</span></span><br><span class="line"><span class="comment">注意：</span></span><br><span class="line"><span class="comment">一个表达式中有多个运算符，运算符有优先级，不确定的加小括号，优先级得到提升</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperatorTest01</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">System.out.println(i + j);  <span class="comment">//13</span></span><br><span class="line">System.out.println(i - j);<span class="comment">//7</span></span><br><span class="line">System.out.println(i * j);<span class="comment">//30</span></span><br><span class="line">System.out.println(i / j);<span class="comment">//3</span></span><br><span class="line">System.out.println(i % j);<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1、关于++运算符【自加1】</span></span><br><span class="line"><span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="comment">//运算符可以出现在变量后面【单目运算符】</span></span><br><span class="line">k++;</span><br><span class="line">System.out.println(k);  <span class="comment">//11</span></span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="comment">//++运算符可以出现在变量之前【单目运算符】</span></span><br><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">++y;</span><br><span class="line">System.out.println(y);<span class="comment">//11</span></span><br><span class="line"><span class="comment">//小结：++运算符可以出现在变量前，也可以出现在变量后，无论是变量前还是变量后</span></span><br><span class="line"><span class="comment">//只要++运算结束，该变量值一定会自加1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//++出现在变量后</span></span><br><span class="line"><span class="comment">//规则：先做赋值运算，再对变量中保存的值进行自加1</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a++;</span><br><span class="line">System.out.println(a);<span class="comment">//101</span></span><br><span class="line">System.out.println(b);<span class="comment">//100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//++出现在变量前</span></span><br><span class="line"><span class="comment">//规则：先进行自加1运算，然后在进行赋值运算</span></span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> ++m;</span><br><span class="line">System.out.println(m);<span class="comment">//21</span></span><br><span class="line">System.out.println(n);<span class="comment">//21</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//运算后加1</span></span><br><span class="line"><span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">System.out.println(w++);<span class="comment">//10</span></span><br><span class="line">System.out.println(w);<span class="comment">//11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//先进行自加1操作</span></span><br><span class="line"><span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">System.out.println(++v);<span class="comment">//21</span></span><br><span class="line">System.out.println(v);<span class="comment">//21</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、关于--的操作</span></span><br><span class="line"><span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">11</span>;</span><br><span class="line">System.out.println(p--);<span class="comment">//11</span></span><br><span class="line"><span class="type">int</span> <span class="variable">q</span> <span class="operator">=</span> <span class="number">11</span>;</span><br><span class="line">System.out.println(--q);<span class="comment">//10</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="二、Java中的比较运算符"><a href="#二、Java中的比较运算符" class="headerlink" title="二、Java中的比较运算符"></a>二、Java中的比较运算符</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">逻辑运算符</span></span><br><span class="line"><span class="comment">&gt;大于</span></span><br><span class="line"><span class="comment">&gt;=大于等于</span></span><br><span class="line"><span class="comment">&lt;小于</span></span><br><span class="line"><span class="comment">&lt;=小于等于</span></span><br><span class="line"><span class="comment">==等于</span></span><br><span class="line"><span class="comment">!=不等于</span></span><br><span class="line"><span class="comment">=一个等号代表赋值</span></span><br><span class="line"><span class="comment">==两个等号判断是否相等</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperatorTest02</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(a &gt; b);<span class="comment">//false</span></span><br><span class="line">System.out.println(a &lt; b);<span class="comment">//false</span></span><br><span class="line">System.out.println(a == b);<span class="comment">//true</span></span><br><span class="line">System.out.println(a &gt;= b);<span class="comment">//false</span></span><br><span class="line">System.out.println(a &lt;= b);<span class="comment">//false</span></span><br><span class="line">System.out.println(a != b);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="三、Java中的逻辑运算符"><a href="#三、Java中的逻辑运算符" class="headerlink" title="三、Java中的逻辑运算符"></a>三、Java中的逻辑运算符</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">逻辑运算符：</span></span><br><span class="line"><span class="comment">&amp;逻辑与（两边的算子都为真，结果才是真）</span></span><br><span class="line"><span class="comment">|逻辑或（两边的算子只要有一个是true，结果就为true）</span></span><br><span class="line"><span class="comment">!逻辑非（取反，!false就是true，!true就是false，这是一个单目运算符）</span></span><br><span class="line"><span class="comment">^逻辑异或（两边的算子只要不一样，结果就是true）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&amp;&amp;短路与</span></span><br><span class="line"><span class="comment">||短路或</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1、逻辑运算符要求两边的算子都是布尔类型，并且最终的运算结果也是布尔类型</span></span><br><span class="line"><span class="comment">2、短路与和逻辑与最终的运算结果是相同的，只不过短路与存在短路现象。</span></span><br><span class="line"><span class="comment">3、短路或和逻辑或最终的运算结果是相同的，只不过短路或存在短路现象。</span></span><br><span class="line"><span class="comment">4、什么情况下发生短路现象？</span></span><br><span class="line"><span class="comment">5、什么时候选择使用逻辑与运算符？什么时候选择使用短路与运算符？</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperatorTest03</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> </span><br><span class="line">{</span><br><span class="line">System.out.println(<span class="number">5</span>&gt;<span class="number">3</span> &amp; <span class="number">5</span>&gt;<span class="number">2</span>);<span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="number">5</span>&gt;<span class="number">3</span> &amp; <span class="number">5</span>&gt;<span class="number">6</span>);<span class="comment">//false</span></span><br><span class="line">System.out.println(<span class="number">5</span>&gt;<span class="number">3</span> | <span class="number">5</span>&gt;<span class="number">6</span>);<span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="string">"--------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//逻辑与</span></span><br><span class="line">System.out.println(<span class="literal">true</span> &amp; <span class="literal">true</span>);<span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="literal">true</span> &amp; <span class="literal">false</span>);<span class="comment">//false</span></span><br><span class="line">System.out.println(<span class="string">"--------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//逻辑或</span></span><br><span class="line">System.out.println(<span class="literal">true</span> | <span class="literal">false</span>);<span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="string">"--------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//逻辑非</span></span><br><span class="line">System.out.println(!<span class="literal">true</span>);<span class="comment">//false</span></span><br><span class="line">System.out.println(!<span class="literal">false</span>);<span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="string">"---------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//逻辑异或</span></span><br><span class="line">System.out.println(<span class="literal">true</span> ^ <span class="literal">false</span>);<span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="literal">false</span> ^ <span class="literal">false</span>);<span class="comment">//false</span></span><br><span class="line">System.out.println(<span class="literal">true</span> ^ <span class="literal">true</span>);<span class="comment">//false</span></span><br><span class="line">System.out.println(<span class="string">"---------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//逻辑与和短路与</span></span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//逻辑与：表达式的两边都会走</span></span><br><span class="line">System.out.println(x&lt;y &amp; ++x&lt;y);<span class="comment">//false</span></span><br><span class="line">System.out.println(x);<span class="comment">//11</span></span><br><span class="line">System.out.println(<span class="string">"---------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//短路与：第一个表达式不成立，第二个表达式就不再执行</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">System.out.println(b&lt;a &amp;&amp; ++b&lt;a);<span class="comment">//false</span></span><br><span class="line">System.out.println(b);<span class="comment">//5</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">从某个角度来看，短路与更智能，由于后边的表达式可能不执行，</span></span><br><span class="line"><span class="comment">所以执行效率比较高。这种方式在实际的开发中使用较多。</span></span><br><span class="line"><span class="comment">短路与比逻辑与使用的多。短路与更常用。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">但是：在某些特殊的业务当中，要求运算符两边的算子必须全部执行，</span></span><br><span class="line"><span class="comment">此时必须使用逻辑与，不能使用短路与，使用短路与可能导致右边的表达式不执行。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">什么情况下发生短路或？</span></span><br><span class="line"><span class="comment">第一个表达式执行结果是true，会发生短路或</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">什么情况下发生短路与？</span></span><br><span class="line"><span class="comment">第一个表达式执行结果是false，会发生短路与。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="四、java语言中的赋值运算符"><a href="#四、java语言中的赋值运算符" class="headerlink" title="四、java语言中的赋值运算符"></a>四、java语言中的赋值运算符</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">关于java中的赋值运算符：</span></span><br><span class="line"><span class="comment">赋值类运算符包括两种：</span></span><br><span class="line"><span class="comment">*基本的赋值运算符</span></span><br><span class="line"><span class="comment">=</span></span><br><span class="line"><span class="comment">*扩展的赋值运算符</span></span><br><span class="line"><span class="comment">+=</span></span><br><span class="line"><span class="comment">-=</span></span><br><span class="line"><span class="comment">*=</span></span><br><span class="line"><span class="comment">/=</span></span><br><span class="line"><span class="comment">%=</span></span><br><span class="line"><span class="comment">1、赋值类的运算符优先级：先执行等号右边的表达式，将执行结果赋值给左边</span></span><br><span class="line"><span class="comment">2、注意以下代码：</span></span><br><span class="line"><span class="comment">byte i = 10;</span></span><br><span class="line"><span class="comment">i += 5;等同于：i = (byte)(i+5);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int k = 10;</span></span><br><span class="line"><span class="comment">k += 5;等同于：k = (int)(k+5)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">long x = 10L;</span></span><br><span class="line"><span class="comment">int y = 20;</span></span><br><span class="line"><span class="comment">y += x; 等同于：y = (int)(y+x)</span></span><br><span class="line"><span class="comment">3、扩展类的赋值运算符不改变运算结果类型，假设最初的类型是byte，</span></span><br><span class="line"><span class="comment">无论怎么追加或者追减，最终的数据类型仍然为byte。超出范围时</span></span><br><span class="line"><span class="comment">可能会损失精度</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Operator01</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line"><span class="comment">//基本的赋值运算符</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">10</span>;</span><br><span class="line">System.out.println(i);<span class="comment">//10</span></span><br><span class="line">i = i + <span class="number">5</span>;</span><br><span class="line">System.out.println(i);<span class="comment">//15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展的赋值运算符【+= 运算符可以翻译为】</span></span><br><span class="line">i += <span class="number">5</span>;  <span class="comment">//等同于：i=i+5;</span></span><br><span class="line">System.out.println(i);<span class="comment">//20</span></span><br><span class="line"></span><br><span class="line">i -= <span class="number">5</span>;  <span class="comment">//等同于：i = i - 5</span></span><br><span class="line">System.out.println(i);<span class="comment">//15</span></span><br><span class="line"></span><br><span class="line">i *= <span class="number">2</span>;  <span class="comment">//等同于：i = i*2</span></span><br><span class="line">System.out.println(i);<span class="comment">//30</span></span><br><span class="line"></span><br><span class="line">i /= <span class="number">4</span>; <span class="comment">//等同于：i = i/4</span></span><br><span class="line">System.out.println(i);<span class="comment">//7</span></span><br><span class="line"></span><br><span class="line">i %= <span class="number">2</span>;  <span class="comment">//等同于：i=i % 2</span></span><br><span class="line">System.out.println(i);<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"-----------"</span>);</span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译错误，</span></span><br><span class="line"><span class="comment">//编译器只检查语法，不运行程序，编译器发现b+5的类型是int类型</span></span><br><span class="line"><span class="comment">//大容量向小容量转换需要加强制类型转换，所以以下程序编译报错</span></span><br><span class="line"><span class="comment">//b =b + 5;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//纠正错误</span></span><br><span class="line">b = (<span class="type">byte</span>)(b+<span class="number">5</span>);</span><br><span class="line">System.out.println(b);<span class="comment">//15</span></span><br><span class="line"></span><br><span class="line"><span class="type">byte</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">x += <span class="number">5</span>;<span class="comment">//等同于：x = (byte)(x+5);</span></span><br><span class="line">System.out.println(x);<span class="comment">//15</span></span><br><span class="line"></span><br><span class="line"><span class="type">byte</span> <span class="variable">z</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">z += <span class="number">128</span>;<span class="comment">//等同于：z=(byte)(z+128);</span></span><br><span class="line">System.out.println(z);<span class="comment">//-128</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="五、关于java语言中的“-”运算符"><a href="#五、关于java语言中的“-”运算符" class="headerlink" title="五、关于java语言中的“+”运算符"></a>五、关于java语言中的“+”运算符</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">关于java中的"+"运算符：</span></span><br><span class="line"><span class="comment">1、+运算符在java中有两个作用</span></span><br><span class="line"><span class="comment">* 加法作用</span></span><br><span class="line"><span class="comment">* 字符串的链接运算</span></span><br><span class="line"><span class="comment">2、当“+”运算符两边的数据都是数字的话，一定是进行加法运算。</span></span><br><span class="line"><span class="comment">3、当“+”运算符两边的数据只要有一个数据是字符串，一定会进行字符串的拼接运算。</span></span><br><span class="line"><span class="comment">并且，链接之后的结果还是是一个字符串类型。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">数字 + 数字 -----&gt;  数字【求和】</span></span><br><span class="line"><span class="comment">数字 + “字符串”  -------&gt; “字符串”【字符串拼接】</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4、在一个表达式当中可以出现多个“+”，在没有小括号时，按照从左到右的顺序执行</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Operator02</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line"><span class="comment">//要求：在屏幕中输出10+20=30</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">System.out.println(i+<span class="string">"+"</span>+j+<span class="string">"="</span>+(i+j));</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串用法</span></span><br><span class="line"><span class="type">String</span><span class="variable">username</span> <span class="operator">=</span> <span class="string">"zhangsan"</span>;</span><br><span class="line">System.out.println(<span class="string">"欢迎"</span>+username+<span class="string">"回家！"</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">"lisi"</span>;</span><br><span class="line">System.out.println(<span class="string">"欢迎"</span>+name+<span class="string">"回家！"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="六、java语言中的三元运算符"><a href="#六、java语言中的三元运算符" class="headerlink" title="六、java语言中的三元运算符"></a>六、java语言中的三元运算符</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">三元运算符/三目运算符/条件运算符</span></span><br><span class="line"><span class="comment">1、语法规则：</span></span><br><span class="line"><span class="comment">布尔表达式 ? 表达式1 : 表达式2</span></span><br><span class="line"><span class="comment">2、三元运算符的执行原理？</span></span><br><span class="line"><span class="comment">当布尔表达式的结果是true时，选择表达式1作为整个表达式的结果</span></span><br><span class="line"><span class="comment">当布尔表达式的结果是false的时候，选择表达式2作为整个表达式的执行结果</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Operator03</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line"><span class="comment">// 编译报错：不是完整的语句</span></span><br><span class="line"><span class="comment">// 10;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译报错：不是完整的语句</span></span><br><span class="line"><span class="comment">// '男';</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译报错：不是完整的语句</span></span><br><span class="line"><span class="comment">// boolean sex = true;</span></span><br><span class="line"><span class="comment">// sex ? '男':'女';</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//编译通过</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">sex</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> sex ? <span class="string">'男'</span>:<span class="string">'女'</span>;</span><br><span class="line">System.out.println(c);<span class="comment">// 男</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误: 不兼容的类型: 条件表达式中的类型错误</span></span><br><span class="line"><span class="comment">// char m = sex ? "男":'女';</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 纠正</span></span><br><span class="line">System.out.println(sex ? <span class="string">'男'</span>:<span class="string">"女的"</span>); <span class="comment">//男</span></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p> sex = true;<br>        // sex ? ‘男’:’女’;</p><pre><code>    //编译通过    boolean sex = true;    char c = sex ? '男':'女';    System.out.println(c);// 男    // 错误: 不兼容的类型: 条件表达式中的类型错误    // char m = sex ? "男":'女';    // 纠正    System.out.println(sex ? '男':"女的"); //男}</code></pre><p>}</p><pre><code></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>分支语句</title>
      <link href="/2022/05/19/treasurebox/java/1.java-ji-chu/4.fen-zhi-yu-ju/"/>
      <url>/2022/05/19/treasurebox/java/1.java-ji-chu/4.fen-zhi-yu-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h2><p>分支语句又称选择语句，当满足某个条件时，就进行某种操作。Java中有三种选择结构：</p><ul><li>if…else if..else</li><li>while…</li><li>do…while</li></ul><h3 id="一、java语言中的if分支语句"><a href="#一、java语言中的if分支语句" class="headerlink" title="一、java语言中的if分支语句"></a>一、java语言中的if分支语句</h3><p><strong>java语言中有if，else if和else三个if语法，与python不同的是没有elif的用法，只有else if。</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">关于java语言中的if语句，属于选择结构，if语句又被称为分支语句/条件控制语句</span></span><br><span class="line"><span class="comment">1、if语句的语法结构：四种编写方式</span></span><br><span class="line"><span class="comment">第一种：</span></span><br><span class="line"><span class="comment">    if(布尔表达式){</span></span><br><span class="line"><span class="comment">java语句;</span></span><br><span class="line"><span class="comment">java语句;</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment">第二种：</span></span><br><span class="line"><span class="comment">if(布尔表达式){</span></span><br><span class="line"><span class="comment">java语句;</span></span><br><span class="line"><span class="comment">java语句;</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">}else{</span></span><br><span class="line"><span class="comment">java语句;</span></span><br><span class="line"><span class="comment">java语句;</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment">第三种：</span></span><br><span class="line"><span class="comment">if(布尔表达式){</span></span><br><span class="line"><span class="comment">java语句;</span></span><br><span class="line"><span class="comment">java语句;</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">}else if(布尔表达式){</span></span><br><span class="line"><span class="comment">java语句;</span></span><br><span class="line"><span class="comment">java语句;</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">}else if(布尔表达式){</span></span><br><span class="line"><span class="comment">java语句;</span></span><br><span class="line"><span class="comment">java语句;</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">}else if(布尔表达式){</span></span><br><span class="line"><span class="comment">java语句;</span></span><br><span class="line"><span class="comment">java语句;</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">}......</span></span><br><span class="line"><span class="comment">第四种：</span></span><br><span class="line"><span class="comment">if(布尔表达式){</span></span><br><span class="line"><span class="comment">java语句;</span></span><br><span class="line"><span class="comment">java语句;</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">}else if(布尔表达式){</span></span><br><span class="line"><span class="comment">java语句;</span></span><br><span class="line"><span class="comment">java语句;</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">}else{</span></span><br><span class="line"><span class="comment">java语句;</span></span><br><span class="line"><span class="comment">java语句;</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2、重点：对于java中的if语句来说，只要一个分支执行，整个if语句全部结束</span></span><br><span class="line"><span class="comment">3、注意：以上的第二种编写方式和第四种编写方式都带有else分支，</span></span><br><span class="line"><span class="comment"> 可以百分百保证一定会有分支执行。</span></span><br><span class="line"><span class="comment">4、所有的控制语句都是可以嵌套使用的，只要是合理嵌套都行</span></span><br><span class="line"><span class="comment">if(){</span></span><br><span class="line"><span class="comment">if(){</span></span><br><span class="line"><span class="comment">if(){</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment">}else{</span></span><br><span class="line"><span class="comment">if(){</span></span><br><span class="line"><span class="comment">if(){</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment">注意：嵌套使用的时候代码格式要保证完美【该缩进的时候就要缩进】</span></span><br><span class="line"><span class="comment">5、if语句的分支中有且只有一条语句时，大括号可以省略不写。</span></span><br><span class="line"><span class="comment">if(true/false){</span></span><br><span class="line"><span class="comment">java语句;</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment">可以写成：</span></span><br><span class="line"><span class="comment">if(true/false)  一条java语句;</span></span><br><span class="line"><span class="comment">这种方式不推荐使用，能看懂就行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">iftest01</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、需求所在位置的五公里之内有肯德基的话，去KFC吃午饭</span></span><br><span class="line"><span class="type">double</span> <span class="variable">distance</span> <span class="operator">=</span> <span class="number">4.0</span>;</span><br><span class="line"><span class="keyword">if</span>(distance&lt;<span class="number">5</span>){</span><br><span class="line">System.out.println(<span class="string">"去吃肯德基。"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="练习1、：用户输入年龄，判断位于哪个年龄段："><a href="#练习1、：用户输入年龄，判断位于哪个年龄段：" class="headerlink" title="练习1、：用户输入年龄，判断位于哪个年龄段："></a><strong>练习1、：用户输入年龄，判断位于哪个年龄段：</strong></h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">需求：从键盘输入一个整数</span></span><br><span class="line"><span class="comment">[0-5]幼儿</span></span><br><span class="line"><span class="comment">[6-10]少儿</span></span><br><span class="line"><span class="comment">[11-18]青少年</span></span><br><span class="line"><span class="comment">[19-35]青年</span></span><br><span class="line"><span class="comment">[36-55]中年</span></span><br><span class="line"><span class="comment">[56-150]老年</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">iftest02</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、接收键盘输入：年龄</span></span><br><span class="line">java.util.<span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(System.in);</span><br><span class="line">System.out.print(<span class="string">"请输入您的年龄："</span>);<span class="comment">//输入提示信息</span></span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> s.nextInt();<span class="comment">//停下来等待用户输入，输入之后自动换行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、根据需求进行业务逻辑判断</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">"老年"</span>;</span><br><span class="line"><span class="keyword">if</span>(age&lt;<span class="number">0</span> || age&gt;<span class="number">150</span>){</span><br><span class="line">str = <span class="string">"您输入的年龄不合法，年龄需要在【0-150】之间"</span>;</span><br><span class="line">System.out.println(str);</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line"><span class="keyword">if</span>(age&lt;=<span class="number">5</span>){</span><br><span class="line">str = <span class="string">"幼儿"</span>;</span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(age&lt;=<span class="number">10</span>){</span><br><span class="line">str = <span class="string">"少儿"</span>;</span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(age&lt;=<span class="number">18</span>){</span><br><span class="line">str = <span class="string">"青少年"</span>;</span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(age&lt;=<span class="number">35</span>){</span><br><span class="line">str = <span class="string">"青年"</span>;</span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(age&lt;=<span class="number">55</span>){</span><br><span class="line">str = <span class="string">"中年"</span>;</span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(age&lt;=<span class="number">150</span>){</span><br><span class="line">str = <span class="string">"老年"</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"您现在处于"</span>+str+<span class="string">"阶段"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="练习2：输入天气和性别进行判断"><a href="#练习2：输入天气和性别进行判断" class="headerlink" title="练习2：输入天气和性别进行判断"></a><strong>练习2：输入天气和性别进行判断</strong></h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">需求：从键盘输入一个整数</span></span><br><span class="line"><span class="comment">[0-5]幼儿</span></span><br><span class="line"><span class="comment">[6-10]少儿</span></span><br><span class="line"><span class="comment">[11-18]青少年</span></span><br><span class="line"><span class="comment">[19-35]青年</span></span><br><span class="line"><span class="comment">[36-55]中年</span></span><br><span class="line"><span class="comment">[56-150]老年</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">iftest02</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、接收键盘输入：年龄</span></span><br><span class="line">java.util.<span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(System.in);</span><br><span class="line">System.out.print(<span class="string">"请输入您的年龄："</span>);<span class="comment">//输入提示信息</span></span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> s.nextInt();<span class="comment">//停下来等待用户输入，输入之后自动换行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、根据需求进行业务逻辑判断</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">"老年"</span>;</span><br><span class="line"><span class="keyword">if</span>(age&lt;<span class="number">0</span> || age&gt;<span class="number">150</span>){</span><br><span class="line">str = <span class="string">"您输入的年龄不合法，年龄需要在【0-150】之间"</span>;</span><br><span class="line">System.out.println(str);</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line"><span class="keyword">if</span>(age&lt;=<span class="number">5</span>){</span><br><span class="line">str = <span class="string">"幼儿"</span>;</span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(age&lt;=<span class="number">10</span>){</span><br><span class="line">str = <span class="string">"少儿"</span>;</span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(age&lt;=<span class="number">18</span>){</span><br><span class="line">str = <span class="string">"青少年"</span>;</span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(age&lt;=<span class="number">35</span>){</span><br><span class="line">str = <span class="string">"青年"</span>;</span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(age&lt;=<span class="number">55</span>){</span><br><span class="line">str = <span class="string">"中年"</span>;</span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(age&lt;=<span class="number">150</span>){</span><br><span class="line">str = <span class="string">"老年"</span>;</span><br><span class="line">}</span><br><span class="line">System.out.println(<span class="string">"您现在处于"</span>+str+<span class="string">"阶段"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="3、if后只有一条语句的用法"><a href="#3、if后只有一条语句的用法" class="headerlink" title="3、if后只有一条语句的用法"></a><strong>3、if后只有一条语句的用法</strong></h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">iftest05</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line"><span class="type">boolean</span> <span class="variable">sex</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(sex){</span><br><span class="line">System.out.println(<span class="string">"男"</span>);</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">System.out.println(<span class="string">"女"</span>);</span><br><span class="line">}</span><br><span class="line">sex = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(sex) System.out.println(<span class="string">"男"</span>); <span class="keyword">else</span> System.out.println(<span class="string">"女"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------------------------</span></span><br><span class="line"><span class="comment">//以下代码会报错：错误: 有 'if', 但是没有 'else'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//原因：if后边可以不加大括号，紧跟着的那句话包含在if里面，</span></span><br><span class="line"><span class="comment">//导致if跟else之间有其他语句</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">if (sex)</span></span><br><span class="line"><span class="comment">System.out.println("男");</span></span><br><span class="line"><span class="comment">System.out.println("1111111111111");</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">System.out.println("女");</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="二、switch语句的用法"><a href="#二、switch语句的用法" class="headerlink" title="二、switch语句的用法"></a>二、switch语句的用法</h3><h4 id="练习1：使用switch判断日期："><a href="#练习1：使用switch判断日期：" class="headerlink" title="练习1：使用switch判断日期："></a>练习1：使用switch判断日期：</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">关于switch语句：</span></span><br><span class="line"><span class="comment">1、switch语句也属于选择结构，也是分支语句</span></span><br><span class="line"><span class="comment">2、switch语句的语法结构，case标签内容不能重复：</span></span><br><span class="line"><span class="comment">一个完整的switch语句应该这样编写：</span></span><br><span class="line"><span class="comment">switch(int或String类型的字面值或变量){</span></span><br><span class="line"><span class="comment">case int或String类型的字面值或变量:</span></span><br><span class="line"><span class="comment">java语句;</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">break;</span></span><br><span class="line"><span class="comment">case int或String类型的字面值或变量:</span></span><br><span class="line"><span class="comment">java语句;</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">break;</span></span><br><span class="line"><span class="comment">case int或String类型的字面值或变量:</span></span><br><span class="line"><span class="comment">java语句;</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">break;</span></span><br><span class="line"><span class="comment">default:</span></span><br><span class="line"><span class="comment">java语句;</span></span><br><span class="line"><span class="comment">....</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment">3、switch语句执行原理：</span></span><br><span class="line"><span class="comment">switch后面小括号当中的"数据"和case后面的"数据"进行一一匹配，匹配成功的分支执行</span></span><br><span class="line"><span class="comment">按照自上而下的顺序依次匹配。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4、匹配成功的分支执行，分支当中有break语句时，整个switch语句终止。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">5、匹配成功的分支执行，分支当中没有break语句时，直接进入下一个分支执行（不进行匹配）。</span></span><br><span class="line"><span class="comment">这种现象称为case穿透现象。【为防止穿透现象每个case语句都需要提供break语句】</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">6、所有的case都不匹配，有default时，走default分支的内容。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">7、switch后面和case后面只能是int或String类型的数据，不能探测其他类型。</span></span><br><span class="line"><span class="comment">* byte、short、char也可以直接写到switch和case后面，因为他们可以进行自动类型转换。</span></span><br><span class="line"><span class="comment">  byte、short、char可以自动转换成int类型。</span></span><br><span class="line"><span class="comment">* JDK6的，switch和case后面只能探测int类型</span></span><br><span class="line"><span class="comment">* JDK7之后包括7，引入新特性，switch关键字和case关键字后面可以探测int或String类型。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">8、case可以合并：</span></span><br><span class="line"><span class="comment">int i =10;</span></span><br><span class="line"><span class="comment">switch(i){</span></span><br><span class="line"><span class="comment">case 1: case 2: case 3:</span></span><br><span class="line"><span class="comment">System.out.println("Hello World!")</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">switchTest01</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">//当输入10时，这种情况就是case穿透，没有遇到break时会一直向下运行</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">java.util.Scanner i = new java.util.Scanner(System.in);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">System.out.print("请输入年龄：");</span></span><br><span class="line"><span class="comment">int age = i.nextInt();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">switch(age){</span></span><br><span class="line"><span class="comment">case 10:</span></span><br><span class="line"><span class="comment">System.out.println("未成年！");</span></span><br><span class="line"><span class="comment">case 20:</span></span><br><span class="line"><span class="comment">System.out.println("已经成年");</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//较完整的switch语句</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">接收一个用户输入：</span></span><br><span class="line"><span class="comment">1表示星期一</span></span><br><span class="line"><span class="comment">2表示星期二</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">7表示星期日</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">java.util.<span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(System.in);</span><br><span class="line">System.out.print(<span class="string">"请输入数字："</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> s.nextInt();</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">"输入有误"</span>;</span><br><span class="line"><span class="keyword">switch</span> (num){</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">str = <span class="string">"星期一"</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">str = <span class="string">"星期二"</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">str = <span class="string">"星期三"</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">str = <span class="string">"星期四"</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">str = <span class="string">"星期五"</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">str = <span class="string">"星期六"</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">str = <span class="string">"星期日"</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">str = <span class="string">"输入有误"</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">System.out.println(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">// case合并</span></span><br><span class="line"><span class="keyword">switch</span> (num){</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">str = <span class="string">"星期一"</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">str = <span class="string">"星期二"</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">str = <span class="string">"星期三"</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">str = <span class="string">"星期四"</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">str = <span class="string">"星期五"</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">str = <span class="string">"星期六"</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">str = <span class="string">"星期日"</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">str = <span class="string">"输入有误"</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">System.out.println(str);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="练习2：判断String类型："><a href="#练习2：判断String类型：" class="headerlink" title="练习2：判断String类型："></a>练习2：判断String类型：</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">switchTest02</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">//从键盘输入</span></span><br><span class="line">java.util.<span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(System.in);</span><br><span class="line">System.out.print(<span class="string">"请输入星期几："</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">dayOfweek</span> <span class="operator">=</span> s.next();</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以传字符串，case和default的位置不会影响结果</span></span><br><span class="line"><span class="keyword">switch</span>(dayOfweek){</span><br><span class="line"><span class="keyword">case</span> <span class="string">"星期一"</span>:</span><br><span class="line">System.out.println(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">System.out.println(<span class="string">"输入不合法"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"星期二"</span>:</span><br><span class="line">System.out.println(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="练习3：判断字符型"><a href="#练习3：判断字符型" class="headerlink" title="练习3：判断字符型"></a>练习3：判断字符型</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">switchTest03</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">//char a = 'A';</span></span><br><span class="line"><span class="type">char</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">'B'</span>;</span><br><span class="line"><span class="comment">//char c = 'C';</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(b){</span><br><span class="line"><span class="keyword">case</span> <span class="string">'A'</span>:</span><br><span class="line">System.out.println(<span class="string">"A"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">66</span>:</span><br><span class="line">System.out.println(<span class="string">"B"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'C'</span>:</span><br><span class="line">System.out.println(<span class="string">"C"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">System.out.println(<span class="string">"输入错了"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="练习4：使用switch搭建简易计算器："><a href="#练习4：使用switch搭建简易计算器：" class="headerlink" title="练习4：使用switch搭建简易计算器："></a>练习4：使用switch搭建简易计算器：</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">实现计算器当中的</span></span><br><span class="line"><span class="comment">+</span></span><br><span class="line"><span class="comment">-</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">/</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">实现思路：</span></span><br><span class="line"><span class="comment">1、所有数据从键盘输入</span></span><br><span class="line"><span class="comment">2、使用switch语句记性判断</span></span><br><span class="line"><span class="comment">3、需要从控制台输入三次</span></span><br><span class="line"><span class="comment">* 第一个数字</span></span><br><span class="line"><span class="comment">* 运算符</span></span><br><span class="line"><span class="comment">* 第二个数字</span></span><br><span class="line"><span class="comment">最终效果：</span></span><br><span class="line"><span class="comment">欢迎使用简易计算器系统：</span></span><br><span class="line"><span class="comment">请输入第一个数字：10</span></span><br><span class="line"><span class="comment">请输入运算符：+</span></span><br><span class="line"><span class="comment">请输入第二个数字：20</span></span><br><span class="line"><span class="comment">运算结果：10 + 20 = 30</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">switchTest04</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line">System.out.println(<span class="string">"欢迎使用简易计算机系统："</span>);</span><br><span class="line"></span><br><span class="line">java.util.<span class="type">Scanner</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(System.in);</span><br><span class="line">System.out.print(<span class="string">"请输入第一个数字："</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> f.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">"请输入运算符："</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">operator</span> <span class="operator">=</span> f.next();</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">"请输入第二个数字："</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> f.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span>(operator){</span><br><span class="line"><span class="keyword">case</span> <span class="string">"+"</span>:</span><br><span class="line">result = num1+num2;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"-"</span>:</span><br><span class="line">result = num1-num2;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"*"</span>:</span><br><span class="line">result = num1*num2;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"/"</span>:</span><br><span class="line">result = num1/num2;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"%"</span>:</span><br><span class="line">result = num1%num2;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">System.out.println(<span class="string">"输入有误"</span>);</span><br><span class="line">}</span><br><span class="line">System.out.println(num1 + operator + num2 + <span class="string">"="</span> + result);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="练习5：使用switch判断成绩区间"><a href="#练习5：使用switch判断成绩区间" class="headerlink" title="练习5：使用switch判断成绩区间"></a>练习5：使用switch判断成绩区间</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">假设系统给定考生成绩，请判断该考生的成绩等级：</span></span><br><span class="line"><span class="comment">1、有效成绩范围：【0-100】</span></span><br><span class="line"><span class="comment">2、考试成绩可能带有小数</span></span><br><span class="line"><span class="comment">3、考试成绩和等级之间对照关系：</span></span><br><span class="line"><span class="comment">[90-100]     A</span></span><br><span class="line"><span class="comment">[80-90]      B</span></span><br><span class="line"><span class="comment">[70-80]      C</span></span><br><span class="line"><span class="comment">[60-70]      D</span></span><br><span class="line"><span class="comment">[0-60]       E</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">switchTest05</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line"></span><br><span class="line">java.util.<span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(System.in);</span><br><span class="line">System.out.print(<span class="string">"请输入成绩："</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 除以10得到范围</span></span><br><span class="line"><span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> s.nextInt()/<span class="number">10</span>;</span><br><span class="line">System.out.println(score);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">"输入有误"</span>;</span><br><span class="line"><span class="keyword">switch</span>(score){</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>: <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">result = <span class="string">"A"</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">result = <span class="string">"B"</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">result = <span class="string">"C"</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">result = <span class="string">"D"</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">result = <span class="string">"E"</span>;</span><br><span class="line">}</span><br><span class="line">System.out.println(result);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>public static void main(String[] args){</p><pre><code>    java.util.Scanner s = new java.util.Scanner(System.in);    System.out.print("请输入成绩：");        // 除以10得到范围    int score = s.nextInt()/10;    System.out.println(score);        String result = "输入有误";    switch(score){        case 9: case 10:            result = "A";        case 8:            result = "B";        case 7:            result = "C";        case 6:            result = "D";        default:            result = "E";    }    System.out.println(result);}</code></pre><p>}</p><pre><code></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>循环语句</title>
      <link href="/2022/05/19/treasurebox/java/1.java-ji-chu/5.xun-huan-yu-ju/"/>
      <url>/2022/05/19/treasurebox/java/1.java-ji-chu/5.xun-huan-yu-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p><strong>循环结构：</strong><br>        在程序当中总有一些需要反复执行的代码，假设没有循环结构，这些重复执行的代码需要重复编写，代码无法得到重复使用。所以多数编程语言都是支持循环结构的，将来把需要反复执行的代码片段放到“循环体”，再联合计数器，共同控制这段需要反复执行的代码。</p><p><strong>在Java中循环结构分为三种：</strong></p><ul><li><strong>for循环</strong></li><li><strong>while循环</strong></li><li><strong>do…while循环</strong></li></ul><h3 id="一、for循环"><a href="#一、for循环" class="headerlink" title="一、for循环"></a>一、for循环</h3><ol><li><h4 id="for循环基础语法"><a href="#for循环基础语法" class="headerlink" title="for循环基础语法"></a>for循环基础语法</h4> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1、当前示例主要讲解for循环。for循环的语法结构如下：</span></span><br><span class="line"><span class="comment">语法结构：</span></span><br><span class="line"><span class="comment">for(初始化表达式;布尔表达式;更新表达式){</span></span><br><span class="line"><span class="comment">//需要重复执行的代码片段【由java语句构成】</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2、for循环的执行过程/执行原理【*****】</span></span><br><span class="line"><span class="comment">1、初始化表达式、布尔表达式、更新表达式都不是必须的。【两个分号(;)必须要有】</span></span><br><span class="line"><span class="comment">2、初始化表达式最先执行，并且在整个for循环当中只执行一次。</span></span><br><span class="line"><span class="comment">3、布尔表达式必须是true/false,不能是其他值</span></span><br><span class="line"><span class="comment">4、for循环的执行过程：</span></span><br><span class="line"><span class="comment">* 先执行初始化表达式，并且该表达式只执行一次</span></span><br><span class="line"><span class="comment">* 判断布尔表达式的结果是true还是false</span></span><br><span class="line"><span class="comment">- 布尔表达式true</span></span><br><span class="line"><span class="comment">* 执行循环体</span></span><br><span class="line"><span class="comment">* 执行更新表达式</span></span><br><span class="line"><span class="comment">- 布尔表达式true</span></span><br><span class="line"><span class="comment">* 执行循环体</span></span><br><span class="line"><span class="comment">* 执行更新表达式</span></span><br><span class="line"><span class="comment">* 判断布尔表达式</span></span><br><span class="line"><span class="comment">- 布尔表达式false</span></span><br><span class="line"><span class="comment">循环结束</span></span><br><span class="line"><span class="comment">- 布尔表达式false</span></span><br><span class="line"><span class="comment">循环结束</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForTest01</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用循环结构代替所有需要反复执行的代码块</span></span><br><span class="line"><span class="comment">//使用循环语句可以使代码量减少</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">10</span>;i++){</span><br><span class="line">System.out.println(i);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无限循环</span></span><br><span class="line"><span class="keyword">for</span>(;;){</span><br><span class="line">System.out.println(<span class="string">"无限循环"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="for循环中变量的作用域"><a href="#for循环中变量的作用域" class="headerlink" title="for循环中变量的作用域"></a>for循环中变量的作用域</h4> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">for循环变量的作用域</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForTest02</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下循环中，i变量的作用域仅限于当前循环的内部使用</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++){</span><br><span class="line">System.out.println(<span class="string">"i----------&gt;"</span>+i);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// System.out.println(i); //编译错误：找不到i</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// j变量作用于整个main函数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;j&lt;=<span class="number">10</span>;j++){</span><br><span class="line">System.out.println(<span class="string">"j++++++&gt;"</span>+j);</span><br><span class="line">}</span><br><span class="line">System.out.println(<span class="string">"j---------&gt;"</span>+j); <span class="comment">//11</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// k变量也作用域整个main函数</span></span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;=<span class="number">10</span>;k++){</span><br><span class="line">System.out.println(<span class="string">"k------"</span>+k);</span><br><span class="line">}</span><br><span class="line">System.out.println(<span class="string">"k+++++++"</span>+k);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="for循环练习"><a href="#for循环练习" class="headerlink" title="for循环练习"></a>for循环练习</h4> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForTest03</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出1-10中所有的奇数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i+=<span class="number">2</span>){</span><br><span class="line">System.out.println(<span class="string">"i++++++"</span>+i); <span class="comment">//1 3 5 7 9</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出1-10中所有的偶数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">10</span>;i+=<span class="number">2</span>){</span><br><span class="line">System.out.println(<span class="string">"i---------"</span>+i); <span class="comment">//2 4 6 8 10 </span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递减输出 10-1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">10</span>;i&gt;<span class="number">0</span>;i--){</span><br><span class="line">System.out.println(<span class="string">"i======&gt;"</span>+i); <span class="comment">//10 9 8 7 6 5 4 3 2 1</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">100</span>;i&gt;=<span class="number">50</span>;i-=<span class="number">10</span>){</span><br><span class="line">System.out.println(<span class="string">"i--------&gt;"</span>+i);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下两个不一样</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;){</span><br><span class="line">System.out.println(<span class="string">"i--------&gt;"</span>+i);</span><br><span class="line">i++;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;){</span><br><span class="line">i++;</span><br><span class="line">System.out.println(<span class="string">"i--------&gt;"</span>+i);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="for循环案例练习"><a href="#for循环案例练习" class="headerlink" title="for循环案例练习"></a>for循环案例练习</h4> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">循环语句和判断语句嵌套使用【for if】</span></span><br><span class="line"><span class="comment">1、判断奇数的两种方法；</span></span><br><span class="line"><span class="comment">优先使用循环次数少的方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForTest04</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i+=<span class="number">2</span>){</span><br><span class="line">System.out.println(i+<span class="string">"是奇数"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"-----------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找出1~10中所有的奇数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++){</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">1</span>){</span><br><span class="line">System.out.println(i+<span class="string">"是奇数"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="输出100以内奇数的和"><a href="#输出100以内奇数的和" class="headerlink" title="输出100以内奇数的和"></a>输出100以内奇数的和</h4> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForTest05</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i+=<span class="number">2</span>){</span><br><span class="line"></span><br><span class="line"><span class="comment">// i一定是奇数</span></span><br><span class="line"><span class="comment">// 累加求和</span></span><br><span class="line">j += i;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 整个循环结束之后，输出和的值</span></span><br><span class="line">System.out.println(<span class="string">"100以内奇数的和为："</span>+j);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="双重循环输出9-9乘法表"><a href="#双重循环输出9-9乘法表" class="headerlink" title="双重循环输出9*9乘法表"></a>双重循环输出9*9乘法表</h4> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForTest05</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++){  </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++){</span><br><span class="line">System.out.print(j+<span class="string">"*"</span>+i+<span class="string">"="</span>+i*j+<span class="string">'\t'</span>);</span><br><span class="line">}</span><br><span class="line">System.out.println(); <span class="comment">// 输出一个换行</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="输出1-10000中的所有素数"><a href="#输出1-10000中的所有素数" class="headerlink" title="输出1~10000中的所有素数"></a>输出1~10000中的所有素数</h4> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">编写for循环找出1~10000中所有的素数</span></span><br><span class="line"><span class="comment">要求每8个换一行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForTest07</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">10000</span>;i++){</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置标志位</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isSushu</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;j&lt;=i/<span class="number">2</span>;j++){</span><br><span class="line"><span class="keyword">if</span>(i%j == <span class="number">0</span>){</span><br><span class="line">isSushu = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 第一种方法，使用三目运算符</span></span><br><span class="line"><span class="comment">// System.out.println(isSushu ?i+"是素数":i+"不是素数");</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种方法</span></span><br><span class="line"><span class="keyword">if</span>(isSushu){</span><br><span class="line">System.out.print(i+<span class="string">"\t"</span>);</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">if</span> (count%<span class="number">8</span>==<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">System.out.println();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">System.out.println(<span class="string">"素数共有："</span>+count);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="二、while循环"><a href="#二、while循环" class="headerlink" title="二、while循环"></a>二、while循环</h3><ol><li><h4 id="while循环基础语法"><a href="#while循环基础语法" class="headerlink" title="while循环基础语法"></a>while循环基础语法</h4> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">while循环语句：</span></span><br><span class="line"><span class="comment">1、while循环的语法结构</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">while(布尔表达式){</span></span><br><span class="line"><span class="comment">循环体</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2、while循环的执行原理</span></span><br><span class="line"><span class="comment">先判断布尔表达式的结果：</span></span><br><span class="line"><span class="comment">* true</span></span><br><span class="line"><span class="comment">执行循环体</span></span><br><span class="line"><span class="comment">* 判断布尔表达式的结果</span></span><br><span class="line"><span class="comment">* true</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">* false</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">* false</span></span><br><span class="line"><span class="comment">- 循环结束</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3、while循环的循环次数</span></span><br><span class="line"><span class="comment">0 ~ N次</span></span><br><span class="line"><span class="comment">注意：while循环的循环体可能执行次数为0次</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WhileTest01</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">//无限循环</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">while (true)</span></span><br><span class="line"><span class="comment">{</span></span><br><span class="line"><span class="comment">System.out.println("hello");</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// 编译器检测到该程序永远都无法被访问</span></span><br><span class="line"><span class="comment">// 错误: 无法访问的语句</span></span><br><span class="line"><span class="comment">System.out.println("world!");</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//改为10&gt;3时，无限循环下边的代码就会编译报错</span></span><br><span class="line"><span class="keyword">while</span>(i&gt;j){</span><br><span class="line">System.out.println(<span class="string">"呵呵"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下程序不会编译报错</span></span><br><span class="line">System.out.println(<span class="string">"Hello World"</span>);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="练习：while循环输出1-10"><a href="#练习：while循环输出1-10" class="headerlink" title="练习：while循环输出1~10"></a>练习：while循环输出1~10</h4> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用while循环输出1~10</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WhileTest02</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">10</span>){</span><br><span class="line">System.out.println(<span class="string">"i-----&gt;"</span>+i);<span class="comment">//1 2 3 4 5 6 7 8 9 10</span></span><br><span class="line">i++;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"end----&gt;"</span>+i);</span><br><span class="line">System.out.println(<span class="string">"--------------------------&gt;"</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">while</span>(j&gt;<span class="number">0</span>){</span><br><span class="line">System.out.println(j--);<span class="comment">//10 9 8 7 6 5 4 3 2 1</span></span><br><span class="line">}</span><br><span class="line">System.out.println(<span class="string">"end j------&gt;"</span>+j);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">while</span>(k &gt;= <span class="number">0</span>){</span><br><span class="line">System.out.println(--k);<span class="comment">//9 8 7 6 5 4 3 2 1 0 -1</span></span><br><span class="line">}</span><br><span class="line">System.out.println(<span class="string">"end k------&gt;"</span>+k);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="三、do…while循环"><a href="#三、do…while循环" class="headerlink" title="三、do…while循环"></a>三、do…while循环</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">do...while循环：</span></span><br><span class="line"><span class="comment">1、do...while循环的语法结构</span></span><br><span class="line"><span class="comment">do{</span></span><br><span class="line"><span class="comment">循环体;</span></span><br><span class="line"><span class="comment">}while(布尔表达式);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2、do...while循环的执行原理</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3、do...while循环的执行次数：</span></span><br><span class="line"><span class="comment">循环体代码片段执行次数是：1-N次【至少1次】</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4、使用do...while循环的注意事项：</span></span><br><span class="line"><span class="comment">do...while循环语句最终有一个"分号(;)"</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoWhileTest01</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">10</span>;</span><br><span class="line"><span class="keyword">do</span>{</span><br><span class="line"><span class="comment">//至少执行一次</span></span><br><span class="line">System.out.println(<span class="string">"i-------&gt;"</span>+i);</span><br><span class="line">i++;</span><br><span class="line">}<span class="keyword">while</span>(i&gt;<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"--------------"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 完整的do...while语句</span></span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span>{</span><br><span class="line">System.out.println(<span class="string">"j--------&gt;"</span>+j);</span><br><span class="line">j++;</span><br><span class="line">}<span class="keyword">while</span>(j&lt;<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="四、break用法"><a href="#四、break用法" class="headerlink" title="四、break用法"></a>四、break用法</h3><p>break表示终止循环，可以终结当前循环，也可以终止某个命名的循环。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">break语句：</span></span><br><span class="line"><span class="comment">1、break是java语句当中的关键字，被翻译为“终端/折断”</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2、break + ";"可以成为一个单独的完整的java语句： break;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3、break语句使用在switch语句当中，用来终止switch语句执行。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4、break语句同样可以使用在循环体中，用来终止循环的执行。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">5、break可以终止哪个循环呢？</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">6、使用在for、while、do...while循环语句当中，当某个条件成立时，</span></span><br><span class="line"><span class="comment">用来跳出循环。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">7、默认情况下：break中断最近的循环语句，</span></span><br><span class="line"><span class="comment">可以给循环命名，使break中断某个循环</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BreakTest01</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、单个循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++){</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">5</span>){</span><br><span class="line"><span class="comment">// 当 i=5 时跳出循环</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">System.out.println(<span class="string">"i-------&gt;"</span>+i);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分割线</span></span><br><span class="line">System.out.println(<span class="string">"————————————————————————————————&gt;"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、双层循环终止当前循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++){</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;<span class="number">10</span>;k++){</span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">5</span>){</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">System.out.println(<span class="string">"k----------"</span>+k);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">System.out.println(<span class="string">"-------------------"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3、给循环命名</span></span><br><span class="line">for1:<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++){</span><br><span class="line">for2:<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;<span class="number">10</span>;k++){</span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">5</span>){</span><br><span class="line"><span class="keyword">break</span> for1;</span><br><span class="line">}</span><br><span class="line">System.out.println(<span class="string">"k----------"</span>+k);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">System.out.println(<span class="string">"Hello world！-----------"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="五、continue用法"><a href="#五、continue用法" class="headerlink" title="五、continue用法"></a>五、continue用法</h3><p>continue表示终结本次循环，在continue之后的代码不再执行。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">continue语句：</span></span><br><span class="line"><span class="comment">1、continue表示：继续下一次循环</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2、continue也是一个continue关键字加一个分号(;)构成的一个单独的完整的java语句，</span></span><br><span class="line"><span class="comment">主要出现循环语句当中用来控制循环的次数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3、break和continue的区别：</span></span><br><span class="line"><span class="comment">* break 表示循环不再执行</span></span><br><span class="line"><span class="comment">* continue表示中断本次循环，继续下一次循环</span></span><br><span class="line"><span class="comment">* continue 也可以加循环名称</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContinueTest01</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、break语句</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++){</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">3</span>){</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">System.out.println(<span class="string">"i------"</span>+i);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"---------------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、continue</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++){</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">3</span>){</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">}</span><br><span class="line">System.out.println(<span class="string">"i------"</span>+i);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"----------------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、continue 加循环名称</span></span><br><span class="line">for1:<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">5</span>;j++){</span><br><span class="line">for2:<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++){</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">3</span>){</span><br><span class="line"><span class="keyword">continue</span> for1;</span><br><span class="line">}</span><br><span class="line">System.out.println(<span class="string">"i------"</span>+i);</span><br><span class="line">}</span><br><span class="line">System.out.println(<span class="string">"j+++++++++"</span>+j);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>i);<br>        }</p><pre><code>    System.out.println("---------------------");        // 2、continue    for(int i=0;i&lt;5;i++){        if(i==3){            continue;        }        System.out.println("i------"+i);    }        System.out.println("----------------------");    // 3、continue 加循环名称    for1:for(int j=0;j&lt;5;j++){        for2:for(int i=0;i&lt;5;i++){            if(i==3){                continue for1;            }            System.out.println("i------"+i);        }        System.out.println("j+++++++++"+j);    }    }</code></pre><p>}</p><pre><code></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>程序基础语法</title>
      <link href="/2022/05/19/treasurebox/go/go-ji-chu/1.cheng-xu-ji-chu-yu-fa/"/>
      <url>/2022/05/19/treasurebox/go/go-ji-chu/1.cheng-xu-ji-chu-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="Go基本命令"><a href="#Go基本命令" class="headerlink" title="Go基本命令"></a>Go基本命令</h1><p>1、查看版本</p><p>go version</p><p>2、查看go的环境变量</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>运行过程</title>
      <link href="/2022/05/19/treasurebox/java/1.java-ji-chu/1.yun-xing-guo-cheng/"/>
      <url>/2022/05/19/treasurebox/java/1.java-ji-chu/1.yun-xing-guo-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="初识java"><a href="#初识java" class="headerlink" title="初识java"></a>初识java</h2><h3 id="一、初识java"><a href="#一、初识java" class="headerlink" title="一、初识java"></a>一、初识java</h3><h4 id="1、初识java"><a href="#1、初识java" class="headerlink" title="1、初识java"></a>1、初识java</h4><p>​——javac.exe怎么用<br>​javac A.java  生成编译文件  A.class</p><pre><code>——java.exe怎么用：java 类名例如：    硬盘上有一个A.class，那么就可以用java A    硬盘上有一个B.class，那么就可以用java B    不能写成 java A.class——运行阶段的过程是：    * 打开DOS命令窗口    * 输入：java A    * java.exe命令会启动Java虚拟机（JVM），JVM会启动类加载器ClassLoader    * ClassLoader会去硬盘上搜索A.class文件，找到改文件则将该字节码文件装载到JVM中。    * JVM将A.class字节码文件解释成二进制1010101010这样的数据。    * 然后操作系统执行二进制文件和底层硬件平台进行交互bin目录介绍：    javac.exe 负责编译(文件中有中文时编译需要加上：javac -encoding utf-8 HelloWorld.java)    java.exe 负责运行</code></pre><h4 id="2、java中的注释"><a href="#2、java中的注释" class="headerlink" title="2、java中的注释"></a>2、java中的注释</h4><pre><code>* 什么是注释?注释的作用是什么？​—— 出现在java的源程序当中，对java源代码的解释说明​—— 注释不会被编译到.class字节码文件当中​—— 一个好的开发习惯应该是多编写注释，这样程序的可读性就会提高​* java中的注释怎么写？​——单行注释​//单行注释，只注释当前行​——多行注释​/*​多行注释​多行注释​多行注释​多行注释​*/​——javadoc注释​/**​*多行注释​*多行注释​*多行注释​*多行注释​**/​注意：这种注释是比较专业的注释，会被javadoc.exe解析并生成帮助文档</code></pre><h4 id="3、对HelloWorld程序进行解释"><a href="#3、对HelloWorld程序进行解释" class="headerlink" title="3、对HelloWorld程序进行解释"></a>3、对HelloWorld程序进行解释</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line">System.out.println(<span class="string">"Hello World!"</span>)</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​需要记忆：<br>​<code>public</code><br>​<code>class</code><br>​<code>static</code><br>​<code>void</code><br>​<code>System.out.println();</code> 向控制台输出消息<br>​类体<br>​方法体<br>​类体中不能直接编写java语句【除声明变量之外】<br>​一个java语句必须以分号(;)结束<br>​方法体中可以编写多条java语句<br>​主方法是程序入口</p><h4 id="4、public-class和class的区别："><a href="#4、public-class和class的区别：" class="headerlink" title="4、public class和class的区别："></a>4、public class和class的区别：</h4><p>​一个java源文件当中可以定义多个class<br>​<code>class A{}</code><br>​<code>class B{}</code><br>​一个java源文件当中public的class不是必须的<br>​一个class会定义生成一个xxx.class字节码文件<br>​public class名称只能定义一个，且必须和文件名称相同<br>​每一个class当中都可以编写main方法，都可以设定程序的入口，编译之后执行不同的class即可<br>​当在窗口中执行某个class时，该class必须要有主方法，否则会报错</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="二、java语言基础"><a href="#二、java语言基础" class="headerlink" title="二、java语言基础"></a>二、java语言基础</h3><p>​OOA：面向对象分析</p><p>​OOD：面向对象设计</p><p>​OOP：面向对象编程</p><ol><li><h4 id="标识符："><a href="#标识符：" class="headerlink" title="标识符："></a>标识符：</h4><p> 数字、字母、下划线、$符组成，数字不能开头</p></li><li><h4 id="关键字："><a href="#关键字：" class="headerlink" title="关键字："></a>关键字：</h4><p> public,static,void,class,int,float,char,double</p></li><li><h4 id="字面值："><a href="#字面值：" class="headerlink" title="字面值："></a>字面值：</h4><p> 字面值就是数据。</p><p> 是java源程序的组成部分之一，包括标识符、关键字都是源程序的组成之一。</p><p> 数据在编程中具有类型，称为数据类型。<br> 10、100整数型字面值<br> 3.14浮点型字面值<br> true、false布尔型字面值<br> “a”、”abc”字符串型字面值<br> ‘a’、’A’字符型字面值(长度只能为1)<br> <strong>注意：</strong><br>     java语言当中所有的<strong>字符串型字面值</strong>必须使用双引号(“”)括起来。<br>     所有的<strong>字符型字面值</strong>必须使用单引号(‘’)括起来。</p></li><li><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p> <strong>1、什么是变量？</strong><br>     变量本质上是内存中的一块空间，<br>     包含三部分：”数据类型”、”字面值”、”变量名”<br>     变量是内存中存储数据的最基本的单元<br> <strong>2、数据类型的作用？</strong><br>     不同的数据有不同的类型，不同的数据类型底层会分配不同大小的空间。<br>     数据类型是指导程序在运行阶段应该分配多大的内存空间。<br> <strong>3、变量要求：</strong><br>     变量中存储的具体的数据必须和变量的数据类型一致，当不一致时编译会报错。<br> <strong>4、声明/定义变量的语法格式：</strong><br>     数据类型 变量名;<br>         <strong>数据类型：</strong><br>             <code>byte</code>,<code>short</code>,<code>int</code>,<code>long</code>,<code>float</code>,<code>double</code>,<code>boolean</code>,<code>char</code><br>         <strong>变量名：</strong><br>             只要是合法的标识符就行。规范：首字母小写，剩余的每个单词首字母大写。<br>     例如：<br>         <code>int i;</code><br>         <code>int age;</code><br> <strong>5、变量声明之后怎么赋值？</strong><br>     语法格式：<br>         变量名=字面值;<br>     要求：字面值的数据类型必须和变量的数据类型一致。<br>     等号(=)是一个运算符，叫做赋值运算符。<br>     赋值运算符先运算等号右边的表达式，表达式执行结束之后的结果赋值给左边的变量。<br> <strong>6、声明和赋值可以放在一起完成。</strong><br>     <code>int i = 10;</code><br> <strong>7、变量赋值之后，可以重新赋值，变量的值可变化：</strong><br>     <code>int i = 10;</code><br>     <code>i = 20;</code><br> <strong>8、有了变量的概念之后，内存空间得到了重复的使用：</strong><br>     <code>int i = 10;</code><br>     <code>System.out.println(i);</code><br> <strong>9、通常访问一个变量包括两种访问方式：</strong><br>     第一种：读取变量中的保存的具体数据 get/获取<br>     第二种：修改变量中保存的具体数据 set/设置<br>     <code>int i = 10;</code><br>     <code>i = 20;</code>    //set<br>     <code>System.out.println(i);</code>//get<br> <strong>10、变量在一行中可以声明多个</strong><br>     <code>int a,b,c;</code><br> <strong>11、变量必须先声明，再赋值才能访问。</strong><br>     在同一个函数作用域中，变量名不能重名。<br> <strong>12、变量的作用域：</strong><br>     变量的作用域，其实描述的就是变量的有效范围。<br>     在范围之内是可以访问的，只要出了这个范围该变量就无法访问了。<br>     出了大括号就不认识。<br> <strong>13、变量的分类</strong></p><p> ​根据变量声明的位置来分类：<br> ​局部变量：<br> ​在方法体内声明的变量叫做局部变量<br> ​成员变量<br> ​在方法体外【类体之内】声明的变量叫做成员变量</p></li></ol><h3 id="三、java中的数据类型"><a href="#三、java中的数据类型" class="headerlink" title="三、java中的数据类型"></a>三、java中的数据类型</h3><ol><li><p><strong>数据类型的作用是什么？</strong></p><p> 程序当中有很多数据，每一个数据都是有相关类型的，不同类型的数据占用空间大小不同。<br> 数据类型的作用是指导JVM运行程序的时候给该数据分配多大的内存空间。</p></li><li><p><strong>java中的数据类型包括两种：</strong></p><p> <strong>基本数据类型</strong><br> <strong>引用数据类型</strong></p></li><li><p><strong>关于基本的数据类型</strong></p><p> 基本数据类型包括四大类、八小类：<br>         <strong>第一类：整数型</strong><br>             <strong>byte,short,int,long</strong><br>         <strong>第二类：浮点型</strong><br>             <strong>float,double</strong><br>         <strong>第三类：布尔型</strong><br>             <strong>boolean</strong><br>         <strong>第四类：字符型</strong><br>             <strong>char</strong></p></li><li><p><strong>字符串”abc”不属于基本数据类型，属于引用数据类型</strong></p><p> 字符串使用双引号””<br> 字符使用单引号’’</p></li><li><p><strong>八种基本数据类型各自占用空间大小是多少？</strong></p><table><thead><tr><th align="center">基本数据类型</th><th align="center">占用的内存（字节）</th><th align="center">范围</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">1</td><td align="center">-128~127。-2^7 ~ 2^7-1</td></tr><tr><td align="center">short</td><td align="center">2</td><td align="center">-32768~32767  -2^15 ~ 2^15-1</td></tr><tr><td align="center">int</td><td align="center">4</td><td align="center">-2147483648~2147483647  -2^31 ~ 2^31-1</td></tr><tr><td align="center">long</td><td align="center">8</td><td align="center">-2^63 ~ 2^63-1</td></tr><tr><td align="center">float</td><td align="center">4</td><td align="center">-3.4e+38 ~ 3.4e+38</td></tr><tr><td align="center">double</td><td align="center">8</td><td align="center">-1.7e+308 ~ 1.7e+308</td></tr><tr><td align="center">boolean</td><td align="center">1</td><td align="center">true/false</td></tr><tr><td align="center">char</td><td align="center">2</td><td align="center">0~65535</td></tr></tbody></table></li><li><p><strong>字节（byte）</strong>：<br>     1 Byte = 8 bit【1个字节=8个比特位】1个比特位表示一个二进制位：1/0<br>         1KB = 1024 Byte<br>         1MB = 1024 KB<br>         1GB = 1024 MB<br>         1TB = 1024 GB<br> ​1TB = 1024 *1024 * 1024 * 1024 * 8 bit</p></li><li><p><strong>整数型当中的byte类型，占用1个字节，所以byte类型的数据占用8个比特位，那么byte类型的取值范围是多少？</strong><br>     关于java中的数字类型，数字都是有正负之分的，所以在数字的二进制当中有一个二进制位被称为符号位。<br>         并且这个符号位在所有二进制位的最左边。0表示正数，1表示负数。<br>         byte类型的最大值：0111 1111<br>         【00000000 00000000 00000000 10000000(二进制) -1】<br>         byte类型的最大值：2的7次方-1127<br>         byte类型的最小值：-128<br>         byte类型的取值范围：-127~128，可表示256种不同的数字【256个不同的数字】。</p></li></ol><p>​    </p><p>​<br>​�型的最大值：2的7次方-1127<br>                byte类型的最小值：-128<br>                byte类型的取值范围：-127~128，可表示256种不同的数字【256个不同的数字】。</p><p>​    </p><p>​<br>​</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据类型</title>
      <link href="/2022/05/19/treasurebox/java/1.java-ji-chu/2.shu-ju-lei-xing/"/>
      <url>/2022/05/19/treasurebox/java/1.java-ji-chu/2.shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><h3 id="一、数据类型概述"><a href="#一、数据类型概述" class="headerlink" title="一、数据类型概述"></a>一、数据类型概述</h3><p><strong>1、编码发展</strong><br>    ASCII码–&gt;<br>    随着计算机发展出现：<br>        ISO-8859-1(latin-1)<br>    随着计算机向亚洲发展，开始逐渐支持中文：<br>        GB2312–&gt;GBK–&gt;GB18030<br>    支持繁体中文：大五码<big5><br>    后来出现了一种编码方式统一了全球所有文字，容量较大，这种编码方式叫做unicode编码。unicode编码方式由多种具体实现。<br>    UTF-8,UTF-16,UTF-32<br><strong>2、基本数据类型的取值范围：</strong></big5></p><table><thead><tr><th>类型</th><th>范围</th></tr></thead><tbody><tr><td>byte</td><td>-128~127</td></tr><tr><td>short</td><td>-32768~32767</td></tr><tr><td>int</td><td>-2147483648~2147483647</td></tr><tr><td>long</td><td></td></tr><tr><td>float</td><td></td></tr><tr><td>double</td><td></td></tr><tr><td>boolean</td><td>true/false</td></tr><tr><td>char</td><td>0~65535</td></tr></tbody></table><p><strong>3、基本数据类型的默认值,向0看齐</strong></p><table><thead><tr><th>数据类型</th><th>默认值</th></tr></thead><tbody><tr><td>byte,short,int,long</td><td>0</td></tr><tr><td>float,double</td><td>0.0f/0.0d</td></tr><tr><td>boolean</td><td>false</td></tr><tr><td>char</td><td>\u0000</td></tr></tbody></table><p><strong>4、转义字符</strong><br>    关于java语言中的char类型，转义字符<br>    转义字符:<br>    反斜杠在java语言中具有转义功能<br>    转义字符出现在特殊字符之前，会将特殊字符转义<br>    \n 换行  \t制表符   '单引号  "双引号\反斜杠<br><strong>5、JDK中的native2ascii将字符转化为unicode编码</strong></p><h3 id="二、类型之间的转换"><a href="#二、类型之间的转换" class="headerlink" title="二、类型之间的转换"></a>二、类型之间的转换</h3><ol><li><h4 id="在类体中定义的变量，系统会自动赋初值，向0看齐。"><a href="#在类体中定义的变量，系统会自动赋初值，向0看齐。" class="headerlink" title="在类体中定义的变量，系统会自动赋初值，向0看齐。"></a>在类体中定义的变量，系统会自动赋初值，向0看齐。</h4> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataTypeTest01</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">//这里的static必须要加</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、成员变量没有赋值，系统会自动赋值，向0看齐</span></span><br><span class="line"><span class="comment">// byte0</span></span><br><span class="line"><span class="comment">// short0</span></span><br><span class="line"><span class="comment">// int0</span></span><br><span class="line"><span class="comment">// long0</span></span><br><span class="line"><span class="comment">// char\u0000</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> f;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">int i; //局部变量</span></span><br><span class="line"><span class="comment">System.out.println(i)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">System.out.println(f); <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、定义一个char类型的变量，起名c，同时赋值为a</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">'a'</span>;</span><br><span class="line">System.out.println(c);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、一个中文占用2个字节，char类型正好是2字节</span></span><br><span class="line"><span class="comment">//所以java中的char类型变量可以存储一个中文字符</span></span><br><span class="line"><span class="type">char</span> <span class="variable">x</span> <span class="operator">=</span> <span class="string">'中'</span>;</span><br><span class="line">System.out.println(x);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="java中的char类型"><a href="#java中的char类型" class="headerlink" title="java中的char类型"></a>java中的char类型</h4> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">关于java语言中的char类型，转义字符</span></span><br><span class="line"><span class="comment">转义字符:\</span></span><br><span class="line"><span class="comment">反斜杠在java语言中具有转义功能</span></span><br><span class="line"><span class="comment">转义字符出现在特殊字符之前，会将特殊字符转义</span></span><br><span class="line"><span class="comment">\n 换行  \t制表符   \'单引号  \"双引号\\反斜杠</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataTypeTest02</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line"><span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="string">'n'</span>;</span><br><span class="line">System.out.println(c1);</span><br><span class="line"><span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="string">'\n'</span>;  <span class="comment">//并不是一个字符串\n,表示换行</span></span><br><span class="line">System.out.println(c2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//System.out.println()  //具有换行功能，输出以后换行</span></span><br><span class="line"><span class="comment">//System.out.print()  //输出但是不换行</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="variable">x</span> <span class="operator">=</span> <span class="string">'t'</span>;</span><br><span class="line"><span class="comment">//\t代表制表符，tab键</span></span><br><span class="line"><span class="type">char</span> <span class="variable">y</span> <span class="operator">=</span><span class="string">'\t'</span>;</span><br><span class="line">System.out.print(x);</span><br><span class="line">System.out.print(y);</span><br><span class="line">System.out.println(<span class="string">'B'</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="variable">z</span> <span class="operator">=</span> <span class="string">'\\'</span>;</span><br><span class="line">System.out.println(z);</span><br><span class="line"><span class="comment">//char a = '';  //报错：java中不允许这样写</span></span><br><span class="line"><span class="comment">//char a = '''; //报错：第一个单引号和第二个单引号配对，最后的单引号找不到另一半</span></span><br><span class="line"><span class="type">char</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">'\''</span>;</span><br><span class="line">System.out.println(b);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"\"Hello World!\""</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="variable">m</span> <span class="operator">=</span> <span class="string">'中'</span>;</span><br><span class="line">System.out.println(m);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="variable">n</span> <span class="operator">=</span> <span class="string">'\u4e2d'</span>;</span><br><span class="line">System.out.println(n);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="variable">c10</span> <span class="operator">=</span> <span class="string">'\u0000'</span>; <span class="comment">//空字符</span></span><br><span class="line">System.out.println(c10+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在java语言中整数表现形式有三种</span></span><br><span class="line"><span class="comment">//1、十进制：是一种缺省的表现形式</span></span><br><span class="line"><span class="comment">//2、八进制：以0开始</span></span><br><span class="line"><span class="comment">//3、十六进制：以ox开始</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">e</span> <span class="operator">=</span> <span class="number">010</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">0x10</span>;</span><br><span class="line">System.out.println(d);</span><br><span class="line">System.out.println(e);</span><br><span class="line">System.out.println(f);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在java语言中，整数默认为int类型进行处理，不能超出int类型的实际范围，</span></span><br><span class="line"><span class="comment">//超出实际范围时需要在整数最后加l/L;推荐使用L</span></span><br><span class="line"><span class="comment">//123这个整数属于int类型</span></span><br><span class="line"><span class="comment">//i声明时也是int类型，</span></span><br><span class="line"><span class="comment">//所以不存在类型转换</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">123</span>;</span><br><span class="line">System.out.println(i);</span><br><span class="line"></span><br><span class="line"><span class="comment">//457是int类型</span></span><br><span class="line"><span class="comment">//y声明时是long类型</span></span><br><span class="line"><span class="comment">//小容量可以自动转换为大容量，存在类型转换</span></span><br><span class="line"><span class="type">long</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">457</span>;</span><br><span class="line">System.out.println(j);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2147483647字面值是int类型，占用4个字节</span></span><br><span class="line"><span class="comment">//y是long类型，占用8个字节，会自动类型转换</span></span><br><span class="line"><span class="type">long</span> <span class="variable">c11</span> <span class="operator">=</span> <span class="number">2147483647</span>;</span><br><span class="line">System.out.println(c11);</span><br><span class="line"></span><br><span class="line"><span class="comment">//错误: 过大的整数: 2147483648</span></span><br><span class="line"><span class="comment">// long c12 = 2147483648;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//处理:</span></span><br><span class="line"><span class="type">long</span> <span class="variable">c12</span> <span class="operator">=</span> <span class="number">2147483648L</span>;</span><br><span class="line">System.out.println(c12);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><h4 id="java中的变量需要先声明，再赋值"><a href="#java中的变量需要先声明，再赋值" class="headerlink" title="java中的变量需要先声明，再赋值"></a><strong>java中的变量需要先声明，再赋值</strong></h4><p> 直接在类体中声明的变量叫做成员变量，在方法体中声明的变量叫做成员变量。同一个变量只能声明一个，不能重复声明。</p></li><li><h4 id="类型之间的转换"><a href="#类型之间的转换" class="headerlink" title="类型之间的转换"></a>类型之间的转换</h4> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">关于基本数据类型之间的互相转换：转换规则</span></span><br><span class="line"><span class="comment">1、八种基本数据局类型当中除布尔类型之外剩余的7中类型之间都可以相互转换。</span></span><br><span class="line"><span class="comment">2、小容量向大容量转换，称为自动类型转换，容量从小到大排序：</span></span><br><span class="line"><span class="comment">byte &lt; short &lt; int &lt; long &lt; float &lt; double</span></span><br><span class="line"><span class="comment">   char&lt;</span></span><br><span class="line"><span class="comment">注：</span></span><br><span class="line"><span class="comment">任何浮点类型不管占用多少字节，都比整数型容量大</span></span><br><span class="line"><span class="comment">char和short可表示的种类数量相同，但是char可以取更大的正整数。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3、char c=97; //a</span></span><br><span class="line"><span class="comment">4、当整数字面值没有超出byte，short，char的取值范围，可以直接赋值给byte，short，char类型的变量</span></span><br><span class="line"><span class="comment">5、byte，short，char混合运算的时候，各自先转换成int类型再做运算</span></span><br><span class="line"><span class="comment">6、多种数据类型混合运算，先转换成容量最大的那种类型，再做运算。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure></li></ol><p>��各自先转换成int类型再做运算<br>        6、多种数据类型混合运算，先转换成容量最大的那种类型，再做运算。<br>    */<br>    ```</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>es索引与B+tree对比</title>
      <link href="/2022/05/19/treasurebox/elasticsearch/1.es-suo-yin-yu-b-tree-dui-bi/"/>
      <url>/2022/05/19/treasurebox/elasticsearch/1.es-suo-yin-yu-b-tree-dui-bi/</url>
      
        <content type="html"><![CDATA[<h2 id="Elasticsearch—索引原理"><a href="#Elasticsearch—索引原理" class="headerlink" title="Elasticsearch—索引原理"></a>Elasticsearch—索引原理</h2><h3 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h3><p>Elasticsearch 是一个分布式可扩展的实时搜索引擎和分析引擎，一个建立在全文搜索引擎A**pache Lucene(TM)**基础上的搜索引擎。当然Elasticsearch并不仅仅是Lucene，它不仅包括了全文搜索功能，还可以进行以下工作：</p><ul><li>分布式实时文件存储，并将每一个字段都编入索引，使其可以被搜索。</li><li>实时分析的分布式搜索引擎。</li><li>可以扩展到上百台服务器，处理PB级别的结构化或非结构化数据。</li></ul><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>Elasticsearch的文件存储，Elasticsearch是面向文档型的数据库，一条数据在这里就是一个文档，用JSON作为文档序列化的格式。示例：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    "name" :     "waltz",</span><br><span class="line">    "sex" :      "M",</span><br><span class="line">    "age" :      24,</span><br><span class="line">    "birthDate": "1996/4/25",</span><br><span class="line">    "about" :    "I love World！",</span><br><span class="line">    "interests": [ "sports", "music" ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>用MySQL这样的数据库存储就会容易想到建立一张User表，有各种字段等，在Elasticsearch里这就是一个文档，这个文档会属于一个User的类型，各种各样的类型存在于一个索引当中。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">关系数据库——&gt;数据库——&gt;表——&gt; 行——&gt;列(Column)</span><br><span class="line"></span><br><span class="line">Elasticsearch——&gt;索引(Index)——&gt;类型(type)——&gt;文档(Document)——&gt;字段(Fields)</span><br></pre></td></tr></tbody></table></figure><p>一个Elasticsearch集群可以包含多个索引（数据库），也就是说其中包含了很多类型（表）。这些表中包含了很多文档（行），然后每个文档中又包含了很多的字段（列）。Elasticsearch的交互，可以使用Java API，也可以使用HTTP的Restful API方式，比如打算插入一条数据，可以简单发起一个HTTP请求：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PUT /user</span><br><span class="line">{</span><br><span class="line">    "name" :     "waltz",</span><br><span class="line">    "sex" :      "M",</span><br><span class="line">    "age" :      24,</span><br><span class="line">    "birthDate": "1996/4/25",</span><br><span class="line">    "about" :    "I love World！",</span><br><span class="line">    "interests": [ "sports", "music" ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>更新，查询也是类似的操作。</p><h3 id="二、索引"><a href="#二、索引" class="headerlink" title="二、索引"></a>二、索引</h3><p>Elasticsearch最关键的就是提供强大的索引能力。</p><p>Elasticsearch索引的精髓：<code>一切的设计都是为了提高搜索的性能</code></p><p>另一层意思：为了提高搜索的性能，难免会牺牲某些其他的方面，比如插入/更新。前面的向Elasticsearch中插入一条数据，其实就是直接PUT一个json对象，这个对象有多个fields，比如上面的例子中的name，sex，age，about，interests，那么在插入这些数据到Elasticsearch的同时，Elasticsearch还默默的为这些字段建立索引——倒排索引，因为Elasticsearch最核心的功能是搜索。</p><ol><li><h4 id="Elasticsearch是如何做到快速索引的？"><a href="#Elasticsearch是如何做到快速索引的？" class="headerlink" title="Elasticsearch是如何做到快速索引的？"></a>Elasticsearch是如何做到快速索引的？</h4><p> Elasticsearch使用的倒排索引比关系型数据库的B-Tree索引快，为什么呢？</p><p> <strong>首先要知道什么是B-Tree索引？</strong></p><p> 二叉树的查找效率是logN，同时插入新的节点不必移动全部节点，所以用树型结构存储索引，能同时兼顾插入和查询的性能。因此在这个基础上，再结合磁盘的读取特性（顺序读/随机读），传统关系型数据库采用了B-Tree/B+Tree这样的数据结构：</p> <img src="image/BTree-1591025050280.png"><p> 为了提高查询的效率，减少磁盘寻道次数，将多个值作为一个数组通过连续区间存放，一次寻道读取多个数据，同时也降低树的高度。</p><p> <strong>什么是倒排索引？</strong></p> <img src="image/%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95-1591025433707.png"><p> 继续上边的案例，假设有这么几条数据：</p><table><thead><tr><th>ID</th><th>Name</th><th>Age</th><th>Sex</th></tr></thead><tbody><tr><td>1</td><td>Kate</td><td>24</td><td>Female</td></tr><tr><td>2</td><td>John</td><td>24</td><td>Male</td></tr><tr><td>3</td><td>Bill</td><td>25</td><td>Male</td></tr></tbody></table><p> ID是Elasticsearch自建的文档id，那么Elasticsearch简历的索引如下：</p><p> <strong>Name：</strong></p><table><thead><tr><th>Term</th><th>Posting List</th></tr></thead><tbody><tr><td>Kate</td><td>1</td></tr><tr><td>John</td><td>2</td></tr><tr><td>Bill</td><td>3</td></tr></tbody></table><p> <strong>Age：</strong></p><table><thead><tr><th>Term</th><th>Posting List</th></tr></thead><tbody><tr><td>24</td><td>[1,2]</td></tr><tr><td>25</td><td>3</td></tr></tbody></table><p> <strong>Sex：</strong></p><table><thead><tr><th>Term</th><th>Posting List</th></tr></thead><tbody><tr><td>Femal</td><td>1</td></tr><tr><td>Male</td><td>[2,3]</td></tr></tbody></table><h5 id="Posting-List"><a href="#Posting-List" class="headerlink" title="Posting List:"></a>Posting List:</h5><p> Elasticsearch分别为每一个field建立一个倒排索引，Kate，John，24，Female这些叫做term，而[1,2]这些就是<strong>Posting List</strong>。Posting List就是一个int的数组，存储所有符合某个term的文档id。</p><p> 通过Posting list这种索引方式可以很快进行查找，比如要找age=24的同学，就查找id是1，2的同学。但是如果有千万的记录呢？如果是想通过name来查找呢？</p><h5 id="Term-Dictionary"><a href="#Term-Dictionary" class="headerlink" title="Term Dictionary"></a>Term Dictionary</h5><p> Elasticsearch为了能快速找到某个term，将所有的term排个序，二分法查找term，logN的查找效率，就像通过字典查找一样，这就是<strong>Term Dictionary</strong>。现在看起来和，似乎和传统数据库通过B-Tree的方式一样，为什么说比B-Tree查询快呢？</p><h5 id="Term-Index"><a href="#Term-Index" class="headerlink" title="Term Index"></a>Term Index</h5><p> B-Tree通过减少磁盘寻道次数来提高查询性能，Elasticsearch也是采用同样的思路，直接通过内存查找term，不读磁盘，但是如果term太多，term dictonary也会很大，放内存不真实，于是有了<strong>Term Index</strong>，就像字典中的索引页一样。</p> <img src="image/term1.png"> <p> 所以term index不需要存下所有的term，而仅仅是它们的一些前缀与Term Dictionary的block之间的映射关系，再结合FST（Finite State Transducers）的压缩技术，可以使term index缓存到内存中。从term index查到对应的term dictionary的block位置之后，再去磁盘上找term，大大减少了机读的次数。</p><p> 这时候就有人会问：“FST是什么东西“？</p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FSTs are finite-state machines that map a term (byte sequence) to an arbitrary output.</span><br></pre></td></tr></tbody></table></figure><p> 假设我们现在需要将mop，moth，pop，star，stop and top(term index里的term前缀)映射到序号：0，1，2，3，4，5(term dictionary的block位置)。最简单的做法就是定义个Map&lt;string，integer=””&gt;，大家找到自己的位置对应入座就好了，但从内存占用少的角度想想，有没有更优的办法呢？答案就是：FST。</p> <img src="image/FST1.png"> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FSTs are finite-state machines that map a term (byte sequence) to an arbitrary output. </span><br></pre></td></tr></tbody></table></figure> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FSTs are finite-state machines that map a term (byte sequence) to an arbitrary output.</span><br></pre></td></tr></tbody></table></figure><p> FST以字节的方式存储所有的term，这种压缩方式可以有效的缩减存储空间，使得term index足以放进内存，但这种方式也会导致查找时需要更多的CPU资源。</p><h5 id="压缩技巧"><a href="#压缩技巧" class="headerlink" title="压缩技巧"></a>压缩技巧</h5><p> Elasticsearch里除了上面说的用FST压缩term index外，对posting list也有压缩技巧。</p><p> 可能又有人问了：posting list不是已经存储文档id了吗？为什么还需要压缩？</p><p> 我们再回看最开始的例子，如果Elasticsearch需要对同学的性别进行索引(这时关系型数据库已经哭晕在厕所…)，会怎样？如果有上千万个同学，而世界上只要男/女这样两个性别。每个Posting list都有百万个文档id。Elasticsearch如何有效的对这些文档id压缩呢？</p><p> <strong>Frame Of Reference</strong>：</p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">增量编码压缩，将大数变小数，按字节存储</span><br></pre></td></tr></tbody></table></figure><p> 首先Elasticsearch要求posting list是有序列的（为了提高搜索的性能，再任性的要求也得满足），这样的好处是方便压缩。示例：</p> <img src="image/%E5%A2%9E%E9%87%8F%E5%8E%8B%E7%BC%A9.png"><p> 原理就是通过增量，将原来的大数变成小数仅存储增量值，再精打细算按bit排好队，最后通过字节存储，而不是大大咧咧的尽管是2也是用int(4个字节)来存储。</p><h5 id="Roaring-btmaps"><a href="#Roaring-btmaps" class="headerlink" title="Roaring btmaps"></a>Roaring btmaps</h5><p> 说到Roaring bitmaps，就必须先从Bitmap说起。Bitmap是一种数据结构，假设有某个Posting list：[1,3,4,7,10]。</p><p> 对应的bitmap就是：[1,0,1,1,0,0,1,0,0,1]。</p><p> 用0/1表示某个值是否存在，比如10这个值对应第10位，对应的bit值是1，这样用一个字节就可以代表8个文档id，旧版本(5.0)之前的Lucene就是用这样的方式压缩的，但这样的压缩方式仍然不够高效，如果有1亿个文档，那么需要12.5MB的存储空间，这仅仅是对应一个索引字段（我们往往会有很多个索引字段）。于是有人想出了Roaring bitmaps这样更高效的数据结构。</p><p> Bitmap的缺点是存储空间随着文档个数线性增长，Roaring bitmaps需要打破这个魔咒就一定要用到某些指数特性：</p><p> 将posting list按照65535为界限分块，比如第一块所包含的文档id范围在0<del>65535之间，第二块的id范围是65536</del>131071，以此类推。再用&lt;商，余数&gt;的组合表示每一组id，这样每组里的id范围都在0~65535内了，剩下的就好办了，既然每组id不会变得无限大，那么我们就可以通过最有效的方式对这里的id存储。</p> <img src="image/Roaring.png"><h5 id="联合索引"><a href="#联合索引" class="headerlink" title="联合索引"></a>联合索引</h5><p> 上面说的都是单field索引，如果有多个field索引的联合索引，倒排索引该如何满足快速查询的要求呢？</p><ul><li>利用跳表(Skip list)的数据结构快速做“与”运算</li><li>利用上面提到的bitset按位“与”</li></ul><p> 先看跳表的数据结构：</p> <img src="image/Skiptable.png"><p> 将一个有序链表level0，挑出其中几个元素到level1及level2，每个level越往上，选出来的指针元素越少，查找时一次从高level往低查找，比如55，先找到level2的31，在找到level1的47，最后找到55，一共3次查找，查找效率和2叉树的效率相当，但是也用了一定的空间冗余来换取。</p><p> 假设有下面三个posting list需要联合索引：</p><p> 如果使用跳表，对最短的posting list中的每个id，逐个在另外两个posting list中查找看是否存在，最后得到交集的结果。</p><p> 如果使用bitset，就很直观了，直接按位与，得到的结果就是最后的交集。</p></li></ol><h3 id="三、总结和思考"><a href="#三、总结和思考" class="headerlink" title="三、总结和思考"></a>三、总结和思考</h3><p>Elasticsearch的索引思路:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将磁盘里的东西尽量搬进内存，减少磁盘随机读取次数(同时也利用磁盘顺序读特性)，结合各种奇技淫巧的压缩算法，用及其苛刻的态度使用内存。 </span><br></pre></td></tr></tbody></table></figure><p>所以，对于使用Elasticsearch进行索引时需要注意:</p><ul><li>不需要索引的字段，一定要明确定义出来，因为默认是自动建索引的</li><li>同样的道理，对于String类型的字段，不需要analysis的也需要明确定义出来，因为默认也是会analysis的</li><li>选择有规律的ID很重要，随机性太大的ID(比如java的UUID)不利于查询</li></ul><p>关于最后一点，个人认为有多个因素:</p><p>其中一个(也许不是最重要的)因素: 上面看到的压缩算法，都是对Posting list里的大量ID进行压缩的，那如果ID是顺序的，或者是有公共前缀等具有一定规律性的ID，压缩比会比较高；</p><p>另外一个因素: 可能是最影响查询性能的，应该是最后通过Posting list里的ID到磁盘中查找Document信息的那步，因为Elasticsearch是分Segment存储的，根据ID这个大范围的Term定位到Segment的效率直接影响了最后查询的性能，如果ID是有规律的，可以快速跳过不包含该ID的Segment，从而减少不必要的磁盘读次数。��位到Segment的效率直接影响了最后查询的性能，如果ID是有规律的，可以快速跳过不包含该ID的Segment，从而减少不必要的磁盘读次数。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python操作es</title>
      <link href="/2022/05/19/treasurebox/elasticsearch/2.python-cao-zuo-es/"/>
      <url>/2022/05/19/treasurebox/elasticsearch/2.python-cao-zuo-es/</url>
      
        <content type="html"><![CDATA[<h3 id="python操作es示例"><a href="#python操作es示例" class="headerlink" title="python操作es示例"></a>python操作es示例</h3><p>1、首先在命令行启动elasticsearch：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">切换至elasticsearch的安装目录的bin目录中，输入：elasticsearch，启动es</span><br></pre></td></tr></tbody></table></figure><p>2、安装python需要的包：<code>pip install elasticsearch</code></p><p>3、使用python创建索引：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> elasticsearch <span class="keyword">import</span> Elasticsearch</span><br><span class="line"></span><br><span class="line">es = Elasticsearch()</span><br><span class="line"><span class="comment"># 创建索引</span></span><br><span class="line">result = es.indices.create(index=<span class="string">"news"</span>, ignore=<span class="number">400</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></tbody></table></figure><p>4、插入数据</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = {<span class="string">"title"</span>: <span class="string">"美国留给伊拉克的是烂摊子吗？"</span>, <span class="string">'url'</span>: <span class="string">'http://view.news.qq.com/zt2011/usa_iraq/index.htm'</span>}</span><br><span class="line"><span class="comment"># result = es.create(index="news", doc_type="politics", id=1, body=data)  # 使用create方法插入数据</span></span><br><span class="line">result = es.index(index=<span class="string">"news"</span>, doc_type=<span class="string">"politics"</span>, body=data)  <span class="comment"># 使用index方法插入数据</span></span><br></pre></td></tr></tbody></table></figure><p>5、更新数据</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data = {</span><br><span class="line">    <span class="string">'title'</span>: <span class="string">'美国留给伊拉克的是个烂摊子吗'</span>,</span><br><span class="line">    <span class="string">'url'</span>: <span class="string">'http://view.news.qq.com/zt2011/usa_iraq/index.htm'</span>,</span><br><span class="line">    <span class="string">'date'</span>: <span class="string">'2011-12-16'</span></span><br><span class="line">}</span><br><span class="line">result = es.update(index=<span class="string">'news'</span>, doc_type=<span class="string">'politics'</span>, body={<span class="string">"doc"</span>: data}, <span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></tbody></table></figure><p>t)</p><pre><code></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker解决的问题</title>
      <link href="/2022/05/19/treasurebox/docker/1.docker-jie-jue-de-wen-ti/"/>
      <url>/2022/05/19/treasurebox/docker/1.docker-jie-jue-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="title-Docker解决的问题"><a href="#title-Docker解决的问题" class="headerlink" title="title: Docker解决的问题"></a>title: Docker解决的问题</h2><h2 id="Docker解决的问题"><a href="#Docker解决的问题" class="headerlink" title="Docker解决的问题"></a>Docker解决的问题</h2><h3 id="一、解决的问题"><a href="#一、解决的问题" class="headerlink" title="一、解决的问题"></a>一、解决的问题</h3><p>​由于不同的机器有不同的操作系统，以及不同的库和组件，在将一个应用部署到多台机器上需要进行大量的环境配置操作。</p><p>​Docker主要解决环境配置问题，它是一种虚拟化技术，对进程进行隔离，被隔离的进程独立于宿主操作系统和其他隔离的进程。使用Docker可以不修改应用程序代码，不需要开发人员学习特定环境下的技术，就能够将现有的应用程序部署在其他机器上。</p><p><strong>Docker</strong> 使用 <code>Google</code> 公司推出的 <a href="https://golang.google.cn/">Go 语言</a> 进行开发实现，基于 <code>Linux</code> 内核的 <a href="https://zh.wikipedia.org/wiki/Cgroups">cgroup</a>，<a href="https://en.wikipedia.org/wiki/Linux_namespaces">namespace</a>，以及 <a href="https://docs.docker.com/storage/storagedriver/overlayfs-driver/">OverlayFS</a> 类的 <a href="https://en.wikipedia.org/wiki/Union_mount">Union FS</a> 等技术，对进程进行封装隔离，属于 <a href="https://en.wikipedia.org/wiki/Operating-system-level_virtualization">操作系统层面的虚拟化技术</a>。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。最初实现是基于 <a href="https://linuxcontainers.org/lxc/introduction/">LXC</a>，从 <code>0.7</code> 版本以后开始去除 <code>LXC</code>，转而使用自行开发的 <a href="https://github.com/docker/libcontainer">libcontainer</a>，从 <code>1.11</code> 版本开始，则进一步演进为使用 <a href="https://github.com/opencontainers/runc">runC</a> 和 <a href="https://github.com/containerd/containerd">containerd</a>。</p><img src="image/docker1.png"><h3 id="二、与虚拟机的比较"><a href="#二、与虚拟机的比较" class="headerlink" title="二、与虚拟机的比较"></a>二、与虚拟机的比较</h3><p>虚拟机也是一种虚拟化技术，它与Docker最大的区别在于它是通过模拟硬件，并在硬件上安装操作系统来实现。</p><img src="image/docker2.png"><ol><li><h4 id="启动速度"><a href="#启动速度" class="headerlink" title="启动速度"></a>启动速度</h4><p> 启动虚拟机需要先启动虚拟机的操作系统，再启动应用，这个过程非常慢；</p><p> 而启动Docker相当于启动宿主操作系统上的一个进程。</p></li><li><h4 id="占用资源"><a href="#占用资源" class="headerlink" title="占用资源"></a>占用资源</h4><p> 虚拟机是一个完整的操作系统，需要占用大量的磁盘、内存和CPU资源，一台机器只能开启几十台的虚拟机。</p><p> 而Docker只是一个进程，只需要将应用以及相关的组件打包，在运行时占用很少的资源，一台机器可以开启成千上万个Docker。</p></li></ol><h3 id="三、优势"><a href="#三、优势" class="headerlink" title="三、优势"></a>三、优势</h3><p>除了启动速度快以及占用的资源少之外，Docker还具有以下优势：</p><ol><li><h4 id="更容易迁移"><a href="#更容易迁移" class="headerlink" title="更容易迁移"></a>更容易迁移</h4><p> 提供一致性的运行环境。已经打包好的应用可以在不同的机器上进行迁移，而不用担心环境变化导致无法运行。</p></li><li><h4 id="更容易维护"><a href="#更容易维护" class="headerlink" title="更容易维护"></a>更容易维护</h4><p> 使用分层技术和镜像，使得应用可以更容易复用重复的部分。复用程度越高，维护工作也越容易。</p></li><li><h4 id="更容易扩展"><a href="#更容易扩展" class="headerlink" title="更容易扩展"></a>更容易扩展</h4><p> 可以试用基础镜像进一步扩展得到新的镜像，并且官方和开源社区提供了大量的镜像，通过扩展这些镜像可以非常容易得到想要的镜像。</p></li></ol><h3 id="四、使用场景"><a href="#四、使用场景" class="headerlink" title="四、使用场景"></a>四、使用场景</h3><ol><li><h4 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h4><p> 持续集成指的是频繁地将代码集成到主干上，这样能够更快的发现错误。</p><p> Docker具有轻量级以及隔离性的特点，在将代码集成到一个Docker中不会对其他的Docker产生影响。</p></li><li><h4 id="提供可伸缩的云服务"><a href="#提供可伸缩的云服务" class="headerlink" title="提供可伸缩的云服务"></a>提供可伸缩的云服务</h4><p> 根据应用的负载情况，可以很容易地增加或者减少Docker。</p></li><li><h4 id="搭建微服务架构"><a href="#搭建微服务架构" class="headerlink" title="搭建微服务架构"></a>搭建微服务架构</h4><p> Docker轻量级的特点使得它很适用于部署、维护、组合微服务。</p></li></ol><h3 id="五、镜像与容器"><a href="#五、镜像与容器" class="headerlink" title="五、镜像与容器"></a>五、镜像与容器</h3><p>​Docker是一种静态的结构，可以看成面向对象中的类，而容器是镜像的一个实例。</p><p>​镜像包含着容器运行时所需要的代码以及其他组件，它是一种分层结构，每一层都是只读的(read-only layers)。构建镜像时，会一层一层构建，前一层是后一层的基础。镜像的这种分层存储结构很适合镜像的复用以及定制。</p><p>​构建容器时，通过在镜像的基础上添加一个可写层（writeable layer），用来保存着容器运行过程中的修改。</p><img src="image/docker3.png"><p>参考资料：<a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Docker.md">https://github.com/CyC2018/CS-Notes/blob/master/notes/Docker.md</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker核心组件</title>
      <link href="/2022/05/19/treasurebox/docker/3.docker-he-xin-zu-jian/"/>
      <url>/2022/05/19/treasurebox/docker/3.docker-he-xin-zu-jian/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="title-Docker核心组件"><a href="#title-Docker核心组件" class="headerlink" title="title: Docker核心组件"></a>title: Docker核心组件</h2><h2 id="Docker核心组件"><a href="#Docker核心组件" class="headerlink" title="Docker核心组件"></a>Docker核心组件</h2><ol><li><h3 id="镜像-Image"><a href="#镜像-Image" class="headerlink" title="镜像(Image)"></a>镜像(Image)</h3><p>在操作系统中分为内核和用户空间。对于<strong>linux</strong>而言，内核启动后，会挂载root文件系统为其提供用户空间支持。而<strong>Docker镜像</strong>(Image)，就相当于是一个root文件系统，比如官方镜像ubuntu18.04就包含了完整的一套Ubuntu18.04最小系统的root文件系统。</p><p><strong>Docker镜像</strong>是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一起为<strong>运行时</strong>准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像<strong>不包含</strong>任何动态数据，其内容再构建之后也不会被改变。</p><h4 id="分层存储"><a href="#分层存储" class="headerlink" title="分层存储"></a>分层存储</h4><p>因为镜像包含操作系统完整的root文件系统，其体积往往是庞大的，因此在设计Docker时，就充分利用 <a href="https://en.wikipedia.org/wiki/Union_mount">Union FS</a> 的技术，将其设计为分层存储结构。所以严格来说，镜像并非像是一个ISO那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说由多层文件系统联合组成。</p><p>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变。后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已经删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件一直跟随镜像。因此，在构建镜像的时候需要额外小心，每一层尽量只包含需要添加的东西，任何额外的东西应该在层构建结束前清理掉。</p><p>分层存储的特征还使得镜像的复用、定制变得更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。</p></li><li><h3 id="容器-Container"><a href="#容器-Container" class="headerlink" title="容器(Container)"></a>容器(Container)</h3></li><li><h3 id="仓库-Repository"><a href="#仓库-Repository" class="headerlink" title="仓库(Repository)"></a>仓库(Repository)</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">查找官方镜像：</span><br><span class="line">docker search 镜像名称</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
